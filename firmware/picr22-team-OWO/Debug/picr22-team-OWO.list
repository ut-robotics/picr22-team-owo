
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a430  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a660  0800a660  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800a660  0800a660  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a660  0800a660  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a660  0800a660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800a668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001444  20000198  0800a800  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800a800  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166c3  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ed  00000000  00000000  0003688b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001670b  00000000  00000000  0005d017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c655b  00000000  00000000  00073722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  00139cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000198 	.word	0x20000198
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5f0 	.word	0x0800a5f0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000019c 	.word	0x2000019c
 8000214:	0800a5f0 	.word	0x0800a5f0

08000218 <clamp>:
				   .delimiter = 0};

volatile uint8_t isCommandReceived = 0;
volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d901      	bls.n	8000236 <clamp+0x1e>
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	e006      	b.n	8000244 <clamp+0x2c>
	else if (value < min) {return min;}
 8000236:	88fa      	ldrh	r2, [r7, #6]
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	429a      	cmp	r2, r3
 800023c:	d201      	bcs.n	8000242 <clamp+0x2a>
 800023e:	88bb      	ldrh	r3, [r7, #4]
 8000240:	e000      	b.n	8000244 <clamp+0x2c>
	return value;
 8000242:	88fb      	ldrh	r3, [r7, #6]
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b14      	cmp	r3, #20
 8000260:	d110      	bne.n	8000284 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 8000262:	2214      	movs	r2, #20
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <CDC_On_Receive+0x3c>)
 8000268:	f00a f9ac 	bl	800a5c4 <memcpy>
    if (command.delimiter == 0xAAAA) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <CDC_On_Receive+0x3c>)
 800026e:	8a5b      	ldrh	r3, [r3, #18]
 8000270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000274:	4293      	cmp	r3, r2
 8000276:	d105      	bne.n	8000284 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <CDC_On_Receive+0x40>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <CDC_On_Receive+0x44>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000000 	.word	0x20000000
 8000290:	2000041c 	.word	0x2000041c
 8000294:	2000041e 	.word	0x2000041e

08000298 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 800029c:	2104      	movs	r1, #4
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <enc_init+0x20>)
 80002a0:	f004 fc0e 	bl	8004ac0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80002a4:	2104      	movs	r1, #4
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <enc_init+0x24>)
 80002a8:	f004 fc0a 	bl	8004ac0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80002ac:	2104      	movs	r1, #4
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <enc_init+0x28>)
 80002b0:	f004 fc06 	bl	8004ac0 <HAL_TIM_Encoder_Start>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000298 	.word	0x20000298
 80002bc:	200001b4 	.word	0x200001b4
 80002c0:	2000024c 	.word	0x2000024c

080002c4 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <pwm_init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <pwm_init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <pwm_init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	f241 3233 	movw	r2, #4915	; 0x1333
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <pwm_init+0x68>)
 80002e6:	f241 320b 	movw	r2, #4875	; 0x130b
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <pwm_init+0x68>)
 80002ee:	f641 0206 	movw	r2, #6150	; 0x1806
 80002f2:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002f4:	2100      	movs	r1, #0
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <pwm_init+0x6c>)
 80002f8:	f004 fa3c 	bl	8004774 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <pwm_init+0x6c>)
 8000300:	f005 fad4 	bl	80058ac <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <pwm_init+0x6c>)
 8000308:	f005 fad0 	bl	80058ac <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <pwm_init+0x70>)
 8000310:	f004 fa30 	bl	8004774 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <pwm_init+0x74>)
 8000318:	f004 fa2c 	bl	8004774 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <pwm_init+0x74>)
 8000320:	f004 fa28 	bl	8004774 <HAL_TIM_PWM_Start>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013400 	.word	0x40013400
 800032c:	40014000 	.word	0x40014000
 8000330:	20000330 	.word	0x20000330
 8000334:	20000200 	.word	0x20000200
 8000338:	2000037c 	.word	0x2000037c

0800033c <motor_status_update>:

// Updates the motor's speed, direction and PI constants from the command struct
void motor_status_update() {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e08e      	b.n	8000466 <motor_status_update+0x12a>
		if (command.speed[i] >= 0) {
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a4c      	ldr	r2, [pc, #304]	; (800047c <motor_status_update+0x140>)
 800034c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db23      	blt.n	800039c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	494a      	ldr	r1, [pc, #296]	; (8000480 <motor_status_update+0x144>)
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	440b      	add	r3, r1
 8000362:	3302      	adds	r3, #2
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a44      	ldr	r2, [pc, #272]	; (800047c <motor_status_update+0x140>)
 800036c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d104      	bne.n	800037e <motor_status_update+0x42>
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a41      	ldr	r2, [pc, #260]	; (800047c <motor_status_update+0x140>)
 8000378:	2102      	movs	r1, #2
 800037a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a3e      	ldr	r2, [pc, #248]	; (800047c <motor_status_update+0x140>)
 8000382:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	b298      	uxth	r0, r3
 800038a:	493d      	ldr	r1, [pc, #244]	; (8000480 <motor_status_update+0x144>)
 800038c:	4613      	mov	r3, r2
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	1a9b      	subs	r3, r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	4602      	mov	r2, r0
 8000398:	801a      	strh	r2, [r3, #0]
 800039a:	e026      	b.n	80003ea <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4938      	ldr	r1, [pc, #224]	; (8000480 <motor_status_update+0x144>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3302      	adds	r3, #2
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a32      	ldr	r2, [pc, #200]	; (800047c <motor_status_update+0x140>)
 80003b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003bc:	d105      	bne.n	80003ca <motor_status_update+0x8e>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a2e      	ldr	r2, [pc, #184]	; (800047c <motor_status_update+0x140>)
 80003c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a2b      	ldr	r2, [pc, #172]	; (800047c <motor_status_update+0x140>)
 80003ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	79fa      	ldrb	r2, [r7, #7]
 80003d6:	425b      	negs	r3, r3
 80003d8:	b298      	uxth	r0, r3
 80003da:	4929      	ldr	r1, [pc, #164]	; (8000480 <motor_status_update+0x144>)
 80003dc:	4613      	mov	r3, r2
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	440b      	add	r3, r1
 80003e6:	4602      	mov	r2, r0
 80003e8:	801a      	strh	r2, [r3, #0]
		}
		motor_status[i].flat_const = command.flat_const;
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <motor_status_update+0x140>)
 80003ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	ee07 3a90 	vmov	s15, r3
 80003f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fa:	4921      	ldr	r1, [pc, #132]	; (8000480 <motor_status_update+0x144>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	440b      	add	r3, r1
 8000406:	330c      	adds	r3, #12
 8000408:	edc3 7a00 	vstr	s15, [r3]
		motor_status[i].int_const = ((float)command.int_const)/10;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <motor_status_update+0x140>)
 800040e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000412:	ee07 3a90 	vmov	s15, r3
 8000416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800041a:	79fa      	ldrb	r2, [r7, #7]
 800041c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000424:	4916      	ldr	r1, [pc, #88]	; (8000480 <motor_status_update+0x144>)
 8000426:	4613      	mov	r3, r2
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	3310      	adds	r3, #16
 8000432:	edc3 7a00 	vstr	s15, [r3]
		motor_status[i].der_const = ((float)command.der_const)/10;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <motor_status_update+0x140>)
 8000438:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800043c:	ee07 3a90 	vmov	s15, r3
 8000440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000444:	79fa      	ldrb	r2, [r7, #7]
 8000446:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800044a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800044e:	490c      	ldr	r1, [pc, #48]	; (8000480 <motor_status_update+0x144>)
 8000450:	4613      	mov	r3, r2
 8000452:	00db      	lsls	r3, r3, #3
 8000454:	1a9b      	subs	r3, r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	440b      	add	r3, r1
 800045a:	3314      	adds	r3, #20
 800045c:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i<3; i++) {
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	3301      	adds	r3, #1
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b02      	cmp	r3, #2
 800046a:	f67f af6d 	bls.w	8000348 <motor_status_update+0xc>
	}
}
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	20000000 	.word	0x20000000
 8000480:	200003c8 	.word	0x200003c8

08000484 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t m_id) {
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
    // For ease of use
    Motor_Status m =  motor_status[m_id];
 800048e:	79fa      	ldrb	r2, [r7, #7]
 8000490:	4961      	ldr	r1, [pc, #388]	; (8000618 <motor_pwm+0x194>)
 8000492:	4613      	mov	r3, r2
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	440b      	add	r3, r1
 800049c:	f107 040c 	add.w	r4, r7, #12
 80004a0:	461d      	mov	r5, r3
 80004a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    // Get new position of the encoder
	uint16_t new_pos = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    switch (m_id) {
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d00e      	beq.n	80004d6 <motor_pwm+0x52>
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	dc10      	bgt.n	80004de <motor_pwm+0x5a>
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d002      	beq.n	80004c6 <motor_pwm+0x42>
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d004      	beq.n	80004ce <motor_pwm+0x4a>
 80004c4:	e00b      	b.n	80004de <motor_pwm+0x5a>
		case 0:
			new_pos = TIM3->CNT;
 80004c6:	4b55      	ldr	r3, [pc, #340]	; (800061c <motor_pwm+0x198>)
 80004c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 80004cc:	e007      	b.n	80004de <motor_pwm+0x5a>
		case 1:
			new_pos = TIM1->CNT;
 80004ce:	4b54      	ldr	r3, [pc, #336]	; (8000620 <motor_pwm+0x19c>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 80004d4:	e003      	b.n	80004de <motor_pwm+0x5a>
		case 2:
			new_pos = TIM4->CNT;
 80004d6:	4b53      	ldr	r3, [pc, #332]	; (8000624 <motor_pwm+0x1a0>)
 80004d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004da:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 80004dc:	bf00      	nop
	}
    int16_t pos_change = abs((int16_t)new_pos - m.enc_pos);
 80004de:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80004e2:	461a      	mov	r2, r3
 80004e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bfb8      	it	lt
 80004ee:	425b      	neglt	r3, r3
 80004f0:	853b      	strh	r3, [r7, #40]	; 0x28

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 80004f2:	4b49      	ldr	r3, [pc, #292]	; (8000618 <motor_pwm+0x194>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d109      	bne.n	800050e <motor_pwm+0x8a>
 80004fa:	4b47      	ldr	r3, [pc, #284]	; (8000618 <motor_pwm+0x194>)
 80004fc:	8b9b      	ldrh	r3, [r3, #28]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d105      	bne.n	800050e <motor_pwm+0x8a>
 8000502:	4b45      	ldr	r3, [pc, #276]	; (8000618 <motor_pwm+0x194>)
 8000504:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <motor_pwm+0x8a>
		m.integral = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	82bb      	strh	r3, [r7, #20]
	}

	m.error = m.target_speed - pos_change;
 800050e:	89ba      	ldrh	r2, [r7, #12]
 8000510:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	b29b      	uxth	r3, r3
 8000516:	b21b      	sxth	r3, r3
 8000518:	84bb      	strh	r3, [r7, #36]	; 0x24
	m.integral += m.error;
 800051a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800051e:	b29a      	uxth	r2, r3
 8000520:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000524:	b29b      	uxth	r3, r3
 8000526:	4413      	add	r3, r2
 8000528:	b29b      	uxth	r3, r3
 800052a:	b21b      	sxth	r3, r3
 800052c:	82bb      	strh	r3, [r7, #20]

	int16_t pid_speed = (int16_t)(m.error * m.flat_const) +
 800052e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000532:	ee07 3a90 	vmov	s15, r3
 8000536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800053a:	edd7 7a06 	vldr	s15, [r7, #24]
 800053e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000546:	ee17 3a90 	vmov	r3, s15
 800054a:	b21b      	sxth	r3, r3
 800054c:	b29a      	uxth	r2, r3
                        (int16_t)(m.integral * m.int_const) +
 800054e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000552:	ee07 3a90 	vmov	s15, r3
 8000556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800055a:	edd7 7a07 	vldr	s15, [r7, #28]
 800055e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000566:	ee17 3a90 	vmov	r3, s15
 800056a:	b21b      	sxth	r3, r3
 800056c:	b29b      	uxth	r3, r3
	int16_t pid_speed = (int16_t)(m.error * m.flat_const) +
 800056e:	4413      	add	r3, r2
 8000570:	b29a      	uxth	r2, r3
                        (int16_t)((pos_change - m.enc_change) * m.der_const);
 8000572:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000576:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800057a:	1a5b      	subs	r3, r3, r1
 800057c:	ee07 3a90 	vmov	s15, r3
 8000580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000584:	edd7 7a08 	vldr	s15, [r7, #32]
 8000588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800058c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000590:	ee17 3a90 	vmov	r3, s15
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29b      	uxth	r3, r3
                        (int16_t)(m.integral * m.int_const) +
 8000598:	4413      	add	r3, r2
 800059a:	b29b      	uxth	r3, r3
	int16_t pid_speed = (int16_t)(m.error * m.flat_const) +
 800059c:	85bb      	strh	r3, [r7, #44]	; 0x2c

    m.enc_pos = new_pos;
 800059e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005a2:	823b      	strh	r3, [r7, #16]
	m.enc_change = pos_change;
 80005a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005a6:	827b      	strh	r3, [r7, #18]
	motor_status[m_id] = m;
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	491b      	ldr	r1, [pc, #108]	; (8000618 <motor_pwm+0x194>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	440b      	add	r3, r1
 80005b6:	461d      	mov	r5, r3
 80005b8:	f107 040c 	add.w	r4, r7, #12
 80005bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (pid_speed < 0) {pid_speed = 0;}
 80005c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da01      	bge.n	80005d4 <motor_pwm+0x150>
 80005d0:	2300      	movs	r3, #0
 80005d2:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint16_t pwm = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (m.target_speed > 0) {pwm = 4500 + pid_speed * 375;}
 80005d8:	89bb      	ldrh	r3, [r7, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d010      	beq.n	8000600 <motor_pwm+0x17c>
 80005de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80005e0:	461a      	mov	r2, r3
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	461a      	mov	r2, r3
 80005e8:	0091      	lsls	r1, r2, #2
 80005ea:	461a      	mov	r2, r3
 80005ec:	460b      	mov	r3, r1
 80005ee:	4413      	add	r3, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 80005fc:	3314      	adds	r3, #20
 80005fe:	857b      	strh	r3, [r7, #42]	; 0x2a

	return clamp(pwm, 0, 65535);
 8000600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fe05 	bl	8000218 <clamp>
 800060e:	4603      	mov	r3, r0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3730      	adds	r7, #48	; 0x30
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	200003c8 	.word	0x200003c8
 800061c:	40000400 	.word	0x40000400
 8000620:	40012c00 	.word	0x40012c00
 8000624:	40000800 	.word	0x40000800

08000628 <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d018      	beq.n	800066a <motor_direction+0x42>
 8000638:	2b02      	cmp	r3, #2
 800063a:	dc1f      	bgt.n	800067c <motor_direction+0x54>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <motor_direction+0x1e>
 8000640:	2b01      	cmp	r3, #1
 8000642:	d009      	beq.n	8000658 <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000644:	e01a      	b.n	800067c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <motor_direction+0x5c>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	461a      	mov	r2, r3
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 fa99 	bl	8001b88 <HAL_GPIO_WritePin>
			break;
 8000656:	e011      	b.n	800067c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <motor_direction+0x5c>)
 800065a:	7f9b      	ldrb	r3, [r3, #30]
 800065c:	461a      	mov	r2, r3
 800065e:	2120      	movs	r1, #32
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 fa90 	bl	8001b88 <HAL_GPIO_WritePin>
			break;
 8000668:	e008      	b.n	800067c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <motor_direction+0x5c>)
 800066c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000670:	461a      	mov	r2, r3
 8000672:	2110      	movs	r1, #16
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <motor_direction+0x60>)
 8000676:	f001 fa87 	bl	8001b88 <HAL_GPIO_WritePin>
			break;
 800067a:	bf00      	nop
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200003c8 	.word	0x200003c8
 8000688:	48000400 	.word	0x48000400

0800068c <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2108      	movs	r1, #8
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <wake_drivers_up+0x58>)
 8000698:	f001 fa76 	bl	8001b88 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 800069c:	2300      	movs	r3, #0
 800069e:	80fb      	strh	r3, [r7, #6]
 80006a0:	e003      	b.n	80006aa <wake_drivers_up+0x1e>
 80006a2:	bf00      	nop
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	3301      	adds	r3, #1
 80006a8:	80fb      	strh	r3, [r7, #6]
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006b0:	d3f7      	bcc.n	80006a2 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <wake_drivers_up+0x58>)
 80006b8:	f001 fa66 	bl	8001b88 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006bc:	2300      	movs	r3, #0
 80006be:	80bb      	strh	r3, [r7, #4]
 80006c0:	e003      	b.n	80006ca <wake_drivers_up+0x3e>
 80006c2:	bf00      	nop
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006d0:	d3f7      	bcc.n	80006c2 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2108      	movs	r1, #8
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <wake_drivers_up+0x58>)
 80006d8:	f001 fa56 	bl	8001b88 <HAL_GPIO_WritePin>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	48000400 	.word	0x48000400

080006e8 <HAL_TIM_PeriodElapsedCallback>:
// Currently abandoned.

// 50 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	2b31      	cmp	r3, #49	; 0x31
 80006f8:	d912      	bls.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000702:	2200      	movs	r2, #0
 8000704:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000708:	2200      	movs	r2, #0
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 800070c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000710:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000718:	f241 320b 	movw	r2, #4875	; 0x130b
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800071e:	e04c      	b.n	80007ba <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff feaf 	bl	8000484 <motor_pwm>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff fea8 	bl	8000484 <motor_pwm>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff fea1 	bl	8000484 <motor_pwm>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000748:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff6c 	bl	8000628 <motor_direction>
	motor_direction(1); // Motor 2
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff ff69 	bl	8000628 <motor_direction>
	motor_direction(2); // Motor 3
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff ff66 	bl	8000628 <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800075e:	88db      	ldrh	r3, [r3, #6]
 8000760:	f641 129a 	movw	r2, #6554	; 0x199a
 8000764:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fd55 	bl	8000218 <clamp>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000776:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800077a:	891b      	ldrh	r3, [r3, #8]
 800077c:	f641 129a 	movw	r2, #6554	; 0x199a
 8000780:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd47 	bl	8000218 <clamp>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000790:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000794:	895b      	ldrh	r3, [r3, #10]
 8000796:	f641 0206 	movw	r2, #6150	; 0x1806
 800079a:	f241 215c 	movw	r1, #4700	; 0x125c
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd3a 	bl	8000218 <clamp>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007aa:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	3301      	adds	r3, #1
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007b8:	801a      	strh	r2, [r3, #0]
}
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000041e 	.word	0x2000041e
 80007c4:	40013400 	.word	0x40013400
 80007c8:	40014000 	.word	0x40014000
 80007cc:	20000000 	.word	0x20000000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fe9a 	bl	800150e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f893 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 fbb3 	bl	8000f48 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007e2:	f000 f937 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007e6:	f000 f98f 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM1_Init();
 80007ea:	f000 f8d9 	bl	80009a0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80007ee:	f000 f9e1 	bl	8000bb4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80007f2:	f000 fa6b 	bl	8000ccc <MX_TIM8_Init>
  MX_TIM15_Init();
 80007f6:	f000 fb15 	bl	8000e24 <MX_TIM15_Init>
  MX_TIM6_Init();
 80007fa:	f000 fa31 	bl	8000c60 <MX_TIM6_Init>
  MX_USB_Device_Init();
 80007fe:	f009 f9ad 	bl	8009b5c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	831a      	strh	r2, [r3, #24]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000814:	4837      	ldr	r0, [pc, #220]	; (80008f4 <main+0x124>)
 8000816:	f003 feeb 	bl	80045f0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 fee8 	bl	80015f0 <HAL_Delay>
  enc_init();
 8000820:	f7ff fd3a 	bl	8000298 <enc_init>
  pwm_init();
 8000824:	f7ff fd4e 	bl	80002c4 <pwm_init>
  wake_drivers_up();
 8000828:	f7ff ff30 	bl	800068c <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <main+0x128>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0fa      	beq.n	800082c <main+0x5c>
    	isCommandReceived = 0;
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <main+0x128>)
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 800083c:	f7ff ff26 	bl	800068c <wake_drivers_up>
    	motor_status_update();
 8000840:	f7ff fd7c 	bl	800033c <motor_status_update>

    	for (int i = 0; i < 3; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
 8000848:	e043      	b.n	80008d2 <main+0x102>
			feedback.speed[i] = motor_status[i].target_speed;
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <main+0x12c>)
 800084c:	69fa      	ldr	r2, [r7, #28]
 800084e:	4613      	mov	r3, r2
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	1a9b      	subs	r3, r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	440b      	add	r3, r1
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b21a      	sxth	r2, r3
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	3320      	adds	r3, #32
 8000862:	443b      	add	r3, r7
 8000864:	f823 2c20 	strh.w	r2, [r3, #-32]
			feedback.change[i] = motor_status[i].enc_change;
 8000868:	4924      	ldr	r1, [pc, #144]	; (80008fc <main+0x12c>)
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	440b      	add	r3, r1
 8000876:	3306      	adds	r3, #6
 8000878:	f9b3 2000 	ldrsh.w	r2, [r3]
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	3320      	adds	r3, #32
 8000882:	443b      	add	r3, r7
 8000884:	f823 2c1a 	strh.w	r2, [r3, #-26]
			feedback.error[i] = motor_status[i].error;
 8000888:	491c      	ldr	r1, [pc, #112]	; (80008fc <main+0x12c>)
 800088a:	69fa      	ldr	r2, [r7, #28]
 800088c:	4613      	mov	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3318      	adds	r3, #24
 8000898:	f9b3 2000 	ldrsh.w	r2, [r3]
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	3304      	adds	r3, #4
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	3320      	adds	r3, #32
 80008a4:	443b      	add	r3, r7
 80008a6:	f823 2c1c 	strh.w	r2, [r3, #-28]
			feedback.integral[i] = motor_status[i].integral;
 80008aa:	4914      	ldr	r1, [pc, #80]	; (80008fc <main+0x12c>)
 80008ac:	69fa      	ldr	r2, [r7, #28]
 80008ae:	4613      	mov	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	1a9b      	subs	r3, r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	3308      	adds	r3, #8
 80008ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3308      	adds	r3, #8
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	3320      	adds	r3, #32
 80008c6:	443b      	add	r3, r7
 80008c8:	f823 2c1e 	strh.w	r2, [r3, #-30]
    	for (int i = 0; i < 3; i++) {
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	3301      	adds	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	ddb8      	ble.n	800084a <main+0x7a>
    	}
		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 80008d8:	2102      	movs	r1, #2
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x130>)
 80008dc:	f001 f93c 	bl	8001b58 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	833b      	strh	r3, [r7, #24]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80008e6:	463b      	mov	r3, r7
 80008e8:	211a      	movs	r1, #26
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 f9f8 	bl	8009ce0 <CDC_Transmit_FS>
    if (isCommandReceived) {
 80008f0:	e79c      	b.n	800082c <main+0x5c>
 80008f2:	bf00      	nop
 80008f4:	200002e4 	.word	0x200002e4
 80008f8:	2000041c 	.word	0x2000041c
 80008fc:	200003c8 	.word	0x200003c8
 8000900:	48001400 	.word	0x48001400

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f009 fe64 	bl	800a5e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000926:	2000      	movs	r0, #0
 8000928:	f002 fe7a 	bl	8003620 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800092c:	2322      	movs	r3, #34	; 0x22
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000942:	2302      	movs	r3, #2
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000946:	2301      	movs	r3, #1
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800094a:	2314      	movs	r3, #20
 800094c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	4618      	mov	r0, r3
 8000960:	f002 ff02 	bl	8003768 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800096a:	f000 fb6d 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2303      	movs	r3, #3
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2104      	movs	r1, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fa06 	bl	8003d98 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000992:	f000 fb59 	bl	8001048 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	; 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2224      	movs	r2, #36	; 0x24
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f009 fe16 	bl	800a5e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009c0:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_TIM1_Init+0xb0>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM1_Init+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009ea:	2303      	movs	r3, #3
 80009ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f2:	2301      	movs	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM1_Init+0xac>)
 8000a16:	f003 ffad 	bl	8004974 <HAL_TIM_Encoder_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a20:	f000 fb12 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM1_Init+0xac>)
 8000a36:	f004 ffed 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a40:	f000 fb02 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001b4 	.word	0x200001b4
 8000a50:	40012c00 	.word	0x40012c00

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000aa2:	f003 fe0f 	bl	80046c4 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 facc 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000ac0:	f004 ffa8 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aca:	f000 fabd 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000ae6:	f004 f9f9 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000af0:	f000 faaa 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000af6:	f000 fbe3 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000200 	.word	0x20000200

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08c      	sub	sp, #48	; 0x30
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	2224      	movs	r2, #36	; 0x24
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f009 fd62 	bl	800a5e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <MX_TIM3_Init+0xa8>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b64:	2301      	movs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b78:	f003 fefc 	bl	8004974 <HAL_TIM_Encoder_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b82:	f000 fa61 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <MX_TIM3_Init+0xa4>)
 8000b94:	f004 ff3e 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b9e:	f000 fa53 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	; 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000024c 	.word	0x2000024c
 8000bb0:	40000400 	.word	0x40000400

08000bb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2224      	movs	r2, #36	; 0x24
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f009 fd0c 	bl	800a5e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bd4:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <MX_TIM4_Init+0xa8>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000c24:	f003 fea6 	bl	8004974 <HAL_TIM_Encoder_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c2e:	f000 fa0b 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <MX_TIM4_Init+0xa4>)
 8000c40:	f004 fee8 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c4a:	f000 f9fd 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	3730      	adds	r7, #48	; 0x30
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000298 	.word	0x20000298
 8000c5c:	40000800 	.word	0x40000800

08000c60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <MX_TIM6_Init+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c78:	222f      	movs	r2, #47	; 0x2f
 8000c7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000c92:	f003 fc55 	bl	8004540 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c9c:	f000 f9d4 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM6_Init+0x64>)
 8000cae:	f004 feb1 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cb8:	f000 f9c6 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200002e4 	.word	0x200002e4
 8000cc8:	40001000 	.word	0x40001000

08000ccc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b098      	sub	sp, #96	; 0x60
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2234      	movs	r2, #52	; 0x34
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f009 fc71 	bl	800a5e0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cfe:	4b47      	ldr	r3, [pc, #284]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d00:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <MX_TIM8_Init+0x154>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d10:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b3d      	ldr	r3, [pc, #244]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d2c:	f003 fcca 	bl	80046c4 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000d36:	f000 f987 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4833      	ldr	r0, [pc, #204]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d4e:	f004 fe61 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d58:	f000 f976 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5c:	2360      	movs	r3, #96	; 0x60
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d64:	2300      	movs	r3, #0
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d82:	f004 f8ab 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d8c:	f000 f95c 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d94:	2204      	movs	r2, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4820      	ldr	r0, [pc, #128]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000d9a:	f004 f89f 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000da4:	f000 f950 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dac:	2208      	movs	r2, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000db2:	f004 f893 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000dbc:	f000 f944 	bl	8001048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000dfe:	f004 fe8b 	bl	8005b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000e08:	f000 f91e 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <MX_TIM8_Init+0x150>)
 8000e0e:	f000 fa57 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000e12:	bf00      	nop
 8000e14:	3760      	adds	r7, #96	; 0x60
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000330 	.word	0x20000330
 8000e20:	40013400 	.word	0x40013400

08000e24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b098      	sub	sp, #96	; 0x60
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2234      	movs	r2, #52	; 0x34
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 fbc5 	bl	800a5e0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e58:	4a3a      	ldr	r2, [pc, #232]	; (8000f44 <MX_TIM15_Init+0x120>)
 8000e5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e68:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e6e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e70:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e82:	482f      	ldr	r0, [pc, #188]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000e84:	f003 fc1e 	bl	80046c4 <HAL_TIM_PWM_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f8db 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4827      	ldr	r0, [pc, #156]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000ea2:	f004 fdb7 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f000 f8cc 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb0:	2360      	movs	r3, #96	; 0x60
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481a      	ldr	r0, [pc, #104]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000ed6:	f004 f801 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ee0:	f000 f8b2 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee8:	2204      	movs	r2, #4
 8000eea:	4619      	mov	r1, r3
 8000eec:	4814      	ldr	r0, [pc, #80]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000eee:	f003 fff5 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000ef8:	f000 f8a6 	bl	8001048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000f24:	f004 fdf8 	bl	8005b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f2e:	f000 f88b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM15_Init+0x11c>)
 8000f34:	f000 f9c4 	bl	80012c0 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3760      	adds	r7, #96	; 0x60
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000037c 	.word	0x2000037c
 8000f44:	40014000 	.word	0x40014000

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_GPIO_Init+0xf4>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4825      	ldr	r0, [pc, #148]	; (8001040 <MX_GPIO_Init+0xf8>)
 8000fac:	f000 fdec 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	21a2      	movs	r1, #162	; 0xa2
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f000 fde6 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2118      	movs	r1, #24
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <MX_GPIO_Init+0xfc>)
 8000fc2:	f000 fde1 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <MX_GPIO_Init+0xf8>)
 8000fde:	f000 fc39 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4812      	ldr	r0, [pc, #72]	; (8001040 <MX_GPIO_Init+0xf8>)
 8000ff6:	f000 fc2d 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000ffa:	23a2      	movs	r3, #162	; 0xa2
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f000 fc1e 	bl	8001854 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8001018:	2318      	movs	r3, #24
 800101a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_GPIO_Init+0xfc>)
 8001030:	f000 fc10 	bl	8001854 <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	48001400 	.word	0x48001400
 8001044:	48000400 	.word	0x48000400

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x44>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6613      	str	r3, [r2, #96]	; 0x60
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x44>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x44>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x44>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08e      	sub	sp, #56	; 0x38
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a46      	ldr	r2, [pc, #280]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x138>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12a      	bne.n	8001114 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a3f      	ldr	r2, [pc, #252]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80010ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001100:	2306      	movs	r3, #6
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110e:	f000 fba1 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001112:	e05b      	b.n	80011cc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a30      	ldr	r2, [pc, #192]	; (80011dc <HAL_TIM_Encoder_MspInit+0x140>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d129      	bne.n	8001172 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001122:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6593      	str	r3, [r2, #88]	; 0x58
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800114e:	2350      	movs	r3, #80	; 0x50
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800115e:	2302      	movs	r3, #2
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fb72 	bl	8001854 <HAL_GPIO_Init>
}
 8001170:	e02c      	b.n	80011cc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d127      	bne.n	80011cc <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 80011ac:	23c0      	movs	r3, #192	; 0xc0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_TIM_Encoder_MspInit+0x148>)
 80011c8:	f000 fb44 	bl	8001854 <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40000400 	.word	0x40000400
 80011e0:	40000800 	.word	0x40000800
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f8:	d10c      	bne.n	8001214 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001212:	e022      	b.n	800125a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_TIM_PWM_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10c      	bne.n	8001238 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001228:	6613      	str	r3, [r2, #96]	; 0x60
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
}
 8001236:	e010      	b.n	800125a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <HAL_TIM_PWM_MspInit+0x88>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10b      	bne.n	800125a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6613      	str	r3, [r2, #96]	; 0x60
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_TIM_PWM_MspInit+0x80>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40013400 	.word	0x40013400
 8001270:	40014000 	.word	0x40014000

08001274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <HAL_TIM_Base_MspInit+0x44>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d113      	bne.n	80012ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_Base_MspInit+0x48>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_TIM_Base_MspInit+0x48>)
 800128c:	f043 0310 	orr.w	r3, r3, #16
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_TIM_Base_MspInit+0x48>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2036      	movs	r0, #54	; 0x36
 80012a4:	f000 faa1 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f000 fab8 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40001000 	.word	0x40001000
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e0:	d11d      	bne.n	800131e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a49      	ldr	r2, [pc, #292]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800130a:	2301      	movs	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f000 fa9c 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800131c:	e071      	b.n	8001402 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_TIM_MspPostInit+0x150>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14a      	bne.n	80013be <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	4a37      	ldr	r2, [pc, #220]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001368:	2304      	movs	r3, #4
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <HAL_TIM_MspPostInit+0x154>)
 8001374:	f000 fa6e 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800138a:	2302      	movs	r3, #2
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001398:	f000 fa5c 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800139c:	2320      	movs	r3, #32
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4817      	ldr	r0, [pc, #92]	; (8001414 <HAL_TIM_MspPostInit+0x154>)
 80013b8:	f000 fa4c 	bl	8001854 <HAL_GPIO_Init>
}
 80013bc:	e021      	b.n	8001402 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_TIM_MspPostInit+0x158>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d11c      	bne.n	8001402 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_TIM_MspPostInit+0x14c>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 80013e0:	230c      	movs	r3, #12
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013f0:	2309      	movs	r3, #9
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 031c 	add.w	r3, r7, #28
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f000 fa29 	bl	8001854 <HAL_GPIO_Init>
}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40013400 	.word	0x40013400
 8001414:	48000400 	.word	0x48000400
 8001418:	40014000 	.word	0x40014000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f8a4 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USB_LP_IRQHandler+0x10>)
 8001476:	f000 fca6 	bl	8001dc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200010c8 	.word	0x200010c8

08001484 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM6_DAC_IRQHandler+0x10>)
 800148a:	f003 fba7 	bl	8004bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002e4 	.word	0x200002e4

08001498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <SystemInit+0x20>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <SystemInit+0x20>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <Reset_Handler>:
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <LoopForever+0x2>)
 80014be:	4685      	mov	sp, r0
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopForever+0x6>)
 80014c2:	490e      	ldr	r1, [pc, #56]	; (80014fc <LoopForever+0xa>)
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <LoopForever+0xe>)
 80014c6:	2300      	movs	r3, #0
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:
 80014ca:	58d4      	ldr	r4, [r2, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:
 80014d0:	18c4      	adds	r4, r0, r3
 80014d2:	428c      	cmp	r4, r1
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <LoopForever+0x12>)
 80014d8:	4c0b      	ldr	r4, [pc, #44]	; (8001508 <LoopForever+0x16>)
 80014da:	2300      	movs	r3, #0
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:
 80014e2:	42a2      	cmp	r2, r4
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>
 80014e6:	f7ff ffd7 	bl	8001498 <SystemInit>
 80014ea:	f009 f847 	bl	800a57c <__libc_init_array>
 80014ee:	f7ff f96f 	bl	80007d0 <main>

080014f2 <LoopForever>:
 80014f2:	e7fe      	b.n	80014f2 <LoopForever>
 80014f4:	20008000 	.word	0x20008000
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000198 	.word	0x20000198
 8001500:	0800a668 	.word	0x0800a668
 8001504:	20000198 	.word	0x20000198
 8001508:	200015dc 	.word	0x200015dc

0800150c <ADC1_2_IRQHandler>:
 800150c:	e7fe      	b.n	800150c <ADC1_2_IRQHandler>

0800150e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f95b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151e:	200f      	movs	r0, #15
 8001520:	f000 f80e 	bl	8001540 <HAL_InitTick>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	e001      	b.n	8001534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001530:	f7ff fd90 	bl	8001054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001534:	79fb      	ldrb	r3, [r7, #7]

}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_InitTick+0x68>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d022      	beq.n	800159a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_InitTick+0x6c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_InitTick+0x68>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001560:	fbb1 f3f3 	udiv	r3, r1, r3
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f966 	bl	800183a <HAL_SYSTICK_Config>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d809      	bhi.n	800158e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157a:	2200      	movs	r2, #0
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	f04f 30ff 	mov.w	r0, #4294967295
 8001582:	f000 f932 	bl	80017ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_InitTick+0x70>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e007      	b.n	800159e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e004      	b.n	800159e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e001      	b.n	800159e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000001c 	.word	0x2000001c
 80015ac:	20000014 	.word	0x20000014
 80015b0:	20000018 	.word	0x20000018

080015b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x1c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x20>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_IncTick+0x1c>)
 80015c4:	6013      	str	r3, [r2, #0]
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	20000420 	.word	0x20000420
 80015d4:	2000001c 	.word	0x2000001c

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000420 	.word	0x20000420

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff ffee 	bl	80015d8 <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d004      	beq.n	8001614 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_Delay+0x40>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001614:	bf00      	nop
 8001616:	f7ff ffdf 	bl	80015d8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	429a      	cmp	r2, r3
 8001624:	d8f7      	bhi.n	8001616 <HAL_Delay+0x26>
  {
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000001c 	.word	0x2000001c

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff40 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff90 	bl	8001728 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5f 	bl	80016d4 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff33 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa4 	bl	8001790 <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001862:	e15a      	b.n	8001b1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 814c 	beq.w	8001b14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	2b01      	cmp	r3, #1
 8001886:	d005      	beq.n	8001894 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001890:	2b02      	cmp	r3, #2
 8001892:	d130      	bne.n	80018f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ca:	2201      	movs	r2, #1
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f003 0201 	and.w	r2, r3, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d017      	beq.n	8001932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d123      	bne.n	8001986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	6939      	ldr	r1, [r7, #16]
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0203 	and.w	r2, r3, #3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a6 	beq.w	8001b14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_GPIO_Init+0x2e4>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_GPIO_Init+0x2e4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6613      	str	r3, [r2, #96]	; 0x60
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_GPIO_Init+0x2e4>)
 80019d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e0:	4a56      	ldr	r2, [pc, #344]	; (8001b3c <HAL_GPIO_Init+0x2e8>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a0a:	d01f      	beq.n	8001a4c <HAL_GPIO_Init+0x1f8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x2ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d019      	beq.n	8001a48 <HAL_GPIO_Init+0x1f4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_GPIO_Init+0x2f0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d013      	beq.n	8001a44 <HAL_GPIO_Init+0x1f0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00d      	beq.n	8001a40 <HAL_GPIO_Init+0x1ec>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x2f8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d007      	beq.n	8001a3c <HAL_GPIO_Init+0x1e8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2fc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_GPIO_Init+0x1e4>
 8001a34:	2305      	movs	r3, #5
 8001a36:	e00a      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a38:	2306      	movs	r3, #6
 8001a3a:	e008      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e006      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1fa>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5e:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x2e8>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a90:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a96:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_GPIO_Init+0x300>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f ae9d 	bne.w	8001864 <HAL_GPIO_Init+0x10>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	48001400 	.word	0x48001400
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b08b      	sub	sp, #44	; 0x2c
 8001bbc:	af06      	add	r7, sp, #24
 8001bbe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e0d7      	b.n	8001d7a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f008 f9c6 	bl	8009f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f004 f8b3 	bl	8005d5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e04c      	b.n	8001c96 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	b298      	uxth	r0, r3
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3336      	adds	r3, #54	; 0x36
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3303      	adds	r3, #3
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	3338      	adds	r3, #56	; 0x38
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	333c      	adds	r3, #60	; 0x3c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3340      	adds	r3, #64	; 0x40
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3ad      	bcc.n	8001bfc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e044      	b.n	8001d30 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3b5      	bcc.n	8001ca6 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	687e      	ldr	r6, [r7, #4]
 8001d42:	466d      	mov	r5, sp
 8001d44:	f106 0410 	add.w	r4, r6, #16
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	602b      	str	r3, [r5, #0]
 8001d50:	1d33      	adds	r3, r6, #4
 8001d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f004 f81c 	bl	8005d92 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d102      	bne.n	8001d78 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f001 fc29 	bl	80035ca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_PCD_Start+0x16>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e012      	b.n	8001dbe <HAL_PCD_Start+0x3c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 ffc2 	bl	8005d2e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f006 f9da 	bl	8008168 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f006 f9df 	bl	8008196 <USB_ReadInterrupts>
 8001dd8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fb26 	bl	8002436 <PCD_EP_ISR_Handler>

    return;
 8001dea:	e110      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d013      	beq.n	8001e1e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e08:	b292      	uxth	r2, r2
 8001e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f008 f93f 	bl	800a092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e14:	2100      	movs	r1, #0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8fc 	bl	8002014 <HAL_PCD_SetAddress>

    return;
 8001e1c:	e0f7      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00c      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e40:	e0e5      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00c      	beq.n	8001e66 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e64:	e0d3      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d034      	beq.n	8001eda <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	b292      	uxth	r2, r2
 8001e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0208 	bic.w	r2, r2, #8
 8001e9a:	b292      	uxth	r2, r2
 8001e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f008 fae1 	bl	800a47c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f008 f922 	bl	800a104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ed8:	e099      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d027      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0208 	orr.w	r2, r2, #8
 8001ef6:	b292      	uxth	r2, r2
 8001ef8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0204 	orr.w	r2, r2, #4
 8001f26:	b292      	uxth	r2, r2
 8001f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f008 f8cf 	bl	800a0d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f32:	e06c      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d040      	beq.n	8001fc0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d12b      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0204 	orr.w	r2, r2, #4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0208 	orr.w	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f008 fa63 	bl	800a47c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fb6:	e02a      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f008 f889 	bl	800a0d0 <HAL_PCD_SuspendCallback>
    return;
 8001fbe:	e026      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00f      	beq.n	8001fea <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f008 f847 	bl	800a076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fe8:	e011      	b.n	800200e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00c      	beq.n	800200e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002006:	b292      	uxth	r2, r2
 8002008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800200c:	bf00      	nop
  }
}
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_SetAddress+0x1a>
 800202a:	2302      	movs	r3, #2
 800202c:	e013      	b.n	8002056 <HAL_PCD_SetAddress+0x42>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f006 f87a 	bl	8008140 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	461a      	mov	r2, r3
 800206c:	4603      	mov	r3, r0
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	460b      	mov	r3, r1
 8002072:	803b      	strh	r3, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800207c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da0e      	bge.n	80020a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	705a      	strb	r2, [r3, #1]
 80020a0:	e00e      	b.n	80020c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	f003 0207 	and.w	r2, r3, #7
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020cc:	883a      	ldrh	r2, [r7, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	78ba      	ldrb	r2, [r7, #2]
 80020d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ea:	78bb      	ldrb	r3, [r7, #2]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d102      	bne.n	80020f6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_PCD_EP_Open+0xa6>
 8002100:	2302      	movs	r3, #2
 8002102:	e00e      	b.n	8002122 <HAL_PCD_EP_Open+0xc4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fe5e 	bl	8005dd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002120:	7afb      	ldrb	r3, [r7, #11]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da0e      	bge.n	800215c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	705a      	strb	r2, [r3, #1]
 800215a:	e00e      	b.n	800217a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0207 	and.w	r2, r3, #7
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_PCD_EP_Close+0x6a>
 8002190:	2302      	movs	r3, #2
 8002192:	e00e      	b.n	80021b2 <HAL_PCD_EP_Close+0x88>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f9aa 	bl	80064fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	f003 0207 	and.w	r2, r3, #7
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6979      	ldr	r1, [r7, #20]
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fb5d 	bl	80068d6 <USB_EPStartXfer>
 800221c:	e005      	b.n	800222a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6979      	ldr	r1, [r7, #20]
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fb56 	bl	80068d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 0207 	and.w	r2, r3, #7
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	460b      	mov	r3, r1
 8002272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2201      	movs	r2, #1
 80022ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022bc:	7afb      	ldrb	r3, [r7, #11]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6979      	ldr	r1, [r7, #20]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fb02 	bl	80068d6 <USB_EPStartXfer>
 80022d2:	e005      	b.n	80022e0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6979      	ldr	r1, [r7, #20]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 fafb 	bl	80068d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 0207 	and.w	r2, r3, #7
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d901      	bls.n	8002308 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e03e      	b.n	8002386 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da0e      	bge.n	800232e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	705a      	strb	r2, [r3, #1]
 800232c:	e00c      	b.n	8002348 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_PCD_EP_SetStall+0x7e>
 8002364:	2302      	movs	r3, #2
 8002366:	e00e      	b.n	8002386 <HAL_PCD_EP_SetStall+0x9c>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fde3 	bl	8007f42 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 020f 	and.w	r2, r3, #15
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d901      	bls.n	80023ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e040      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da0e      	bge.n	80023d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	705a      	strb	r2, [r3, #1]
 80023d0:	e00e      	b.n	80023f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0207 	and.w	r2, r3, #7
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_PCD_EP_ClrStall+0x82>
 800240c:	2302      	movs	r3, #2
 800240e:	e00e      	b.n	800242e <HAL_PCD_EP_ClrStall+0xa0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	4618      	mov	r0, r3
 8002420:	f005 fde0 	bl	8007fe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b096      	sub	sp, #88	; 0x58
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800243e:	e39c      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002448:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800244c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800245a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 815e 	bne.w	8002720 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002464:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d150      	bne.n	8002512 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800247c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002480:	81fb      	strh	r3, [r7, #14]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800248c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002490:	b29b      	uxth	r3, r3
 8002492:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3328      	adds	r3, #40	; 0x28
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	441a      	add	r2, r3
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f007 fdb5 	bl	800a042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 834a 	beq.w	8002b7a <PCD_EP_ISR_Handler+0x744>
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8345 	bne.w	8002b7a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002510:	e333      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002518:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002524:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252c:	2b00      	cmp	r3, #0
 800252e:	d032      	beq.n	8002596 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4413      	add	r3, r2
 800254a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002556:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002568:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800256a:	b29b      	uxth	r3, r3
 800256c:	f005 fe65 	bl	800823a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b29a      	uxth	r2, r3
 8002578:	f640 738f 	movw	r3, #3983	; 0xf8f
 800257c:	4013      	ands	r3, r2
 800257e:	823b      	strh	r3, [r7, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	8a3a      	ldrh	r2, [r7, #16]
 8002586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258a:	b292      	uxth	r2, r2
 800258c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f007 fd2a 	bl	8009fe8 <HAL_PCD_SetupStageCallback>
 8002594:	e2f1      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002596:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800259a:	2b00      	cmp	r3, #0
 800259c:	f280 82ed 	bge.w	8002b7a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025ac:	4013      	ands	r3, r2
 80025ae:	83fb      	strh	r3, [r7, #30]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	8bfa      	ldrh	r2, [r7, #30]
 80025b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ba:	b292      	uxth	r2, r2
 80025bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6812      	ldr	r2, [r2, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <PCD_EP_ISR_Handler+0x1ec>
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002604:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002606:	b29b      	uxth	r3, r3
 8002608:	f005 fe17 	bl	800823a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800260c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	441a      	add	r2, r3
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800261a:	2100      	movs	r1, #0
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f007 fcf5 	bl	800a00c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 82a3 	bne.w	8002b7a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b3e      	cmp	r3, #62	; 0x3e
 800265a:	d918      	bls.n	800268e <PCD_EP_ISR_Handler+0x258>
 800265c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <PCD_EP_ISR_Handler+0x240>
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	3b01      	subs	r3, #1
 8002674:	647b      	str	r3, [r7, #68]	; 0x44
 8002676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002678:	b29b      	uxth	r3, r3
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	b29b      	uxth	r3, r3
 800267e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002686:	b29a      	uxth	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	801a      	strh	r2, [r3, #0]
 800268c:	e029      	b.n	80026e2 <PCD_EP_ISR_Handler+0x2ac>
 800268e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d112      	bne.n	80026bc <PCD_EP_ISR_Handler+0x286>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	801a      	strh	r2, [r3, #0]
 80026ba:	e012      	b.n	80026e2 <PCD_EP_ISR_Handler+0x2ac>
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <PCD_EP_ISR_Handler+0x2a0>
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	3301      	adds	r3, #1
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	b29b      	uxth	r3, r3
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	827b      	strh	r3, [r7, #18]
 80026f4:	8a7b      	ldrh	r3, [r7, #18]
 80026f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026fa:	827b      	strh	r3, [r7, #18]
 80026fc:	8a7b      	ldrh	r3, [r7, #18]
 80026fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002702:	827b      	strh	r3, [r7, #18]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	8a7b      	ldrh	r3, [r7, #18]
 800270a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]
 800271e:	e22c      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002734:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002738:	2b00      	cmp	r3, #0
 800273a:	f280 80f6 	bge.w	800292a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29a      	uxth	r2, r3
 8002750:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002754:	4013      	ands	r3, r2
 8002756:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800276c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002770:	b292      	uxth	r2, r2
 8002772:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002774:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800278a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278c:	7b1b      	ldrb	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d123      	bne.n	80027da <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80027ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 808e 	beq.w	80028e0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ca:	6959      	ldr	r1, [r3, #20]
 80027cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ce:	88da      	ldrh	r2, [r3, #6]
 80027d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027d4:	f005 fd31 	bl	800823a <USB_ReadPMA>
 80027d8:	e082      	b.n	80028e0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027dc:	78db      	ldrb	r3, [r3, #3]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d10a      	bne.n	80027f8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027e6:	461a      	mov	r2, r3
 80027e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f9d3 	bl	8002b96 <HAL_PCD_EP_DB_Receive>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027f6:	e073      	b.n	80028e0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002834:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d022      	beq.n	800289c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800287e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02c      	beq.n	80028e0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002890:	891a      	ldrh	r2, [r3, #8]
 8002892:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002896:	f005 fcd0 	bl	800823a <USB_ReadPMA>
 800289a:	e021      	b.n	80028e0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d6:	895a      	ldrh	r2, [r3, #10]
 80028d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028dc:	f005 fcad 	bl	800823a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028e8:	441a      	add	r2, r3
 80028ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f6:	441a      	add	r2, r3
 80028f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <PCD_EP_ISR_Handler+0x4da>
 8002904:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d206      	bcs.n	800291e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f007 fb78 	bl	800a00c <HAL_PCD_DataOutStageCallback>
 800291c:	e005      	b.n	800292a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002924:	4618      	mov	r0, r3
 8002926:	f003 ffd6 	bl	80068d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800292a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8121 	beq.w	8002b7a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002938:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	441a      	add	r2, r3
 8002978:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800297c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002984:	b29b      	uxth	r3, r3
 8002986:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	2b02      	cmp	r3, #2
 800298e:	f000 80a2 	beq.w	8002ad6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299a:	7b1b      	ldrb	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8093 	beq.w	8002ac8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d046      	beq.n	8002a3c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d126      	bne.n	8002a04 <PCD_EP_ISR_Handler+0x5ce>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	4413      	add	r3, r2
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	00da      	lsls	r2, r3, #3
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	4413      	add	r3, r2
 80029d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029dc:	623b      	str	r3, [r7, #32]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	e061      	b.n	8002ac8 <PCD_EP_ISR_Handler+0x692>
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d15d      	bne.n	8002ac8 <PCD_EP_ISR_Handler+0x692>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	4413      	add	r3, r2
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	00da      	lsls	r2, r3, #3
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	e045      	b.n	8002ac8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d126      	bne.n	8002a98 <PCD_EP_ISR_Handler+0x662>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	4413      	add	r3, r2
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
 8002a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00da      	lsls	r2, r3, #3
 8002a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	801a      	strh	r2, [r3, #0]
 8002a96:	e017      	b.n	8002ac8 <PCD_EP_ISR_Handler+0x692>
 8002a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d113      	bne.n	8002ac8 <PCD_EP_ISR_Handler+0x692>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	4413      	add	r3, r2
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f007 fab7 	bl	800a042 <HAL_PCD_DataInStageCallback>
 8002ad4:	e051      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ad6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d144      	bne.n	8002b6c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d907      	bls.n	8002b26 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	619a      	str	r2, [r3, #24]
 8002b24:	e002      	b.n	8002b2c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 fa81 	bl	800a042 <HAL_PCD_DataInStageCallback>
 8002b40:	e01b      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b58:	441a      	add	r2, r3
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 feb6 	bl	80068d6 <USB_EPStartXfer>
 8002b6a:	e006      	b.n	8002b7a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b70:	461a      	mov	r2, r3
 8002b72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f917 	bl	8002da8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f6ff ac5a 	blt.w	8002440 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3758      	adds	r7, #88	; 0x58
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b088      	sub	sp, #32
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07c      	beq.n	8002ca8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	8b7b      	ldrh	r3, [r7, #26]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d306      	bcc.n	8002bec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	8b7b      	ldrh	r3, [r7, #26]
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	619a      	str	r2, [r3, #24]
 8002bea:	e002      	b.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d123      	bne.n	8002c42 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	833b      	strh	r3, [r7, #24]
 8002c16:	8b3b      	ldrh	r3, [r7, #24]
 8002c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c1c:	833b      	strh	r3, [r7, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	8b3b      	ldrh	r3, [r7, #24]
 8002c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01f      	beq.n	8002c8c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	82fb      	strh	r3, [r7, #22]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	8afb      	ldrh	r3, [r7, #22]
 8002c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c8c:	8b7b      	ldrh	r3, [r7, #26]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8085 	beq.w	8002d9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6959      	ldr	r1, [r3, #20]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	891a      	ldrh	r2, [r3, #8]
 8002ca0:	8b7b      	ldrh	r3, [r7, #26]
 8002ca2:	f005 faca 	bl	800823a <USB_ReadPMA>
 8002ca6:	e07a      	b.n	8002d9e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ccc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	8b7b      	ldrh	r3, [r7, #26]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d306      	bcc.n	8002ce6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	8b7b      	ldrh	r3, [r7, #26]
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	e002      	b.n	8002cec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d123      	bne.n	8002d3c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	83fb      	strh	r3, [r7, #30]
 8002d10:	8bfb      	ldrh	r3, [r7, #30]
 8002d12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d16:	83fb      	strh	r3, [r7, #30]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	8bfb      	ldrh	r3, [r7, #30]
 8002d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	83bb      	strh	r3, [r7, #28]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	8bbb      	ldrh	r3, [r7, #28]
 8002d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d86:	8b7b      	ldrh	r3, [r7, #26]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6959      	ldr	r1, [r3, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	895a      	ldrh	r2, [r3, #10]
 8002d98:	8b7b      	ldrh	r3, [r7, #26]
 8002d9a:	f005 fa4e 	bl	800823a <USB_ReadPMA>
    }
  }

  return count;
 8002d9e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0a2      	sub	sp, #136	; 0x88
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 81c5 	beq.w	800314c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d907      	bls.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	619a      	str	r2, [r3, #24]
 8002e04:	e002      	b.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 80b9 	bne.w	8002f88 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d126      	bne.n	8002e6c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	4413      	add	r3, r2
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	00da      	lsls	r2, r3, #3
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	4413      	add	r3, r2
 8002e40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	801a      	strh	r2, [r3, #0]
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	801a      	strh	r2, [r3, #0]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d116      	bne.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	4413      	add	r3, r2
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	00da      	lsls	r2, r3, #3
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	4413      	add	r3, r2
 8002e96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d126      	bne.n	8002efe <HAL_PCD_EP_DB_Transmit+0x156>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00da      	lsls	r2, r3, #3
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	801a      	strh	r2, [r3, #0]
 8002efc:	e017      	b.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x186>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d113      	bne.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x186>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	4413      	add	r3, r2
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	00da      	lsls	r2, r3, #3
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	4413      	add	r3, r2
 8002f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f007 f884 	bl	800a042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 82d2 	beq.w	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	827b      	strh	r3, [r7, #18]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	8a7b      	ldrh	r3, [r7, #18]
 8002f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	8013      	strh	r3, [r2, #0]
 8002f86:	e2b0      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d021      	beq.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 8284 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fea:	441a      	add	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff8:	441a      	add	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	d309      	bcc.n	800301e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6a1a      	ldr	r2, [r3, #32]
 8003014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	621a      	str	r2, [r3, #32]
 800301c:	e015      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800302a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003034:	e009      	b.n	800304a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d155      	bne.n	80030fe <HAL_PCD_EP_DB_Transmit+0x356>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	4413      	add	r3, r2
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	00da      	lsls	r2, r3, #3
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	4413      	add	r3, r2
 8003074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
 800307a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800307c:	2b3e      	cmp	r3, #62	; 0x3e
 800307e:	d916      	bls.n	80030ae <HAL_PCD_EP_DB_Transmit+0x306>
 8003080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	64bb      	str	r3, [r7, #72]	; 0x48
 8003086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	3b01      	subs	r3, #1
 8003094:	64bb      	str	r3, [r7, #72]	; 0x48
 8003096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003098:	b29b      	uxth	r3, r3
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	b29b      	uxth	r3, r3
 800309e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e043      	b.n	8003136 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d112      	bne.n	80030da <HAL_PCD_EP_DB_Transmit+0x332>
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030be:	b29a      	uxth	r2, r3
 80030c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	e02d      	b.n	8003136 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x348>
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ec:	3301      	adds	r3, #1
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	029b      	lsls	r3, r3, #10
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	801a      	strh	r2, [r3, #0]
 80030fc:	e01b      	b.n	8003136 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d117      	bne.n	8003136 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003114:	b29b      	uxth	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311a:	4413      	add	r3, r2
 800311c:	643b      	str	r3, [r7, #64]	; 0x40
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	00da      	lsls	r2, r3, #3
 8003124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003126:	4413      	add	r3, r2
 8003128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003130:	b29a      	uxth	r2, r3
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6959      	ldr	r1, [r3, #20]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	891a      	ldrh	r2, [r3, #8]
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	f005 f836 	bl	80081b6 <USB_WritePMA>
 800314a:	e1ce      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	4413      	add	r3, r2
 8003166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317c:	429a      	cmp	r2, r3
 800317e:	d307      	bcc.n	8003190 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003188:	1ad2      	subs	r2, r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e002      	b.n	8003196 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 80c4 	bne.w	8003328 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d126      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x44e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031bc:	4413      	add	r3, r2
 80031be:	66bb      	str	r3, [r7, #104]	; 0x68
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	00da      	lsls	r2, r3, #3
 80031c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c8:	4413      	add	r3, r2
 80031ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ce:	667b      	str	r3, [r7, #100]	; 0x64
 80031d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031da:	b29a      	uxth	r2, r3
 80031dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e01a      	b.n	800322c <HAL_PCD_EP_DB_Transmit+0x484>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d116      	bne.n	800322c <HAL_PCD_EP_DB_Transmit+0x484>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	673b      	str	r3, [r7, #112]	; 0x70
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003212:	4413      	add	r3, r2
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	00da      	lsls	r2, r3, #3
 800321c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321e:	4413      	add	r3, r2
 8003220:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	2200      	movs	r2, #0
 800322a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12f      	bne.n	800329a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003252:	4413      	add	r3, r2
 8003254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	00da      	lsls	r2, r3, #3
 800325e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003262:	4413      	add	r3, r2
 8003264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800326c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003278:	b29a      	uxth	r2, r3
 800327a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003290:	b29a      	uxth	r2, r3
 8003292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003296:	801a      	strh	r2, [r3, #0]
 8003298:	e017      	b.n	80032ca <HAL_PCD_EP_DB_Transmit+0x522>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d113      	bne.n	80032ca <HAL_PCD_EP_DB_Transmit+0x522>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032b0:	4413      	add	r3, r2
 80032b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00da      	lsls	r2, r3, #3
 80032ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032bc:	4413      	add	r3, r2
 80032be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	2200      	movs	r2, #0
 80032c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f006 feb6 	bl	800a042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8104 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]
 8003326:	e0e0      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d121      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 80b4 	bne.w	80034ea <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338a:	441a      	add	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003398:	441a      	add	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d309      	bcc.n	80033be <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	1ad2      	subs	r2, r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	621a      	str	r2, [r3, #32]
 80033bc:	e015      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80033c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033d4:	e009      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	663b      	str	r3, [r7, #96]	; 0x60
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	785b      	ldrb	r3, [r3, #1]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d155      	bne.n	80034a4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340c:	4413      	add	r3, r2
 800340e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00da      	lsls	r2, r3, #3
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	4413      	add	r3, r2
 800341a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800341e:	657b      	str	r3, [r7, #84]	; 0x54
 8003420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003422:	2b3e      	cmp	r3, #62	; 0x3e
 8003424:	d916      	bls.n	8003454 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	677b      	str	r3, [r7, #116]	; 0x74
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_PCD_EP_DB_Transmit+0x694>
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	3b01      	subs	r3, #1
 800343a:	677b      	str	r3, [r7, #116]	; 0x74
 800343c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343e:	b29b      	uxth	r3, r3
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	b29b      	uxth	r3, r3
 8003444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344c:	b29a      	uxth	r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e040      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	d112      	bne.n	8003480 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003464:	b29a      	uxth	r2, r3
 8003466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003478:	b29a      	uxth	r2, r3
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e02a      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	677b      	str	r3, [r7, #116]	; 0x74
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003492:	3301      	adds	r3, #1
 8003494:	677b      	str	r3, [r7, #116]	; 0x74
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	b29b      	uxth	r3, r3
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	b29a      	uxth	r2, r3
 800349e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	e018      	b.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d114      	bne.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x72e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ba:	4413      	add	r3, r2
 80034bc:	663b      	str	r3, [r7, #96]	; 0x60
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	00da      	lsls	r2, r3, #3
 80034c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c6:	4413      	add	r3, r2
 80034c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	895a      	ldrh	r2, [r3, #10]
 80034e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f004 fe66 	bl	80081b6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	823b      	strh	r3, [r7, #16]
 8003506:	8a3b      	ldrh	r3, [r7, #16]
 8003508:	f083 0310 	eor.w	r3, r3, #16
 800350c:	823b      	strh	r3, [r7, #16]
 800350e:	8a3b      	ldrh	r3, [r7, #16]
 8003510:	f083 0320 	eor.w	r3, r3, #32
 8003514:	823b      	strh	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	8a3b      	ldrh	r3, [r7, #16]
 8003526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3788      	adds	r7, #136	; 0x88
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	4613      	mov	r3, r2
 8003554:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e009      	b.n	800358e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800357a:	897a      	ldrh	r2, [r7, #10]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800358e:	893b      	ldrh	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	b29a      	uxth	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	80da      	strh	r2, [r3, #6]
 80035a2:	e00b      	b.n	80035bc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2201      	movs	r2, #1
 80035a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003602:	b29b      	uxth	r3, r3
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d141      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800362e:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d131      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800363c:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003654:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800365c:	4b40      	ldr	r3, [pc, #256]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2232      	movs	r2, #50	; 0x32
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a3f      	ldr	r2, [pc, #252]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	0c9b      	lsrs	r3, r3, #18
 800366e:	3301      	adds	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003672:	e002      	b.n	800367a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3b01      	subs	r3, #1
 8003678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800367a:	4b38      	ldr	r3, [pc, #224]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d102      	bne.n	800368e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f2      	bne.n	8003674 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d158      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e057      	b.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a6:	4a2d      	ldr	r2, [pc, #180]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036b0:	e04d      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d141      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d131      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4a23      	ldr	r2, [pc, #140]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2232      	movs	r2, #50	; 0x32
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036fe:	e002      	b.n	8003706 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b01      	subs	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003712:	d102      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d112      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e011      	b.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800373c:	e007      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	40007000 	.word	0x40007000
 8003760:	20000014 	.word	0x20000014
 8003764:	431bde83 	.word	0x431bde83

08003768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e306      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d075      	beq.n	8003872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4b97      	ldr	r3, [pc, #604]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003790:	4b94      	ldr	r3, [pc, #592]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d102      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3e>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d002      	beq.n	80037ac <HAL_RCC_OscConfig+0x44>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d10b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	4b8d      	ldr	r3, [pc, #564]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d05b      	beq.n	8003870 <HAL_RCC_OscConfig+0x108>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e2e1      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x74>
 80037ce:	4b85      	ldr	r3, [pc, #532]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a84      	ldr	r2, [pc, #528]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x98>
 80037e6:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7e      	ldr	r2, [pc, #504]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b7c      	ldr	r3, [pc, #496]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7b      	ldr	r2, [pc, #492]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xb0>
 8003800:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b75      	ldr	r3, [pc, #468]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a74      	ldr	r2, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fd feda 	bl	80015d8 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7fd fed6 	bl	80015d8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e2a6      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xc0>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fd fec6 	bl	80015d8 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fec2 	bl	80015d8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e292      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	4b60      	ldr	r3, [pc, #384]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0xe8>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d075      	beq.n	800396a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d102      	bne.n	800389e <HAL_RCC_OscConfig+0x136>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_OscConfig+0x13c>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d11f      	bne.n	80038e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x154>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e265      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	4946      	ldr	r1, [pc, #280]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_RCC_OscConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fe33 	bl	8001540 <HAL_InitTick>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d043      	beq.n	8003968 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e251      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d023      	beq.n	8003934 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ec:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fd fe6e 	bl	80015d8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7fd fe6a 	bl	80015d8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e23a      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	492d      	ldr	r1, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
 8003932:	e01a      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003934:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800393a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fd fe4a 	bl	80015d8 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003948:	f7fd fe46 	bl	80015d8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e216      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1e0>
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003968:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d041      	beq.n	80039fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fd fe23 	bl	80015d8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003996:	f7fd fe1f 	bl	80015d8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e1ef      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ef      	beq.n	8003996 <HAL_RCC_OscConfig+0x22e>
 80039b6:	e020      	b.n	80039fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fd fe06 	bl	80015d8 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ce:	e00d      	b.n	80039ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d0:	f7fd fe02 	bl	80015d8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d906      	bls.n	80039ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e1d2      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 80039ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ea      	bne.n	80039d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80a6 	beq.w	8003b54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a0c:	4b84      	ldr	r3, [pc, #528]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2b4>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x2b6>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a22:	4b7f      	ldr	r3, [pc, #508]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4a7e      	ldr	r2, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3e:	4b79      	ldr	r3, [pc, #484]	; (8003c24 <HAL_RCC_OscConfig+0x4bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x4bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x4bc>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fd fdbf 	bl	80015d8 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fd fdbb 	bl	80015d8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e18b      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x4bc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d108      	bne.n	8003a96 <HAL_RCC_OscConfig+0x32e>
 8003a84:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a94:	e024      	b.n	8003ae0 <HAL_RCC_OscConfig+0x378>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d110      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x358>
 8003a9e:	4b60      	ldr	r3, [pc, #384]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	4a5e      	ldr	r2, [pc, #376]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aae:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x378>
 8003ac0:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a56      	ldr	r2, [pc, #344]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d016      	beq.n	8003b16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fd76 	bl	80015d8 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd fd72 	bl	80015d8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e140      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0ed      	beq.n	8003af0 <HAL_RCC_OscConfig+0x388>
 8003b14:	e015      	b.n	8003b42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fd fd5f 	bl	80015d8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fd fd5b 	bl	80015d8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e129      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b34:	4b3a      	ldr	r3, [pc, #232]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ed      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b48:	4b35      	ldr	r3, [pc, #212]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	4a34      	ldr	r2, [pc, #208]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d03c      	beq.n	8003bda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b6e:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fd fd2e 	bl	80015d8 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b80:	f7fd fd2a 	bl	80015d8 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0fa      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ef      	beq.n	8003b80 <HAL_RCC_OscConfig+0x418>
 8003ba0:	e01b      	b.n	8003bda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb2:	f7fd fd11 	bl	80015d8 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bba:	f7fd fd0d 	bl	80015d8 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0dd      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ef      	bne.n	8003bba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80d1 	beq.w	8003d86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	f000 808b 	beq.w	8003d08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d15e      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <HAL_RCC_OscConfig+0x4b8>)
 8003c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fce7 	bl	80015d8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd fce3 	bl	80015d8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d905      	bls.n	8003c28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0b3      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ec      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c34:	4b56      	ldr	r3, [pc, #344]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x62c>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6a11      	ldr	r1, [r2, #32]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0112      	lsls	r2, r2, #4
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c4e:	0212      	lsls	r2, r2, #8
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c56:	0852      	lsrs	r2, r2, #1
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	0552      	lsls	r2, r2, #21
 8003c5c:	4311      	orrs	r1, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c62:	0852      	lsrs	r2, r2, #1
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0652      	lsls	r2, r2, #25
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c6e:	06d2      	lsls	r2, r2, #27
 8003c70:	430a      	orrs	r2, r1
 8003c72:	4947      	ldr	r1, [pc, #284]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c78:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a44      	ldr	r2, [pc, #272]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c84:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fca2 	bl	80015d8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fd fc9e 	bl	80015d8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e06e      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x530>
 8003cb6:	e066      	b.n	8003d86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cd0:	4b2f      	ldr	r3, [pc, #188]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a2e      	ldr	r2, [pc, #184]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fd fc7a 	bl	80015d8 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd fc76 	bl	80015d8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e046      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfa:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x580>
 8003d06:	e03e      	b.n	8003d86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e039      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x628>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d12c      	bne.n	8003d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	3b01      	subs	r3, #1
 8003d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d123      	bne.n	8003d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11b      	bne.n	8003d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d113      	bne.n	8003d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	3b01      	subs	r3, #1
 8003d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	085b      	lsrs	r3, r3, #1
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	019f800c 	.word	0x019f800c

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e11e      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d910      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b8e      	ldr	r3, [pc, #568]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 020f 	bic.w	r2, r3, #15
 8003dc6:	498c      	ldr	r1, [pc, #560]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b8a      	ldr	r3, [pc, #552]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e106      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d073      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d129      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df4:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0f4      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e04:	f000 f966 	bl	80040d4 <RCC_GetSysClockFreqFromPLLSource>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_ClockConfig+0x268>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d93f      	bls.n	8003e92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e12:	4b7a      	ldr	r3, [pc, #488]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d033      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d12f      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e32:	4b72      	ldr	r3, [pc, #456]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3a:	4a70      	ldr	r2, [pc, #448]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e024      	b.n	8003e92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e50:	4b6a      	ldr	r3, [pc, #424]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0c6      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e60:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0be      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e70:	f000 f8ce 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4a61      	ldr	r2, [pc, #388]	; (8004000 <HAL_RCC_ClockConfig+0x268>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d909      	bls.n	8003e92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e7e:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e86:	4a5d      	ldr	r2, [pc, #372]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b5a      	ldr	r3, [pc, #360]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4957      	ldr	r1, [pc, #348]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea4:	f7fd fb98 	bl	80015d8 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fd fb94 	bl	80015d8 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e095      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ef6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f04:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f0c:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f14:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4936      	ldr	r1, [pc, #216]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f2e:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a32      	ldr	r2, [pc, #200]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d21d      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 020f 	bic.w	r2, r3, #15
 8003f50:	4929      	ldr	r1, [pc, #164]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fb3e 	bl	80015d8 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fd fb3a 	bl	80015d8 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e03b      	b.n	8003fee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d1ed      	bne.n	8003f60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4917      	ldr	r1, [pc, #92]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	490f      	ldr	r1, [pc, #60]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fc2:	f000 f825 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	490c      	ldr	r1, [pc, #48]	; (8004004 <HAL_RCC_ClockConfig+0x26c>)
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	fa22 f303 	lsr.w	r3, r2, r3
 8003fde:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x270>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd faaa 	bl	8001540 <HAL_InitTick>
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	04c4b400 	.word	0x04c4b400
 8004004:	0800a650 	.word	0x0800a650
 8004008:	20000014 	.word	0x20000014
 800400c:	20000018 	.word	0x20000018

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004016:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d102      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004022:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e047      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d102      	bne.n	800403a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e03e      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800403a:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d136      	bne.n	80040b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	3301      	adds	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d10c      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004064:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800406e:	68d2      	ldr	r2, [r2, #12]
 8004070:	0a12      	lsrs	r2, r2, #8
 8004072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	617b      	str	r3, [r7, #20]
      break;
 800407c:	e00c      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	0a12      	lsrs	r2, r2, #8
 800408c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
      break;
 8004096:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0e5b      	lsrs	r3, r3, #25
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e001      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040b8:	693b      	ldr	r3, [r7, #16]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	007a1200 	.word	0x007a1200

080040d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040da:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d10c      	bne.n	8004112 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004102:	68d2      	ldr	r2, [r2, #12]
 8004104:	0a12      	lsrs	r2, r2, #8
 8004106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	617b      	str	r3, [r7, #20]
    break;
 8004110:	e00c      	b.n	800412c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	0a12      	lsrs	r2, r2, #8
 8004120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004124:	fb02 f303 	mul.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
    break;
 800412a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	0e5b      	lsrs	r3, r3, #25
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004146:	687b      	ldr	r3, [r7, #4]
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40021000 	.word	0x40021000
 8004158:	007a1200 	.word	0x007a1200
 800415c:	00f42400 	.word	0x00f42400

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004168:	2300      	movs	r3, #0
 800416a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800416c:	2300      	movs	r3, #0
 800416e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8098 	beq.w	80042ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004182:	4b43      	ldr	r3, [pc, #268]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10d      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004192:	4a3f      	ldr	r2, [pc, #252]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6593      	str	r3, [r2, #88]	; 0x58
 800419a:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041aa:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b6:	f7fd fa0f 	bl	80015d8 <HAL_GetTick>
 80041ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041bc:	e009      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041be:	f7fd fa0b 	bl	80015d8 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d902      	bls.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	74fb      	strb	r3, [r7, #19]
        break;
 80041d0:	e005      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ef      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d159      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041e4:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d019      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004200:	4b23      	ldr	r3, [pc, #140]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800420c:	4b20      	ldr	r3, [pc, #128]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	4a1f      	ldr	r2, [pc, #124]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800421c:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d016      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd f9cb 	bl	80015d8 <HAL_GetTick>
 8004242:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004244:	e00b      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fd f9c7 	bl	80015d8 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d902      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	74fb      	strb	r3, [r7, #19]
            break;
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ec      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	4903      	ldr	r1, [pc, #12]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	74bb      	strb	r3, [r7, #18]
 800428e:	e005      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004290:	40021000 	.word	0x40021000
 8004294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429c:	7c7b      	ldrb	r3, [r7, #17]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4ba6      	ldr	r3, [pc, #664]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	4aa5      	ldr	r2, [pc, #660]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ba:	4ba0      	ldr	r3, [pc, #640]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f023 0203 	bic.w	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	499c      	ldr	r1, [pc, #624]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042dc:	4b97      	ldr	r3, [pc, #604]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 020c 	bic.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4994      	ldr	r1, [pc, #592]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fe:	4b8f      	ldr	r3, [pc, #572]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	498b      	ldr	r1, [pc, #556]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004320:	4b86      	ldr	r3, [pc, #536]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	4983      	ldr	r1, [pc, #524]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004342:	4b7e      	ldr	r3, [pc, #504]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	497a      	ldr	r1, [pc, #488]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004364:	4b75      	ldr	r3, [pc, #468]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4972      	ldr	r1, [pc, #456]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004386:	4b6d      	ldr	r3, [pc, #436]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	4969      	ldr	r1, [pc, #420]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043a8:	4b64      	ldr	r3, [pc, #400]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4961      	ldr	r1, [pc, #388]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b5c      	ldr	r3, [pc, #368]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	4958      	ldr	r1, [pc, #352]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ec:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	4950      	ldr	r1, [pc, #320]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a4a      	ldr	r2, [pc, #296]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004416:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004420:	2b00      	cmp	r3, #0
 8004422:	d015      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004424:	4b45      	ldr	r3, [pc, #276]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4942      	ldr	r1, [pc, #264]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004442:	d105      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004444:	4b3d      	ldr	r3, [pc, #244]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	4a3c      	ldr	r2, [pc, #240]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800445c:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4934      	ldr	r1, [pc, #208]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a2e      	ldr	r2, [pc, #184]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004486:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	4926      	ldr	r1, [pc, #152]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b21      	ldr	r3, [pc, #132]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a20      	ldr	r2, [pc, #128]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	4918      	ldr	r1, [pc, #96]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a12      	ldr	r2, [pc, #72]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	490a      	ldr	r1, [pc, #40]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004522:	d105      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004530:	7cbb      	ldrb	r3, [r7, #18]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000

08004540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e049      	b.n	80045e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fe84 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fde8 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e04a      	b.n	800469e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a21      	ldr	r2, [pc, #132]	; (80046ac <HAL_TIM_Base_Start_IT+0xbc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d013      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_TIM_Base_Start_IT+0xc0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x6c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_TIM_Base_Start_IT+0xcc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d115      	bne.n	8004688 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b06      	cmp	r3, #6
 800466c:	d015      	beq.n	800469a <HAL_TIM_Base_Start_IT+0xaa>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004674:	d011      	beq.n	800469a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	e008      	b.n	800469a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e000      	b.n	800469c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40013400 	.word	0x40013400
 80046bc:	40014000 	.word	0x40014000
 80046c0:	00010007 	.word	0x00010007

080046c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e049      	b.n	800476a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fc fd7c 	bl	80011e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fd26 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start+0x24>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e03c      	b.n	8004812 <HAL_TIM_PWM_Start+0x9e>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d109      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x3e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e02f      	b.n	8004812 <HAL_TIM_PWM_Start+0x9e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start+0x58>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e022      	b.n	8004812 <HAL_TIM_PWM_Start+0x9e>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x72>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e015      	b.n	8004812 <HAL_TIM_PWM_Start+0x9e>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start+0x8c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e008      	b.n	8004812 <HAL_TIM_PWM_Start+0x9e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e097      	b.n	800494a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xb6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	e023      	b.n	8004872 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xc6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004838:	e01b      	b.n	8004872 <HAL_TIM_PWM_Start+0xfe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xd6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004848:	e013      	b.n	8004872 <HAL_TIM_PWM_Start+0xfe>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b0c      	cmp	r3, #12
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xe6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004858:	e00b      	b.n	8004872 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b10      	cmp	r3, #16
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xf6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	e003      	b.n	8004872 <HAL_TIM_PWM_Start+0xfe>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2201      	movs	r2, #1
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fff0 	bl	8005860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_TIM_PWM_Start+0x1e0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x13e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_TIM_PWM_Start+0x1e4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x13e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_TIM_PWM_Start+0x1e8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x13e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <HAL_TIM_PWM_Start+0x1ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIM_PWM_Start+0x13e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_TIM_PWM_Start+0x1f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x142>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_PWM_Start+0x144>
 80048b6:	2300      	movs	r3, #0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a20      	ldr	r2, [pc, #128]	; (8004954 <HAL_TIM_PWM_Start+0x1e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_PWM_Start+0x194>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048de:	d013      	beq.n	8004908 <HAL_TIM_PWM_Start+0x194>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a20      	ldr	r2, [pc, #128]	; (8004968 <HAL_TIM_PWM_Start+0x1f4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_TIM_PWM_Start+0x194>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1f      	ldr	r2, [pc, #124]	; (800496c <HAL_TIM_PWM_Start+0x1f8>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_PWM_Start+0x194>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_TIM_PWM_Start+0x1e4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_PWM_Start+0x194>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <HAL_TIM_PWM_Start+0x1e8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d115      	bne.n	8004934 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_TIM_PWM_Start+0x1fc>)
 8004910:	4013      	ands	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d015      	beq.n	8004946 <HAL_TIM_PWM_Start+0x1d2>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004920:	d011      	beq.n	8004946 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e008      	b.n	8004946 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e000      	b.n	8004948 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	00010007 	.word	0x00010007

08004974 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e097      	b.n	8004ab8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc fb7d 	bl	800109c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049b8:	f023 0307 	bic.w	r3, r3, #7
 80049bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f000 fbc3 	bl	8005154 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	4313      	orrs	r3, r2
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a14:	f023 030c 	bic.w	r3, r3, #12
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	4313      	orrs	r3, r2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	031b      	lsls	r3, r3, #12
 8004a44:	4313      	orrs	r3, r2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	4313      	orrs	r3, r2
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ad8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d110      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004af6:	7b7b      	ldrb	r3, [r7, #13]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e069      	b.n	8004bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	e031      	b.n	8004b76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d110      	bne.n	8004b3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b1e:	7b3b      	ldrb	r3, [r7, #12]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d001      	beq.n	8004b28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e055      	b.n	8004bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b38:	e01d      	b.n	8004b76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d108      	bne.n	8004b52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d105      	bne.n	8004b52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b4c:	7b3b      	ldrb	r3, [r7, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d001      	beq.n	8004b56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e03e      	b.n	8004bd4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_Encoder_Start+0xc4>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d008      	beq.n	8004b94 <HAL_TIM_Encoder_Start+0xd4>
 8004b82:	e00f      	b.n	8004ba4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fe67 	bl	8005860 <TIM_CCxChannelCmd>
      break;
 8004b92:	e016      	b.n	8004bc2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2104      	movs	r1, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe5f 	bl	8005860 <TIM_CCxChannelCmd>
      break;
 8004ba2:	e00e      	b.n	8004bc2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fe57 	bl	8005860 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	2104      	movs	r1, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fe50 	bl	8005860 <TIM_CCxChannelCmd>
      break;
 8004bc0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0202 	mvn.w	r2, #2
 8004c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa7a 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa6c 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa7d 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0204 	mvn.w	r2, #4
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa50 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa42 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa53 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0208 	mvn.w	r2, #8
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fa26 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fa18 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fa29 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0210 	mvn.w	r2, #16
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f9fc 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9ee 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9ff 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d10e      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0201 	mvn.w	r2, #1
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fb fcc4 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b80      	cmp	r3, #128	; 0x80
 8004d6c:	d10e      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d78:	2b80      	cmp	r3, #128	; 0x80
 8004d7a:	d107      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 ff70 	bl	8005c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d10e      	bne.n	8004dba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b80      	cmp	r3, #128	; 0x80
 8004da8:	d107      	bne.n	8004dba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 ff63 	bl	8005c80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d10e      	bne.n	8004de6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d107      	bne.n	8004de6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f9ad 	bl	8005140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d10e      	bne.n	8004e12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d107      	bne.n	8004e12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f06f 0220 	mvn.w	r2, #32
 8004e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 ff23 	bl	8005c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e20:	d10f      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e30:	d107      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 ff29 	bl	8005c94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e50:	d10f      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 ff1b 	bl	8005ca8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e80:	d10f      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 ff0d 	bl	8005cbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 feff 	bl	8005cd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ff      	b.n	80050fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b14      	cmp	r3, #20
 8004f06:	f200 80f0 	bhi.w	80050ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	080050eb 	.word	0x080050eb
 8004f18:	080050eb 	.word	0x080050eb
 8004f1c:	080050eb 	.word	0x080050eb
 8004f20:	08004fa5 	.word	0x08004fa5
 8004f24:	080050eb 	.word	0x080050eb
 8004f28:	080050eb 	.word	0x080050eb
 8004f2c:	080050eb 	.word	0x080050eb
 8004f30:	08004fe7 	.word	0x08004fe7
 8004f34:	080050eb 	.word	0x080050eb
 8004f38:	080050eb 	.word	0x080050eb
 8004f3c:	080050eb 	.word	0x080050eb
 8004f40:	08005027 	.word	0x08005027
 8004f44:	080050eb 	.word	0x080050eb
 8004f48:	080050eb 	.word	0x080050eb
 8004f4c:	080050eb 	.word	0x080050eb
 8004f50:	08005069 	.word	0x08005069
 8004f54:	080050eb 	.word	0x080050eb
 8004f58:	080050eb 	.word	0x080050eb
 8004f5c:	080050eb 	.word	0x080050eb
 8004f60:	080050a9 	.word	0x080050a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f982 	bl	8005274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0204 	bic.w	r2, r2, #4
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
      break;
 8004fa2:	e0a5      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f9f2 	bl	8005394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]
      break;
 8004fe4:	e084      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa5b 	bl	80054a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0208 	orr.w	r2, r2, #8
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0204 	bic.w	r2, r2, #4
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
      break;
 8005024:	e064      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fac3 	bl	80055b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	021a      	lsls	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	61da      	str	r2, [r3, #28]
      break;
 8005066:	e043      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb2c 	bl	80056cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0208 	orr.w	r2, r2, #8
 8005082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0204 	bic.w	r2, r2, #4
 8005092:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050a6:	e023      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fb70 	bl	8005794 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	021a      	lsls	r2, r3, #8
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050e8:	e002      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
      break;
 80050ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3c      	ldr	r2, [pc, #240]	; (8005258 <TIM_Base_SetConfig+0x104>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a39      	ldr	r2, [pc, #228]	; (800525c <TIM_Base_SetConfig+0x108>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a38      	ldr	r2, [pc, #224]	; (8005260 <TIM_Base_SetConfig+0x10c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0x38>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a37      	ldr	r2, [pc, #220]	; (8005264 <TIM_Base_SetConfig+0x110>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d108      	bne.n	800519e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <TIM_Base_SetConfig+0x104>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01b      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d017      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <TIM_Base_SetConfig+0x108>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <TIM_Base_SetConfig+0x10c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00f      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a28      	ldr	r2, [pc, #160]	; (8005264 <TIM_Base_SetConfig+0x110>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <TIM_Base_SetConfig+0x114>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <TIM_Base_SetConfig+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a25      	ldr	r2, [pc, #148]	; (8005270 <TIM_Base_SetConfig+0x11c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d108      	bne.n	80051f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <TIM_Base_SetConfig+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0xe8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a11      	ldr	r2, [pc, #68]	; (8005264 <TIM_Base_SetConfig+0x110>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0xe8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <TIM_Base_SetConfig+0x114>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0xe8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a0f      	ldr	r2, [pc, #60]	; (800526c <TIM_Base_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0xe8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0e      	ldr	r2, [pc, #56]	; (8005270 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d103      	bne.n	8005244 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	615a      	str	r2, [r3, #20]
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0201 	bic.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0302 	bic.w	r3, r3, #2
 80052c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <TIM_OC1_SetConfig+0x10c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_OC1_SetConfig+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <TIM_OC1_SetConfig+0x110>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_OC1_SetConfig+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <TIM_OC1_SetConfig+0x114>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_OC1_SetConfig+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a29      	ldr	r2, [pc, #164]	; (800538c <TIM_OC1_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC1_SetConfig+0x80>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a28      	ldr	r2, [pc, #160]	; (8005390 <TIM_OC1_SetConfig+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10c      	bne.n	800530e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0308 	bic.w	r3, r3, #8
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 0304 	bic.w	r3, r3, #4
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <TIM_OC1_SetConfig+0x10c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00f      	beq.n	8005336 <TIM_OC1_SetConfig+0xc2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <TIM_OC1_SetConfig+0x110>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00b      	beq.n	8005336 <TIM_OC1_SetConfig+0xc2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <TIM_OC1_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <TIM_OC1_SetConfig+0xc2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a18      	ldr	r2, [pc, #96]	; (800538c <TIM_OC1_SetConfig+0x118>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_OC1_SetConfig+0xc2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a17      	ldr	r2, [pc, #92]	; (8005390 <TIM_OC1_SetConfig+0x11c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d111      	bne.n	800535a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0210 	bic.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f023 0320 	bic.w	r3, r3, #32
 80053e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a28      	ldr	r2, [pc, #160]	; (8005494 <TIM_OC2_SetConfig+0x100>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC2_SetConfig+0x6c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a27      	ldr	r2, [pc, #156]	; (8005498 <TIM_OC2_SetConfig+0x104>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10d      	bne.n	800541c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <TIM_OC2_SetConfig+0x100>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00f      	beq.n	8005444 <TIM_OC2_SetConfig+0xb0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <TIM_OC2_SetConfig+0x104>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_OC2_SetConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1b      	ldr	r2, [pc, #108]	; (800549c <TIM_OC2_SetConfig+0x108>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_OC2_SetConfig+0xb0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <TIM_OC2_SetConfig+0x10c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_OC2_SetConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <TIM_OC2_SetConfig+0x110>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d113      	bne.n	800546c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800544a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800

080054a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <TIM_OC3_SetConfig+0xfc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_OC3_SetConfig+0x6a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <TIM_OC3_SetConfig+0x100>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10d      	bne.n	800552e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <TIM_OC3_SetConfig+0xfc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_OC3_SetConfig+0xae>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <TIM_OC3_SetConfig+0x100>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_OC3_SetConfig+0xae>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a1a      	ldr	r2, [pc, #104]	; (80055ac <TIM_OC3_SetConfig+0x104>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_OC3_SetConfig+0xae>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a19      	ldr	r2, [pc, #100]	; (80055b0 <TIM_OC3_SetConfig+0x108>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_OC3_SetConfig+0xae>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <TIM_OC3_SetConfig+0x10c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d113      	bne.n	800557e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	621a      	str	r2, [r3, #32]
}
 8005598:	bf00      	nop
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40013400 	.word	0x40013400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40014400 	.word	0x40014400
 80055b4:	40014800 	.word	0x40014800

080055b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	031b      	lsls	r3, r3, #12
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <TIM_OC4_SetConfig+0x100>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC4_SetConfig+0x6c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a27      	ldr	r2, [pc, #156]	; (80056bc <TIM_OC4_SetConfig+0x104>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10d      	bne.n	8005640 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	031b      	lsls	r3, r3, #12
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <TIM_OC4_SetConfig+0x100>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00f      	beq.n	8005668 <TIM_OC4_SetConfig+0xb0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <TIM_OC4_SetConfig+0x104>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_OC4_SetConfig+0xb0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <TIM_OC4_SetConfig+0x108>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_OC4_SetConfig+0xb0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <TIM_OC4_SetConfig+0x10c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <TIM_OC4_SetConfig+0x110>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d113      	bne.n	8005690 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005676:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	019b      	lsls	r3, r3, #6
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800

080056cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005710:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <TIM_OC5_SetConfig+0xb4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_OC5_SetConfig+0x7a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <TIM_OC5_SetConfig+0xb8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_OC5_SetConfig+0x7a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a15      	ldr	r2, [pc, #84]	; (8005788 <TIM_OC5_SetConfig+0xbc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_OC5_SetConfig+0x7a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <TIM_OC5_SetConfig+0xc0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC5_SetConfig+0x7a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <TIM_OC5_SetConfig+0xc4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d109      	bne.n	800575a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	621a      	str	r2, [r3, #32]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40013400 	.word	0x40013400
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	051b      	lsls	r3, r3, #20
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a18      	ldr	r2, [pc, #96]	; (800584c <TIM_OC6_SetConfig+0xb8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_OC6_SetConfig+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <TIM_OC6_SetConfig+0xbc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_OC6_SetConfig+0x7c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a16      	ldr	r2, [pc, #88]	; (8005854 <TIM_OC6_SetConfig+0xc0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC6_SetConfig+0x7c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <TIM_OC6_SetConfig+0xc4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC6_SetConfig+0x7c>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a14      	ldr	r2, [pc, #80]	; (800585c <TIM_OC6_SetConfig+0xc8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d109      	bne.n	8005824 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2201      	movs	r2, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	43db      	mvns	r3, r3
 8005882:	401a      	ands	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_TIMEx_PWMN_Start+0x24>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e022      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0x6a>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d109      	bne.n	80058ea <HAL_TIMEx_PWMN_Start+0x3e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e015      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0x6a>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d109      	bne.n	8005904 <HAL_TIMEx_PWMN_Start+0x58>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e008      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0x6a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e069      	b.n	80059f2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <HAL_TIMEx_PWMN_Start+0x82>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800592c:	e013      	b.n	8005956 <HAL_TIMEx_PWMN_Start+0xaa>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d104      	bne.n	800593e <HAL_TIMEx_PWMN_Start+0x92>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	e00b      	b.n	8005956 <HAL_TIMEx_PWMN_Start+0xaa>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d104      	bne.n	800594e <HAL_TIMEx_PWMN_Start+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800594c:	e003      	b.n	8005956 <HAL_TIMEx_PWMN_Start+0xaa>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2204      	movs	r2, #4
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f9c0 	bl	8005ce4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005972:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_TIMEx_PWMN_Start+0x150>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_PWMN_Start+0x104>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_PWMN_Start+0x104>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_TIMEx_PWMN_Start+0x154>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_PWMN_Start+0x104>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_TIMEx_PWMN_Start+0x158>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_PWMN_Start+0x104>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_TIMEx_PWMN_Start+0x15c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_PWMN_Start+0x104>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_TIMEx_PWMN_Start+0x160>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d115      	bne.n	80059dc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <HAL_TIMEx_PWMN_Start+0x164>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b06      	cmp	r3, #6
 80059c0:	d015      	beq.n	80059ee <HAL_TIMEx_PWMN_Start+0x142>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c8:	d011      	beq.n	80059ee <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e008      	b.n	80059ee <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e000      	b.n	80059f0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40013400 	.word	0x40013400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	00010007 	.word	0x00010007

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e065      	b.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d108      	bne.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d013      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10c      	bne.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40013400 	.word	0x40013400
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40014000 	.word	0x40014000

08005b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e087      	b.n	8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	041b      	lsls	r3, r3, #16
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d106      	bne.n	8005bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d126      	bne.n	8005c32 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	051b      	lsls	r3, r3, #20
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0e      	ldr	r2, [pc, #56]	; (8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a0d      	ldr	r2, [pc, #52]	; (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d106      	bne.n	8005c32 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400

08005c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2204      	movs	r2, #4
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1a      	ldr	r2, [r3, #32]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1a      	ldr	r2, [r3, #32]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d3e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d64:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d92:	b084      	sub	sp, #16
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	f107 0014 	add.w	r0, r7, #20
 8005da0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	b004      	add	sp, #16
 8005dd2:	4770      	bx	lr

08005dd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b09d      	sub	sp, #116	; 0x74
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	78db      	ldrb	r3, [r3, #3]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d81f      	bhi.n	8005e46 <USB_ActivateEndpoint+0x72>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USB_ActivateEndpoint+0x38>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e4f 	.word	0x08005e4f
 8005e18:	08005e2b 	.word	0x08005e2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e28:	e012      	b.n	8005e50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e32:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e36:	e00b      	b.n	8005e50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e44:	e004      	b.n	8005e50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e4c:	e000      	b.n	8005e50 <USB_ActivateEndpoint+0x7c>
      break;
 8005e4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	441a      	add	r2, r3
 8005e5a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	b21a      	sxth	r2, r3
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b21b      	sxth	r3, r3
 8005e92:	4313      	orrs	r3, r2
 8005e94:	b21b      	sxth	r3, r3
 8005e96:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	7b1b      	ldrb	r3, [r3, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 8149 	bne.w	8006158 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8084 	beq.w	8005fd8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00da      	lsls	r2, r3, #3
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	827b      	strh	r3, [r7, #18]
 8005f12:	8a7b      	ldrh	r3, [r7, #18]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01b      	beq.n	8005f54 <USB_ActivateEndpoint+0x180>
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f32:	823b      	strh	r3, [r7, #16]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	8a3b      	ldrh	r3, [r7, #16]
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	78db      	ldrb	r3, [r3, #3]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d020      	beq.n	8005f9e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f72:	81bb      	strh	r3, [r7, #12]
 8005f74:	89bb      	ldrh	r3, [r7, #12]
 8005f76:	f083 0320 	eor.w	r3, r3, #32
 8005f7a:	81bb      	strh	r3, [r7, #12]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	441a      	add	r2, r3
 8005f86:	89bb      	ldrh	r3, [r7, #12]
 8005f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	8013      	strh	r3, [r2, #0]
 8005f9c:	e2a6      	b.n	80064ec <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	81fb      	strh	r3, [r7, #14]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	89fb      	ldrh	r3, [r7, #14]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e289      	b.n	80064ec <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	4413      	add	r3, r2
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	00da      	lsls	r2, r3, #3
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	88db      	ldrh	r3, [r3, #6]
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	b29b      	uxth	r3, r3
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006016:	b29b      	uxth	r3, r3
 8006018:	461a      	mov	r2, r3
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	4413      	add	r3, r2
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	00da      	lsls	r2, r3, #3
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	4413      	add	r3, r2
 800602a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b3e      	cmp	r3, #62	; 0x3e
 8006036:	d918      	bls.n	800606a <USB_ActivateEndpoint+0x296>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <USB_ActivateEndpoint+0x27e>
 800604c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800604e:	3b01      	subs	r3, #1
 8006050:	66bb      	str	r3, [r7, #104]	; 0x68
 8006052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006054:	b29b      	uxth	r3, r3
 8006056:	029b      	lsls	r3, r3, #10
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e029      	b.n	80060be <USB_ActivateEndpoint+0x2ea>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d112      	bne.n	8006098 <USB_ActivateEndpoint+0x2c4>
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800607c:	b29a      	uxth	r2, r3
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e012      	b.n	80060be <USB_ActivateEndpoint+0x2ea>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <USB_ActivateEndpoint+0x2de>
 80060ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ae:	3301      	adds	r3, #1
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	029b      	lsls	r3, r3, #10
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80060cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01b      	beq.n	800610e <USB_ActivateEndpoint+0x33a>
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ec:	843b      	strh	r3, [r7, #32]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	441a      	add	r2, r3
 80060f8:	8c3b      	ldrh	r3, [r7, #32]
 80060fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	83fb      	strh	r3, [r7, #30]
 8006126:	8bfb      	ldrh	r3, [r7, #30]
 8006128:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800612c:	83fb      	strh	r3, [r7, #30]
 800612e:	8bfb      	ldrh	r3, [r7, #30]
 8006130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006134:	83fb      	strh	r3, [r7, #30]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	8bfb      	ldrh	r3, [r7, #30]
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
 8006156:	e1c9      	b.n	80064ec <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	78db      	ldrb	r3, [r3, #3]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d11e      	bne.n	800619e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006190:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006198:	b29b      	uxth	r3, r3
 800619a:	8013      	strh	r3, [r2, #0]
 800619c:	e01d      	b.n	80061da <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ea:	4413      	add	r3, r2
 80061ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00da      	lsls	r2, r3, #3
 80061f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	891b      	ldrh	r3, [r3, #8]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	657b      	str	r3, [r7, #84]	; 0x54
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621e:	4413      	add	r3, r2
 8006220:	657b      	str	r3, [r7, #84]	; 0x54
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622a:	4413      	add	r3, r2
 800622c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006230:	653b      	str	r3, [r7, #80]	; 0x50
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	895b      	ldrh	r3, [r3, #10]
 8006236:	085b      	lsrs	r3, r3, #1
 8006238:	b29b      	uxth	r3, r3
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006240:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8093 	bne.w	8006372 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800625c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01b      	beq.n	80062a0 <USB_ActivateEndpoint+0x4cc>
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	441a      	add	r2, r3
 800628a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800628c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629c:	b29b      	uxth	r3, r3
 800629e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80062ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <USB_ActivateEndpoint+0x51c>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	873b      	strh	r3, [r7, #56]	; 0x38
 8006308:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800630a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800630e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006310:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006312:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006316:	873b      	strh	r3, [r7, #56]	; 0x38
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
 8006370:	e0bc      	b.n	80064ec <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01d      	beq.n	80063ca <USB_ActivateEndpoint+0x5f6>
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80063da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01d      	beq.n	8006422 <USB_ActivateEndpoint+0x64e>
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	441a      	add	r2, r3
 800640a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	78db      	ldrb	r3, [r3, #3]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d024      	beq.n	8006474 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006444:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006448:	f083 0320 	eor.w	r3, r3, #32
 800644c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800649c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3774      	adds	r7, #116	; 0x74
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b08d      	sub	sp, #52	; 0x34
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	7b1b      	ldrb	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 808e 	bne.w	800662c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d044      	beq.n	80065a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	81bb      	strh	r3, [r7, #12]
 8006526:	89bb      	ldrh	r3, [r7, #12]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <USB_DeactivateEndpoint+0x6c>
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	817b      	strh	r3, [r7, #10]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	897b      	ldrh	r3, [r7, #10]
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800657e:	813b      	strh	r3, [r7, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	893b      	ldrh	r3, [r7, #8]
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
 80065a0:	e192      	b.n	80068c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	827b      	strh	r3, [r7, #18]
 80065b0:	8a7b      	ldrh	r3, [r7, #18]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01b      	beq.n	80065f2 <USB_DeactivateEndpoint+0xf6>
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d0:	823b      	strh	r3, [r7, #16]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8a3b      	ldrh	r3, [r7, #16]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006608:	81fb      	strh	r3, [r7, #14]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	441a      	add	r2, r3
 8006614:	89fb      	ldrh	r3, [r7, #14]
 8006616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006626:	b29b      	uxth	r3, r3
 8006628:	8013      	strh	r3, [r2, #0]
 800662a:	e14d      	b.n	80068c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 80a5 	bne.w	8006780 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	843b      	strh	r3, [r7, #32]
 8006644:	8c3b      	ldrh	r3, [r7, #32]
 8006646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01b      	beq.n	8006686 <USB_DeactivateEndpoint+0x18a>
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006664:	83fb      	strh	r3, [r7, #30]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	441a      	add	r2, r3
 8006670:	8bfb      	ldrh	r3, [r7, #30]
 8006672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006682:	b29b      	uxth	r3, r3
 8006684:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	83bb      	strh	r3, [r7, #28]
 8006694:	8bbb      	ldrh	r3, [r7, #28]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01b      	beq.n	80066d6 <USB_DeactivateEndpoint+0x1da>
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	837b      	strh	r3, [r7, #26]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	441a      	add	r2, r3
 80066c0:	8b7b      	ldrh	r3, [r7, #26]
 80066c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	833b      	strh	r3, [r7, #24]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	8b3b      	ldrh	r3, [r7, #24]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	82fb      	strh	r3, [r7, #22]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675c:	82bb      	strh	r3, [r7, #20]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	8abb      	ldrh	r3, [r7, #20]
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
 800677e:	e0a3      	b.n	80068c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800678e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <USB_DeactivateEndpoint+0x2d4>
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01b      	beq.n	8006820 <USB_DeactivateEndpoint+0x324>
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006836:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	441a      	add	r2, r3
 8006842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800684c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	b29b      	uxth	r3, r3
 8006856:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	b29b      	uxth	r3, r3
 8006866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800687c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3734      	adds	r7, #52	; 0x34
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b0c2      	sub	sp, #264	; 0x108
 80068da:	af00      	add	r7, sp, #0
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068e4:	6018      	str	r0, [r3, #0]
 80068e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 867b 	bne.w	80075f8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	d908      	bls.n	8006930 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800692e:	e007      	b.n	8006940 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	7b1b      	ldrb	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d13a      	bne.n	80069c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6959      	ldr	r1, [r3, #20]
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	88da      	ldrh	r2, [r3, #6]
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	b29b      	uxth	r3, r3
 800696e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006972:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	f001 fc1d 	bl	80081b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800697c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4413      	add	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	00da      	lsls	r2, r3, #3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	f000 bde3 	b.w	800758c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	78db      	ldrb	r3, [r3, #3]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	f040 843a 	bne.w	800724c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a1a      	ldr	r2, [r3, #32]
 80069e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	f240 83b7 	bls.w	8007164 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6a1a      	ldr	r2, [r3, #32]
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 81b3 	beq.w	8006dfe <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d16d      	bne.n	8006b90 <USB_EPStartXfer+0x2ba>
 8006ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	4413      	add	r3, r2
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af4:	2b3e      	cmp	r3, #62	; 0x3e
 8006af6:	d91c      	bls.n	8006b32 <USB_EPStartXfer+0x25c>
 8006af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006afc:	095b      	lsrs	r3, r3, #5
 8006afe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <USB_EPStartXfer+0x242>
 8006b0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b12:	3b01      	subs	r3, #1
 8006b14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	029b      	lsls	r3, r3, #10
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	801a      	strh	r2, [r3, #0]
 8006b30:	e053      	b.n	8006bda <USB_EPStartXfer+0x304>
 8006b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d112      	bne.n	8006b60 <USB_EPStartXfer+0x28a>
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	e03c      	b.n	8006bda <USB_EPStartXfer+0x304>
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <USB_EPStartXfer+0x2aa>
 8006b76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	e024      	b.n	8006bda <USB_EPStartXfer+0x304>
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d11c      	bne.n	8006bda <USB_EPStartXfer+0x304>
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	4413      	add	r3, r2
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	00da      	lsls	r2, r3, #3
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	895b      	ldrh	r3, [r3, #10]
 8006be6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6959      	ldr	r1, [r3, #20]
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c08:	6800      	ldr	r0, [r0, #0]
 8006c0a:	f001 fad4 	bl	80081b6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1e:	441a      	add	r2, r3
 8006c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d90f      	bls.n	8006c68 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	621a      	str	r2, [r3, #32]
 8006c66:	e00e      	b.n	8006c86 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d16d      	bne.n	8006d72 <USB_EPStartXfer+0x49c>
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	00da      	lsls	r2, r3, #3
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd8:	d91c      	bls.n	8006d14 <USB_EPStartXfer+0x43e>
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <USB_EPStartXfer+0x424>
 8006cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	029b      	lsls	r3, r3, #10
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e059      	b.n	8006dc8 <USB_EPStartXfer+0x4f2>
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d112      	bne.n	8006d42 <USB_EPStartXfer+0x46c>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e042      	b.n	8006dc8 <USB_EPStartXfer+0x4f2>
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <USB_EPStartXfer+0x48c>
 8006d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	029b      	lsls	r3, r3, #10
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	e02a      	b.n	8006dc8 <USB_EPStartXfer+0x4f2>
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d122      	bne.n	8006dc8 <USB_EPStartXfer+0x4f2>
 8006d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	4413      	add	r3, r2
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	00da      	lsls	r2, r3, #3
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	891b      	ldrh	r3, [r3, #8]
 8006dd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6959      	ldr	r1, [r3, #20]
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006df2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	f001 f9dd 	bl	80081b6 <USB_WritePMA>
 8006dfc:	e3c6      	b.n	800758c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d16d      	bne.n	8006eea <USB_EPStartXfer+0x614>
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2e:	4413      	add	r3, r2
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	00da      	lsls	r2, r3, #3
 8006e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e42:	4413      	add	r3, r2
 8006e44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e50:	d91c      	bls.n	8006e8c <USB_EPStartXfer+0x5b6>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d104      	bne.n	8006e72 <USB_EPStartXfer+0x59c>
 8006e68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	029b      	lsls	r3, r3, #10
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e059      	b.n	8006f40 <USB_EPStartXfer+0x66a>
 8006e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d112      	bne.n	8006eba <USB_EPStartXfer+0x5e4>
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e042      	b.n	8006f40 <USB_EPStartXfer+0x66a>
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <USB_EPStartXfer+0x604>
 8006ed0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e02a      	b.n	8006f40 <USB_EPStartXfer+0x66a>
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d122      	bne.n	8006f40 <USB_EPStartXfer+0x66a>
 8006efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	653b      	str	r3, [r7, #80]	; 0x50
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1a:	4413      	add	r3, r2
 8006f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f2e:	4413      	add	r3, r2
 8006f30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6959      	ldr	r1, [r3, #20]
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f6e:	6800      	ldr	r0, [r0, #0]
 8006f70:	f001 f921 	bl	80081b6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f84:	441a      	add	r2, r3
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6a1a      	ldr	r2, [r3, #32]
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d90f      	bls.n	8006fce <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	621a      	str	r2, [r3, #32]
 8006fcc:	e00e      	b.n	8006fec <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d16d      	bne.n	80070e4 <USB_EPStartXfer+0x80e>
 8007008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	63bb      	str	r3, [r7, #56]	; 0x38
 8007014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007022:	b29b      	uxth	r3, r3
 8007024:	461a      	mov	r2, r3
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	4413      	add	r3, r2
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	00da      	lsls	r2, r3, #3
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	4413      	add	r3, r2
 800703e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007048:	2b3e      	cmp	r3, #62	; 0x3e
 800704a:	d91c      	bls.n	8007086 <USB_EPStartXfer+0x7b0>
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <USB_EPStartXfer+0x796>
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	3b01      	subs	r3, #1
 8007068:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	b29b      	uxth	r3, r3
 8007072:	029b      	lsls	r3, r3, #10
 8007074:	b29b      	uxth	r3, r3
 8007076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800707a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800707e:	b29a      	uxth	r2, r3
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e053      	b.n	800712e <USB_EPStartXfer+0x858>
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708a:	2b00      	cmp	r3, #0
 800708c:	d112      	bne.n	80070b4 <USB_EPStartXfer+0x7de>
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007098:	b29a      	uxth	r2, r3
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e03c      	b.n	800712e <USB_EPStartXfer+0x858>
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <USB_EPStartXfer+0x7fe>
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ce:	3301      	adds	r3, #1
 80070d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d8:	b29b      	uxth	r3, r3
 80070da:	029b      	lsls	r3, r3, #10
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e024      	b.n	800712e <USB_EPStartXfer+0x858>
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d11c      	bne.n	800712e <USB_EPStartXfer+0x858>
 80070f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007102:	b29b      	uxth	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007108:	4413      	add	r3, r2
 800710a:	643b      	str	r3, [r7, #64]	; 0x40
 800710c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	00da      	lsls	r2, r3, #3
 800711a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711c:	4413      	add	r3, r2
 800711e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007128:	b29a      	uxth	r2, r3
 800712a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	895b      	ldrh	r3, [r3, #10]
 800713a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6959      	ldr	r1, [r3, #20]
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800714e:	b29b      	uxth	r3, r3
 8007150:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007154:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007158:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800715c:	6800      	ldr	r0, [r0, #0]
 800715e:	f001 f82a 	bl	80081b6 <USB_WritePMA>
 8007162:	e213      	b.n	800758c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29b      	uxth	r3, r3
 8007192:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800719e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	441a      	add	r2, r3
 80071b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80071bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f0:	4413      	add	r3, r2
 80071f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	00da      	lsls	r2, r3, #3
 8007202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007204:	4413      	add	r3, r2
 8007206:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800720a:	65bb      	str	r3, [r7, #88]	; 0x58
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	b29a      	uxth	r2, r3
 8007212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007214:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	891b      	ldrh	r3, [r3, #8]
 8007222:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6959      	ldr	r1, [r3, #20]
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007236:	b29b      	uxth	r3, r3
 8007238:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800723c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007240:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007244:	6800      	ldr	r0, [r0, #0]
 8007246:	f000 ffb6 	bl	80081b6 <USB_WritePMA>
 800724a:	e19f      	b.n	800758c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800724c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	1ad2      	subs	r2, r2, r3
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800726a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80bc 	beq.w	800740a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	673b      	str	r3, [r7, #112]	; 0x70
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d16d      	bne.n	800738a <USB_EPStartXfer+0xab4>
 80072ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ce:	4413      	add	r3, r2
 80072d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	00da      	lsls	r2, r3, #3
 80072e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072e2:	4413      	add	r3, r2
 80072e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072e8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d91c      	bls.n	800732c <USB_EPStartXfer+0xa56>
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <USB_EPStartXfer+0xa3c>
 8007308:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800730c:	3b01      	subs	r3, #1
 800730e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007312:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29b      	uxth	r3, r3
 800731c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007324:	b29a      	uxth	r2, r3
 8007326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	e053      	b.n	80073d4 <USB_EPStartXfer+0xafe>
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	2b00      	cmp	r3, #0
 8007332:	d112      	bne.n	800735a <USB_EPStartXfer+0xa84>
 8007334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733e:	b29a      	uxth	r2, r3
 8007340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e03c      	b.n	80073d4 <USB_EPStartXfer+0xafe>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <USB_EPStartXfer+0xaa4>
 8007370:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007374:	3301      	adds	r3, #1
 8007376:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800737a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800737e:	b29b      	uxth	r3, r3
 8007380:	029b      	lsls	r3, r3, #10
 8007382:	b29a      	uxth	r2, r3
 8007384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e024      	b.n	80073d4 <USB_EPStartXfer+0xafe>
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d11c      	bne.n	80073d4 <USB_EPStartXfer+0xafe>
 800739a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ae:	4413      	add	r3, r2
 80073b0:	673b      	str	r3, [r7, #112]	; 0x70
 80073b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	00da      	lsls	r2, r3, #3
 80073c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c2:	4413      	add	r3, r2
 80073c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	895b      	ldrh	r3, [r3, #10]
 80073e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6959      	ldr	r1, [r3, #20]
 80073f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007402:	6800      	ldr	r0, [r0, #0]
 8007404:	f000 fed7 	bl	80081b6 <USB_WritePMA>
 8007408:	e0c0      	b.n	800758c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d16d      	bne.n	80074f6 <USB_EPStartXfer+0xc20>
 800741a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800743a:	4413      	add	r3, r2
 800743c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800743e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	00da      	lsls	r2, r3, #3
 800744c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800744e:	4413      	add	r3, r2
 8007450:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007454:	67bb      	str	r3, [r7, #120]	; 0x78
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745a:	2b3e      	cmp	r3, #62	; 0x3e
 800745c:	d91c      	bls.n	8007498 <USB_EPStartXfer+0xbc2>
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <USB_EPStartXfer+0xba8>
 8007474:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007478:	3b01      	subs	r3, #1
 800747a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800747e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007482:	b29b      	uxth	r3, r3
 8007484:	029b      	lsls	r3, r3, #10
 8007486:	b29b      	uxth	r3, r3
 8007488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007490:	b29a      	uxth	r2, r3
 8007492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	e05f      	b.n	8007558 <USB_EPStartXfer+0xc82>
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749c:	2b00      	cmp	r3, #0
 800749e:	d112      	bne.n	80074c6 <USB_EPStartXfer+0xbf0>
 80074a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074be:	b29a      	uxth	r2, r3
 80074c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c2:	801a      	strh	r2, [r3, #0]
 80074c4:	e048      	b.n	8007558 <USB_EPStartXfer+0xc82>
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <USB_EPStartXfer+0xc10>
 80074dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074e0:	3301      	adds	r3, #1
 80074e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	e030      	b.n	8007558 <USB_EPStartXfer+0xc82>
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d128      	bne.n	8007558 <USB_EPStartXfer+0xc82>
 8007506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007522:	b29b      	uxth	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800752a:	4413      	add	r3, r2
 800752c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	00da      	lsls	r2, r3, #3
 800753e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007542:	4413      	add	r3, r2
 8007544:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	b29a      	uxth	r2, r3
 8007552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007556:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	891b      	ldrh	r3, [r3, #8]
 8007564:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6959      	ldr	r1, [r3, #20]
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007578:	b29b      	uxth	r3, r3
 800757a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800757e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007582:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	f000 fe15 	bl	80081b6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b2:	817b      	strh	r3, [r7, #10]
 80075b4:	897b      	ldrh	r3, [r7, #10]
 80075b6:	f083 0310 	eor.w	r3, r3, #16
 80075ba:	817b      	strh	r3, [r7, #10]
 80075bc:	897b      	ldrh	r3, [r7, #10]
 80075be:	f083 0320 	eor.w	r3, r3, #32
 80075c2:	817b      	strh	r3, [r7, #10]
 80075c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	897b      	ldrh	r3, [r7, #10]
 80075e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]
 80075f4:	f000 bc9f 	b.w	8007f36 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	7b1b      	ldrb	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f040 80ae 	bne.w	8007766 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800760a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	429a      	cmp	r2, r3
 8007624:	d917      	bls.n	8007656 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	619a      	str	r2, [r3, #24]
 8007654:	e00e      	b.n	8007674 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2200      	movs	r2, #0
 8007672:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007698:	4413      	add	r3, r2
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00da      	lsls	r2, r3, #3
 80076ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076be:	2b3e      	cmp	r3, #62	; 0x3e
 80076c0:	d91d      	bls.n	80076fe <USB_EPStartXfer+0xe28>
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d104      	bne.n	80076e2 <USB_EPStartXfer+0xe0c>
 80076d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076dc:	3b01      	subs	r3, #1
 80076de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	029b      	lsls	r3, r3, #10
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	801a      	strh	r2, [r3, #0]
 80076fc:	e3e1      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	2b00      	cmp	r3, #0
 8007704:	d116      	bne.n	8007734 <USB_EPStartXfer+0xe5e>
 8007706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772a:	b29a      	uxth	r2, r3
 800772c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e3c6      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007738:	085b      	lsrs	r3, r3, #1
 800773a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USB_EPStartXfer+0xe7e>
 800774a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800774e:	3301      	adds	r3, #1
 8007750:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007754:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007758:	b29b      	uxth	r3, r3
 800775a:	029b      	lsls	r3, r3, #10
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e3ad      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	78db      	ldrb	r3, [r3, #3]
 8007772:	2b02      	cmp	r3, #2
 8007774:	f040 8200 	bne.w	8007b78 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	785b      	ldrb	r3, [r3, #1]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f040 8091 	bne.w	80078ac <USB_EPStartXfer+0xfd6>
 800778a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ae:	4413      	add	r3, r2
 80077b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	00da      	lsls	r2, r3, #3
 80077c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077c6:	4413      	add	r3, r2
 80077c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b3e      	cmp	r3, #62	; 0x3e
 80077de:	d925      	bls.n	800782c <USB_EPStartXfer+0xf56>
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <USB_EPStartXfer+0xf3a>
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780a:	3b01      	subs	r3, #1
 800780c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007814:	b29b      	uxth	r3, r3
 8007816:	029b      	lsls	r3, r3, #10
 8007818:	b29b      	uxth	r3, r3
 800781a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007822:	b29a      	uxth	r2, r3
 8007824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	e074      	b.n	8007916 <USB_EPStartXfer+0x1040>
 800782c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d116      	bne.n	800786a <USB_EPStartXfer+0xf94>
 800783c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007848:	b29a      	uxth	r2, r3
 800784a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e055      	b.n	8007916 <USB_EPStartXfer+0x1040>
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <USB_EPStartXfer+0xfc4>
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	3301      	adds	r3, #1
 8007896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e034      	b.n	8007916 <USB_EPStartXfer+0x1040>
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d12c      	bne.n	8007916 <USB_EPStartXfer+0x1040>
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d8:	b29b      	uxth	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078e0:	4413      	add	r3, r2
 80078e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00da      	lsls	r2, r3, #3
 80078f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078f8:	4413      	add	r3, r2
 80078fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	b29a      	uxth	r2, r3
 8007910:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007914:	801a      	strh	r2, [r3, #0]
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 8091 	bne.w	8007a58 <USB_EPStartXfer+0x1182>
 8007936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800795a:	4413      	add	r3, r2
 800795c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	00da      	lsls	r2, r3, #3
 800796e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007972:	4413      	add	r3, r2
 8007974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	2b3e      	cmp	r3, #62	; 0x3e
 800798a:	d925      	bls.n	80079d8 <USB_EPStartXfer+0x1102>
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800799e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <USB_EPStartXfer+0x10e6>
 80079b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b6:	3b01      	subs	r3, #1
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	e06d      	b.n	8007ab4 <USB_EPStartXfer+0x11de>
 80079d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d116      	bne.n	8007a16 <USB_EPStartXfer+0x1140>
 80079e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e04e      	b.n	8007ab4 <USB_EPStartXfer+0x11de>
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <USB_EPStartXfer+0x1170>
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a40:	3301      	adds	r3, #1
 8007a42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	029b      	lsls	r3, r3, #10
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	e02d      	b.n	8007ab4 <USB_EPStartXfer+0x11de>
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d125      	bne.n	8007ab4 <USB_EPStartXfer+0x11de>
 8007a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a7e:	4413      	add	r3, r2
 8007a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	00da      	lsls	r2, r3, #3
 8007a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a96:	4413      	add	r3, r2
 8007a98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ab2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 81fe 	beq.w	8007ec2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ae6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <USB_EPStartXfer+0x1228>
 8007af2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10d      	bne.n	8007b1a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007afe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 81db 	bne.w	8007ec2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b0c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 81d4 	bne.w	8007ec2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b40:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	8013      	strh	r3, [r2, #0]
 8007b76:	e1a4      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	f040 819a 	bne.w	8007ebe <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d917      	bls.n	8007bd6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	619a      	str	r2, [r3, #24]
 8007bd4:	e00e      	b.n	8007bf4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d178      	bne.n	8007cf6 <USB_EPStartXfer+0x1420>
 8007c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c28:	4413      	add	r3, r2
 8007c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	00da      	lsls	r2, r3, #3
 8007c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c40:	4413      	add	r3, r2
 8007c42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c50:	d91d      	bls.n	8007c8e <USB_EPStartXfer+0x13b8>
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <USB_EPStartXfer+0x139c>
 8007c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e064      	b.n	8007d58 <USB_EPStartXfer+0x1482>
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d116      	bne.n	8007cc4 <USB_EPStartXfer+0x13ee>
 8007c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e049      	b.n	8007d58 <USB_EPStartXfer+0x1482>
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <USB_EPStartXfer+0x140e>
 8007cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	029b      	lsls	r3, r3, #10
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e030      	b.n	8007d58 <USB_EPStartXfer+0x1482>
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d128      	bne.n	8007d58 <USB_EPStartXfer+0x1482>
 8007d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	00da      	lsls	r2, r3, #3
 8007d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d42:	4413      	add	r3, r2
 8007d44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d178      	bne.n	8007e68 <USB_EPStartXfer+0x1592>
 8007d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	00da      	lsls	r2, r3, #3
 8007dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8007dc2:	d91d      	bls.n	8007e00 <USB_EPStartXfer+0x152a>
 8007dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc8:	095b      	lsrs	r3, r3, #5
 8007dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <USB_EPStartXfer+0x150e>
 8007dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dde:	3b01      	subs	r3, #1
 8007de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	029b      	lsls	r3, r3, #10
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	e060      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d116      	bne.n	8007e36 <USB_EPStartXfer+0x1560>
 8007e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e045      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
 8007e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3a:	085b      	lsrs	r3, r3, #1
 8007e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <USB_EPStartXfer+0x1580>
 8007e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	e02c      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d124      	bne.n	8007ec2 <USB_EPStartXfer+0x15ec>
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e8e:	4413      	add	r3, r2
 8007e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	00da      	lsls	r2, r3, #3
 8007ea2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	e001      	b.n	8007ec2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e03a      	b.n	8007f38 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007eec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ef4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ef8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d020      	beq.n	8007f96 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f6a:	81bb      	strh	r3, [r7, #12]
 8007f6c:	89bb      	ldrh	r3, [r7, #12]
 8007f6e:	f083 0310 	eor.w	r3, r3, #16
 8007f72:	81bb      	strh	r3, [r7, #12]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	441a      	add	r2, r3
 8007f7e:	89bb      	ldrh	r3, [r7, #12]
 8007f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	8013      	strh	r3, [r2, #0]
 8007f94:	e01f      	b.n	8007fd6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fac:	81fb      	strh	r3, [r7, #14]
 8007fae:	89fb      	ldrh	r3, [r7, #14]
 8007fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fb4:	81fb      	strh	r3, [r7, #14]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	441a      	add	r2, r3
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	7b1b      	ldrb	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 809d 	bne.w	8008132 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d04c      	beq.n	800809a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	823b      	strh	r3, [r7, #16]
 800800e:	8a3b      	ldrh	r3, [r7, #16]
 8008010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01b      	beq.n	8008050 <USB_EPClearStall+0x6c>
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	81fb      	strh	r3, [r7, #14]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	441a      	add	r2, r3
 800803a:	89fb      	ldrh	r3, [r7, #14]
 800803c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008048:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800804c:	b29b      	uxth	r3, r3
 800804e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	78db      	ldrb	r3, [r3, #3]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d06c      	beq.n	8008132 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806e:	81bb      	strh	r3, [r7, #12]
 8008070:	89bb      	ldrh	r3, [r7, #12]
 8008072:	f083 0320 	eor.w	r3, r3, #32
 8008076:	81bb      	strh	r3, [r7, #12]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	441a      	add	r2, r3
 8008082:	89bb      	ldrh	r3, [r7, #12]
 8008084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800808c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008094:	b29b      	uxth	r3, r3
 8008096:	8013      	strh	r3, [r2, #0]
 8008098:	e04b      	b.n	8008132 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	82fb      	strh	r3, [r7, #22]
 80080a8:	8afb      	ldrh	r3, [r7, #22]
 80080aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01b      	beq.n	80080ea <USB_EPClearStall+0x106>
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c8:	82bb      	strh	r3, [r7, #20]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	441a      	add	r2, r3
 80080d4:	8abb      	ldrh	r3, [r7, #20]
 80080d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008100:	827b      	strh	r3, [r7, #18]
 8008102:	8a7b      	ldrh	r3, [r7, #18]
 8008104:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008108:	827b      	strh	r3, [r7, #18]
 800810a:	8a7b      	ldrh	r3, [r7, #18]
 800810c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008110:	827b      	strh	r3, [r7, #18]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	8a7b      	ldrh	r3, [r7, #18]
 800811e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812e:	b29b      	uxth	r3, r3
 8008130:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2280      	movs	r2, #128	; 0x80
 8008156:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008176:	b29b      	uxth	r3, r3
 8008178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800817c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081a8:	68fb      	ldr	r3, [r7, #12]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b08d      	sub	sp, #52	; 0x34
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	4611      	mov	r1, r2
 80081c2:	461a      	mov	r2, r3
 80081c4:	460b      	mov	r3, r1
 80081c6:	80fb      	strh	r3, [r7, #6]
 80081c8:	4613      	mov	r3, r2
 80081ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081cc:	88bb      	ldrh	r3, [r7, #4]
 80081ce:	3301      	adds	r3, #1
 80081d0:	085b      	lsrs	r3, r3, #1
 80081d2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ec:	e01b      	b.n	8008226 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	3301      	adds	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	b29a      	uxth	r2, r3
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	3302      	adds	r3, #2
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	3301      	adds	r3, #1
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	3b01      	subs	r3, #1
 8008224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e0      	bne.n	80081ee <USB_WritePMA+0x38>
  }
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	3734      	adds	r7, #52	; 0x34
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800823a:	b480      	push	{r7}
 800823c:	b08b      	sub	sp, #44	; 0x2c
 800823e:	af00      	add	r7, sp, #0
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	4611      	mov	r1, r2
 8008246:	461a      	mov	r2, r3
 8008248:	460b      	mov	r3, r1
 800824a:	80fb      	strh	r3, [r7, #6]
 800824c:	4613      	mov	r3, r2
 800824e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008250:	88bb      	ldrh	r3, [r7, #4]
 8008252:	085b      	lsrs	r3, r3, #1
 8008254:	b29b      	uxth	r3, r3
 8008256:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008260:	88fa      	ldrh	r2, [r7, #6]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
 8008270:	e018      	b.n	80082a4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	3302      	adds	r3, #2
 800827e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	b2da      	uxtb	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	3301      	adds	r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	b2da      	uxtb	r2, r3
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	3b01      	subs	r3, #1
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e3      	bne.n	8008272 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80082aa:	88bb      	ldrh	r3, [r7, #4]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	701a      	strb	r2, [r3, #0]
  }
}
 80082c6:	bf00      	nop
 80082c8:	372c      	adds	r7, #44	; 0x2c
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082de:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082e2:	f002 f901 	bl	800a4e8 <USBD_static_malloc>
 80082e6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80082f6:	2302      	movs	r3, #2
 80082f8:	e066      	b.n	80083c8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	7c1b      	ldrb	r3, [r3, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d119      	bne.n	800833e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800830a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800830e:	2202      	movs	r2, #2
 8008310:	2181      	movs	r1, #129	; 0x81
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 ff8d 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800831e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008322:	2202      	movs	r2, #2
 8008324:	2101      	movs	r1, #1
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 ff83 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2210      	movs	r2, #16
 8008338:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800833c:	e016      	b.n	800836c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	2202      	movs	r2, #2
 8008342:	2181      	movs	r1, #129	; 0x81
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 ff74 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	2202      	movs	r2, #2
 8008354:	2101      	movs	r1, #1
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 ff6b 	bl	800a232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2210      	movs	r2, #16
 8008368:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800836c:	2308      	movs	r3, #8
 800836e:	2203      	movs	r2, #3
 8008370:	2182      	movs	r1, #130	; 0x82
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 ff5d 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7c1b      	ldrb	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ac:	2101      	movs	r1, #1
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f002 f82f 	bl	800a412 <USBD_LL_PrepareReceive>
 80083b4:	e007      	b.n	80083c6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	2101      	movs	r1, #1
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f002 f826 	bl	800a412 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083dc:	2181      	movs	r1, #129	; 0x81
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f001 ff4d 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083ea:	2101      	movs	r1, #1
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 ff46 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083fa:	2182      	movs	r1, #130	; 0x82
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 ff3e 	bl	800a27e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00e      	beq.n	800843a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842c:	4618      	mov	r0, r3
 800842e:	f002 f869 	bl	800a504 <USBD_static_free>
    pdev->pClassData = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008454:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	e0af      	b.n	80085cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008474:	2b00      	cmp	r3, #0
 8008476:	d03f      	beq.n	80084f8 <USBD_CDC_Setup+0xb4>
 8008478:	2b20      	cmp	r3, #32
 800847a:	f040 809f 	bne.w	80085bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d02e      	beq.n	80084e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b25b      	sxtb	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	da16      	bge.n	80084be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800849c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	88d2      	ldrh	r2, [r2, #6]
 80084a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	88db      	ldrh	r3, [r3, #6]
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	bf28      	it	cs
 80084ac:	2307      	movcs	r3, #7
 80084ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	89fa      	ldrh	r2, [r7, #14]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 facf 	bl	8009a5a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80084bc:	e085      	b.n	80085ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	785a      	ldrb	r2, [r3, #1]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	88db      	ldrh	r3, [r3, #6]
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084d4:	6939      	ldr	r1, [r7, #16]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	461a      	mov	r2, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 fae8 	bl	8009ab2 <USBD_CtlPrepareRx>
      break;
 80084e2:	e072      	b.n	80085ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	7850      	ldrb	r0, [r2, #1]
 80084f0:	2200      	movs	r2, #0
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	4798      	blx	r3
      break;
 80084f6:	e068      	b.n	80085ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b0b      	cmp	r3, #11
 80084fe:	d852      	bhi.n	80085a6 <USBD_CDC_Setup+0x162>
 8008500:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <USBD_CDC_Setup+0xc4>)
 8008502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008506:	bf00      	nop
 8008508:	08008539 	.word	0x08008539
 800850c:	080085b5 	.word	0x080085b5
 8008510:	080085a7 	.word	0x080085a7
 8008514:	080085a7 	.word	0x080085a7
 8008518:	080085a7 	.word	0x080085a7
 800851c:	080085a7 	.word	0x080085a7
 8008520:	080085a7 	.word	0x080085a7
 8008524:	080085a7 	.word	0x080085a7
 8008528:	080085a7 	.word	0x080085a7
 800852c:	080085a7 	.word	0x080085a7
 8008530:	08008563 	.word	0x08008563
 8008534:	0800858d 	.word	0x0800858d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b03      	cmp	r3, #3
 8008542:	d107      	bne.n	8008554 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008544:	f107 030a 	add.w	r3, r7, #10
 8008548:	2202      	movs	r2, #2
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fa84 	bl	8009a5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008552:	e032      	b.n	80085ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fa0e 	bl	8009978 <USBD_CtlError>
            ret = USBD_FAIL;
 800855c:	2303      	movs	r3, #3
 800855e:	75fb      	strb	r3, [r7, #23]
          break;
 8008560:	e02b      	b.n	80085ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b03      	cmp	r3, #3
 800856c:	d107      	bne.n	800857e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800856e:	f107 030d 	add.w	r3, r7, #13
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fa6f 	bl	8009a5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800857c:	e01d      	b.n	80085ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f9f9 	bl	8009978 <USBD_CtlError>
            ret = USBD_FAIL;
 8008586:	2303      	movs	r3, #3
 8008588:	75fb      	strb	r3, [r7, #23]
          break;
 800858a:	e016      	b.n	80085ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b03      	cmp	r3, #3
 8008596:	d00f      	beq.n	80085b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f001 f9ec 	bl	8009978 <USBD_CtlError>
            ret = USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085a4:	e008      	b.n	80085b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f9e5 	bl	8009978 <USBD_CtlError>
          ret = USBD_FAIL;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
          break;
 80085b2:	e002      	b.n	80085ba <USBD_CDC_Setup+0x176>
          break;
 80085b4:	bf00      	nop
 80085b6:	e008      	b.n	80085ca <USBD_CDC_Setup+0x186>
          break;
 80085b8:	bf00      	nop
      }
      break;
 80085ba:	e006      	b.n	80085ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 f9da 	bl	8009978 <USBD_CtlError>
      ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	75fb      	strb	r3, [r7, #23]
      break;
 80085c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e04f      	b.n	8008696 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3318      	adds	r3, #24
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d029      	beq.n	8008668 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008614:	78fa      	ldrb	r2, [r7, #3]
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	440b      	add	r3, r1
 8008622:	3318      	adds	r3, #24
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	78f9      	ldrb	r1, [r7, #3]
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	460b      	mov	r3, r1
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4403      	add	r3, r0
 8008634:	3338      	adds	r3, #56	; 0x38
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	fbb2 f1f3 	udiv	r1, r2, r3
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008642:	2b00      	cmp	r3, #0
 8008644:	d110      	bne.n	8008668 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	3318      	adds	r3, #24
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800865a:	78f9      	ldrb	r1, [r7, #3]
 800865c:	2300      	movs	r3, #0
 800865e:	2200      	movs	r2, #0
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 feb5 	bl	800a3d0 <USBD_LL_Transmit>
 8008666:	e015      	b.n	8008694 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	e015      	b.n	80086ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fec5 	bl	800a454 <USBD_LL_GetRxDataSize>
 80086ca:	4602      	mov	r2, r0
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086e6:	4611      	mov	r1, r2
 80086e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008702:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	e01b      	b.n	8008746 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d015      	beq.n	8008744 <USBD_CDC_EP0_RxReady+0x50>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800871e:	2bff      	cmp	r3, #255	; 0xff
 8008720:	d010      	beq.n	8008744 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008730:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008738:	b292      	uxth	r2, r2
 800873a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	22ff      	movs	r2, #255	; 0xff
 8008740:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2243      	movs	r2, #67	; 0x43
 800875c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	; (800876c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	200000a8 	.word	0x200000a8

08008770 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2243      	movs	r2, #67	; 0x43
 800877c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	; (800878c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000064 	.word	0x20000064

08008790 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2243      	movs	r2, #67	; 0x43
 800879c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800879e:	4b03      	ldr	r3, [pc, #12]	; (80087ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	200000ec 	.word	0x200000ec

080087b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	220a      	movs	r2, #10
 80087bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20000020 	.word	0x20000020

080087d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e004      	b.n	80087ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b087      	sub	sp, #28
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	e008      	b.n	800882a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008846:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	e004      	b.n	800885c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008876:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	e01a      	b.n	80088c0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008890:	2b00      	cmp	r3, #0
 8008892:	d114      	bne.n	80088be <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2201      	movs	r2, #1
 8008898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088b2:	2181      	movs	r1, #129	; 0x81
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fd8b 	bl	800a3d0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e016      	b.n	8008914 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7c1b      	ldrb	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f8:	2101      	movs	r1, #1
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fd89 	bl	800a412 <USBD_LL_PrepareReceive>
 8008900:	e007      	b.n	8008912 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	2101      	movs	r1, #1
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fd80 	bl	800a412 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008930:	2303      	movs	r3, #3
 8008932:	e01f      	b.n	8008974 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	79fa      	ldrb	r2, [r7, #7]
 8008966:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f001 fbe7 	bl	800a13c <USBD_LL_Init>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008990:	2303      	movs	r3, #3
 8008992:	e016      	b.n	80089c2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00b      	beq.n	80089c0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	f107 020e 	add.w	r2, r7, #14
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	4602      	mov	r2, r0
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fc12 	bl	800a1fc <USBD_LL_Start>
 80089d8:	4603      	mov	r3, r0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
  }

  return USBD_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 ff46 	bl	8009904 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a94:	f003 031f 	and.w	r3, r3, #31
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d01a      	beq.n	8008ad2 <USBD_LL_SetupStage+0x72>
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d822      	bhi.n	8008ae6 <USBD_LL_SetupStage+0x86>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <USBD_LL_SetupStage+0x4a>
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d00a      	beq.n	8008abe <USBD_LL_SetupStage+0x5e>
 8008aa8:	e01d      	b.n	8008ae6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9ee 	bl	8008e94 <USBD_StdDevReq>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
      break;
 8008abc:	e020      	b.n	8008b00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa52 	bl	8008f70 <USBD_StdItfReq>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad0:	e016      	b.n	8008b00 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa91 	bl	8009002 <USBD_StdEPReq>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae4:	e00c      	b.n	8008b00 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 fbe1 	bl	800a2bc <USBD_LL_StallEP>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]
      break;
 8008afe:	bf00      	nop
  }

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	460b      	mov	r3, r1
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d138      	bne.n	8008b90 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d14a      	bne.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d913      	bls.n	8008b64 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf28      	it	cs
 8008b56:	4613      	movcs	r3, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 ffc5 	bl	8009aec <USBD_CtlContinueRx>
 8008b62:	e030      	b.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d10b      	bne.n	8008b88 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 ffc0 	bl	8009b0e <USBD_CtlSendStatus>
 8008b8e:	e01a      	b.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d114      	bne.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00e      	beq.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	7afa      	ldrb	r2, [r7, #11]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	4798      	blx	r3
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	e000      	b.n	8008bc8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d16b      	bne.n	8008cbc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3314      	adds	r3, #20
 8008be8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d156      	bne.n	8008ca2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d914      	bls.n	8008c2a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	1ad2      	subs	r2, r2, r3
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 ff3a 	bl	8009a90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2100      	movs	r1, #0
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f001 fbf5 	bl	800a412 <USBD_LL_PrepareReceive>
 8008c28:	e03b      	b.n	8008ca2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d11c      	bne.n	8008c70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d316      	bcc.n	8008c70 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d20f      	bcs.n	8008c70 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c50:	2200      	movs	r2, #0
 8008c52:	2100      	movs	r1, #0
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 ff1b 	bl	8009a90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c62:	2300      	movs	r3, #0
 8008c64:	2200      	movs	r2, #0
 8008c66:	2100      	movs	r1, #0
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f001 fbd2 	bl	800a412 <USBD_LL_PrepareReceive>
 8008c6e:	e018      	b.n	8008ca2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d10b      	bne.n	8008c94 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c94:	2180      	movs	r1, #128	; 0x80
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f001 fb10 	bl	800a2bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 ff49 	bl	8009b34 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d122      	bne.n	8008cf2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff fe98 	bl	80089e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cba:	e01a      	b.n	8008cf2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d114      	bne.n	8008cf2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00e      	beq.n	8008cf2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	7afa      	ldrb	r2, [r7, #11]
 8008cde:	4611      	mov	r1, r2
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	4798      	blx	r3
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	e000      	b.n	8008cf4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e02f      	b.n	8008d90 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00f      	beq.n	8008d5a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6852      	ldr	r2, [r2, #4]
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	4611      	mov	r1, r2
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d5a:	2340      	movs	r3, #64	; 0x40
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fa66 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2240      	movs	r2, #64	; 0x40
 8008d72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2180      	movs	r1, #128	; 0x80
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fa58 	bl	800a232 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2240      	movs	r2, #64	; 0x40
 8008d8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d106      	bne.n	8008e06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e012      	b.n	8008e50 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d10b      	bne.n	8008e4e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e76:	8a3b      	ldrh	r3, [r7, #16]
 8008e78:	021b      	lsls	r3, r3, #8
 8008e7a:	b21a      	sxth	r2, r3
 8008e7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	b21b      	sxth	r3, r3
 8008e84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e86:	89fb      	ldrh	r3, [r7, #14]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d005      	beq.n	8008eba <USBD_StdDevReq+0x26>
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d853      	bhi.n	8008f5a <USBD_StdDevReq+0xc6>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <USBD_StdDevReq+0x3a>
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	d14f      	bne.n	8008f5a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]
      break;
 8008ecc:	e04a      	b.n	8008f64 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d83b      	bhi.n	8008f4e <USBD_StdDevReq+0xba>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBD_StdDevReq+0x48>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008f45 	.word	0x08008f45
 8008ee4:	08008f4f 	.word	0x08008f4f
 8008ee8:	08008f3b 	.word	0x08008f3b
 8008eec:	08008f4f 	.word	0x08008f4f
 8008ef0:	08008f0f 	.word	0x08008f0f
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f4f 	.word	0x08008f4f
 8008efc:	08008f27 	.word	0x08008f27
 8008f00:	08008f19 	.word	0x08008f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9de 	bl	80092c8 <USBD_GetDescriptor>
          break;
 8008f0c:	e024      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb6d 	bl	80095f0 <USBD_SetAddress>
          break;
 8008f16:	e01f      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fbac 	bl	8009678 <USBD_SetConfig>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]
          break;
 8008f24:	e018      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc4b 	bl	80097c4 <USBD_GetConfig>
          break;
 8008f2e:	e013      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fc7c 	bl	8009830 <USBD_GetStatus>
          break;
 8008f38:	e00e      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fcab 	bl	8009898 <USBD_SetFeature>
          break;
 8008f42:	e009      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fcba 	bl	80098c0 <USBD_ClrFeature>
          break;
 8008f4c:	e004      	b.n	8008f58 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fd11 	bl	8009978 <USBD_CtlError>
          break;
 8008f56:	bf00      	nop
      }
      break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd0b 	bl	8009978 <USBD_CtlError>
      break;
 8008f62:	bf00      	nop
  }

  return ret;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop

08008f70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f86:	2b40      	cmp	r3, #64	; 0x40
 8008f88:	d005      	beq.n	8008f96 <USBD_StdItfReq+0x26>
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d82f      	bhi.n	8008fee <USBD_StdItfReq+0x7e>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <USBD_StdItfReq+0x26>
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d12b      	bne.n	8008fee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d81d      	bhi.n	8008fe0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	889b      	ldrh	r3, [r3, #4]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d813      	bhi.n	8008fd6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d110      	bne.n	8008fea <USBD_StdItfReq+0x7a>
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10d      	bne.n	8008fea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fd9d 	bl	8009b0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fd4:	e009      	b.n	8008fea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fccd 	bl	8009978 <USBD_CtlError>
          break;
 8008fde:	e004      	b.n	8008fea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fcc8 	bl	8009978 <USBD_CtlError>
          break;
 8008fe8:	e000      	b.n	8008fec <USBD_StdItfReq+0x7c>
          break;
 8008fea:	bf00      	nop
      }
      break;
 8008fec:	e004      	b.n	8008ff8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fcc1 	bl	8009978 <USBD_CtlError>
      break;
 8008ff6:	bf00      	nop
  }

  return ret;
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	889b      	ldrh	r3, [r3, #4]
 8009014:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	d007      	beq.n	8009032 <USBD_StdEPReq+0x30>
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	f200 8145 	bhi.w	80092b2 <USBD_StdEPReq+0x2b0>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00c      	beq.n	8009046 <USBD_StdEPReq+0x44>
 800902c:	2b20      	cmp	r3, #32
 800902e:	f040 8140 	bne.w	80092b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]
      break;
 8009044:	e13a      	b.n	80092bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	2b03      	cmp	r3, #3
 800904c:	d007      	beq.n	800905e <USBD_StdEPReq+0x5c>
 800904e:	2b03      	cmp	r3, #3
 8009050:	f300 8129 	bgt.w	80092a6 <USBD_StdEPReq+0x2a4>
 8009054:	2b00      	cmp	r3, #0
 8009056:	d07f      	beq.n	8009158 <USBD_StdEPReq+0x156>
 8009058:	2b01      	cmp	r3, #1
 800905a:	d03c      	beq.n	80090d6 <USBD_StdEPReq+0xd4>
 800905c:	e123      	b.n	80092a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d002      	beq.n	8009070 <USBD_StdEPReq+0x6e>
 800906a:	2b03      	cmp	r3, #3
 800906c:	d016      	beq.n	800909c <USBD_StdEPReq+0x9a>
 800906e:	e02c      	b.n	80090ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <USBD_StdEPReq+0x90>
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d00a      	beq.n	8009092 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 f91b 	bl	800a2bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009086:	2180      	movs	r1, #128	; 0x80
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f917 	bl	800a2bc <USBD_LL_StallEP>
 800908e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009090:	e020      	b.n	80090d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc6f 	bl	8009978 <USBD_CtlError>
              break;
 800909a:	e01b      	b.n	80090d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	885b      	ldrh	r3, [r3, #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10e      	bne.n	80090c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <USBD_StdEPReq+0xc0>
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b80      	cmp	r3, #128	; 0x80
 80090ae:	d008      	beq.n	80090c2 <USBD_StdEPReq+0xc0>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	88db      	ldrh	r3, [r3, #6]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f8fd 	bl	800a2bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fd23 	bl	8009b0e <USBD_CtlSendStatus>

              break;
 80090c8:	e004      	b.n	80090d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fc53 	bl	8009978 <USBD_CtlError>
              break;
 80090d2:	bf00      	nop
          }
          break;
 80090d4:	e0ec      	b.n	80092b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d002      	beq.n	80090e8 <USBD_StdEPReq+0xe6>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d016      	beq.n	8009114 <USBD_StdEPReq+0x112>
 80090e6:	e030      	b.n	800914a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00d      	beq.n	800910a <USBD_StdEPReq+0x108>
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	2b80      	cmp	r3, #128	; 0x80
 80090f2:	d00a      	beq.n	800910a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 f8df 	bl	800a2bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f8db 	bl	800a2bc <USBD_LL_StallEP>
 8009106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009108:	e025      	b.n	8009156 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc33 	bl	8009978 <USBD_CtlError>
              break;
 8009112:	e020      	b.n	8009156 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	885b      	ldrh	r3, [r3, #2]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11b      	bne.n	8009154 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009122:	2b00      	cmp	r3, #0
 8009124:	d004      	beq.n	8009130 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 f8e5 	bl	800a2fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fcec 	bl	8009b0e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009148:	e004      	b.n	8009154 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc13 	bl	8009978 <USBD_CtlError>
              break;
 8009152:	e000      	b.n	8009156 <USBD_StdEPReq+0x154>
              break;
 8009154:	bf00      	nop
          }
          break;
 8009156:	e0ab      	b.n	80092b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d002      	beq.n	800916a <USBD_StdEPReq+0x168>
 8009164:	2b03      	cmp	r3, #3
 8009166:	d032      	beq.n	80091ce <USBD_StdEPReq+0x1cc>
 8009168:	e097      	b.n	800929a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d007      	beq.n	8009180 <USBD_StdEPReq+0x17e>
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b80      	cmp	r3, #128	; 0x80
 8009174:	d004      	beq.n	8009180 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fbfd 	bl	8009978 <USBD_CtlError>
                break;
 800917e:	e091      	b.n	80092a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da0b      	bge.n	80091a0 <USBD_StdEPReq+0x19e>
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	3310      	adds	r3, #16
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	4413      	add	r3, r2
 800919c:	3304      	adds	r3, #4
 800919e:	e00b      	b.n	80091b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	3304      	adds	r3, #4
 80091b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2202      	movs	r2, #2
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc47 	bl	8009a5a <USBD_CtlSendData>
              break;
 80091cc:	e06a      	b.n	80092a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	da11      	bge.n	80091fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	f003 020f 	and.w	r2, r3, #15
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3324      	adds	r3, #36	; 0x24
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d117      	bne.n	8009220 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fbc0 	bl	8009978 <USBD_CtlError>
                  break;
 80091f8:	e054      	b.n	80092a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	f003 020f 	and.w	r2, r3, #15
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fbad 	bl	8009978 <USBD_CtlError>
                  break;
 800921e:	e041      	b.n	80092a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009224:	2b00      	cmp	r3, #0
 8009226:	da0b      	bge.n	8009240 <USBD_StdEPReq+0x23e>
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	3310      	adds	r3, #16
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	4413      	add	r3, r2
 800923c:	3304      	adds	r3, #4
 800923e:	e00b      	b.n	8009258 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	4413      	add	r3, r2
 8009256:	3304      	adds	r3, #4
 8009258:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <USBD_StdEPReq+0x264>
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b80      	cmp	r3, #128	; 0x80
 8009264:	d103      	bne.n	800926e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e00e      	b.n	800928c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f860 	bl	800a338 <USBD_LL_IsStallEP>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	e002      	b.n	800928c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2202      	movs	r2, #2
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fbe1 	bl	8009a5a <USBD_CtlSendData>
              break;
 8009298:	e004      	b.n	80092a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fb6b 	bl	8009978 <USBD_CtlError>
              break;
 80092a2:	bf00      	nop
          }
          break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb65 	bl	8009978 <USBD_CtlError>
          break;
 80092ae:	bf00      	nop
      }
      break;
 80092b0:	e004      	b.n	80092bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fb5f 	bl	8009978 <USBD_CtlError>
      break;
 80092ba:	bf00      	nop
  }

  return ret;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b0e      	cmp	r3, #14
 80092ea:	f200 8152 	bhi.w	8009592 <USBD_GetDescriptor+0x2ca>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_GetDescriptor+0x2c>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009365 	.word	0x08009365
 80092f8:	0800937d 	.word	0x0800937d
 80092fc:	080093bd 	.word	0x080093bd
 8009300:	08009593 	.word	0x08009593
 8009304:	08009593 	.word	0x08009593
 8009308:	08009533 	.word	0x08009533
 800930c:	0800955f 	.word	0x0800955f
 8009310:	08009593 	.word	0x08009593
 8009314:	08009593 	.word	0x08009593
 8009318:	08009593 	.word	0x08009593
 800931c:	08009593 	.word	0x08009593
 8009320:	08009593 	.word	0x08009593
 8009324:	08009593 	.word	0x08009593
 8009328:	08009593 	.word	0x08009593
 800932c:	08009331 	.word	0x08009331
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009352:	e126      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb0e 	bl	8009978 <USBD_CtlError>
        err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
      break;
 8009362:	e11e      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
      break;
 800937a:	e112      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7c1b      	ldrb	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10d      	bne.n	80093a0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	f107 0208 	add.w	r2, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	2202      	movs	r2, #2
 800939c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800939e:	e100      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f107 0208 	add.w	r2, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	2202      	movs	r2, #2
 80093b8:	701a      	strb	r2, [r3, #0]
      break;
 80093ba:	e0f2      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	885b      	ldrh	r3, [r3, #2]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	f200 80ac 	bhi.w	8009520 <USBD_GetDescriptor+0x258>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <USBD_GetDescriptor+0x108>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093e9 	.word	0x080093e9
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	08009451 	.word	0x08009451
 80093dc:	08009485 	.word	0x08009485
 80093e0:	080094b9 	.word	0x080094b9
 80093e4:	080094ed 	.word	0x080094ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7c12      	ldrb	r2, [r2, #16]
 8009400:	f107 0108 	add.w	r1, r7, #8
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
 8009408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800940a:	e091      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fab2 	bl	8009978 <USBD_CtlError>
            err++;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	3301      	adds	r3, #1
 8009418:	72fb      	strb	r3, [r7, #11]
          break;
 800941a:	e089      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	7c12      	ldrb	r2, [r2, #16]
 8009434:	f107 0108 	add.w	r1, r7, #8
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
 800943c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943e:	e077      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa98 	bl	8009978 <USBD_CtlError>
            err++;
 8009448:	7afb      	ldrb	r3, [r7, #11]
 800944a:	3301      	adds	r3, #1
 800944c:	72fb      	strb	r3, [r7, #11]
          break;
 800944e:	e06f      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	7c12      	ldrb	r2, [r2, #16]
 8009468:	f107 0108 	add.w	r1, r7, #8
 800946c:	4610      	mov	r0, r2
 800946e:	4798      	blx	r3
 8009470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009472:	e05d      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa7e 	bl	8009978 <USBD_CtlError>
            err++;
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	3301      	adds	r3, #1
 8009480:	72fb      	strb	r3, [r7, #11]
          break;
 8009482:	e055      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	7c12      	ldrb	r2, [r2, #16]
 800949c:	f107 0108 	add.w	r1, r7, #8
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
 80094a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094a6:	e043      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa64 	bl	8009978 <USBD_CtlError>
            err++;
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	3301      	adds	r3, #1
 80094b4:	72fb      	strb	r3, [r7, #11]
          break;
 80094b6:	e03b      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7c12      	ldrb	r2, [r2, #16]
 80094d0:	f107 0108 	add.w	r1, r7, #8
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094da:	e029      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa4a 	bl	8009978 <USBD_CtlError>
            err++;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	3301      	adds	r3, #1
 80094e8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ea:	e021      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 0108 	add.w	r1, r7, #8
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800950e:	e00f      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa30 	bl	8009978 <USBD_CtlError>
            err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
          break;
 800951e:	e007      	b.n	8009530 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa28 	bl	8009978 <USBD_CtlError>
          err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800952e:	bf00      	nop
      }
      break;
 8009530:	e037      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7c1b      	ldrb	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	f107 0208 	add.w	r2, r7, #8
 8009546:	4610      	mov	r0, r2
 8009548:	4798      	blx	r3
 800954a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800954c:	e029      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa11 	bl	8009978 <USBD_CtlError>
        err++;
 8009556:	7afb      	ldrb	r3, [r7, #11]
 8009558:	3301      	adds	r3, #1
 800955a:	72fb      	strb	r3, [r7, #11]
      break;
 800955c:	e021      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7c1b      	ldrb	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10d      	bne.n	8009582 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	f107 0208 	add.w	r2, r7, #8
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
 8009576:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	2207      	movs	r2, #7
 800957e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009580:	e00f      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9f7 	bl	8009978 <USBD_CtlError>
        err++;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	3301      	adds	r3, #1
 800958e:	72fb      	strb	r3, [r7, #11]
      break;
 8009590:	e007      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f9ef 	bl	8009978 <USBD_CtlError>
      err++;
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	3301      	adds	r3, #1
 800959e:	72fb      	strb	r3, [r7, #11]
      break;
 80095a0:	bf00      	nop
  }

  if (err != 0U)
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11e      	bne.n	80095e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	88db      	ldrh	r3, [r3, #6]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d016      	beq.n	80095de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095b0:	893b      	ldrh	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00e      	beq.n	80095d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88da      	ldrh	r2, [r3, #6]
 80095ba:	893b      	ldrh	r3, [r7, #8]
 80095bc:	4293      	cmp	r3, r2
 80095be:	bf28      	it	cs
 80095c0:	4613      	movcs	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	461a      	mov	r2, r3
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa44 	bl	8009a5a <USBD_CtlSendData>
 80095d2:	e009      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9ce 	bl	8009978 <USBD_CtlError>
 80095dc:	e004      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fa95 	bl	8009b0e <USBD_CtlSendStatus>
 80095e4:	e000      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    return;
 80095e6:	bf00      	nop
  }
}
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop

080095f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	889b      	ldrh	r3, [r3, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d131      	bne.n	8009666 <USBD_SetAddress+0x76>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d12d      	bne.n	8009666 <USBD_SetAddress+0x76>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	2b7f      	cmp	r3, #127	; 0x7f
 8009610:	d829      	bhi.n	8009666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800961c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b03      	cmp	r3, #3
 8009628:	d104      	bne.n	8009634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9a3 	bl	8009978 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009632:	e01d      	b.n	8009670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7bfa      	ldrb	r2, [r7, #15]
 8009638:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fea6 	bl	800a392 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa61 	bl	8009b0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	e009      	b.n	8009670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009664:	e004      	b.n	8009670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f985 	bl	8009978 <USBD_CtlError>
  }
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	885b      	ldrh	r3, [r3, #2]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	4b4c      	ldr	r3, [pc, #304]	; (80097c0 <USBD_SetConfig+0x148>)
 800968e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009690:	4b4b      	ldr	r3, [pc, #300]	; (80097c0 <USBD_SetConfig+0x148>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d905      	bls.n	80096a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f96c 	bl	8009978 <USBD_CtlError>
    return USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e088      	b.n	80097b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d002      	beq.n	80096b6 <USBD_SetConfig+0x3e>
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d025      	beq.n	8009700 <USBD_SetConfig+0x88>
 80096b4:	e071      	b.n	800979a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096b6:	4b42      	ldr	r3, [pc, #264]	; (80097c0 <USBD_SetConfig+0x148>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01c      	beq.n	80096f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80096be:	4b40      	ldr	r3, [pc, #256]	; (80097c0 <USBD_SetConfig+0x148>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096c8:	4b3d      	ldr	r3, [pc, #244]	; (80097c0 <USBD_SetConfig+0x148>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff f992 	bl	80089f8 <USBD_SetClassConfig>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f949 	bl	8009978 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096e6:	e065      	b.n	80097b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa10 	bl	8009b0e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2203      	movs	r2, #3
 80096f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096f6:	e05d      	b.n	80097b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa08 	bl	8009b0e <USBD_CtlSendStatus>
      break;
 80096fe:	e059      	b.n	80097b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009700:	4b2f      	ldr	r3, [pc, #188]	; (80097c0 <USBD_SetConfig+0x148>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d112      	bne.n	800972e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009710:	4b2b      	ldr	r3, [pc, #172]	; (80097c0 <USBD_SetConfig+0x148>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800971a:	4b29      	ldr	r3, [pc, #164]	; (80097c0 <USBD_SetConfig+0x148>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff f985 	bl	8008a30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f9f1 	bl	8009b0e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800972c:	e042      	b.n	80097b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <USBD_SetConfig+0x148>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d02a      	beq.n	8009792 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff f973 	bl	8008a30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <USBD_SetConfig+0x148>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009754:	4b1a      	ldr	r3, [pc, #104]	; (80097c0 <USBD_SetConfig+0x148>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff f94c 	bl	80089f8 <USBD_SetClassConfig>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00f      	beq.n	800978a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f903 	bl	8009978 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff f958 	bl	8008a30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009788:	e014      	b.n	80097b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9bf 	bl	8009b0e <USBD_CtlSendStatus>
      break;
 8009790:	e010      	b.n	80097b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f9bb 	bl	8009b0e <USBD_CtlSendStatus>
      break;
 8009798:	e00c      	b.n	80097b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f8eb 	bl	8009978 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097a2:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <USBD_SetConfig+0x148>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff f941 	bl	8008a30 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
      break;
 80097b2:	bf00      	nop
  }

  return ret;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000424 	.word	0x20000424

080097c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d004      	beq.n	80097e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f8cd 	bl	8009978 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097de:	e023      	b.n	8009828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	dc02      	bgt.n	80097f2 <USBD_GetConfig+0x2e>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dc03      	bgt.n	80097f8 <USBD_GetConfig+0x34>
 80097f0:	e015      	b.n	800981e <USBD_GetConfig+0x5a>
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d00b      	beq.n	800980e <USBD_GetConfig+0x4a>
 80097f6:	e012      	b.n	800981e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3308      	adds	r3, #8
 8009802:	2201      	movs	r2, #1
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f927 	bl	8009a5a <USBD_CtlSendData>
        break;
 800980c:	e00c      	b.n	8009828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3304      	adds	r3, #4
 8009812:	2201      	movs	r2, #1
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f91f 	bl	8009a5a <USBD_CtlSendData>
        break;
 800981c:	e004      	b.n	8009828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f8a9 	bl	8009978 <USBD_CtlError>
        break;
 8009826:	bf00      	nop
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	b2db      	uxtb	r3, r3
 8009842:	3b01      	subs	r3, #1
 8009844:	2b02      	cmp	r3, #2
 8009846:	d81e      	bhi.n	8009886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	88db      	ldrh	r3, [r3, #6]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d004      	beq.n	800985a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f890 	bl	8009978 <USBD_CtlError>
        break;
 8009858:	e01a      	b.n	8009890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009866:	2b00      	cmp	r3, #0
 8009868:	d005      	beq.n	8009876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f043 0202 	orr.w	r2, r3, #2
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	330c      	adds	r3, #12
 800987a:	2202      	movs	r2, #2
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f8eb 	bl	8009a5a <USBD_CtlSendData>
      break;
 8009884:	e004      	b.n	8009890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f875 	bl	8009978 <USBD_CtlError>
      break;
 800988e:	bf00      	nop
  }
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	885b      	ldrh	r3, [r3, #2]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d106      	bne.n	80098b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f92b 	bl	8009b0e <USBD_CtlSendStatus>
  }
}
 80098b8:	bf00      	nop
 80098ba:	3708      	adds	r7, #8
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d80b      	bhi.n	80098f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	885b      	ldrh	r3, [r3, #2]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10c      	bne.n	80098fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f910 	bl	8009b0e <USBD_CtlSendStatus>
      }
      break;
 80098ee:	e004      	b.n	80098fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f840 	bl	8009978 <USBD_CtlError>
      break;
 80098f8:	e000      	b.n	80098fc <USBD_ClrFeature+0x3c>
      break;
 80098fa:	bf00      	nop
  }
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3301      	adds	r3, #1
 800991e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781a      	ldrb	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7ff fa92 	bl	8008e58 <SWAPBYTE>
 8009934:	4603      	mov	r3, r0
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f7ff fa85 	bl	8008e58 <SWAPBYTE>
 800994e:	4603      	mov	r3, r0
 8009950:	461a      	mov	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3301      	adds	r3, #1
 800995a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3301      	adds	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fa78 	bl	8008e58 <SWAPBYTE>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	80da      	strh	r2, [r3, #6]
}
 8009970:	bf00      	nop
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fc99 	bl	800a2bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fc95 	bl	800a2bc <USBD_LL_StallEP>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d036      	beq.n	8009a1e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099b4:	6938      	ldr	r0, [r7, #16]
 80099b6:	f000 f836 	bl	8009a26 <USBD_GetLen>
 80099ba:	4603      	mov	r3, r0
 80099bc:	3301      	adds	r3, #1
 80099be:	b29b      	uxth	r3, r3
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	4413      	add	r3, r2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	7812      	ldrb	r2, [r2, #0]
 80099d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	3301      	adds	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4413      	add	r3, r2
 80099e0:	2203      	movs	r2, #3
 80099e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	3301      	adds	r3, #1
 80099e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099ea:	e013      	b.n	8009a14 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	3301      	adds	r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
    idx++;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	3301      	adds	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4413      	add	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	3301      	adds	r3, #1
 8009a12:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e7      	bne.n	80099ec <USBD_GetString+0x52>
 8009a1c:	e000      	b.n	8009a20 <USBD_GetString+0x86>
    return;
 8009a1e:	bf00      	nop
  }
}
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a36:	e005      	b.n	8009a44 <USBD_GetLen+0x1e>
  {
    len++;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f5      	bne.n	8009a38 <USBD_GetLen+0x12>
  }

  return len;
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2202      	movs	r2, #2
 8009a6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	2100      	movs	r1, #0
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 fca5 	bl	800a3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 fc94 	bl	800a3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	2100      	movs	r1, #0
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fc98 	bl	800a412 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	2100      	movs	r1, #0
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 fc87 	bl	800a412 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2204      	movs	r2, #4
 8009b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fc53 	bl	800a3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2205      	movs	r2, #5
 8009b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b44:	2300      	movs	r3, #0
 8009b46:	2200      	movs	r2, #0
 8009b48:	2100      	movs	r1, #0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 fc61 	bl	800a412 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b60:	2200      	movs	r2, #0
 8009b62:	4912      	ldr	r1, [pc, #72]	; (8009bac <MX_USB_Device_Init+0x50>)
 8009b64:	4812      	ldr	r0, [pc, #72]	; (8009bb0 <MX_USB_Device_Init+0x54>)
 8009b66:	f7fe fed9 	bl	800891c <USBD_Init>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b70:	f7f7 fa6a 	bl	8001048 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b74:	490f      	ldr	r1, [pc, #60]	; (8009bb4 <MX_USB_Device_Init+0x58>)
 8009b76:	480e      	ldr	r0, [pc, #56]	; (8009bb0 <MX_USB_Device_Init+0x54>)
 8009b78:	f7fe ff00 	bl	800897c <USBD_RegisterClass>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b82:	f7f7 fa61 	bl	8001048 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b86:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <MX_USB_Device_Init+0x5c>)
 8009b88:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <MX_USB_Device_Init+0x54>)
 8009b8a:	f7fe fe21 	bl	80087d0 <USBD_CDC_RegisterInterface>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009b94:	f7f7 fa58 	bl	8001048 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009b98:	4805      	ldr	r0, [pc, #20]	; (8009bb0 <MX_USB_Device_Init+0x54>)
 8009b9a:	f7fe ff16 	bl	80089ca <USBD_Start>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009ba4:	f7f7 fa50 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009ba8:	bf00      	nop
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000144 	.word	0x20000144
 8009bb0:	20000428 	.word	0x20000428
 8009bb4:	2000002c 	.word	0x2000002c
 8009bb8:	20000130 	.word	0x20000130

08009bbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4905      	ldr	r1, [pc, #20]	; (8009bd8 <CDC_Init_FS+0x1c>)
 8009bc4:	4805      	ldr	r0, [pc, #20]	; (8009bdc <CDC_Init_FS+0x20>)
 8009bc6:	f7fe fe18 	bl	80087fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bca:	4905      	ldr	r1, [pc, #20]	; (8009be0 <CDC_Init_FS+0x24>)
 8009bcc:	4803      	ldr	r0, [pc, #12]	; (8009bdc <CDC_Init_FS+0x20>)
 8009bce:	f7fe fe32 	bl	8008836 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000ae0 	.word	0x20000ae0
 8009bdc:	20000428 	.word	0x20000428
 8009be0:	200006f8 	.word	0x200006f8

08009be4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009be4:	b480      	push	{r7}
 8009be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009be8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	71fb      	strb	r3, [r7, #7]
 8009c00:	4613      	mov	r3, r2
 8009c02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	2b23      	cmp	r3, #35	; 0x23
 8009c08:	d84a      	bhi.n	8009ca0 <CDC_Control_FS+0xac>
 8009c0a:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <CDC_Control_FS+0x1c>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009ca1 	.word	0x08009ca1
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009ca1 	.word	0x08009ca1
 8009c1c:	08009ca1 	.word	0x08009ca1
 8009c20:	08009ca1 	.word	0x08009ca1
 8009c24:	08009ca1 	.word	0x08009ca1
 8009c28:	08009ca1 	.word	0x08009ca1
 8009c2c:	08009ca1 	.word	0x08009ca1
 8009c30:	08009ca1 	.word	0x08009ca1
 8009c34:	08009ca1 	.word	0x08009ca1
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009ca1 	.word	0x08009ca1
 8009c40:	08009ca1 	.word	0x08009ca1
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009ca1 	.word	0x08009ca1
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009ca1 	.word	0x08009ca1
 8009c54:	08009ca1 	.word	0x08009ca1
 8009c58:	08009ca1 	.word	0x08009ca1
 8009c5c:	08009ca1 	.word	0x08009ca1
 8009c60:	08009ca1 	.word	0x08009ca1
 8009c64:	08009ca1 	.word	0x08009ca1
 8009c68:	08009ca1 	.word	0x08009ca1
 8009c6c:	08009ca1 	.word	0x08009ca1
 8009c70:	08009ca1 	.word	0x08009ca1
 8009c74:	08009ca1 	.word	0x08009ca1
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ca1 	.word	0x08009ca1
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009ca1 	.word	0x08009ca1
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009ca1 	.word	0x08009ca1
 8009c98:	08009ca1 	.word	0x08009ca1
 8009c9c:	08009ca1 	.word	0x08009ca1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ca0:	bf00      	nop
  }

  return (USBD_OK);
 8009ca2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7f6 fac7 	bl	8000250 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4805      	ldr	r0, [pc, #20]	; (8009cdc <CDC_Receive_FS+0x2c>)
 8009cc6:	f7fe fdb6 	bl	8008836 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cca:	4804      	ldr	r0, [pc, #16]	; (8009cdc <CDC_Receive_FS+0x2c>)
 8009ccc:	f7fe fdfc 	bl	80088c8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009cd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000428 	.word	0x20000428

08009ce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cf0:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <CDC_Transmit_FS+0x48>)
 8009cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e00b      	b.n	8009d1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d06:	887b      	ldrh	r3, [r7, #2]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6879      	ldr	r1, [r7, #4]
 8009d0c:	4806      	ldr	r0, [pc, #24]	; (8009d28 <CDC_Transmit_FS+0x48>)
 8009d0e:	f7fe fd74 	bl	80087fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d12:	4805      	ldr	r0, [pc, #20]	; (8009d28 <CDC_Transmit_FS+0x48>)
 8009d14:	f7fe fda8 	bl	8008868 <USBD_CDC_TransmitPacket>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000428 	.word	0x20000428

08009d2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	4613      	mov	r3, r2
 8009d38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
	...

08009d50 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2212      	movs	r2, #18
 8009d60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d62:	4b03      	ldr	r3, [pc, #12]	; (8009d70 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20000164 	.word	0x20000164

08009d74 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	6039      	str	r1, [r7, #0]
 8009d7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	2204      	movs	r2, #4
 8009d84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d86:	4b03      	ldr	r3, [pc, #12]	; (8009d94 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20000178 	.word	0x20000178

08009d98 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da4:	79fb      	ldrb	r3, [r7, #7]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4907      	ldr	r1, [pc, #28]	; (8009dcc <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dae:	4808      	ldr	r0, [pc, #32]	; (8009dd0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009db0:	f7ff fdf3 	bl	800999a <USBD_GetString>
 8009db4:	e004      	b.n	8009dc0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	4904      	ldr	r1, [pc, #16]	; (8009dcc <USBD_CDC_ProductStrDescriptor+0x34>)
 8009dba:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009dbc:	f7ff fded 	bl	800999a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000ec8 	.word	0x20000ec8
 8009dd0:	0800a608 	.word	0x0800a608

08009dd4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	4904      	ldr	r1, [pc, #16]	; (8009df4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009de4:	4804      	ldr	r0, [pc, #16]	; (8009df8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009de6:	f7ff fdd8 	bl	800999a <USBD_GetString>
  return USBD_StrDesc;
 8009dea:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000ec8 	.word	0x20000ec8
 8009df8:	0800a620 	.word	0x0800a620

08009dfc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	6039      	str	r1, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	221a      	movs	r2, #26
 8009e0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e0e:	f000 f843 	bl	8009e98 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e12:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	2000017c 	.word	0x2000017c

08009e20 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d105      	bne.n	8009e3e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	4907      	ldr	r1, [pc, #28]	; (8009e54 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e36:	4808      	ldr	r0, [pc, #32]	; (8009e58 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e38:	f7ff fdaf 	bl	800999a <USBD_GetString>
 8009e3c:	e004      	b.n	8009e48 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	4904      	ldr	r1, [pc, #16]	; (8009e54 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e42:	4805      	ldr	r0, [pc, #20]	; (8009e58 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e44:	f7ff fda9 	bl	800999a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e48:	4b02      	ldr	r3, [pc, #8]	; (8009e54 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000ec8 	.word	0x20000ec8
 8009e58:	0800a634 	.word	0x0800a634

08009e5c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e68:	79fb      	ldrb	r3, [r7, #7]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d105      	bne.n	8009e7a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4907      	ldr	r1, [pc, #28]	; (8009e90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e72:	4808      	ldr	r0, [pc, #32]	; (8009e94 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e74:	f7ff fd91 	bl	800999a <USBD_GetString>
 8009e78:	e004      	b.n	8009e84 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4904      	ldr	r1, [pc, #16]	; (8009e90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e7e:	4805      	ldr	r0, [pc, #20]	; (8009e94 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e80:	f7ff fd8b 	bl	800999a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e84:	4b02      	ldr	r3, [pc, #8]	; (8009e90 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000ec8 	.word	0x20000ec8
 8009e94:	0800a640 	.word	0x0800a640

08009e98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <Get_SerialNum+0x44>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	; (8009ee0 <Get_SerialNum+0x48>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <Get_SerialNum+0x4c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d009      	beq.n	8009ed2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ebe:	2208      	movs	r2, #8
 8009ec0:	4909      	ldr	r1, [pc, #36]	; (8009ee8 <Get_SerialNum+0x50>)
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f814 	bl	8009ef0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ec8:	2204      	movs	r2, #4
 8009eca:	4908      	ldr	r1, [pc, #32]	; (8009eec <Get_SerialNum+0x54>)
 8009ecc:	68b8      	ldr	r0, [r7, #8]
 8009ece:	f000 f80f 	bl	8009ef0 <IntToUnicode>
  }
}
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	1fff7590 	.word	0x1fff7590
 8009ee0:	1fff7594 	.word	0x1fff7594
 8009ee4:	1fff7598 	.word	0x1fff7598
 8009ee8:	2000017e 	.word	0x2000017e
 8009eec:	2000018e 	.word	0x2000018e

08009ef0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
 8009f06:	e027      	b.n	8009f58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	0f1b      	lsrs	r3, r3, #28
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d80b      	bhi.n	8009f28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	0f1b      	lsrs	r3, r3, #28
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	440b      	add	r3, r1
 8009f20:	3230      	adds	r2, #48	; 0x30
 8009f22:	b2d2      	uxtb	r2, r2
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	e00a      	b.n	8009f3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	0f1b      	lsrs	r3, r3, #28
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	005b      	lsls	r3, r3, #1
 8009f32:	4619      	mov	r1, r3
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	440b      	add	r3, r1
 8009f38:	3237      	adds	r2, #55	; 0x37
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	3301      	adds	r3, #1
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	3301      	adds	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
 8009f58:	7dfa      	ldrb	r2, [r7, #23]
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d3d3      	bcc.n	8009f08 <IntToUnicode+0x18>
  }
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	371c      	adds	r7, #28
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b094      	sub	sp, #80	; 0x50
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f78:	f107 030c 	add.w	r3, r7, #12
 8009f7c:	2244      	movs	r2, #68	; 0x44
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fb2d 	bl	800a5e0 <memset>
  if(pcdHandle->Instance==USB)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <HAL_PCD_MspInit+0x70>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d122      	bne.n	8009fd6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f94:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f96:	2300      	movs	r3, #0
 8009f98:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fa f8de 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009faa:	f7f7 f84d 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <HAL_PCD_MspInit+0x74>)
 8009fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb2:	4a0c      	ldr	r2, [pc, #48]	; (8009fe4 <HAL_PCD_MspInit+0x74>)
 8009fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8009fba:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <HAL_PCD_MspInit+0x74>)
 8009fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fc2:	60bb      	str	r3, [r7, #8]
 8009fc4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2100      	movs	r1, #0
 8009fca:	2014      	movs	r0, #20
 8009fcc:	f7f7 fc0d 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fd0:	2014      	movs	r0, #20
 8009fd2:	f7f7 fc24 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	3750      	adds	r7, #80	; 0x50
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	40005c00 	.word	0x40005c00
 8009fe4:	40021000 	.word	0x40021000

08009fe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f7fe fd2e 	bl	8008a60 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	440b      	add	r3, r1
 800a02c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	4619      	mov	r1, r3
 800a036:	f7fe fd68 	bl	8008b0a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a03a:	bf00      	nop
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	440b      	add	r3, r1
 800a062:	333c      	adds	r3, #60	; 0x3c
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	4619      	mov	r1, r3
 800a06a:	f7fe fdb1 	bl	8008bd0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fec5 	bl	8008e14 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a08a:	bf00      	nop
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d001      	beq.n	800a0aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0a6:	f7f6 ffcf 	bl	8001048 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0b0:	7bfa      	ldrb	r2, [r7, #15]
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe fe6f 	bl	8008d98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe fe1b 	bl	8008cfc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0c6:	bf00      	nop
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fe6a 	bl	8008db8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <HAL_PCD_SuspendCallback+0x30>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4a03      	ldr	r2, [pc, #12]	; (800a100 <HAL_PCD_SuspendCallback+0x30>)
 800a0f2:	f043 0306 	orr.w	r3, r3, #6
 800a0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0f8:	bf00      	nop
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	e000ed00 	.word	0xe000ed00

0800a104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a114:	4b08      	ldr	r3, [pc, #32]	; (800a138 <HAL_PCD_ResumeCallback+0x34>)
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	4a07      	ldr	r2, [pc, #28]	; (800a138 <HAL_PCD_ResumeCallback+0x34>)
 800a11a:	f023 0306 	bic.w	r3, r3, #6
 800a11e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a120:	f000 f9fa 	bl	800a518 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fe5a 	bl	8008de4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	e000ed00 	.word	0xe000ed00

0800a13c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a144:	4a2b      	ldr	r2, [pc, #172]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a29      	ldr	r2, [pc, #164]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a150:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a154:	4b27      	ldr	r3, [pc, #156]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a156:	4a28      	ldr	r2, [pc, #160]	; (800a1f8 <USBD_LL_Init+0xbc>)
 800a158:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a15a:	4b26      	ldr	r3, [pc, #152]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a15c:	2208      	movs	r2, #8
 800a15e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a160:	4b24      	ldr	r3, [pc, #144]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a162:	2202      	movs	r2, #2
 800a164:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a166:	4b23      	ldr	r3, [pc, #140]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a168:	2202      	movs	r2, #2
 800a16a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a16c:	4b21      	ldr	r3, [pc, #132]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a16e:	2200      	movs	r2, #0
 800a170:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a172:	4b20      	ldr	r3, [pc, #128]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a174:	2200      	movs	r2, #0
 800a176:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a17e:	4b1d      	ldr	r3, [pc, #116]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a180:	2200      	movs	r2, #0
 800a182:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a184:	481b      	ldr	r0, [pc, #108]	; (800a1f4 <USBD_LL_Init+0xb8>)
 800a186:	f7f7 fd17 	bl	8001bb8 <HAL_PCD_Init>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a190:	f7f6 ff5a 	bl	8001048 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a19a:	2318      	movs	r3, #24
 800a19c:	2200      	movs	r2, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f7f9 f9d0 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1aa:	2358      	movs	r3, #88	; 0x58
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	f7f9 f9c8 	bl	8003544 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1ba:	23c0      	movs	r3, #192	; 0xc0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2181      	movs	r1, #129	; 0x81
 800a1c0:	f7f9 f9c0 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	f7f9 f9b7 	bl	8003544 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2182      	movs	r1, #130	; 0x82
 800a1e4:	f7f9 f9ae 	bl	8003544 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	200010c8 	.word	0x200010c8
 800a1f8:	40005c00 	.word	0x40005c00

0800a1fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a212:	4618      	mov	r0, r3
 800a214:	f7f7 fdb5 	bl	8001d82 <HAL_PCD_Start>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 f980 	bl	800a524 <USBD_Get_USB_Status>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a228:	7bbb      	ldrb	r3, [r7, #14]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	461a      	mov	r2, r3
 800a240:	4603      	mov	r3, r0
 800a242:	70fb      	strb	r3, [r7, #3]
 800a244:	460b      	mov	r3, r1
 800a246:	70bb      	strb	r3, [r7, #2]
 800a248:	4613      	mov	r3, r2
 800a24a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a25a:	78bb      	ldrb	r3, [r7, #2]
 800a25c:	883a      	ldrh	r2, [r7, #0]
 800a25e:	78f9      	ldrb	r1, [r7, #3]
 800a260:	f7f7 fefd 	bl	800205e <HAL_PCD_EP_Open>
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f95a 	bl	800a524 <USBD_Get_USB_Status>
 800a270:	4603      	mov	r3, r0
 800a272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a274:	7bbb      	ldrb	r3, [r7, #14]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7f7 ff44 	bl	800212a <HAL_PCD_EP_Close>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f93b 	bl	800a524 <USBD_Get_USB_Status>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f8 f805 	bl	80022ea <HAL_PCD_EP_SetStall>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f91c 	bl	800a524 <USBD_Get_USB_Status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7f8 f838 	bl	800238e <HAL_PCD_EP_ClrStall>
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 f8fd 	bl	800a524 <USBD_Get_USB_Status>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a34a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a34c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	da0c      	bge.n	800a36e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	440b      	add	r3, r1
 800a368:	3302      	adds	r3, #2
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	e00b      	b.n	800a386 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a374:	68f9      	ldr	r1, [r7, #12]
 800a376:	4613      	mov	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	4413      	add	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	440b      	add	r3, r1
 800a380:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a384:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3ac:	78fa      	ldrb	r2, [r7, #3]
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7f7 fe2f 	bl	8002014 <HAL_PCD_SetAddress>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 f8b1 	bl	800a524 <USBD_Get_USB_Status>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	603b      	str	r3, [r7, #0]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3ee:	7af9      	ldrb	r1, [r7, #11]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	f7f7 ff36 	bl	8002264 <HAL_PCD_EP_Transmit>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 f890 	bl	800a524 <USBD_Get_USB_Status>
 800a404:	4603      	mov	r3, r0
 800a406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a408:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b086      	sub	sp, #24
 800a416:	af00      	add	r7, sp, #0
 800a418:	60f8      	str	r0, [r7, #12]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
 800a41e:	460b      	mov	r3, r1
 800a420:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a430:	7af9      	ldrb	r1, [r7, #11]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	f7f7 fec0 	bl	80021ba <HAL_PCD_EP_Receive>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f86f 	bl	800a524 <USBD_Get_USB_Status>
 800a446:	4603      	mov	r3, r0
 800a448:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a44a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a466:	78fa      	ldrb	r2, [r7, #3]
 800a468:	4611      	mov	r1, r2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7f7 fee2 	bl	8002234 <HAL_PCD_EP_GetRxCount>
 800a470:	4603      	mov	r3, r0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <HAL_PCDEx_LPM_Callback+0x18>
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d013      	beq.n	800a4ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a492:	e023      	b.n	800a4dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d007      	beq.n	800a4ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a49c:	f000 f83c 	bl	800a518 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4a0:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	4a0f      	ldr	r2, [pc, #60]	; (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4a6:	f023 0306 	bic.w	r3, r3, #6
 800a4aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fc96 	bl	8008de4 <USBD_LL_Resume>
    break;
 800a4b8:	e010      	b.n	800a4dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fc79 	bl	8008db8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4ce:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	4a04      	ldr	r2, [pc, #16]	; (800a4e4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4d4:	f043 0306 	orr.w	r3, r3, #6
 800a4d8:	6113      	str	r3, [r2, #16]
    break;
 800a4da:	bf00      	nop
}
 800a4dc:	bf00      	nop
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	e000ed00 	.word	0xe000ed00

0800a4e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4f0:	4b03      	ldr	r3, [pc, #12]	; (800a500 <USBD_static_malloc+0x18>)
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	200013bc 	.word	0x200013bc

0800a504 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]

}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a51c:	f7f6 f9f2 	bl	8000904 <SystemClock_Config>
}
 800a520:	bf00      	nop
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d817      	bhi.n	800a568 <USBD_Get_USB_Status+0x44>
 800a538:	a201      	add	r2, pc, #4	; (adr r2, 800a540 <USBD_Get_USB_Status+0x1c>)
 800a53a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53e:	bf00      	nop
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a557 	.word	0x0800a557
 800a548:	0800a55d 	.word	0x0800a55d
 800a54c:	0800a563 	.word	0x0800a563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
    break;
 800a554:	e00b      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a556:	2303      	movs	r3, #3
 800a558:	73fb      	strb	r3, [r7, #15]
    break;
 800a55a:	e008      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]
    break;
 800a560:	e005      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a562:	2303      	movs	r3, #3
 800a564:	73fb      	strb	r3, [r7, #15]
    break;
 800a566:	e002      	b.n	800a56e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a568:	2303      	movs	r3, #3
 800a56a:	73fb      	strb	r3, [r7, #15]
    break;
 800a56c:	bf00      	nop
  }
  return usb_status;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <__libc_init_array>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4d0d      	ldr	r5, [pc, #52]	; (800a5b4 <__libc_init_array+0x38>)
 800a580:	4c0d      	ldr	r4, [pc, #52]	; (800a5b8 <__libc_init_array+0x3c>)
 800a582:	1b64      	subs	r4, r4, r5
 800a584:	10a4      	asrs	r4, r4, #2
 800a586:	2600      	movs	r6, #0
 800a588:	42a6      	cmp	r6, r4
 800a58a:	d109      	bne.n	800a5a0 <__libc_init_array+0x24>
 800a58c:	4d0b      	ldr	r5, [pc, #44]	; (800a5bc <__libc_init_array+0x40>)
 800a58e:	4c0c      	ldr	r4, [pc, #48]	; (800a5c0 <__libc_init_array+0x44>)
 800a590:	f000 f82e 	bl	800a5f0 <_init>
 800a594:	1b64      	subs	r4, r4, r5
 800a596:	10a4      	asrs	r4, r4, #2
 800a598:	2600      	movs	r6, #0
 800a59a:	42a6      	cmp	r6, r4
 800a59c:	d105      	bne.n	800a5aa <__libc_init_array+0x2e>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a4:	4798      	blx	r3
 800a5a6:	3601      	adds	r6, #1
 800a5a8:	e7ee      	b.n	800a588 <__libc_init_array+0xc>
 800a5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ae:	4798      	blx	r3
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	e7f2      	b.n	800a59a <__libc_init_array+0x1e>
 800a5b4:	0800a660 	.word	0x0800a660
 800a5b8:	0800a660 	.word	0x0800a660
 800a5bc:	0800a660 	.word	0x0800a660
 800a5c0:	0800a664 	.word	0x0800a664

0800a5c4 <memcpy>:
 800a5c4:	440a      	add	r2, r1
 800a5c6:	4291      	cmp	r1, r2
 800a5c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5cc:	d100      	bne.n	800a5d0 <memcpy+0xc>
 800a5ce:	4770      	bx	lr
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5da:	4291      	cmp	r1, r2
 800a5dc:	d1f9      	bne.n	800a5d2 <memcpy+0xe>
 800a5de:	bd10      	pop	{r4, pc}

0800a5e0 <memset>:
 800a5e0:	4402      	add	r2, r0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d100      	bne.n	800a5ea <memset+0xa>
 800a5e8:	4770      	bx	lr
 800a5ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ee:	e7f9      	b.n	800a5e4 <memset+0x4>

0800a5f0 <_init>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	bf00      	nop
 800a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f6:	bc08      	pop	{r3}
 800a5f8:	469e      	mov	lr, r3
 800a5fa:	4770      	bx	lr

0800a5fc <_fini>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	bf00      	nop
 800a600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a602:	bc08      	pop	{r3}
 800a604:	469e      	mov	lr, r3
 800a606:	4770      	bx	lr
