
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a620  0800a620  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800a620  0800a620  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a620  0800a620  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a620  0800a620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a624  0800a624  0001a624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800a628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000142c  20000198  0800a7c0  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800a7c0  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016688  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016699  00000000  00000000  0005cfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c654c  00000000  00000000  00073648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139b94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  00139be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000198 	.word	0x20000198
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5b0 	.word	0x0800a5b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000019c 	.word	0x2000019c
 8000214:	0800a5b0 	.word	0x0800a5b0

08000218 <clamp>:
Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 3277, .servo1 = 4875, .servo2 = 6150, .flat_const = 0, .int_const = 0, .delimiter = 0};

volatile uint8_t isCommandReceived = 0;
volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d901      	bls.n	8000236 <clamp+0x1e>
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	e006      	b.n	8000244 <clamp+0x2c>
	else if (value < min) {return min;}
 8000236:	88fa      	ldrh	r2, [r7, #6]
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	429a      	cmp	r2, r3
 800023c:	d201      	bcs.n	8000242 <clamp+0x2a>
 800023e:	88bb      	ldrh	r3, [r7, #4]
 8000240:	e000      	b.n	8000244 <clamp+0x2c>
	return value;
 8000242:	88fb      	ldrh	r3, [r7, #6]
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b14      	cmp	r3, #20
 8000260:	d110      	bne.n	8000284 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 8000262:	2214      	movs	r2, #20
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <CDC_On_Receive+0x3c>)
 8000268:	f00a f98c 	bl	800a584 <memcpy>
    if (command.delimiter == 0xAAAA) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <CDC_On_Receive+0x3c>)
 800026e:	8a5b      	ldrh	r3, [r3, #18]
 8000270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000274:	4293      	cmp	r3, r2
 8000276:	d105      	bne.n	8000284 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <CDC_On_Receive+0x40>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <CDC_On_Receive+0x44>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000000 	.word	0x20000000
 8000290:	20000404 	.word	0x20000404
 8000294:	20000406 	.word	0x20000406

08000298 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 800029c:	2104      	movs	r1, #4
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <enc_init+0x20>)
 80002a0:	f004 fbee 	bl	8004a80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80002a4:	2104      	movs	r1, #4
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <enc_init+0x24>)
 80002a8:	f004 fbea 	bl	8004a80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80002ac:	2104      	movs	r1, #4
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <enc_init+0x28>)
 80002b0:	f004 fbe6 	bl	8004a80 <HAL_TIM_Encoder_Start>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000298 	.word	0x20000298
 80002bc:	200001b4 	.word	0x200001b4
 80002c0:	2000024c 	.word	0x2000024c

080002c4 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <pwm_init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <pwm_init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <pwm_init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	f241 3233 	movw	r2, #4915	; 0x1333
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <pwm_init+0x68>)
 80002e6:	f241 320b 	movw	r2, #4875	; 0x130b
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <pwm_init+0x68>)
 80002ee:	f641 0206 	movw	r2, #6150	; 0x1806
 80002f2:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002f4:	2100      	movs	r1, #0
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <pwm_init+0x6c>)
 80002f8:	f004 fa1c 	bl	8004734 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <pwm_init+0x6c>)
 8000300:	f005 fab4 	bl	800586c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <pwm_init+0x6c>)
 8000308:	f005 fab0 	bl	800586c <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <pwm_init+0x70>)
 8000310:	f004 fa10 	bl	8004734 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <pwm_init+0x74>)
 8000318:	f004 fa0c 	bl	8004734 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <pwm_init+0x74>)
 8000320:	f004 fa08 	bl	8004734 <HAL_TIM_PWM_Start>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013400 	.word	0x40013400
 800032c:	40014000 	.word	0x40014000
 8000330:	20000330 	.word	0x20000330
 8000334:	20000200 	.word	0x20000200
 8000338:	2000037c 	.word	0x2000037c

0800033c <motor_status_update>:

// Updates the motor's speed, direction and PI constants from the command struct
void motor_status_update() {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e06f      	b.n	8000428 <motor_status_update+0xec>
		if (command.speed[i] >= 0) {
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a3c      	ldr	r2, [pc, #240]	; (800043c <motor_status_update+0x100>)
 800034c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db23      	blt.n	800039c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	493a      	ldr	r1, [pc, #232]	; (8000440 <motor_status_update+0x104>)
 8000358:	4613      	mov	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4413      	add	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	440b      	add	r3, r1
 8000362:	3302      	adds	r3, #2
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a34      	ldr	r2, [pc, #208]	; (800043c <motor_status_update+0x100>)
 800036c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d104      	bne.n	800037e <motor_status_update+0x42>
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a31      	ldr	r2, [pc, #196]	; (800043c <motor_status_update+0x100>)
 8000378:	2102      	movs	r1, #2
 800037a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <motor_status_update+0x100>)
 8000382:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	b298      	uxth	r0, r3
 800038a:	492d      	ldr	r1, [pc, #180]	; (8000440 <motor_status_update+0x104>)
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	440b      	add	r3, r1
 8000396:	4602      	mov	r2, r0
 8000398:	801a      	strh	r2, [r3, #0]
 800039a:	e026      	b.n	80003ea <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4928      	ldr	r1, [pc, #160]	; (8000440 <motor_status_update+0x104>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	4413      	add	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	3302      	adds	r3, #2
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a22      	ldr	r2, [pc, #136]	; (800043c <motor_status_update+0x100>)
 80003b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003bc:	d105      	bne.n	80003ca <motor_status_update+0x8e>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <motor_status_update+0x100>)
 80003c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <motor_status_update+0x100>)
 80003ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	79fa      	ldrb	r2, [r7, #7]
 80003d6:	425b      	negs	r3, r3
 80003d8:	b298      	uxth	r0, r3
 80003da:	4919      	ldr	r1, [pc, #100]	; (8000440 <motor_status_update+0x104>)
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	440b      	add	r3, r1
 80003e6:	4602      	mov	r2, r0
 80003e8:	801a      	strh	r2, [r3, #0]
		}
		motor_status[i].flat_const = command.flat_const;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <motor_status_update+0x100>)
 80003ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	ee07 3a90 	vmov	s15, r3
 80003f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fa:	4911      	ldr	r1, [pc, #68]	; (8000440 <motor_status_update+0x104>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	4413      	add	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	440b      	add	r3, r1
 8000406:	330c      	adds	r3, #12
 8000408:	edc3 7a00 	vstr	s15, [r3]
		motor_status[i].int_const = command.int_const;
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <motor_status_update+0x100>)
 8000410:	68d9      	ldr	r1, [r3, #12]
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <motor_status_update+0x104>)
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4403      	add	r3, r0
 800041e:	3310      	adds	r3, #16
 8000420:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	3301      	adds	r3, #1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d98c      	bls.n	8000348 <motor_status_update+0xc>
	}
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	20000000 	.word	0x20000000
 8000440:	200003c8 	.word	0x200003c8

08000444 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	497a      	ldr	r1, [pc, #488]	; (800063c <motor_pwm+0x1f8>)
 8000452:	4613      	mov	r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	440b      	add	r3, r1
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d00e      	beq.n	800048c <motor_pwm+0x48>
 800046e:	2b02      	cmp	r3, #2
 8000470:	dc10      	bgt.n	8000494 <motor_pwm+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <motor_pwm+0x38>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d004      	beq.n	8000484 <motor_pwm+0x40>
 800047a:	e00b      	b.n	8000494 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 800047c:	4b70      	ldr	r3, [pc, #448]	; (8000640 <motor_pwm+0x1fc>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	82bb      	strh	r3, [r7, #20]
			break;
 8000482:	e007      	b.n	8000494 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000484:	4b6f      	ldr	r3, [pc, #444]	; (8000644 <motor_pwm+0x200>)
 8000486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000488:	82bb      	strh	r3, [r7, #20]
			break;
 800048a:	e003      	b.n	8000494 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 800048c:	4b6e      	ldr	r3, [pc, #440]	; (8000648 <motor_pwm+0x204>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	82bb      	strh	r3, [r7, #20]
			break;
 8000492:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000494:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000498:	4618      	mov	r0, r3
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	4967      	ldr	r1, [pc, #412]	; (800063c <motor_pwm+0x1f8>)
 800049e:	4613      	mov	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	440b      	add	r3, r1
 80004a8:	3304      	adds	r3, #4
 80004aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ae:	1ac3      	subs	r3, r0, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80004be:	495f      	ldr	r1, [pc, #380]	; (800063c <motor_pwm+0x1f8>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	4413      	add	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	3304      	adds	r3, #4
 80004cc:	4602      	mov	r2, r0
 80004ce:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	495a      	ldr	r1, [pc, #360]	; (800063c <motor_pwm+0x1f8>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	3306      	adds	r3, #6
 80004e0:	89fa      	ldrh	r2, [r7, #14]
 80004e2:	801a      	strh	r2, [r3, #0]

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 80004e4:	4b55      	ldr	r3, [pc, #340]	; (800063c <motor_pwm+0x1f8>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <motor_pwm+0xcc>
 80004ec:	4b53      	ldr	r3, [pc, #332]	; (800063c <motor_pwm+0x1f8>)
 80004ee:	8a9b      	ldrh	r3, [r3, #20]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d10d      	bne.n	8000510 <motor_pwm+0xcc>
 80004f4:	4b51      	ldr	r3, [pc, #324]	; (800063c <motor_pwm+0x1f8>)
 80004f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d109      	bne.n	8000510 <motor_pwm+0xcc>
		motor_status[mot_id].integral = 0;
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	494f      	ldr	r1, [pc, #316]	; (800063c <motor_pwm+0x1f8>)
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	440b      	add	r3, r1
 800050a:	3308      	adds	r3, #8
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
	}

	int16_t error = speed - motor_status[mot_id].enc_change;
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	494a      	ldr	r1, [pc, #296]	; (800063c <motor_pwm+0x1f8>)
 8000514:	4613      	mov	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4413      	add	r3, r2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	440b      	add	r3, r1
 800051e:	3306      	adds	r3, #6
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	b29b      	uxth	r3, r3
 8000526:	8a3a      	ldrh	r2, [r7, #16]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	81bb      	strh	r3, [r7, #12]

	motor_status[mot_id].integral += error;
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	4942      	ldr	r1, [pc, #264]	; (800063c <motor_pwm+0x1f8>)
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	3308      	adds	r3, #8
 800053e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000542:	b29a      	uxth	r2, r3
 8000544:	89bb      	ldrh	r3, [r7, #12]
 8000546:	4413      	add	r3, r2
 8000548:	b29b      	uxth	r3, r3
 800054a:	79fa      	ldrb	r2, [r7, #7]
 800054c:	b218      	sxth	r0, r3
 800054e:	493b      	ldr	r1, [pc, #236]	; (800063c <motor_pwm+0x1f8>)
 8000550:	4613      	mov	r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4413      	add	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	440b      	add	r3, r1
 800055a:	3308      	adds	r3, #8
 800055c:	4602      	mov	r2, r0
 800055e:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].integral = 0;
 8000560:	79fa      	ldrb	r2, [r7, #7]
 8000562:	4936      	ldr	r1, [pc, #216]	; (800063c <motor_pwm+0x1f8>)
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	3308      	adds	r3, #8
 8000570:	2200      	movs	r2, #0
 8000572:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = (int16_t)(error * motor_status[mot_id].flat_const) + (int16_t)(motor_status[mot_id].integral * motor_status[mot_id].int_const);
 8000574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	492e      	ldr	r1, [pc, #184]	; (800063c <motor_pwm+0x1f8>)
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	330c      	adds	r3, #12
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800059c:	ee17 3a90 	vmov	r3, s15
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b299      	uxth	r1, r3
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <motor_pwm+0x1f8>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4403      	add	r3, r0
 80005b2:	3308      	adds	r3, #8
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <motor_pwm+0x1f8>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4403      	add	r3, r0
 80005ce:	3310      	adds	r3, #16
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 3a90 	vmov	r3, s15
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	440b      	add	r3, r1
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {pid_speed = 0;}
 80005ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da01      	bge.n	80005f6 <motor_pwm+0x1b2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	827b      	strh	r3, [r7, #18]

	if (speed > 0) {
 80005f6:	8a3b      	ldrh	r3, [r7, #16]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d010      	beq.n	800061e <motor_pwm+0x1da>
		pwm = 4500 + pid_speed * 375; // Effectively linear
 80005fc:	8a7b      	ldrh	r3, [r7, #18]
 80005fe:	461a      	mov	r2, r3
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	0091      	lsls	r1, r2, #2
 8000608:	461a      	mov	r2, r3
 800060a:	460b      	mov	r3, r1
 800060c:	4413      	add	r3, r2
 800060e:	461a      	mov	r2, r3
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800061a:	3314      	adds	r3, #20
 800061c:	82fb      	strh	r3, [r7, #22]
	}
	// emergency limiter, set to 75% currently (49151)
	if (pwm > 49151) {pwm = 49151;}
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000624:	d302      	bcc.n	800062c <motor_pwm+0x1e8>
 8000626:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800062a:	82fb      	strh	r3, [r7, #22]

	return pwm;
 800062c:	8afb      	ldrh	r3, [r7, #22]
}
 800062e:	4618      	mov	r0, r3
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200003c8 	.word	0x200003c8
 8000640:	40000400 	.word	0x40000400
 8000644:	40012c00 	.word	0x40012c00
 8000648:	40000800 	.word	0x40000800

0800064c <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d018      	beq.n	800068e <motor_direction+0x42>
 800065c:	2b02      	cmp	r3, #2
 800065e:	dc1f      	bgt.n	80006a0 <motor_direction+0x54>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <motor_direction+0x1e>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d009      	beq.n	800067c <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000668:	e01a      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <motor_direction+0x5c>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	461a      	mov	r2, r3
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 fa67 	bl	8001b48 <HAL_GPIO_WritePin>
			break;
 800067a:	e011      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <motor_direction+0x5c>)
 800067e:	7d9b      	ldrb	r3, [r3, #22]
 8000680:	461a      	mov	r2, r3
 8000682:	2120      	movs	r1, #32
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f001 fa5e 	bl	8001b48 <HAL_GPIO_WritePin>
			break;
 800068c:	e008      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <motor_direction+0x5c>)
 8000690:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000694:	461a      	mov	r2, r3
 8000696:	2110      	movs	r1, #16
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <motor_direction+0x60>)
 800069a:	f001 fa55 	bl	8001b48 <HAL_GPIO_WritePin>
			break;
 800069e:	bf00      	nop
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200003c8 	.word	0x200003c8
 80006ac:	48000400 	.word	0x48000400

080006b0 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <wake_drivers_up+0x58>)
 80006bc:	f001 fa44 	bl	8001b48 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006c0:	2300      	movs	r3, #0
 80006c2:	80fb      	strh	r3, [r7, #6]
 80006c4:	e003      	b.n	80006ce <wake_drivers_up+0x1e>
 80006c6:	bf00      	nop
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	3301      	adds	r3, #1
 80006cc:	80fb      	strh	r3, [r7, #6]
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006d4:	d3f7      	bcc.n	80006c6 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <wake_drivers_up+0x58>)
 80006dc:	f001 fa34 	bl	8001b48 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006e0:	2300      	movs	r3, #0
 80006e2:	80bb      	strh	r3, [r7, #4]
 80006e4:	e003      	b.n	80006ee <wake_drivers_up+0x3e>
 80006e6:	bf00      	nop
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	3301      	adds	r3, #1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006f4:	d3f7      	bcc.n	80006e6 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <wake_drivers_up+0x58>)
 80006fc:	f001 fa24 	bl	8001b48 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48000400 	.word	0x48000400

0800070c <HAL_TIM_PeriodElapsedCallback>:
// Currently abandoned.

// 50 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	2b31      	cmp	r3, #49	; 0x31
 800071c:	d912      	bls.n	8000744 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000720:	2200      	movs	r2, #0
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800072c:	2200      	movs	r2, #0
 800072e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000734:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800073c:	f241 320b 	movw	r2, #4875	; 0x130b
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8000742:	e04c      	b.n	80007de <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fe7d 	bl	8000444 <motor_pwm>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000750:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fe76 	bl	8000444 <motor_pwm>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff fe6f 	bl	8000444 <motor_pwm>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff6c 	bl	800064c <motor_direction>
	motor_direction(1); // Motor 2
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ff69 	bl	800064c <motor_direction>
	motor_direction(2); // Motor 3
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff ff66 	bl	800064c <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000782:	88db      	ldrh	r3, [r3, #6]
 8000784:	f641 129a 	movw	r2, #6554	; 0x199a
 8000788:	f640 41cd 	movw	r1, #3277	; 0xccd
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd43 	bl	8000218 <clamp>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079a:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800079e:	891b      	ldrh	r3, [r3, #8]
 80007a0:	f641 129a 	movw	r2, #6554	; 0x199a
 80007a4:	f640 41cd 	movw	r1, #3277	; 0xccd
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd35 	bl	8000218 <clamp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007b8:	895b      	ldrh	r3, [r3, #10]
 80007ba:	f641 0206 	movw	r2, #6150	; 0x1806
 80007be:	f241 215c 	movw	r1, #4700	; 0x125c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd28 	bl	8000218 <clamp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007dc:	801a      	strh	r2, [r3, #0]
}
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000406 	.word	0x20000406
 80007e8:	40013400 	.word	0x40013400
 80007ec:	40014000 	.word	0x40014000
 80007f0:	20000000 	.word	0x20000000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fe68 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f861 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fb81 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000806:	f000 f905 	bl	8000a14 <MX_TIM2_Init>
  MX_TIM3_Init();
 800080a:	f000 f95d 	bl	8000ac8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800080e:	f000 f8a7 	bl	8000960 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000812:	f000 f9af 	bl	8000b74 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000816:	f000 fa39 	bl	8000c8c <MX_TIM8_Init>
  MX_TIM15_Init();
 800081a:	f000 fae3 	bl	8000de4 <MX_TIM15_Init>
  MX_TIM6_Init();
 800081e:	f000 f9ff 	bl	8000c20 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000822:	f009 f97b 	bl	8009b1c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000836:	81fb      	strh	r3, [r7, #14]
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000838:	481e      	ldr	r0, [pc, #120]	; (80008b4 <main+0xc0>)
 800083a:	f003 feb9 	bl	80045b0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f000 feb6 	bl	80015b0 <HAL_Delay>
  enc_init();
 8000844:	f7ff fd28 	bl	8000298 <enc_init>
  pwm_init();
 8000848:	f7ff fd3c 	bl	80002c4 <pwm_init>
  wake_drivers_up();
 800084c:	f7ff ff30 	bl	80006b0 <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <main+0xc4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0fa      	beq.n	8000850 <main+0x5c>
    	isCommandReceived = 0;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <main+0xc4>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000860:	f7ff ff26 	bl	80006b0 <wake_drivers_up>
    	motor_status_update();
 8000864:	f7ff fd6a 	bl	800033c <motor_status_update>

		feedback.speed[0] = motor_status[0].target_speed;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <main+0xc8>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b21b      	sxth	r3, r3
 800086e:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <main+0xc8>)
 8000872:	8a9b      	ldrh	r3, [r3, #20]
 8000874:	b21b      	sxth	r3, r3
 8000876:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <main+0xc8>)
 800087a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800087c:	b21b      	sxth	r3, r3
 800087e:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <main+0xc8>)
 8000882:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000886:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <main+0xc8>)
 800088a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800088e:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <main+0xc8>)
 8000892:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000896:	817b      	strh	r3, [r7, #10]

		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 8000898:	2102      	movs	r1, #2
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <main+0xcc>)
 800089c:	f001 f93c 	bl	8001b18 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	81bb      	strh	r3, [r7, #12]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80008a6:	463b      	mov	r3, r7
 80008a8:	2110      	movs	r1, #16
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 f9f8 	bl	8009ca0 <CDC_Transmit_FS>
    if (isCommandReceived) {
 80008b0:	e7ce      	b.n	8000850 <main+0x5c>
 80008b2:	bf00      	nop
 80008b4:	200002e4 	.word	0x200002e4
 80008b8:	20000404 	.word	0x20000404
 80008bc:	200003c8 	.word	0x200003c8
 80008c0:	48001400 	.word	0x48001400

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	2238      	movs	r2, #56	; 0x38
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f009 fe64 	bl	800a5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f002 fe7a 	bl	80035e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80008ec:	2322      	movs	r3, #34	; 0x22
 80008ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000906:	2301      	movs	r3, #1
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800090a:	2314      	movs	r3, #20
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4618      	mov	r0, r3
 8000920:	f002 ff02 	bl	8003728 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800092a:	f000 fb6d 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fa06 	bl	8003d58 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000952:	f000 fb59 	bl	8001008 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	; 0x30
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2224      	movs	r2, #36	; 0x24
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f009 fe16 	bl	800a5a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_TIM1_Init+0xac>)
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_TIM1_Init+0xb0>)
 8000982:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_TIM1_Init+0xac>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_TIM1_Init+0xac>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_TIM1_Init+0xac>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_TIM1_Init+0xac>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_TIM1_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_TIM1_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009aa:	2303      	movs	r3, #3
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c2:	2301      	movs	r3, #1
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_TIM1_Init+0xac>)
 80009d6:	f003 ffad 	bl	8004934 <HAL_TIM_Encoder_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 fb12 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_TIM1_Init+0xac>)
 80009f6:	f004 ffed 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a00:	f000 fb02 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200001b4 	.word	0x200001b4
 8000a10:	40012c00 	.word	0x40012c00

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a60:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a62:	f003 fe0f 	bl	8004684 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 facc 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000a80:	f004 ffa8 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a8a:	f000 fabd 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000aa6:	f004 f9f9 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ab0:	f000 faaa 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM2_Init+0xb0>)
 8000ab6:	f000 fbe3 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000200 	.word	0x20000200

08000ac8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2224      	movs	r2, #36	; 0x24
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f009 fd62 	bl	800a5a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <MX_TIM3_Init+0xa8>)
 8000aea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000b38:	f003 fefc 	bl	8004934 <HAL_TIM_Encoder_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 fa61 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_TIM3_Init+0xa4>)
 8000b54:	f004 ff3e 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b5e:	f000 fa53 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000024c 	.word	0x2000024c
 8000b70:	40000400 	.word	0x40000400

08000b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2224      	movs	r2, #36	; 0x24
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f009 fd0c 	bl	800a5a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <MX_TIM4_Init+0xa8>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000be4:	f003 fea6 	bl	8004934 <HAL_TIM_Encoder_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000bee:	f000 fa0b 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_TIM4_Init+0xa4>)
 8000c00:	f004 fee8 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c0a:	f000 f9fd 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000298 	.word	0x20000298
 8000c1c:	40000800 	.word	0x40000800

08000c20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_TIM6_Init+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c38:	222f      	movs	r2, #47	; 0x2f
 8000c3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c52:	f003 fc55 	bl	8004500 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c5c:	f000 f9d4 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_TIM6_Init+0x64>)
 8000c6e:	f004 feb1 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f000 f9c6 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200002e4 	.word	0x200002e4
 8000c88:	40001000 	.word	0x40001000

08000c8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b098      	sub	sp, #96	; 0x60
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]
 8000cae:	615a      	str	r2, [r3, #20]
 8000cb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2234      	movs	r2, #52	; 0x34
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f009 fc71 	bl	800a5a0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cbe:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000cc0:	4a47      	ldr	r2, [pc, #284]	; (8000de0 <MX_TIM8_Init+0x154>)
 8000cc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000cec:	f003 fcca 	bl	8004684 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 f987 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4833      	ldr	r0, [pc, #204]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000d0e:	f004 fe61 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d18:	f000 f976 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1c:	2360      	movs	r3, #96	; 0x60
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d24:	2300      	movs	r3, #0
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4826      	ldr	r0, [pc, #152]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000d42:	f004 f8ab 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d4c:	f000 f95c 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000d5a:	f004 f89f 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000d64:	f000 f950 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d6c:	2208      	movs	r2, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481a      	ldr	r0, [pc, #104]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000d72:	f004 f893 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000d7c:	f000 f944 	bl	8001008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000dbe:	f004 fe8b 	bl	8005ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000dc8:	f000 f91e 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM8_Init+0x150>)
 8000dce:	f000 fa57 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3760      	adds	r7, #96	; 0x60
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000330 	.word	0x20000330
 8000de0:	40013400 	.word	0x40013400

08000de4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b098      	sub	sp, #96	; 0x60
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2234      	movs	r2, #52	; 0x34
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 fbc5 	bl	800a5a0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e18:	4a3a      	ldr	r2, [pc, #232]	; (8000f04 <MX_TIM15_Init+0x120>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e1e:	2230      	movs	r2, #48	; 0x30
 8000e20:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e42:	482f      	ldr	r0, [pc, #188]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e44:	f003 fc1e 	bl	8004684 <HAL_TIM_PWM_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f8db 	bl	8001008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4827      	ldr	r0, [pc, #156]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e62:	f004 fdb7 	bl	80059d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f8cc 	bl	8001008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e70:	2360      	movs	r3, #96	; 0x60
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000e96:	f004 f801 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ea0:	f000 f8b2 	bl	8001008 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4814      	ldr	r0, [pc, #80]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000eae:	f003 fff5 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000eb8:	f000 f8a6 	bl	8001008 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000ee4:	f004 fdf8 	bl	8005ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000eee:	f000 f88b 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM15_Init+0x11c>)
 8000ef4:	f000 f9c4 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3760      	adds	r7, #96	; 0x60
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000037c 	.word	0x2000037c
 8000f04:	40014000 	.word	0x40014000

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f24:	f043 0320 	orr.w	r3, r3, #32
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a30      	ldr	r2, [pc, #192]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_GPIO_Init+0xf4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4825      	ldr	r0, [pc, #148]	; (8001000 <MX_GPIO_Init+0xf8>)
 8000f6c:	f000 fdec 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	21a2      	movs	r1, #162	; 0xa2
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fde6 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2118      	movs	r1, #24
 8000f80:	4820      	ldr	r0, [pc, #128]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000f82:	f000 fde1 	bl	8001b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000f86:	2301      	movs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4818      	ldr	r0, [pc, #96]	; (8001000 <MX_GPIO_Init+0xf8>)
 8000f9e:	f000 fc39 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4812      	ldr	r0, [pc, #72]	; (8001000 <MX_GPIO_Init+0xf8>)
 8000fb6:	f000 fc2d 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000fba:	23a2      	movs	r3, #162	; 0xa2
 8000fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 fc1e 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8000fd8:	2318      	movs	r3, #24
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_GPIO_Init+0xfc>)
 8000ff0:	f000 fc10 	bl	8001814 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48001400 	.word	0x48001400
 8001004:	48000400 	.word	0x48000400

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x44>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x44>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x44>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_TIM_Encoder_MspInit+0x138>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12a      	bne.n	80010d4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b46      	ldr	r3, [pc, #280]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a45      	ldr	r2, [pc, #276]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	623b      	str	r3, [r7, #32]
 8001094:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80010ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010c0:	2306      	movs	r3, #6
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fba1 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010d2:	e05b      	b.n	800118c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a30      	ldr	r2, [pc, #192]	; (800119c <HAL_TIM_Encoder_MspInit+0x140>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d129      	bne.n	8001132 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800110e:	2350      	movs	r3, #80	; 0x50
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800111e:	2302      	movs	r3, #2
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fb72 	bl	8001814 <HAL_GPIO_Init>
}
 8001130:	e02c      	b.n	800118c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d127      	bne.n	800118c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6593      	str	r3, [r2, #88]	; 0x58
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 800116c:	23c0      	movs	r3, #192	; 0xc0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800117c:	2302      	movs	r3, #2
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <HAL_TIM_Encoder_MspInit+0x148>)
 8001188:	f000 fb44 	bl	8001814 <HAL_GPIO_Init>
}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	; 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40012c00 	.word	0x40012c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40000400 	.word	0x40000400
 80011a0:	40000800 	.word	0x40000800
 80011a4:	48000400 	.word	0x48000400

080011a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d10c      	bne.n	80011d4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6593      	str	r3, [r2, #88]	; 0x58
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80011d2:	e022      	b.n	800121a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_TIM_PWM_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10c      	bne.n	80011f8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
}
 80011f6:	e010      	b.n	800121a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <HAL_TIM_PWM_MspInit+0x88>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d10b      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_TIM_PWM_MspInit+0x80>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40013400 	.word	0x40013400
 8001230:	40014000 	.word	0x40014000

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <HAL_TIM_Base_MspInit+0x44>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6593      	str	r3, [r2, #88]	; 0x58
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_TIM_Base_MspInit+0x48>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2036      	movs	r0, #54	; 0x36
 8001264:	f000 faa1 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001268:	2036      	movs	r0, #54	; 0x36
 800126a:	f000 fab8 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40001000 	.word	0x40001000
 800127c:	40021000 	.word	0x40021000

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a0:	d11d      	bne.n	80012de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f000 fa9c 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80012dc:	e071      	b.n	80013c2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a3b      	ldr	r2, [pc, #236]	; (80013d0 <HAL_TIM_MspPostInit+0x150>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d14a      	bne.n	800137e <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a37      	ldr	r2, [pc, #220]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	4a31      	ldr	r2, [pc, #196]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001318:	2301      	movs	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001328:	2304      	movs	r3, #4
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4828      	ldr	r0, [pc, #160]	; (80013d4 <HAL_TIM_MspPostInit+0x154>)
 8001334:	f000 fa6e 	bl	8001814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800134a:	2302      	movs	r3, #2
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 fa5c 	bl	8001814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800135c:	2320      	movs	r3, #32
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800136c:	2303      	movs	r3, #3
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <HAL_TIM_MspPostInit+0x154>)
 8001378:	f000 fa4c 	bl	8001814 <HAL_GPIO_Init>
}
 800137c:	e021      	b.n	80013c2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <HAL_TIM_MspPostInit+0x158>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d11c      	bne.n	80013c2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_MspPostInit+0x14c>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 80013a0:	230c      	movs	r3, #12
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013b0:	2309      	movs	r3, #9
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f000 fa29 	bl	8001814 <HAL_GPIO_Init>
}
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	; 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40013400 	.word	0x40013400
 80013d4:	48000400 	.word	0x48000400
 80013d8:	40014000 	.word	0x40014000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f8a4 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <USB_LP_IRQHandler+0x10>)
 8001436:	f000 fca6 	bl	8001d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200010b0 	.word	0x200010b0

08001444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM6_DAC_IRQHandler+0x10>)
 800144a:	f003 fba7 	bl	8004b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002e4 	.word	0x200002e4

08001458 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x2>)
 800147e:	4685      	mov	sp, r0
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopForever+0x6>)
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopForever+0xa>)
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopForever+0xe>)
 8001486:	2300      	movs	r3, #0
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:
 800148a:	58d4      	ldr	r4, [r2, r3]
 800148c:	50c4      	str	r4, [r0, r3]
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:
 8001490:	18c4      	adds	r4, r0, r3
 8001492:	428c      	cmp	r4, r1
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopForever+0x12>)
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopForever+0x16>)
 800149a:	2300      	movs	r3, #0
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:
 80014a2:	42a2      	cmp	r2, r4
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
 80014aa:	f009 f847 	bl	800a53c <__libc_init_array>
 80014ae:	f7ff f9a1 	bl	80007f4 <main>

080014b2 <LoopForever>:
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
 80014b4:	20008000 	.word	0x20008000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000198 	.word	0x20000198
 80014c0:	0800a628 	.word	0x0800a628
 80014c4:	20000198 	.word	0x20000198
 80014c8:	200015c4 	.word	0x200015c4

080014cc <ADC1_2_IRQHandler>:
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f95b 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f80e 	bl	8001500 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fd90 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]

}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_InitTick+0x68>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d022      	beq.n	800155a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_InitTick+0x6c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_InitTick+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f966 	bl	80017fa <HAL_SYSTICK_Config>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d809      	bhi.n	800154e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153a:	2200      	movs	r2, #0
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	f04f 30ff 	mov.w	r0, #4294967295
 8001542:	f000 f932 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x70>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e007      	b.n	800155e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e004      	b.n	800155e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000001c 	.word	0x2000001c
 800156c:	20000014 	.word	0x20000014
 8001570:	20000018 	.word	0x20000018

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x1c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x20>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x1c>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000408 	.word	0x20000408
 8001594:	2000001c 	.word	0x2000001c

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000408 	.word	0x20000408

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d004      	beq.n	80015d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_Delay+0x40>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d4:	bf00      	nop
 80015d6:	f7ff ffdf 	bl	8001598 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d8f7      	bhi.n	80015d6 <HAL_Delay+0x26>
  {
  }
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000001c 	.word	0x2000001c

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff40 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff33 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa4 	bl	8001750 <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001822:	e15a      	b.n	8001ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2101      	movs	r1, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 814c 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d005      	beq.n	8001854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001850:	2b02      	cmp	r3, #2
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 0201 	and.w	r2, r3, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d017      	beq.n	80018f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d123      	bne.n	8001946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	08da      	lsrs	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3208      	adds	r2, #8
 8001906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	6939      	ldr	r1, [r7, #16]
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0203 	and.w	r2, r3, #3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80a6 	beq.w	8001ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6613      	str	r3, [r2, #96]	; 0x60
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_GPIO_Init+0x2e4>)
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ca:	d01f      	beq.n	8001a0c <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	; (8001b00 <HAL_GPIO_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d019      	beq.n	8001a08 <HAL_GPIO_Init+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_GPIO_Init+0x2f0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_GPIO_Init+0x1f0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4a      	ldr	r2, [pc, #296]	; (8001b08 <HAL_GPIO_Init+0x2f4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <HAL_GPIO_Init+0x2f8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a48      	ldr	r2, [pc, #288]	; (8001b10 <HAL_GPIO_Init+0x2fc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019f4:	2305      	movs	r3, #5
 80019f6:	e00a      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019f8:	2306      	movs	r3, #6
 80019fa:	e008      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a00:	2303      	movs	r3, #3
 8001a02:	e004      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e002      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_GPIO_Init+0x1fa>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	f002 0203 	and.w	r2, r2, #3
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	4093      	lsls	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1e:	4937      	ldr	r1, [pc, #220]	; (8001afc <HAL_GPIO_Init+0x2e8>)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a50:	4a30      	ldr	r2, [pc, #192]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7a:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_GPIO_Init+0x300>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae9d 	bne.w	8001824 <HAL_GPIO_Init+0x10>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	48000400 	.word	0x48000400
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000c00 	.word	0x48000c00
 8001b0c:	48001000 	.word	0x48001000
 8001b10:	48001400 	.word	0x48001400
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e001      	b.n	8001b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
 8001b54:	4613      	mov	r3, r2
 8001b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b08b      	sub	sp, #44	; 0x2c
 8001b7c:	af06      	add	r7, sp, #24
 8001b7e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0d7      	b.n	8001d3a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f008 f9c6 	bl	8009f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 f8b3 	bl	8005d1c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e04c      	b.n	8001c56 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3301      	adds	r3, #1
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b298      	uxth	r0, r3
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3336      	adds	r3, #54	; 0x36
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3303      	adds	r3, #3
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	333c      	adds	r3, #60	; 0x3c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3340      	adds	r3, #64	; 0x40
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	3301      	adds	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3ad      	bcc.n	8001bbc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e044      	b.n	8001cf0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3b5      	bcc.n	8001c66 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	687e      	ldr	r6, [r7, #4]
 8001d02:	466d      	mov	r5, sp
 8001d04:	f106 0410 	add.w	r4, r6, #16
 8001d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0c:	6823      	ldr	r3, [r4, #0]
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	1d33      	adds	r3, r6, #4
 8001d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f004 f81c 	bl	8005d52 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f001 fc29 	bl	800358a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_Start+0x16>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e012      	b.n	8001d7e <HAL_PCD_Start+0x3c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 ffc2 	bl	8005cee <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f006 f9da 	bl	8008128 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 f9df 	bl	8008156 <USB_ReadInterrupts>
 8001d98:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb26 	bl	80023f6 <PCD_EP_ISR_Handler>

    return;
 8001daa:	e110      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d013      	beq.n	8001dde <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f008 f93f 	bl	800a052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8fc 	bl	8001fd4 <HAL_PCD_SetAddress>

    return;
 8001ddc:	e0f7      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00c      	beq.n	8001e02 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e00:	e0e5      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e1e:	b292      	uxth	r2, r2
 8001e20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e24:	e0d3      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d034      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	b292      	uxth	r2, r2
 8001e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e72:	2100      	movs	r1, #0
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f008 fae1 	bl	800a43c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f008 f922 	bl	800a0c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e92:	b292      	uxth	r2, r2
 8001e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e98:	e099      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d027      	beq.n	8001ef4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0204 	orr.w	r2, r2, #4
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f008 f8cf 	bl	800a090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ef2:	e06c      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d040      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f10:	b292      	uxth	r2, r2
 8001f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0204 	orr.w	r2, r2, #4
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f008 fa63 	bl	800a43c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001f76:	e02a      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f008 f889 	bl	800a090 <HAL_PCD_SuspendCallback>
    return;
 8001f7e:	e026      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f9c:	b292      	uxth	r2, r2
 8001f9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f008 f847 	bl	800a036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fa8:	e011      	b.n	8001fce <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fcc:	bf00      	nop
  }
}
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_SetAddress+0x1a>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e013      	b.n	8002016 <HAL_PCD_SetAddress+0x42>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f006 f87a 	bl	8008100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	4608      	mov	r0, r1
 8002028:	4611      	mov	r1, r2
 800202a:	461a      	mov	r2, r3
 800202c:	4603      	mov	r3, r0
 800202e:	70fb      	strb	r3, [r7, #3]
 8002030:	460b      	mov	r3, r1
 8002032:	803b      	strh	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800203c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da0e      	bge.n	8002062 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	705a      	strb	r2, [r3, #1]
 8002060:	e00e      	b.n	8002080 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0207 	and.w	r2, r3, #7
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	b2da      	uxtb	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800208c:	883a      	ldrh	r2, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	78ba      	ldrb	r2, [r7, #2]
 8002096:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_PCD_EP_Open+0xa6>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e00e      	b.n	80020e2 <HAL_PCD_EP_Open+0xc4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fe5e 	bl	8005d94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020e0:	7afb      	ldrb	r3, [r7, #11]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da0e      	bge.n	800211c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	e00e      	b.n	800213a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f003 0207 	and.w	r2, r3, #7
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_PCD_EP_Close+0x6a>
 8002150:	2302      	movs	r3, #2
 8002152:	e00e      	b.n	8002172 <HAL_PCD_EP_Close+0x88>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f9aa 	bl	80064bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	460b      	mov	r3, r1
 8002188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 0207 	and.w	r2, r3, #7
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2200      	movs	r2, #0
 80021b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 fb5d 	bl	8006896 <USB_EPStartXfer>
 80021dc:	e005      	b.n	80021ea <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6979      	ldr	r1, [r7, #20]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fb56 	bl	8006896 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 0207 	and.w	r2, r3, #7
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	460b      	mov	r3, r1
 8002232:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2201      	movs	r2, #1
 800226e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	b2da      	uxtb	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	4618      	mov	r0, r3
 800228e:	f004 fb02 	bl	8006896 <USB_EPStartXfer>
 8002292:	e005      	b.n	80022a0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6979      	ldr	r1, [r7, #20]
 800229a:	4618      	mov	r0, r3
 800229c:	f004 fafb 	bl	8006896 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 0207 	and.w	r2, r3, #7
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d901      	bls.n	80022c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e03e      	b.n	8002346 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da0e      	bge.n	80022ee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	705a      	strb	r2, [r3, #1]
 80022ec:	e00c      	b.n	8002308 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_PCD_EP_SetStall+0x7e>
 8002324:	2302      	movs	r3, #2
 8002326:	e00e      	b.n	8002346 <HAL_PCD_EP_SetStall+0x9c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fde3 	bl	8007f02 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d901      	bls.n	800236c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e040      	b.n	80023ee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0e      	bge.n	8002392 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
 8002390:	e00e      	b.n	80023b0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_EP_ClrStall+0x82>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e00e      	b.n	80023ee <HAL_PCD_EP_ClrStall+0xa0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fde0 	bl	8007fa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b096      	sub	sp, #88	; 0x58
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023fe:	e39c      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002408:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800240c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800241a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 815e 	bne.w	80026e0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002424:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d150      	bne.n	80024d2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002440:	81fb      	strh	r3, [r7, #14]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002450:	b29b      	uxth	r3, r3
 8002452:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3328      	adds	r3, #40	; 0x28
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4413      	add	r3, r2
 8002474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	441a      	add	r2, r3
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002490:	2100      	movs	r1, #0
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f007 fdb5 	bl	800a002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 834a 	beq.w	8002b3a <PCD_EP_ISR_Handler+0x744>
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8345 	bne.w	8002b3a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b292      	uxth	r2, r2
 80024c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024d0:	e333      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d032      	beq.n	8002556 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	4413      	add	r3, r2
 800250a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002516:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800252a:	b29b      	uxth	r3, r3
 800252c:	f005 fe65 	bl	80081fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f640 738f 	movw	r3, #3983	; 0xf8f
 800253c:	4013      	ands	r3, r2
 800253e:	823b      	strh	r3, [r7, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	8a3a      	ldrh	r2, [r7, #16]
 8002546:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800254a:	b292      	uxth	r2, r2
 800254c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f007 fd2a 	bl	8009fa8 <HAL_PCD_SetupStageCallback>
 8002554:	e2f1      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002556:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800255a:	2b00      	cmp	r3, #0
 800255c:	f280 82ed 	bge.w	8002b3a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800256c:	4013      	ands	r3, r2
 800256e:	83fb      	strh	r3, [r7, #30]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	8bfa      	ldrh	r2, [r7, #30]
 8002576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257a:	b292      	uxth	r2, r2
 800257c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	4413      	add	r3, r2
 8002598:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d019      	beq.n	80025e2 <PCD_EP_ISR_Handler+0x1ec>
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d015      	beq.n	80025e2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025bc:	6959      	ldr	r1, [r3, #20]
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f005 fe17 	bl	80081fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	441a      	add	r2, r3
 80025d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025da:	2100      	movs	r1, #0
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f007 fcf5 	bl	8009fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 82a3 	bne.w	8002b3a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b3e      	cmp	r3, #62	; 0x3e
 800261a:	d918      	bls.n	800264e <PCD_EP_ISR_Handler+0x258>
 800261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
 8002624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <PCD_EP_ISR_Handler+0x240>
 8002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002632:	3b01      	subs	r3, #1
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
 8002636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002638:	b29b      	uxth	r3, r3
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	b29b      	uxth	r3, r3
 800263e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002646:	b29a      	uxth	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	e029      	b.n	80026a2 <PCD_EP_ISR_Handler+0x2ac>
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d112      	bne.n	800267c <PCD_EP_ISR_Handler+0x286>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002660:	b29a      	uxth	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002674:	b29a      	uxth	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e012      	b.n	80026a2 <PCD_EP_ISR_Handler+0x2ac>
 800267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <PCD_EP_ISR_Handler+0x2a0>
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	3301      	adds	r3, #1
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
 8002696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002698:	b29b      	uxth	r3, r3
 800269a:	029b      	lsls	r3, r3, #10
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	827b      	strh	r3, [r7, #18]
 80026b4:	8a7b      	ldrh	r3, [r7, #18]
 80026b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026ba:	827b      	strh	r3, [r7, #18]
 80026bc:	8a7b      	ldrh	r3, [r7, #18]
 80026be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026c2:	827b      	strh	r3, [r7, #18]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026da:	b29b      	uxth	r3, r3
 80026dc:	8013      	strh	r3, [r2, #0]
 80026de:	e22c      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026f4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f280 80f6 	bge.w	80028ea <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29a      	uxth	r2, r3
 8002710:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002714:	4013      	ands	r3, r2
 8002716:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800272c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002730:	b292      	uxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002734:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4413      	add	r3, r2
 8002748:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800274a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	4413      	add	r3, r2
 800276c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002776:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800277a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 808e 	beq.w	80028a0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	88da      	ldrh	r2, [r3, #6]
 8002790:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002794:	f005 fd31 	bl	80081fa <USB_ReadPMA>
 8002798:	e082      	b.n	80028a0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	78db      	ldrb	r3, [r3, #3]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d10a      	bne.n	80027b8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027a6:	461a      	mov	r2, r3
 80027a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9d3 	bl	8002b56 <HAL_PCD_EP_DB_Receive>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027b6:	e073      	b.n	80028a0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d022      	beq.n	800285c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800281e:	b29b      	uxth	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4413      	add	r3, r2
 8002830:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800283a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800283e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02c      	beq.n	80028a0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	6959      	ldr	r1, [r3, #20]
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	891a      	ldrh	r2, [r3, #8]
 8002852:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002856:	f005 fcd0 	bl	80081fa <USB_ReadPMA>
 800285a:	e021      	b.n	80028a0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	4413      	add	r3, r2
 8002876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002880:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002892:	6959      	ldr	r1, [r3, #20]
 8002894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002896:	895a      	ldrh	r2, [r3, #10]
 8002898:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800289c:	f005 fcad 	bl	80081fa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028a8:	441a      	add	r2, r3
 80028aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028b6:	441a      	add	r2, r3
 80028b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <PCD_EP_ISR_Handler+0x4da>
 80028c4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d206      	bcs.n	80028de <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f007 fb78 	bl	8009fcc <HAL_PCD_DataOutStageCallback>
 80028dc:	e005      	b.n	80028ea <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 ffd6 	bl	8006896 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8121 	beq.w	8002b3a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80028f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800293c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	2b02      	cmp	r3, #2
 800294e:	f000 80a2 	beq.w	8002a96 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295a:	7b1b      	ldrb	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8093 	beq.w	8002a88 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002962:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d046      	beq.n	80029fc <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d126      	bne.n	80029c4 <PCD_EP_ISR_Handler+0x5ce>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002984:	b29b      	uxth	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	4413      	add	r3, r2
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	00da      	lsls	r2, r3, #3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	4413      	add	r3, r2
 8002998:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029bc:	b29a      	uxth	r2, r3
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	e061      	b.n	8002a88 <PCD_EP_ISR_Handler+0x692>
 80029c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d15d      	bne.n	8002a88 <PCD_EP_ISR_Handler+0x692>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	4413      	add	r3, r2
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	00da      	lsls	r2, r3, #3
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	4413      	add	r3, r2
 80029ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	e045      	b.n	8002a88 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a04:	785b      	ldrb	r3, [r3, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d126      	bne.n	8002a58 <PCD_EP_ISR_Handler+0x662>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	4413      	add	r3, r2
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	801a      	strh	r2, [r3, #0]
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	e017      	b.n	8002a88 <PCD_EP_ISR_Handler+0x692>
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d113      	bne.n	8002a88 <PCD_EP_ISR_Handler+0x692>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	4413      	add	r3, r2
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	00da      	lsls	r2, r3, #3
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f007 fab7 	bl	800a002 <HAL_PCD_DataInStageCallback>
 8002a94:	e051      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d144      	bne.n	8002b2c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d907      	bls.n	8002ae6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ade:	1ad2      	subs	r2, r2, r3
 8002ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae2:	619a      	str	r2, [r3, #24]
 8002ae4:	e002      	b.n	8002aec <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f007 fa81 	bl	800a002 <HAL_PCD_DataInStageCallback>
 8002b00:	e01b      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b0a:	441a      	add	r2, r3
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b18:	441a      	add	r2, r3
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 feb6 	bl	8006896 <USB_EPStartXfer>
 8002b2a:	e006      	b.n	8002b3a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b30:	461a      	mov	r2, r3
 8002b32:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f917 	bl	8002d68 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f6ff ac5a 	blt.w	8002400 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3758      	adds	r7, #88	; 0x58
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07c      	beq.n	8002c68 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	8b7b      	ldrh	r3, [r7, #26]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d306      	bcc.n	8002bac <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	8b7b      	ldrh	r3, [r7, #26]
 8002ba4:	1ad2      	subs	r2, r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	619a      	str	r2, [r3, #24]
 8002baa:	e002      	b.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d123      	bne.n	8002c02 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	833b      	strh	r3, [r7, #24]
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bdc:	833b      	strh	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	441a      	add	r2, r3
 8002bec:	8b3b      	ldrh	r3, [r7, #24]
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01f      	beq.n	8002c4c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	82fb      	strh	r3, [r7, #22]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	441a      	add	r2, r3
 8002c36:	8afb      	ldrh	r3, [r7, #22]
 8002c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c4c:	8b7b      	ldrh	r3, [r7, #26]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8085 	beq.w	8002d5e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6959      	ldr	r1, [r3, #20]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	891a      	ldrh	r2, [r3, #8]
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	f005 faca 	bl	80081fa <USB_ReadPMA>
 8002c66:	e07a      	b.n	8002d5e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d306      	bcc.n	8002ca6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	8b7b      	ldrh	r3, [r7, #26]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	e002      	b.n	8002cac <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d123      	bne.n	8002cfc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	83fb      	strh	r3, [r7, #30]
 8002cd0:	8bfb      	ldrh	r3, [r7, #30]
 8002cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cd6:	83fb      	strh	r3, [r7, #30]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	8bfb      	ldrh	r3, [r7, #30]
 8002ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11f      	bne.n	8002d46 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	83bb      	strh	r3, [r7, #28]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	441a      	add	r2, r3
 8002d30:	8bbb      	ldrh	r3, [r7, #28]
 8002d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d46:	8b7b      	ldrh	r3, [r7, #26]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	895a      	ldrh	r2, [r3, #10]
 8002d58:	8b7b      	ldrh	r3, [r7, #26]
 8002d5a:	f005 fa4e 	bl	80081fa <USB_ReadPMA>
    }
  }

  return count;
 8002d5e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0a2      	sub	sp, #136	; 0x88
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 81c5 	beq.w	800310c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d907      	bls.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	619a      	str	r2, [r3, #24]
 8002dc4:	e002      	b.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 80b9 	bne.w	8002f48 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d126      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	4413      	add	r3, r2
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	00da      	lsls	r2, r3, #3
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	4413      	add	r3, r2
 8002e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	801a      	strh	r2, [r3, #0]
 8002e2a:	e01a      	b.n	8002e62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d116      	bne.n	8002e62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	4413      	add	r3, r2
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00da      	lsls	r2, r3, #3
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	4413      	add	r3, r2
 8002e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2200      	movs	r2, #0
 8002e60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d126      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x156>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4413      	add	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	00da      	lsls	r2, r3, #3
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4413      	add	r3, r2
 8002e92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	801a      	strh	r2, [r3, #0]
 8002ebc:	e017      	b.n	8002eee <HAL_PCD_EP_DB_Transmit+0x186>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d113      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x186>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	623b      	str	r3, [r7, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00da      	lsls	r2, r3, #3
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f007 f884 	bl	800a002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 82d2 	beq.w	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f20:	827b      	strh	r3, [r7, #18]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	441a      	add	r2, r3
 8002f30:	8a7b      	ldrh	r3, [r7, #18]
 8002f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	8013      	strh	r3, [r2, #0]
 8002f46:	e2b0      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d021      	beq.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 8284 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002faa:	441a      	add	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb8:	441a      	add	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d309      	bcc.n	8002fde <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6a1a      	ldr	r2, [r3, #32]
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e015      	b.n	800300a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ff4:	e009      	b.n	800300a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2200      	movs	r2, #0
 8003008:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d155      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x356>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003020:	b29b      	uxth	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	4413      	add	r3, r2
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	4413      	add	r3, r2
 8003034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	2b3e      	cmp	r3, #62	; 0x3e
 800303e:	d916      	bls.n	800306e <HAL_PCD_EP_DB_Transmit+0x306>
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	3b01      	subs	r3, #1
 8003054:	64bb      	str	r3, [r7, #72]	; 0x48
 8003056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003058:	b29b      	uxth	r3, r3
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	b29b      	uxth	r3, r3
 800305e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003066:	b29a      	uxth	r2, r3
 8003068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	e043      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x332>
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800307e:	b29a      	uxth	r2, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29a      	uxth	r2, r3
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e02d      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800309a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x348>
 80030aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ac:	3301      	adds	r3, #1
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e01b      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	785b      	ldrb	r3, [r3, #1]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d117      	bne.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030da:	4413      	add	r3, r2
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	00da      	lsls	r2, r3, #3
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	4413      	add	r3, r2
 80030e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	891a      	ldrh	r2, [r3, #8]
 8003102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003104:	b29b      	uxth	r3, r3
 8003106:	f005 f836 	bl	8008176 <USB_WritePMA>
 800310a:	e1ce      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003114:	b29b      	uxth	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003130:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800313c:	429a      	cmp	r2, r3
 800313e:	d307      	bcc.n	8003150 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003148:	1ad2      	subs	r2, r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e002      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 80c4 	bne.w	80032e8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d126      	bne.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	66bb      	str	r3, [r7, #104]	; 0x68
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800317c:	4413      	add	r3, r2
 800317e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00da      	lsls	r2, r3, #3
 8003186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003188:	4413      	add	r3, r2
 800318a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800318e:	667b      	str	r3, [r7, #100]	; 0x64
 8003190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800319a:	b29a      	uxth	r2, r3
 800319c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e01a      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x484>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d116      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x484>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	673b      	str	r3, [r7, #112]	; 0x70
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d2:	4413      	add	r3, r2
 80031d4:	673b      	str	r3, [r7, #112]	; 0x70
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031de:	4413      	add	r3, r2
 80031e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12f      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	4413      	add	r3, r2
 8003214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	00da      	lsls	r2, r3, #3
 800321e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003222:	4413      	add	r3, r2
 8003224:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800322c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003238:	b29a      	uxth	r2, r3
 800323a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003250:	b29a      	uxth	r2, r3
 8003252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e017      	b.n	800328a <HAL_PCD_EP_DB_Transmit+0x522>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d113      	bne.n	800328a <HAL_PCD_EP_DB_Transmit+0x522>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003270:	4413      	add	r3, r2
 8003272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	00da      	lsls	r2, r3, #3
 800327a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800327c:	4413      	add	r3, r2
 800327e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003282:	67bb      	str	r3, [r7, #120]	; 0x78
 8003284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f006 feb6 	bl	800a002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8104 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e0e0      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d121      	bne.n	8003336 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 80b4 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800334a:	441a      	add	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003358:	441a      	add	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d309      	bcc.n	800337e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	621a      	str	r2, [r3, #32]
 800337c:	e015      	b.n	80033aa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003386:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003394:	e009      	b.n	80033aa <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	663b      	str	r3, [r7, #96]	; 0x60
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d155      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033cc:	4413      	add	r3, r2
 80033ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	00da      	lsls	r2, r3, #3
 80033d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d8:	4413      	add	r3, r2
 80033da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033de:	657b      	str	r3, [r7, #84]	; 0x54
 80033e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e2:	2b3e      	cmp	r3, #62	; 0x3e
 80033e4:	d916      	bls.n	8003414 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	677b      	str	r3, [r7, #116]	; 0x74
 80033ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x694>
 80033f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f8:	3b01      	subs	r3, #1
 80033fa:	677b      	str	r3, [r7, #116]	; 0x74
 80033fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fe:	b29b      	uxth	r3, r3
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	b29b      	uxth	r3, r3
 8003404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340c:	b29a      	uxth	r2, r3
 800340e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	e040      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d112      	bne.n	8003440 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800341a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003424:	b29a      	uxth	r2, r3
 8003426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003428:	801a      	strh	r2, [r3, #0]
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29b      	uxth	r3, r3
 8003430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003438:	b29a      	uxth	r2, r3
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	e02a      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	677b      	str	r3, [r7, #116]	; 0x74
 8003446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003452:	3301      	adds	r3, #1
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	b29b      	uxth	r3, r3
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	b29a      	uxth	r2, r3
 800345e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	e018      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d114      	bne.n	8003496 <HAL_PCD_EP_DB_Transmit+0x72e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800347a:	4413      	add	r3, r2
 800347c:	663b      	str	r3, [r7, #96]	; 0x60
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	00da      	lsls	r2, r3, #3
 8003484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003486:	4413      	add	r3, r2
 8003488:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800348c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	b29a      	uxth	r2, r3
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6959      	ldr	r1, [r3, #20]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	895a      	ldrh	r2, [r3, #10]
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f004 fe66 	bl	8008176 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	823b      	strh	r3, [r7, #16]
 80034c6:	8a3b      	ldrh	r3, [r7, #16]
 80034c8:	f083 0310 	eor.w	r3, r3, #16
 80034cc:	823b      	strh	r3, [r7, #16]
 80034ce:	8a3b      	ldrh	r3, [r7, #16]
 80034d0:	f083 0320 	eor.w	r3, r3, #32
 80034d4:	823b      	strh	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	8a3b      	ldrh	r3, [r7, #16]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3788      	adds	r7, #136	; 0x88
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	4613      	mov	r3, r2
 8003514:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e009      	b.n	800354e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800353a:	897a      	ldrh	r2, [r7, #10]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800354e:	893b      	ldrh	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	b29a      	uxth	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	80da      	strh	r2, [r3, #6]
 8003562:	e00b      	b.n	800357c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2201      	movs	r2, #1
 8003568:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	b29a      	uxth	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b29a      	uxth	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d141      	bne.n	8003672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ee:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d131      	bne.n	8003660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035fc:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003602:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800360c:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003614:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	0c9b      	lsrs	r3, r3, #18
 800362e:	3301      	adds	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003632:	e002      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3b01      	subs	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d102      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f2      	bne.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d158      	bne.n	800370e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e057      	b.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003666:	4a2d      	ldr	r2, [pc, #180]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003670:	e04d      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003678:	d141      	bne.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d131      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368e:	4a23      	ldr	r2, [pc, #140]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2232      	movs	r2, #50	; 0x32
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	0c9b      	lsrs	r3, r3, #18
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036be:	e002      	b.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d102      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f2      	bne.n	80036c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d112      	bne.n	800370e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e011      	b.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036fc:	e007      	b.n	800370e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40007000 	.word	0x40007000
 8003720:	20000014 	.word	0x20000014
 8003724:	431bde83 	.word	0x431bde83

08003728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e306      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d075      	beq.n	8003832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003746:	4b97      	ldr	r3, [pc, #604]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003750:	4b94      	ldr	r3, [pc, #592]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d102      	bne.n	8003766 <HAL_RCC_OscConfig+0x3e>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d002      	beq.n	800376c <HAL_RCC_OscConfig+0x44>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d10b      	bne.n	8003784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	4b8d      	ldr	r3, [pc, #564]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d05b      	beq.n	8003830 <HAL_RCC_OscConfig+0x108>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d157      	bne.n	8003830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e2e1      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d106      	bne.n	800379c <HAL_RCC_OscConfig+0x74>
 800378e:	4b85      	ldr	r3, [pc, #532]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a84      	ldr	r2, [pc, #528]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x98>
 80037a6:	4b7f      	ldr	r3, [pc, #508]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a7e      	ldr	r2, [pc, #504]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b7c      	ldr	r3, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7b      	ldr	r2, [pc, #492]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xb0>
 80037c0:	4b78      	ldr	r3, [pc, #480]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a77      	ldr	r2, [pc, #476]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b75      	ldr	r3, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a74      	ldr	r2, [pc, #464]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd feda 	bl	8001598 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd fed6 	bl	8001598 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e2a6      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fa:	4b6a      	ldr	r3, [pc, #424]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xc0>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fd fec6 	bl	8001598 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd fec2 	bl	8001598 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e292      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003822:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0xe8>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383e:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003848:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d102      	bne.n	800385e <HAL_RCC_OscConfig+0x136>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d002      	beq.n	8003864 <HAL_RCC_OscConfig+0x13c>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d11f      	bne.n	80038a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003864:	4b4f      	ldr	r3, [pc, #316]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x154>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e265      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	4946      	ldr	r1, [pc, #280]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCC_OscConfig+0x280>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fe33 	bl	8001500 <HAL_InitTick>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d043      	beq.n	8003928 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e251      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d023      	beq.n	80038f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a3c      	ldr	r2, [pc, #240]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fe6e 	bl	8001598 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fd fe6a 	bl	8001598 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e23a      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d2:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	492d      	ldr	r1, [pc, #180]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
 80038f2:	e01a      	b.n	800392a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f4:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 80038fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd fe4a 	bl	8001598 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fd fe46 	bl	8001598 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e216      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1e0>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d041      	beq.n	80039ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01c      	beq.n	8003978 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd fe23 	bl	8001598 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003956:	f7fd fe1f 	bl	8001598 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1ef      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ef      	beq.n	8003956 <HAL_RCC_OscConfig+0x22e>
 8003976:	e020      	b.n	80039ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x27c>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fe06 	bl	8001598 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800398e:	e00d      	b.n	80039ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd fe02 	bl	8001598 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d906      	bls.n	80039ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1d2      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ea      	bne.n	8003990 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a6 	beq.w	8003b14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039cc:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x2b4>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x2b6>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	4b7f      	ldr	r3, [pc, #508]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	4a7e      	ldr	r2, [pc, #504]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
 80039ee:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039fa:	2301      	movs	r3, #1
 80039fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <HAL_RCC_OscConfig+0x4bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a0a:	4b76      	ldr	r3, [pc, #472]	; (8003be4 <HAL_RCC_OscConfig+0x4bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a75      	ldr	r2, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x4bc>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a16:	f7fd fdbf 	bl	8001598 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1e:	f7fd fdbb 	bl	8001598 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e18b      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a30:	4b6c      	ldr	r3, [pc, #432]	; (8003be4 <HAL_RCC_OscConfig+0x4bc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d108      	bne.n	8003a56 <HAL_RCC_OscConfig+0x32e>
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a54:	e024      	b.n	8003aa0 <HAL_RCC_OscConfig+0x378>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d110      	bne.n	8003a80 <HAL_RCC_OscConfig+0x358>
 8003a5e:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6e:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	4a5a      	ldr	r2, [pc, #360]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a7e:	e00f      	b.n	8003aa0 <HAL_RCC_OscConfig+0x378>
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fd76 	bl	8001598 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fd72 	bl	8001598 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e140      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ed      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x388>
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fd5f 	bl	8001598 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fd5b 	bl	8001598 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e129      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ed      	bne.n	8003ade <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d03c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fd2e 	bl	8001598 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b40:	f7fd fd2a 	bl	8001598 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0fa      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <HAL_RCC_OscConfig+0x418>
 8003b60:	e01b      	b.n	8003b9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b62:	4b1f      	ldr	r3, [pc, #124]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fd fd11 	bl	8001598 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b7a:	f7fd fd0d 	bl	8001598 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0dd      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ef      	bne.n	8003b7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80d1 	beq.w	8003d46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	f000 808b 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d15e      	bne.n	8003c78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCC_OscConfig+0x4b8>)
 8003bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd fce7 	bl	8001598 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	e00c      	b.n	8003be8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fd fce3 	bl	8001598 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d905      	bls.n	8003be8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0b3      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ec      	bne.n	8003bce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <HAL_RCC_OscConfig+0x62c>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6a11      	ldr	r1, [r2, #32]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c04:	3a01      	subs	r2, #1
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c0e:	0212      	lsls	r2, r2, #8
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c16:	0852      	lsrs	r2, r2, #1
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0552      	lsls	r2, r2, #21
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0652      	lsls	r2, r2, #25
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c2e:	06d2      	lsls	r2, r2, #27
 8003c30:	430a      	orrs	r2, r1
 8003c32:	4947      	ldr	r1, [pc, #284]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b45      	ldr	r3, [pc, #276]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a44      	ldr	r2, [pc, #272]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a41      	ldr	r2, [pc, #260]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fca2 	bl	8001598 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fd fc9e 	bl	8001598 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e06e      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x530>
 8003c76:	e066      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a34      	ldr	r2, [pc, #208]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c90:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003c96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fc7a 	bl	8001598 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fc76 	bl	8001598 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e046      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x580>
 8003cc6:	e03e      	b.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e039      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_OscConfig+0x628>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d12c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d123      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d11b      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d113      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	019f800c 	.word	0x019f800c

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e11e      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d70:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d910      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b8e      	ldr	r3, [pc, #568]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 020f 	bic.w	r2, r3, #15
 8003d86:	498c      	ldr	r1, [pc, #560]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b8a      	ldr	r3, [pc, #552]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e106      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d073      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d129      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db4:	4b81      	ldr	r3, [pc, #516]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0f4      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003dc4:	f000 f966 	bl	8004094 <RCC_GetSysClockFreqFromPLLSource>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a7c      	ldr	r2, [pc, #496]	; (8003fc0 <HAL_RCC_ClockConfig+0x268>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d93f      	bls.n	8003e52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d033      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d12f      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003df2:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dfa:	4a70      	ldr	r2, [pc, #448]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e024      	b.n	8003e52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e10:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0c6      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e20:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0be      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e30:	f000 f8ce 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_RCC_ClockConfig+0x268>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d909      	bls.n	8003e52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e46:	4a5d      	ldr	r2, [pc, #372]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b5a      	ldr	r3, [pc, #360]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4957      	ldr	r1, [pc, #348]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fd fb98 	bl	8001598 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fd fb94 	bl	8001598 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e095      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b4e      	ldr	r3, [pc, #312]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ec4:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4936      	ldr	r1, [pc, #216]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d105      	bne.n	8003efa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eee:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d21d      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 020f 	bic.w	r2, r3, #15
 8003f10:	4929      	ldr	r1, [pc, #164]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f18:	f7fd fb3e 	bl	8001598 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f20:	f7fd fb3a 	bl	8001598 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e03b      	b.n	8003fae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCC_ClockConfig+0x260>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1ed      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4917      	ldr	r1, [pc, #92]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490f      	ldr	r1, [pc, #60]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f82:	f000 f825 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_RCC_ClockConfig+0x264>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	490c      	ldr	r1, [pc, #48]	; (8003fc4 <HAL_RCC_ClockConfig+0x26c>)
 8003f94:	5ccb      	ldrb	r3, [r1, r3]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x270>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x274>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd faaa 	bl	8001500 <HAL_InitTick>
 8003fac:	4603      	mov	r3, r0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	04c4b400 	.word	0x04c4b400
 8003fc4:	0800a610 	.word	0x0800a610
 8003fc8:	20000014 	.word	0x20000014
 8003fcc:	20000018 	.word	0x20000018

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	e047      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e03e      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d136      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d10c      	bne.n	800403e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	4a16      	ldr	r2, [pc, #88]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402e:	68d2      	ldr	r2, [r2, #12]
 8004030:	0a12      	lsrs	r2, r2, #8
 8004032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	617b      	str	r3, [r7, #20]
      break;
 800403c:	e00c      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800403e:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	0a12      	lsrs	r2, r2, #8
 800404c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
      break;
 8004056:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0e5b      	lsrs	r3, r3, #25
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e001      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004078:	693b      	ldr	r3, [r7, #16]
}
 800407a:	4618      	mov	r0, r3
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200

08004094 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	3301      	adds	r3, #1
 80040b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d10c      	bne.n	80040d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c2:	68d2      	ldr	r2, [r2, #12]
 80040c4:	0a12      	lsrs	r2, r2, #8
 80040c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	617b      	str	r3, [r7, #20]
    break;
 80040d0:	e00c      	b.n	80040ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	0a12      	lsrs	r2, r2, #8
 80040e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    break;
 80040ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0e5b      	lsrs	r3, r3, #25
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	3301      	adds	r3, #1
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004106:	687b      	ldr	r3, [r7, #4]
}
 8004108:	4618      	mov	r0, r3
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40021000 	.word	0x40021000
 8004118:	007a1200 	.word	0x007a1200
 800411c:	00f42400 	.word	0x00f42400

08004120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004128:	2300      	movs	r3, #0
 800412a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800412c:	2300      	movs	r3, #0
 800412e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8098 	beq.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004142:	4b43      	ldr	r3, [pc, #268]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	4b40      	ldr	r3, [pc, #256]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	4a3f      	ldr	r2, [pc, #252]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
 800415a:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004166:	2301      	movs	r3, #1
 8004168:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a39      	ldr	r2, [pc, #228]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004176:	f7fd fa0f 	bl	8001598 <HAL_GetTick>
 800417a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417c:	e009      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fd fa0b 	bl	8001598 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d902      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	74fb      	strb	r3, [r7, #19]
        break;
 8004190:	e005      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004192:	4b30      	ldr	r3, [pc, #192]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ef      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d159      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041a4:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d019      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041cc:	4b20      	ldr	r3, [pc, #128]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd f9cb 	bl	8001598 <HAL_GetTick>
 8004202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004204:	e00b      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd f9c7 	bl	8001598 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	74fb      	strb	r3, [r7, #19]
            break;
 800421c:	e006      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ec      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10b      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800424a:	7cfb      	ldrb	r3, [r7, #19]
 800424c:	74bb      	strb	r3, [r7, #18]
 800424e:	e005      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800425c:	7c7b      	ldrb	r3, [r7, #17]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004262:	4ba6      	ldr	r3, [pc, #664]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4aa5      	ldr	r2, [pc, #660]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800427a:	4ba0      	ldr	r3, [pc, #640]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 0203 	bic.w	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	499c      	ldr	r1, [pc, #624]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800429c:	4b97      	ldr	r3, [pc, #604]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 020c 	bic.w	r2, r3, #12
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4994      	ldr	r1, [pc, #592]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042be:	4b8f      	ldr	r3, [pc, #572]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	498b      	ldr	r1, [pc, #556]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042e0:	4b86      	ldr	r3, [pc, #536]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4983      	ldr	r1, [pc, #524]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004302:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	497a      	ldr	r1, [pc, #488]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004324:	4b75      	ldr	r3, [pc, #468]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	4972      	ldr	r1, [pc, #456]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4969      	ldr	r1, [pc, #420]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004368:	4b64      	ldr	r3, [pc, #400]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4961      	ldr	r1, [pc, #388]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438a:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	4958      	ldr	r1, [pc, #352]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	4950      	ldr	r1, [pc, #320]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043cc:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a4a      	ldr	r2, [pc, #296]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e4:	4b45      	ldr	r3, [pc, #276]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	4942      	ldr	r1, [pc, #264]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004404:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800441c:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4934      	ldr	r1, [pc, #208]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004446:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d015      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004462:	4926      	ldr	r1, [pc, #152]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004472:	d105      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	4918      	ldr	r1, [pc, #96]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044aa:	d105      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e2:	d105      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000

08004500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e049      	b.n	80045a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fe84 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 fde8 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04a      	b.n	800465e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <HAL_TIM_Base_Start_IT+0xbc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d013      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_TIM_Base_Start_IT+0xc0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <HAL_TIM_Base_Start_IT+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x6c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <HAL_TIM_Base_Start_IT+0xc8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x6c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_TIM_Base_Start_IT+0xcc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d115      	bne.n	8004648 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <HAL_TIM_Base_Start_IT+0xd0>)
 8004624:	4013      	ands	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b06      	cmp	r3, #6
 800462c:	d015      	beq.n	800465a <HAL_TIM_Base_Start_IT+0xaa>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004634:	d011      	beq.n	800465a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0201 	orr.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	e008      	b.n	800465a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e000      	b.n	800465c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	00010007 	.word	0x00010007

08004684 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e049      	b.n	800472a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fd7c 	bl	80011a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f000 fd26 	bl	8005114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x24>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e03c      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d109      	bne.n	8004772 <HAL_TIM_PWM_Start+0x3e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e02f      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d109      	bne.n	800478c <HAL_TIM_PWM_Start+0x58>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e022      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d109      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x72>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e015      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x8c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e008      	b.n	80047d2 <HAL_TIM_PWM_Start+0x9e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e097      	b.n	800490a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0xb6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e023      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xc6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	e01b      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xd6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	e013      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xe6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004818:	e00b      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xf6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	e003      	b.n	8004832 <HAL_TIM_PWM_Start+0xfe>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fff0 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a33      	ldr	r2, [pc, #204]	; (8004914 <HAL_TIM_PWM_Start+0x1e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_TIM_PWM_Start+0x1e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a30      	ldr	r2, [pc, #192]	; (800491c <HAL_TIM_PWM_Start+0x1e8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <HAL_TIM_PWM_Start+0x1ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <HAL_TIM_PWM_Start+0x1f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_Start+0x142>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_TIM_PWM_Start+0x144>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a20      	ldr	r2, [pc, #128]	; (8004914 <HAL_TIM_PWM_Start+0x1e0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d018      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d013      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_TIM_PWM_Start+0x1f4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00e      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_TIM_PWM_Start+0x1f8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_TIM_PWM_Start+0x1e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x194>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a16      	ldr	r2, [pc, #88]	; (800491c <HAL_TIM_PWM_Start+0x1e8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d115      	bne.n	80048f4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_TIM_PWM_Start+0x1fc>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d015      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d011      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	e008      	b.n	8004906 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e000      	b.n	8004908 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40013400 	.word	0x40013400
 800491c:	40014000 	.word	0x40014000
 8004920:	40014400 	.word	0x40014400
 8004924:	40014800 	.word	0x40014800
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	00010007 	.word	0x00010007

08004934 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e097      	b.n	8004a78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc fb7d 	bl	800105c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 fbc3 	bl	8005114 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4313      	orrs	r3, r2
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049d4:	f023 030c 	bic.w	r3, r3, #12
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	4313      	orrs	r3, r2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	011a      	lsls	r2, r3, #4
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	031b      	lsls	r3, r3, #12
 8004a04:	4313      	orrs	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4313      	orrs	r3, r2
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d110      	bne.n	8004ad2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d102      	bne.n	8004abc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab6:	7b7b      	ldrb	r3, [r7, #13]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e069      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad0:	e031      	b.n	8004b36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d110      	bne.n	8004afa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d102      	bne.n	8004ae4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ade:	7b3b      	ldrb	r3, [r7, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e055      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af8:	e01d      	b.n	8004b36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d108      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b00:	7bbb      	ldrb	r3, [r7, #14]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b06:	7b7b      	ldrb	r3, [r7, #13]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d102      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0c:	7b3b      	ldrb	r3, [r7, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d001      	beq.n	8004b16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e03e      	b.n	8004b94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_TIM_Encoder_Start+0xc4>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d008      	beq.n	8004b54 <HAL_TIM_Encoder_Start+0xd4>
 8004b42:	e00f      	b.n	8004b64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe67 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 8004b52:	e016      	b.n	8004b82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fe5f 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 8004b62:	e00e      	b.n	8004b82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fe57 	bl	8005820 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	2104      	movs	r1, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fe50 	bl	8005820 <TIM_CCxChannelCmd>
      break;
 8004b80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d122      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0202 	mvn.w	r2, #2
 8004bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa7a 	bl	80050d8 <HAL_TIM_IC_CaptureCallback>
 8004be4:	e005      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa6c 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fa7d 	bl	80050ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d122      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d11b      	bne.n	8004c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0204 	mvn.w	r2, #4
 8004c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa50 	bl	80050d8 <HAL_TIM_IC_CaptureCallback>
 8004c38:	e005      	b.n	8004c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa42 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa53 	bl	80050ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0208 	mvn.w	r2, #8
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2204      	movs	r2, #4
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa26 	bl	80050d8 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa18 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fa29 	bl	80050ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0210 	mvn.w	r2, #16
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2208      	movs	r2, #8
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f9fc 	bl	80050d8 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9ee 	bl	80050c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f9ff 	bl	80050ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0201 	mvn.w	r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fb fcf6 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b80      	cmp	r3, #128	; 0x80
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 ff70 	bl	8005c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 ff63 	bl	8005c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d10e      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9ad 	bl	8005100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d10e      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0220 	mvn.w	r2, #32
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 ff23 	bl	8005c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de0:	d10f      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 ff29 	bl	8005c54 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 ff1b 	bl	8005c68 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e40:	d10f      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ff0d 	bl	8005c7c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e70:	d10f      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 feff 	bl	8005c90 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0ff      	b.n	80050ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b14      	cmp	r3, #20
 8004ec6:	f200 80f0 	bhi.w	80050aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	080050ab 	.word	0x080050ab
 8004ed8:	080050ab 	.word	0x080050ab
 8004edc:	080050ab 	.word	0x080050ab
 8004ee0:	08004f65 	.word	0x08004f65
 8004ee4:	080050ab 	.word	0x080050ab
 8004ee8:	080050ab 	.word	0x080050ab
 8004eec:	080050ab 	.word	0x080050ab
 8004ef0:	08004fa7 	.word	0x08004fa7
 8004ef4:	080050ab 	.word	0x080050ab
 8004ef8:	080050ab 	.word	0x080050ab
 8004efc:	080050ab 	.word	0x080050ab
 8004f00:	08004fe7 	.word	0x08004fe7
 8004f04:	080050ab 	.word	0x080050ab
 8004f08:	080050ab 	.word	0x080050ab
 8004f0c:	080050ab 	.word	0x080050ab
 8004f10:	08005029 	.word	0x08005029
 8004f14:	080050ab 	.word	0x080050ab
 8004f18:	080050ab 	.word	0x080050ab
 8004f1c:	080050ab 	.word	0x080050ab
 8004f20:	08005069 	.word	0x08005069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f982 	bl	8005234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0204 	bic.w	r2, r2, #4
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
      break;
 8004f62:	e0a5      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f9f2 	bl	8005354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	619a      	str	r2, [r3, #24]
      break;
 8004fa4:	e084      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fa5b 	bl	8005468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0208 	orr.w	r2, r2, #8
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0204 	bic.w	r2, r2, #4
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	61da      	str	r2, [r3, #28]
      break;
 8004fe4:	e064      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fac3 	bl	8005578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	021a      	lsls	r2, r3, #8
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
      break;
 8005026:	e043      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fb2c 	bl	800568c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0208 	orr.w	r2, r2, #8
 8005042:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0204 	bic.w	r2, r2, #4
 8005052:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005066:	e023      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb70 	bl	8005754 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005092:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	021a      	lsls	r2, r3, #8
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050a8:	e002      	b.n	80050b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]
      break;
 80050ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop

080050c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3c      	ldr	r2, [pc, #240]	; (8005218 <TIM_Base_SetConfig+0x104>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005132:	d00b      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a39      	ldr	r2, [pc, #228]	; (800521c <TIM_Base_SetConfig+0x108>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a38      	ldr	r2, [pc, #224]	; (8005220 <TIM_Base_SetConfig+0x10c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_Base_SetConfig+0x38>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a37      	ldr	r2, [pc, #220]	; (8005224 <TIM_Base_SetConfig+0x110>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <TIM_Base_SetConfig+0x104>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01b      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516c:	d017      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <TIM_Base_SetConfig+0x108>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <TIM_Base_SetConfig+0x10c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00f      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <TIM_Base_SetConfig+0x110>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00b      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a27      	ldr	r2, [pc, #156]	; (8005228 <TIM_Base_SetConfig+0x114>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a26      	ldr	r2, [pc, #152]	; (800522c <TIM_Base_SetConfig+0x118>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a25      	ldr	r2, [pc, #148]	; (8005230 <TIM_Base_SetConfig+0x11c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d108      	bne.n	80051b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <TIM_Base_SetConfig+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a11      	ldr	r2, [pc, #68]	; (8005224 <TIM_Base_SetConfig+0x110>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a10      	ldr	r2, [pc, #64]	; (8005228 <TIM_Base_SetConfig+0x114>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0f      	ldr	r2, [pc, #60]	; (800522c <TIM_Base_SetConfig+0x118>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xe8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <TIM_Base_SetConfig+0x11c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <TIM_OC1_SetConfig+0x10c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <TIM_OC1_SetConfig+0x110>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <TIM_OC1_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a29      	ldr	r2, [pc, #164]	; (800534c <TIM_OC1_SetConfig+0x118>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a28      	ldr	r2, [pc, #160]	; (8005350 <TIM_OC1_SetConfig+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0308 	bic.w	r3, r3, #8
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <TIM_OC1_SetConfig+0x10c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1a      	ldr	r2, [pc, #104]	; (8005344 <TIM_OC1_SetConfig+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <TIM_OC1_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <TIM_OC1_SetConfig+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <TIM_OC1_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0210 	bic.w	r2, r3, #16
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0320 	bic.w	r3, r3, #32
 80053a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a28      	ldr	r2, [pc, #160]	; (8005454 <TIM_OC2_SetConfig+0x100>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0x6c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <TIM_OC2_SetConfig+0x104>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10d      	bne.n	80053dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <TIM_OC2_SetConfig+0x100>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <TIM_OC2_SetConfig+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	; (800545c <TIM_OC2_SetConfig+0x108>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	; (8005460 <TIM_OC2_SetConfig+0x10c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_OC2_SetConfig+0x110>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d113      	bne.n	800542c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_OC3_SetConfig+0xfc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_OC3_SetConfig+0x6a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_OC3_SetConfig+0x100>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10d      	bne.n	80054ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <TIM_OC3_SetConfig+0xfc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00f      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <TIM_OC3_SetConfig+0x100>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1a      	ldr	r2, [pc, #104]	; (800556c <TIM_OC3_SetConfig+0x104>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <TIM_OC3_SetConfig+0x108>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <TIM_OC3_SetConfig+0x10c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d113      	bne.n	800553e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	031b      	lsls	r3, r3, #12
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a28      	ldr	r2, [pc, #160]	; (8005678 <TIM_OC4_SetConfig+0x100>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d003      	beq.n	80055e4 <TIM_OC4_SetConfig+0x6c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a27      	ldr	r2, [pc, #156]	; (800567c <TIM_OC4_SetConfig+0x104>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10d      	bne.n	8005600 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	031b      	lsls	r3, r3, #12
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <TIM_OC4_SetConfig+0x100>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00f      	beq.n	8005628 <TIM_OC4_SetConfig+0xb0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a1c      	ldr	r2, [pc, #112]	; (800567c <TIM_OC4_SetConfig+0x104>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_OC4_SetConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <TIM_OC4_SetConfig+0x108>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_OC4_SetConfig+0xb0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a1a      	ldr	r2, [pc, #104]	; (8005684 <TIM_OC4_SetConfig+0x10c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC4_SetConfig+0xb0>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a19      	ldr	r2, [pc, #100]	; (8005688 <TIM_OC4_SetConfig+0x110>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d113      	bne.n	8005650 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005636:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00
 800567c:	40013400 	.word	0x40013400
 8005680:	40014000 	.word	0x40014000
 8005684:	40014400 	.word	0x40014400
 8005688:	40014800 	.word	0x40014800

0800568c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <TIM_OC5_SetConfig+0xb4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_OC5_SetConfig+0x7a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a16      	ldr	r2, [pc, #88]	; (8005744 <TIM_OC5_SetConfig+0xb8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_OC5_SetConfig+0x7a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <TIM_OC5_SetConfig+0xbc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_OC5_SetConfig+0x7a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a14      	ldr	r2, [pc, #80]	; (800574c <TIM_OC5_SetConfig+0xc0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC5_SetConfig+0x7a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <TIM_OC5_SetConfig+0xc4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d109      	bne.n	800571a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800579a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	051b      	lsls	r3, r3, #20
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a18      	ldr	r2, [pc, #96]	; (800580c <TIM_OC6_SetConfig+0xb8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00f      	beq.n	80057d0 <TIM_OC6_SetConfig+0x7c>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <TIM_OC6_SetConfig+0xbc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_OC6_SetConfig+0x7c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a16      	ldr	r2, [pc, #88]	; (8005814 <TIM_OC6_SetConfig+0xc0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_OC6_SetConfig+0x7c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a15      	ldr	r2, [pc, #84]	; (8005818 <TIM_OC6_SetConfig+0xc4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC6_SetConfig+0x7c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a14      	ldr	r2, [pc, #80]	; (800581c <TIM_OC6_SetConfig+0xc8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d109      	bne.n	80057e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40013400 	.word	0x40013400
 8005814:	40014000 	.word	0x40014000
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800

08005820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2201      	movs	r2, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_TIMEx_PWMN_Start+0x24>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e022      	b.n	80058d6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d109      	bne.n	80058aa <HAL_TIMEx_PWMN_Start+0x3e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	bf14      	ite	ne
 80058a2:	2301      	movne	r3, #1
 80058a4:	2300      	moveq	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e015      	b.n	80058d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d109      	bne.n	80058c4 <HAL_TIMEx_PWMN_Start+0x58>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	e008      	b.n	80058d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e069      	b.n	80059b2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <HAL_TIMEx_PWMN_Start+0x82>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	e013      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0xaa>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d104      	bne.n	80058fe <HAL_TIMEx_PWMN_Start+0x92>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058fc:	e00b      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0xaa>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b08      	cmp	r3, #8
 8005902:	d104      	bne.n	800590e <HAL_TIMEx_PWMN_Start+0xa2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800590c:	e003      	b.n	8005916 <HAL_TIMEx_PWMN_Start+0xaa>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2204      	movs	r2, #4
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f9c0 	bl	8005ca4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005932:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <HAL_TIMEx_PWMN_Start+0x150>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIMEx_PWMN_Start+0x104>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005946:	d013      	beq.n	8005970 <HAL_TIMEx_PWMN_Start+0x104>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_TIMEx_PWMN_Start+0x154>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIMEx_PWMN_Start+0x104>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIMEx_PWMN_Start+0x104>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_PWMN_Start+0x104>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIMEx_PWMN_Start+0x160>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d115      	bne.n	800599c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b06      	cmp	r3, #6
 8005980:	d015      	beq.n	80059ae <HAL_TIMEx_PWMN_Start+0x142>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d011      	beq.n	80059ae <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599a:	e008      	b.n	80059ae <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e000      	b.n	80059b0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	00010007 	.word	0x00010007

080059d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e065      	b.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d013      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a13      	ldr	r2, [pc, #76]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e087      	b.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a27      	ldr	r2, [pc, #156]	; (8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d106      	bne.n	8005b90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1e      	ldr	r2, [pc, #120]	; (8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d126      	bne.n	8005bf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	051b      	lsls	r3, r3, #20
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d106      	bne.n	8005bf2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400

08005c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cfe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d24:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d52:	b084      	sub	sp, #16
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	f107 0014 	add.w	r0, r7, #20
 8005d60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	b004      	add	sp, #16
 8005d92:	4770      	bx	lr

08005d94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b09d      	sub	sp, #116	; 0x74
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d81f      	bhi.n	8005e06 <USB_ActivateEndpoint+0x72>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USB_ActivateEndpoint+0x38>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e0f 	.word	0x08005e0f
 8005dd8:	08005deb 	.word	0x08005deb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ddc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005de4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005de8:	e012      	b.n	8005e10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005dea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005df2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005df6:	e00b      	b.n	8005e10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005df8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e04:	e004      	b.n	8005e10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e0c:	e000      	b.n	8005e10 <USB_ActivateEndpoint+0x7c>
      break;
 8005e0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	b21a      	sxth	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	7b1b      	ldrb	r3, [r3, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 8149 	bne.w	8006118 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8084 	beq.w	8005f98 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00da      	lsls	r2, r3, #3
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	88db      	ldrh	r3, [r3, #6]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	827b      	strh	r3, [r7, #18]
 8005ed2:	8a7b      	ldrh	r3, [r7, #18]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <USB_ActivateEndpoint+0x180>
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	823b      	strh	r3, [r7, #16]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	8a3b      	ldrh	r3, [r7, #16]
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d020      	beq.n	8005f5e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	81bb      	strh	r3, [r7, #12]
 8005f34:	89bb      	ldrh	r3, [r7, #12]
 8005f36:	f083 0320 	eor.w	r3, r3, #32
 8005f3a:	81bb      	strh	r3, [r7, #12]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
 8005f5c:	e2a6      	b.n	80064ac <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	81fb      	strh	r3, [r7, #14]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	89fb      	ldrh	r3, [r7, #14]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]
 8005f96:	e289      	b.n	80064ac <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	4413      	add	r3, r2
 8005faa:	633b      	str	r3, [r7, #48]	; 0x30
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00da      	lsls	r2, r3, #3
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	88db      	ldrh	r3, [r3, #6]
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	4413      	add	r3, r2
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00da      	lsls	r2, r3, #3
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff6:	d918      	bls.n	800602a <USB_ActivateEndpoint+0x296>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <USB_ActivateEndpoint+0x27e>
 800600c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800600e:	3b01      	subs	r3, #1
 8006010:	66bb      	str	r3, [r7, #104]	; 0x68
 8006012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006014:	b29b      	uxth	r3, r3
 8006016:	029b      	lsls	r3, r3, #10
 8006018:	b29b      	uxth	r3, r3
 800601a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006022:	b29a      	uxth	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	e029      	b.n	800607e <USB_ActivateEndpoint+0x2ea>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d112      	bne.n	8006058 <USB_ActivateEndpoint+0x2c4>
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800603c:	b29a      	uxth	r2, r3
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e012      	b.n	800607e <USB_ActivateEndpoint+0x2ea>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <USB_ActivateEndpoint+0x2de>
 800606c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800606e:	3301      	adds	r3, #1
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
 8006072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006074:	b29b      	uxth	r3, r3
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	b29a      	uxth	r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	847b      	strh	r3, [r7, #34]	; 0x22
 800608c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800608e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01b      	beq.n	80060ce <USB_ActivateEndpoint+0x33a>
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	843b      	strh	r3, [r7, #32]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	441a      	add	r2, r3
 80060b8:	8c3b      	ldrh	r3, [r7, #32]
 80060ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e4:	83fb      	strh	r3, [r7, #30]
 80060e6:	8bfb      	ldrh	r3, [r7, #30]
 80060e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060ec:	83fb      	strh	r3, [r7, #30]
 80060ee:	8bfb      	ldrh	r3, [r7, #30]
 80060f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060f4:	83fb      	strh	r3, [r7, #30]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	8bfb      	ldrh	r3, [r7, #30]
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]
 8006116:	e1c9      	b.n	80064ac <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	78db      	ldrb	r3, [r3, #3]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d11e      	bne.n	800615e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006150:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
 800615c:	e01d      	b.n	800619a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006174:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061aa:	4413      	add	r3, r2
 80061ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	00da      	lsls	r2, r3, #3
 80061b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	891b      	ldrh	r3, [r3, #8]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	657b      	str	r3, [r7, #84]	; 0x54
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d8:	b29b      	uxth	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061de:	4413      	add	r3, r2
 80061e0:	657b      	str	r3, [r7, #84]	; 0x54
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00da      	lsls	r2, r3, #3
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	4413      	add	r3, r2
 80061ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061f0:	653b      	str	r3, [r7, #80]	; 0x50
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	895b      	ldrh	r3, [r3, #10]
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8093 	bne.w	8006332 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800621c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <USB_ActivateEndpoint+0x4cc>
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800624c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625c:	b29b      	uxth	r3, r3
 800625e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800626e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <USB_ActivateEndpoint+0x51c>
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80062d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062d6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800631c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632c:	b29b      	uxth	r3, r3
 800632e:	8013      	strh	r3, [r2, #0]
 8006330:	e0bc      	b.n	80064ac <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01d      	beq.n	800638a <USB_ActivateEndpoint+0x5f6>
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800637e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	b29b      	uxth	r3, r3
 8006388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800639a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01d      	beq.n	80063e2 <USB_ActivateEndpoint+0x64e>
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	78db      	ldrb	r3, [r3, #3]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d024      	beq.n	8006434 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006404:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006408:	f083 0320 	eor.w	r3, r3, #32
 800640c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]
 8006432:	e01d      	b.n	8006470 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	441a      	add	r2, r3
 8006458:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800645c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646c:	b29b      	uxth	r3, r3
 800646e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3774      	adds	r7, #116	; 0x74
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064bc:	b480      	push	{r7}
 80064be:	b08d      	sub	sp, #52	; 0x34
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	7b1b      	ldrb	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 808e 	bne.w	80065ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d044      	beq.n	8006562 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	81bb      	strh	r3, [r7, #12]
 80064e6:	89bb      	ldrh	r3, [r7, #12]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01b      	beq.n	8006528 <USB_DeactivateEndpoint+0x6c>
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	817b      	strh	r3, [r7, #10]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	897b      	ldrh	r3, [r7, #10]
 8006514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006524:	b29b      	uxth	r3, r3
 8006526:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653e:	813b      	strh	r3, [r7, #8]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	893b      	ldrh	r3, [r7, #8]
 800654c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655c:	b29b      	uxth	r3, r3
 800655e:	8013      	strh	r3, [r2, #0]
 8006560:	e192      	b.n	8006888 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	827b      	strh	r3, [r7, #18]
 8006570:	8a7b      	ldrh	r3, [r7, #18]
 8006572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01b      	beq.n	80065b2 <USB_DeactivateEndpoint+0xf6>
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	823b      	strh	r3, [r7, #16]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	8a3b      	ldrh	r3, [r7, #16]
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	81fb      	strh	r3, [r7, #14]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	89fb      	ldrh	r3, [r7, #14]
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
 80065ea:	e14d      	b.n	8006888 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 80a5 	bne.w	8006740 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	843b      	strh	r3, [r7, #32]
 8006604:	8c3b      	ldrh	r3, [r7, #32]
 8006606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01b      	beq.n	8006646 <USB_DeactivateEndpoint+0x18a>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	83fb      	strh	r3, [r7, #30]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	8bfb      	ldrh	r3, [r7, #30]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	83bb      	strh	r3, [r7, #28]
 8006654:	8bbb      	ldrh	r3, [r7, #28]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01b      	beq.n	8006696 <USB_DeactivateEndpoint+0x1da>
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	837b      	strh	r3, [r7, #26]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	8b7b      	ldrh	r3, [r7, #26]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	833b      	strh	r3, [r7, #24]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	8b3b      	ldrh	r3, [r7, #24]
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	82fb      	strh	r3, [r7, #22]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8afb      	ldrh	r3, [r7, #22]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671c:	82bb      	strh	r3, [r7, #20]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	8abb      	ldrh	r3, [r7, #20]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
 800673e:	e0a3      	b.n	8006888 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800674e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01b      	beq.n	8006790 <USB_DeactivateEndpoint+0x2d4>
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800677c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678c:	b29b      	uxth	r3, r3
 800678e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800679e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01b      	beq.n	80067e0 <USB_DeactivateEndpoint+0x324>
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	853b      	strh	r3, [r7, #40]	; 0x28
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	441a      	add	r2, r3
 80067ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067dc:	b29b      	uxth	r3, r3
 80067de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	847b      	strh	r3, [r7, #34]	; 0x22
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	b29b      	uxth	r3, r3
 8006886:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3734      	adds	r7, #52	; 0x34
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b0c2      	sub	sp, #264	; 0x108
 800689a:	af00      	add	r7, sp, #0
 800689c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 867b 	bne.w	80075b8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d908      	bls.n	80068f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80068ee:	e007      	b.n	8006900 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	7b1b      	ldrb	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d13a      	bne.n	8006986 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6959      	ldr	r1, [r3, #20]
 800691c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	88da      	ldrh	r2, [r3, #6]
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692c:	b29b      	uxth	r3, r3
 800692e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006932:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006936:	6800      	ldr	r0, [r0, #0]
 8006938:	f001 fc1d 	bl	8008176 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800694c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	00da      	lsls	r2, r3, #3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	f000 bde3 	b.w	800754c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	78db      	ldrb	r3, [r3, #3]
 8006992:	2b02      	cmp	r3, #2
 8006994:	f040 843a 	bne.w	800720c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a1a      	ldr	r2, [r3, #32]
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	f240 83b7 	bls.w	8007124 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	1ad2      	subs	r2, r2, r3
 8006a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 81b3 	beq.w	8006dbe <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d16d      	bne.n	8006b50 <USB_EPStartXfer+0x2ba>
 8006a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	4413      	add	r3, r2
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	00da      	lsls	r2, r3, #3
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab6:	d91c      	bls.n	8006af2 <USB_EPStartXfer+0x25c>
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <USB_EPStartXfer+0x242>
 8006ace:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	029b      	lsls	r3, r3, #10
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e053      	b.n	8006b9a <USB_EPStartXfer+0x304>
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d112      	bne.n	8006b20 <USB_EPStartXfer+0x28a>
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	801a      	strh	r2, [r3, #0]
 8006b1e:	e03c      	b.n	8006b9a <USB_EPStartXfer+0x304>
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <USB_EPStartXfer+0x2aa>
 8006b36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e024      	b.n	8006b9a <USB_EPStartXfer+0x304>
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d11c      	bne.n	8006b9a <USB_EPStartXfer+0x304>
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	4413      	add	r3, r2
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	00da      	lsls	r2, r3, #3
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	4413      	add	r3, r2
 8006b8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	895b      	ldrh	r3, [r3, #10]
 8006ba6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6959      	ldr	r1, [r3, #20]
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bc4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bc8:	6800      	ldr	r0, [r0, #0]
 8006bca:	f001 fad4 	bl	8008176 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	441a      	add	r2, r3
 8006be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d90f      	bls.n	8006c28 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a1a      	ldr	r2, [r3, #32]
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	621a      	str	r2, [r3, #32]
 8006c26:	e00e      	b.n	8006c46 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d16d      	bne.n	8006d32 <USB_EPStartXfer+0x49c>
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	4413      	add	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	00da      	lsls	r2, r3, #3
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c96:	2b3e      	cmp	r3, #62	; 0x3e
 8006c98:	d91c      	bls.n	8006cd4 <USB_EPStartXfer+0x43e>
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <USB_EPStartXfer+0x424>
 8006cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	e059      	b.n	8006d88 <USB_EPStartXfer+0x4f2>
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d112      	bne.n	8006d02 <USB_EPStartXfer+0x46c>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	801a      	strh	r2, [r3, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e042      	b.n	8006d88 <USB_EPStartXfer+0x4f2>
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <USB_EPStartXfer+0x48c>
 8006d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	029b      	lsls	r3, r3, #10
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e02a      	b.n	8006d88 <USB_EPStartXfer+0x4f2>
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d122      	bne.n	8006d88 <USB_EPStartXfer+0x4f2>
 8006d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	4413      	add	r3, r2
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	00da      	lsls	r2, r3, #3
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	891b      	ldrh	r3, [r3, #8]
 8006d94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6959      	ldr	r1, [r3, #20]
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006db2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	f001 f9dd 	bl	8008176 <USB_WritePMA>
 8006dbc:	e3c6      	b.n	800754c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d16d      	bne.n	8006eaa <USB_EPStartXfer+0x614>
 8006dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dee:	4413      	add	r3, r2
 8006df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	00da      	lsls	r2, r3, #3
 8006e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e02:	4413      	add	r3, r2
 8006e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e10:	d91c      	bls.n	8006e4c <USB_EPStartXfer+0x5b6>
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <USB_EPStartXfer+0x59c>
 8006e28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	029b      	lsls	r3, r3, #10
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e059      	b.n	8006f00 <USB_EPStartXfer+0x66a>
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d112      	bne.n	8006e7a <USB_EPStartXfer+0x5e4>
 8006e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e042      	b.n	8006f00 <USB_EPStartXfer+0x66a>
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <USB_EPStartXfer+0x604>
 8006e90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e02a      	b.n	8006f00 <USB_EPStartXfer+0x66a>
 8006eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d122      	bne.n	8006f00 <USB_EPStartXfer+0x66a>
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eda:	4413      	add	r3, r2
 8006edc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00da      	lsls	r2, r3, #3
 8006eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eee:	4413      	add	r3, r2
 8006ef0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	891b      	ldrh	r3, [r3, #8]
 8006f0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6959      	ldr	r1, [r3, #20]
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	f001 f921 	bl	8008176 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	695a      	ldr	r2, [r3, #20]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	441a      	add	r2, r3
 8006f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6a1a      	ldr	r2, [r3, #32]
 8006f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d90f      	bls.n	8006f8e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	621a      	str	r2, [r3, #32]
 8006f8c:	e00e      	b.n	8006fac <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d16d      	bne.n	80070a4 <USB_EPStartXfer+0x80e>
 8006fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	4413      	add	r3, r2
 8006fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	00da      	lsls	r2, r3, #3
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	2b3e      	cmp	r3, #62	; 0x3e
 800700a:	d91c      	bls.n	8007046 <USB_EPStartXfer+0x7b0>
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <USB_EPStartXfer+0x796>
 8007022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007026:	3b01      	subs	r3, #1
 8007028:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	b29b      	uxth	r3, r3
 8007032:	029b      	lsls	r3, r3, #10
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800703a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800703e:	b29a      	uxth	r2, r3
 8007040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	e053      	b.n	80070ee <USB_EPStartXfer+0x858>
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	2b00      	cmp	r3, #0
 800704c:	d112      	bne.n	8007074 <USB_EPStartXfer+0x7de>
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007058:	b29a      	uxth	r2, r3
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e03c      	b.n	80070ee <USB_EPStartXfer+0x858>
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007078:	085b      	lsrs	r3, r3, #1
 800707a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <USB_EPStartXfer+0x7fe>
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708e:	3301      	adds	r3, #1
 8007090:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007098:	b29b      	uxth	r3, r3
 800709a:	029b      	lsls	r3, r3, #10
 800709c:	b29a      	uxth	r2, r3
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e024      	b.n	80070ee <USB_EPStartXfer+0x858>
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d11c      	bne.n	80070ee <USB_EPStartXfer+0x858>
 80070b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	4413      	add	r3, r2
 80070ca:	643b      	str	r3, [r7, #64]	; 0x40
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00da      	lsls	r2, r3, #3
 80070da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070dc:	4413      	add	r3, r2
 80070de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	895b      	ldrh	r3, [r3, #10]
 80070fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6959      	ldr	r1, [r3, #20]
 800710a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800710e:	b29b      	uxth	r3, r3
 8007110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007114:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007118:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f001 f82a 	bl	8008176 <USB_WritePMA>
 8007122:	e213      	b.n	800754c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800719c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b0:	4413      	add	r3, r2
 80071b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	00da      	lsls	r2, r3, #3
 80071c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071c4:	4413      	add	r3, r2
 80071c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	891b      	ldrh	r3, [r3, #8]
 80071e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6959      	ldr	r1, [r3, #20]
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007200:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007204:	6800      	ldr	r0, [r0, #0]
 8007206:	f000 ffb6 	bl	8008176 <USB_WritePMA>
 800720a:	e19f      	b.n	800754c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800720c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721c:	1ad2      	subs	r2, r2, r3
 800721e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800722a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 80bc 	beq.w	80073ca <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	673b      	str	r3, [r7, #112]	; 0x70
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d16d      	bne.n	800734a <USB_EPStartXfer+0xab4>
 800726e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	66bb      	str	r3, [r7, #104]	; 0x68
 800727a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800728e:	4413      	add	r3, r2
 8007290:	66bb      	str	r3, [r7, #104]	; 0x68
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	00da      	lsls	r2, r3, #3
 80072a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072a2:	4413      	add	r3, r2
 80072a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072a8:	667b      	str	r3, [r7, #100]	; 0x64
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ae:	2b3e      	cmp	r3, #62	; 0x3e
 80072b0:	d91c      	bls.n	80072ec <USB_EPStartXfer+0xa56>
 80072b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d104      	bne.n	80072d2 <USB_EPStartXfer+0xa3c>
 80072c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072cc:	3b01      	subs	r3, #1
 80072ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	029b      	lsls	r3, r3, #10
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e8:	801a      	strh	r2, [r3, #0]
 80072ea:	e053      	b.n	8007394 <USB_EPStartXfer+0xafe>
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d112      	bne.n	800731a <USB_EPStartXfer+0xa84>
 80072f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fe:	b29a      	uxth	r2, r3
 8007300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007302:	801a      	strh	r2, [r3, #0]
 8007304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007312:	b29a      	uxth	r2, r3
 8007314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e03c      	b.n	8007394 <USB_EPStartXfer+0xafe>
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <USB_EPStartXfer+0xaa4>
 8007330:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007334:	3301      	adds	r3, #1
 8007336:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800733a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800733e:	b29b      	uxth	r3, r3
 8007340:	029b      	lsls	r3, r3, #10
 8007342:	b29a      	uxth	r2, r3
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e024      	b.n	8007394 <USB_EPStartXfer+0xafe>
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d11c      	bne.n	8007394 <USB_EPStartXfer+0xafe>
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800736e:	4413      	add	r3, r2
 8007370:	673b      	str	r3, [r7, #112]	; 0x70
 8007372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	00da      	lsls	r2, r3, #3
 8007380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007382:	4413      	add	r3, r2
 8007384:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738e:	b29a      	uxth	r2, r3
 8007390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007392:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	895b      	ldrh	r3, [r3, #10]
 80073a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6959      	ldr	r1, [r3, #20]
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073c2:	6800      	ldr	r0, [r0, #0]
 80073c4:	f000 fed7 	bl	8008176 <USB_WritePMA>
 80073c8:	e0c0      	b.n	800754c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d16d      	bne.n	80074b6 <USB_EPStartXfer+0xc20>
 80073da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073fa:	4413      	add	r3, r2
 80073fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00da      	lsls	r2, r3, #3
 800740c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800740e:	4413      	add	r3, r2
 8007410:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007414:	67bb      	str	r3, [r7, #120]	; 0x78
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741a:	2b3e      	cmp	r3, #62	; 0x3e
 800741c:	d91c      	bls.n	8007458 <USB_EPStartXfer+0xbc2>
 800741e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <USB_EPStartXfer+0xba8>
 8007434:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007438:	3b01      	subs	r3, #1
 800743a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800743e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29b      	uxth	r3, r3
 8007448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800744c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007450:	b29a      	uxth	r2, r3
 8007452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007454:	801a      	strh	r2, [r3, #0]
 8007456:	e05f      	b.n	8007518 <USB_EPStartXfer+0xc82>
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	2b00      	cmp	r3, #0
 800745e:	d112      	bne.n	8007486 <USB_EPStartXfer+0xbf0>
 8007460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800746a:	b29a      	uxth	r2, r3
 800746c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747e:	b29a      	uxth	r2, r3
 8007480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e048      	b.n	8007518 <USB_EPStartXfer+0xc82>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <USB_EPStartXfer+0xc10>
 800749c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074a0:	3301      	adds	r3, #1
 80074a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e030      	b.n	8007518 <USB_EPStartXfer+0xc82>
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	785b      	ldrb	r3, [r3, #1]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d128      	bne.n	8007518 <USB_EPStartXfer+0xc82>
 80074c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ea:	4413      	add	r3, r2
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	00da      	lsls	r2, r3, #3
 80074fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007502:	4413      	add	r3, r2
 8007504:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007510:	b29a      	uxth	r2, r3
 8007512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007516:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	891b      	ldrh	r3, [r3, #8]
 8007524:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6959      	ldr	r1, [r3, #20]
 8007534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007538:	b29b      	uxth	r3, r3
 800753a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800753e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007542:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007546:	6800      	ldr	r0, [r0, #0]
 8007548:	f000 fe15 	bl	8008176 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800754c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007572:	817b      	strh	r3, [r7, #10]
 8007574:	897b      	ldrh	r3, [r7, #10]
 8007576:	f083 0310 	eor.w	r3, r3, #16
 800757a:	817b      	strh	r3, [r7, #10]
 800757c:	897b      	ldrh	r3, [r7, #10]
 800757e:	f083 0320 	eor.w	r3, r3, #32
 8007582:	817b      	strh	r3, [r7, #10]
 8007584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	897b      	ldrh	r3, [r7, #10]
 80075a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8013      	strh	r3, [r2, #0]
 80075b4:	f000 bc9f 	b.w	8007ef6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	7b1b      	ldrb	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 80ae 	bne.w	8007726 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d917      	bls.n	8007616 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80075e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007606:	1ad2      	subs	r2, r2, r3
 8007608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	619a      	str	r2, [r3, #24]
 8007614:	e00e      	b.n	8007634 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2200      	movs	r2, #0
 8007632:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007650:	b29b      	uxth	r3, r3
 8007652:	461a      	mov	r2, r3
 8007654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007658:	4413      	add	r3, r2
 800765a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800765e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	00da      	lsls	r2, r3, #3
 800766c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007670:	4413      	add	r3, r2
 8007672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	2b3e      	cmp	r3, #62	; 0x3e
 8007680:	d91d      	bls.n	80076be <USB_EPStartXfer+0xe28>
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USB_EPStartXfer+0xe0c>
 8007698:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800769c:	3b01      	subs	r3, #1
 800769e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	e3e1      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
 80076be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d116      	bne.n	80076f4 <USB_EPStartXfer+0xe5e>
 80076c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e3c6      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
 80076f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USB_EPStartXfer+0xe7e>
 800770a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007714:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007718:	b29b      	uxth	r3, r3
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	b29a      	uxth	r2, r3
 800771e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007722:	801a      	strh	r2, [r3, #0]
 8007724:	e3ad      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	78db      	ldrb	r3, [r3, #3]
 8007732:	2b02      	cmp	r3, #2
 8007734:	f040 8200 	bne.w	8007b38 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 8091 	bne.w	800786c <USB_EPStartXfer+0xfd6>
 800774a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007766:	b29b      	uxth	r3, r3
 8007768:	461a      	mov	r2, r3
 800776a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800776e:	4413      	add	r3, r2
 8007770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	00da      	lsls	r2, r3, #3
 8007782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007786:	4413      	add	r3, r2
 8007788:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800778c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b3e      	cmp	r3, #62	; 0x3e
 800779e:	d925      	bls.n	80077ec <USB_EPStartXfer+0xf56>
 80077a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	095b      	lsrs	r3, r3, #5
 80077ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <USB_EPStartXfer+0xf3a>
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	3b01      	subs	r3, #1
 80077cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e074      	b.n	80078d6 <USB_EPStartXfer+0x1040>
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d116      	bne.n	800782a <USB_EPStartXfer+0xf94>
 80077fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007808:	b29a      	uxth	r2, r3
 800780a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007820:	b29a      	uxth	r2, r3
 8007822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	e055      	b.n	80078d6 <USB_EPStartXfer+0x1040>
 800782a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <USB_EPStartXfer+0xfc4>
 8007850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785e:	b29b      	uxth	r3, r3
 8007860:	029b      	lsls	r3, r3, #10
 8007862:	b29a      	uxth	r2, r3
 8007864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e034      	b.n	80078d6 <USB_EPStartXfer+0x1040>
 800786c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	785b      	ldrb	r3, [r3, #1]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d12c      	bne.n	80078d6 <USB_EPStartXfer+0x1040>
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007898:	b29b      	uxth	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078a0:	4413      	add	r3, r2
 80078a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	00da      	lsls	r2, r3, #3
 80078b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f040 8091 	bne.w	8007a18 <USB_EPStartXfer+0x1182>
 80078f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007912:	b29b      	uxth	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800791a:	4413      	add	r3, r2
 800791c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	00da      	lsls	r2, r3, #3
 800792e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007932:	4413      	add	r3, r2
 8007934:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b3e      	cmp	r3, #62	; 0x3e
 800794a:	d925      	bls.n	8007998 <USB_EPStartXfer+0x1102>
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	095b      	lsrs	r3, r3, #5
 800795a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	2b00      	cmp	r3, #0
 8007970:	d104      	bne.n	800797c <USB_EPStartXfer+0x10e6>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	3b01      	subs	r3, #1
 8007978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29b      	uxth	r3, r3
 8007986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798e:	b29a      	uxth	r2, r3
 8007990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	e06d      	b.n	8007a74 <USB_EPStartXfer+0x11de>
 8007998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d116      	bne.n	80079d6 <USB_EPStartXfer+0x1140>
 80079a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	e04e      	b.n	8007a74 <USB_EPStartXfer+0x11de>
 80079d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d004      	beq.n	8007a06 <USB_EPStartXfer+0x1170>
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	e02d      	b.n	8007a74 <USB_EPStartXfer+0x11de>
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d125      	bne.n	8007a74 <USB_EPStartXfer+0x11de>
 8007a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a3e:	4413      	add	r3, r2
 8007a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	00da      	lsls	r2, r3, #3
 8007a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a56:	4413      	add	r3, r2
 8007a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 81fe 	beq.w	8007e82 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007aa6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <USB_EPStartXfer+0x1228>
 8007ab2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10d      	bne.n	8007ada <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007abe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 81db 	bne.w	8007e82 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007acc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 81d4 	bne.w	8007e82 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b00:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
 8007b36:	e1a4      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	78db      	ldrb	r3, [r3, #3]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 819a 	bne.w	8007e7e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d917      	bls.n	8007b96 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	619a      	str	r2, [r3, #24]
 8007b94:	e00e      	b.n	8007bb4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d178      	bne.n	8007cb6 <USB_EPStartXfer+0x1420>
 8007bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007be8:	4413      	add	r3, r2
 8007bea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	00da      	lsls	r2, r3, #3
 8007bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c00:	4413      	add	r3, r2
 8007c02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c10:	d91d      	bls.n	8007c4e <USB_EPStartXfer+0x13b8>
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c16:	095b      	lsrs	r3, r3, #5
 8007c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c20:	f003 031f 	and.w	r3, r3, #31
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d104      	bne.n	8007c32 <USB_EPStartXfer+0x139c>
 8007c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e064      	b.n	8007d18 <USB_EPStartXfer+0x1482>
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d116      	bne.n	8007c84 <USB_EPStartXfer+0x13ee>
 8007c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	e049      	b.n	8007d18 <USB_EPStartXfer+0x1482>
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c88:	085b      	lsrs	r3, r3, #1
 8007c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d004      	beq.n	8007ca4 <USB_EPStartXfer+0x140e>
 8007c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	029b      	lsls	r3, r3, #10
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cb2:	801a      	strh	r2, [r3, #0]
 8007cb4:	e030      	b.n	8007d18 <USB_EPStartXfer+0x1482>
 8007cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d128      	bne.n	8007d18 <USB_EPStartXfer+0x1482>
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cea:	4413      	add	r3, r2
 8007cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	00da      	lsls	r2, r3, #3
 8007cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d02:	4413      	add	r3, r2
 8007d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d178      	bne.n	8007e28 <USB_EPStartXfer+0x1592>
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	461a      	mov	r2, r3
 8007d56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	00da      	lsls	r2, r3, #3
 8007d6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d72:	4413      	add	r3, r2
 8007d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d80:	2b3e      	cmp	r3, #62	; 0x3e
 8007d82:	d91d      	bls.n	8007dc0 <USB_EPStartXfer+0x152a>
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d92:	f003 031f 	and.w	r3, r3, #31
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <USB_EPStartXfer+0x150e>
 8007d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	029b      	lsls	r3, r3, #10
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e060      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d116      	bne.n	8007df6 <USB_EPStartXfer+0x1560>
 8007dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	e045      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <USB_EPStartXfer+0x1580>
 8007e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e10:	3301      	adds	r3, #1
 8007e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	029b      	lsls	r3, r3, #10
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	e02c      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
 8007e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d124      	bne.n	8007e82 <USB_EPStartXfer+0x15ec>
 8007e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e4e:	4413      	add	r3, r2
 8007e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	00da      	lsls	r2, r3, #3
 8007e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e66:	4413      	add	r3, r2
 8007e68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e7a:	801a      	strh	r2, [r3, #0]
 8007e7c:	e001      	b.n	8007e82 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e03a      	b.n	8007ef8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007eac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007eb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007eb4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007eb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ebc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ec0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d020      	beq.n	8007f56 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2a:	81bb      	strh	r3, [r7, #12]
 8007f2c:	89bb      	ldrh	r3, [r7, #12]
 8007f2e:	f083 0310 	eor.w	r3, r3, #16
 8007f32:	81bb      	strh	r3, [r7, #12]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	441a      	add	r2, r3
 8007f3e:	89bb      	ldrh	r3, [r7, #12]
 8007f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	8013      	strh	r3, [r2, #0]
 8007f54:	e01f      	b.n	8007f96 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6c:	81fb      	strh	r3, [r7, #14]
 8007f6e:	89fb      	ldrh	r3, [r7, #14]
 8007f70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f74:	81fb      	strh	r3, [r7, #14]
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	441a      	add	r2, r3
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	7b1b      	ldrb	r3, [r3, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 809d 	bne.w	80080f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d04c      	beq.n	800805a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	823b      	strh	r3, [r7, #16]
 8007fce:	8a3b      	ldrh	r3, [r7, #16]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01b      	beq.n	8008010 <USB_EPClearStall+0x6c>
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	81fb      	strh	r3, [r7, #14]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	441a      	add	r2, r3
 8007ffa:	89fb      	ldrh	r3, [r7, #14]
 8007ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800800c:	b29b      	uxth	r3, r3
 800800e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	78db      	ldrb	r3, [r3, #3]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d06c      	beq.n	80080f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	81bb      	strh	r3, [r7, #12]
 8008030:	89bb      	ldrh	r3, [r7, #12]
 8008032:	f083 0320 	eor.w	r3, r3, #32
 8008036:	81bb      	strh	r3, [r7, #12]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	89bb      	ldrh	r3, [r7, #12]
 8008044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008054:	b29b      	uxth	r3, r3
 8008056:	8013      	strh	r3, [r2, #0]
 8008058:	e04b      	b.n	80080f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	82fb      	strh	r3, [r7, #22]
 8008068:	8afb      	ldrh	r3, [r7, #22]
 800806a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01b      	beq.n	80080aa <USB_EPClearStall+0x106>
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	82bb      	strh	r3, [r7, #20]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	441a      	add	r2, r3
 8008094:	8abb      	ldrh	r3, [r7, #20]
 8008096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c0:	827b      	strh	r3, [r7, #18]
 80080c2:	8a7b      	ldrh	r3, [r7, #18]
 80080c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080c8:	827b      	strh	r3, [r7, #18]
 80080ca:	8a7b      	ldrh	r3, [r7, #18]
 80080cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080d0:	827b      	strh	r3, [r7, #18]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	8a7b      	ldrh	r3, [r7, #18]
 80080de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800810c:	78fb      	ldrb	r3, [r7, #3]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d103      	bne.n	800811a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2280      	movs	r2, #128	; 0x80
 8008116:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008164:	b29b      	uxth	r3, r3
 8008166:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008176:	b480      	push	{r7}
 8008178:	b08d      	sub	sp, #52	; 0x34
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	4611      	mov	r1, r2
 8008182:	461a      	mov	r2, r3
 8008184:	460b      	mov	r3, r1
 8008186:	80fb      	strh	r3, [r7, #6]
 8008188:	4613      	mov	r3, r2
 800818a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800818c:	88bb      	ldrh	r3, [r7, #4]
 800818e:	3301      	adds	r3, #1
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ac:	e01b      	b.n	80081e6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	3301      	adds	r3, #1
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	3302      	adds	r3, #2
 80081d8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	3301      	adds	r3, #1
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	3b01      	subs	r3, #1
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e0      	bne.n	80081ae <USB_WritePMA+0x38>
  }
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3734      	adds	r7, #52	; 0x34
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b08b      	sub	sp, #44	; 0x2c
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	4611      	mov	r1, r2
 8008206:	461a      	mov	r2, r3
 8008208:	460b      	mov	r3, r1
 800820a:	80fb      	strh	r3, [r7, #6]
 800820c:	4613      	mov	r3, r2
 800820e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008210:	88bb      	ldrh	r3, [r7, #4]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	b29b      	uxth	r3, r3
 8008216:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
 8008230:	e018      	b.n	8008264 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	3302      	adds	r3, #2
 800823e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	b2da      	uxtb	r2, r3
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	3301      	adds	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	3b01      	subs	r3, #1
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e3      	bne.n	8008232 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800826a:	88bb      	ldrh	r3, [r7, #4]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29b      	uxth	r3, r3
 800827c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	701a      	strb	r2, [r3, #0]
  }
}
 8008286:	bf00      	nop
 8008288:	372c      	adds	r7, #44	; 0x2c
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800829e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082a2:	f002 f901 	bl	800a4a8 <USBD_static_malloc>
 80082a6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80082b6:	2302      	movs	r3, #2
 80082b8:	e066      	b.n	8008388 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7c1b      	ldrb	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d119      	bne.n	80082fe <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ce:	2202      	movs	r2, #2
 80082d0:	2181      	movs	r1, #129	; 0x81
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 ff8d 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e2:	2202      	movs	r2, #2
 80082e4:	2101      	movs	r1, #1
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 ff83 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2210      	movs	r2, #16
 80082f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80082fc:	e016      	b.n	800832c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	2202      	movs	r2, #2
 8008302:	2181      	movs	r1, #129	; 0x81
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 ff74 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	2202      	movs	r2, #2
 8008314:	2101      	movs	r1, #1
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 ff6b 	bl	800a1f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2210      	movs	r2, #16
 8008328:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800832c:	2308      	movs	r3, #8
 800832e:	2203      	movs	r2, #3
 8008330:	2182      	movs	r1, #130	; 0x82
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 ff5d 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	7c1b      	ldrb	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800836c:	2101      	movs	r1, #1
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f002 f82f 	bl	800a3d2 <USBD_LL_PrepareReceive>
 8008374:	e007      	b.n	8008386 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	2101      	movs	r1, #1
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f002 f826 	bl	800a3d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800839c:	2181      	movs	r1, #129	; 0x81
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 ff4d 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083aa:	2101      	movs	r1, #1
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 ff46 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083ba:	2182      	movs	r1, #130	; 0x82
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 ff3e 	bl	800a23e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00e      	beq.n	80083fa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ec:	4618      	mov	r0, r3
 80083ee:	f002 f869 	bl	800a4c4 <USBD_static_free>
    pdev->pClassData = NULL;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008414:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	e0af      	b.n	800858c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008434:	2b00      	cmp	r3, #0
 8008436:	d03f      	beq.n	80084b8 <USBD_CDC_Setup+0xb4>
 8008438:	2b20      	cmp	r3, #32
 800843a:	f040 809f 	bne.w	800857c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d02e      	beq.n	80084a4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b25b      	sxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	da16      	bge.n	800847e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800845c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	88d2      	ldrh	r2, [r2, #6]
 8008462:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	2b07      	cmp	r3, #7
 800846a:	bf28      	it	cs
 800846c:	2307      	movcs	r3, #7
 800846e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	89fa      	ldrh	r2, [r7, #14]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 facf 	bl	8009a1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800847c:	e085      	b.n	800858a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	785a      	ldrb	r2, [r3, #1]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	b2da      	uxtb	r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008494:	6939      	ldr	r1, [r7, #16]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	88db      	ldrh	r3, [r3, #6]
 800849a:	461a      	mov	r2, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fae8 	bl	8009a72 <USBD_CtlPrepareRx>
      break;
 80084a2:	e072      	b.n	800858a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	7850      	ldrb	r0, [r2, #1]
 80084b0:	2200      	movs	r2, #0
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	4798      	blx	r3
      break;
 80084b6:	e068      	b.n	800858a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b0b      	cmp	r3, #11
 80084be:	d852      	bhi.n	8008566 <USBD_CDC_Setup+0x162>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <USBD_CDC_Setup+0xc4>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084f9 	.word	0x080084f9
 80084cc:	08008575 	.word	0x08008575
 80084d0:	08008567 	.word	0x08008567
 80084d4:	08008567 	.word	0x08008567
 80084d8:	08008567 	.word	0x08008567
 80084dc:	08008567 	.word	0x08008567
 80084e0:	08008567 	.word	0x08008567
 80084e4:	08008567 	.word	0x08008567
 80084e8:	08008567 	.word	0x08008567
 80084ec:	08008567 	.word	0x08008567
 80084f0:	08008523 	.word	0x08008523
 80084f4:	0800854d 	.word	0x0800854d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b03      	cmp	r3, #3
 8008502:	d107      	bne.n	8008514 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008504:	f107 030a 	add.w	r3, r7, #10
 8008508:	2202      	movs	r2, #2
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fa84 	bl	8009a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008512:	e032      	b.n	800857a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fa0e 	bl	8009938 <USBD_CtlError>
            ret = USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	75fb      	strb	r3, [r7, #23]
          break;
 8008520:	e02b      	b.n	800857a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b03      	cmp	r3, #3
 800852c:	d107      	bne.n	800853e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800852e:	f107 030d 	add.w	r3, r7, #13
 8008532:	2201      	movs	r2, #1
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fa6f 	bl	8009a1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800853c:	e01d      	b.n	800857a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f9f9 	bl	8009938 <USBD_CtlError>
            ret = USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	75fb      	strb	r3, [r7, #23]
          break;
 800854a:	e016      	b.n	800857a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b03      	cmp	r3, #3
 8008556:	d00f      	beq.n	8008578 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f9ec 	bl	8009938 <USBD_CtlError>
            ret = USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008564:	e008      	b.n	8008578 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f9e5 	bl	8009938 <USBD_CtlError>
          ret = USBD_FAIL;
 800856e:	2303      	movs	r3, #3
 8008570:	75fb      	strb	r3, [r7, #23]
          break;
 8008572:	e002      	b.n	800857a <USBD_CDC_Setup+0x176>
          break;
 8008574:	bf00      	nop
 8008576:	e008      	b.n	800858a <USBD_CDC_Setup+0x186>
          break;
 8008578:	bf00      	nop
      }
      break;
 800857a:	e006      	b.n	800858a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 f9da 	bl	8009938 <USBD_CtlError>
      ret = USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	75fb      	strb	r3, [r7, #23]
      break;
 8008588:	bf00      	nop
  }

  return (uint8_t)ret;
 800858a:	7dfb      	ldrb	r3, [r7, #23]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e04f      	b.n	8008656 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	3318      	adds	r3, #24
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d029      	beq.n	8008628 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3318      	adds	r3, #24
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	78f9      	ldrb	r1, [r7, #3]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	460b      	mov	r3, r1
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4403      	add	r3, r0
 80085f4:	3338      	adds	r3, #56	; 0x38
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80085fc:	fb01 f303 	mul.w	r3, r1, r3
 8008600:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008602:	2b00      	cmp	r3, #0
 8008604:	d110      	bne.n	8008628 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008606:	78fa      	ldrb	r2, [r7, #3]
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	3318      	adds	r3, #24
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800861a:	78f9      	ldrb	r1, [r7, #3]
 800861c:	2300      	movs	r3, #0
 800861e:	2200      	movs	r2, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 feb5 	bl	800a390 <USBD_LL_Transmit>
 8008626:	e015      	b.n	8008654 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2200      	movs	r2, #0
 800862c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800867c:	2303      	movs	r3, #3
 800867e:	e015      	b.n	80086ac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 fec5 	bl	800a414 <USBD_LL_GetRxDataSize>
 800868a:	4602      	mov	r2, r0
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086a6:	4611      	mov	r1, r2
 80086a8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e01b      	b.n	8008706 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d015      	beq.n	8008704 <USBD_CDC_EP0_RxReady+0x50>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086de:	2bff      	cmp	r3, #255	; 0xff
 80086e0:	d010      	beq.n	8008704 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80086f0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80086f8:	b292      	uxth	r2, r2
 80086fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	22ff      	movs	r2, #255	; 0xff
 8008700:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2243      	movs	r2, #67	; 0x43
 800871c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800871e:	4b03      	ldr	r3, [pc, #12]	; (800872c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	200000a8 	.word	0x200000a8

08008730 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2243      	movs	r2, #67	; 0x43
 800873c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800873e:	4b03      	ldr	r3, [pc, #12]	; (800874c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000064 	.word	0x20000064

08008750 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2243      	movs	r2, #67	; 0x43
 800875c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	; (800876c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	200000ec 	.word	0x200000ec

08008770 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	220a      	movs	r2, #10
 800877c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	; (800878c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000020 	.word	0x20000020

08008790 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e004      	b.n	80087ae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b087      	sub	sp, #28
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087cc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e008      	b.n	80087ea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b085      	sub	sp, #20
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008806:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	e004      	b.n	800881c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008836:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	e01a      	b.n	8008880 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008850:	2b00      	cmp	r3, #0
 8008852:	d114      	bne.n	800887e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2201      	movs	r2, #1
 8008858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008872:	2181      	movs	r1, #129	; 0x81
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fd8b 	bl	800a390 <USBD_LL_Transmit>

    ret = USBD_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008896:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e016      	b.n	80088d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7c1b      	ldrb	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b8:	2101      	movs	r1, #1
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f001 fd89 	bl	800a3d2 <USBD_LL_PrepareReceive>
 80088c0:	e007      	b.n	80088d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088c8:	2340      	movs	r3, #64	; 0x40
 80088ca:	2101      	movs	r1, #1
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 fd80 	bl	800a3d2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e01f      	b.n	8008934 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	79fa      	ldrb	r2, [r7, #7]
 8008926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fbe7 	bl	800a0fc <USBD_LL_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	e016      	b.n	8008982 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	f107 020e 	add.w	r2, r7, #14
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4602      	mov	r2, r0
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f001 fc12 	bl	800a1bc <USBD_LL_Start>
 8008998:	4603      	mov	r3, r0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089c4:	2303      	movs	r3, #3
 80089c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d007      	beq.n	8008a16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	4611      	mov	r1, r2
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
  }

  return USBD_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 ff46 	bl	80098c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a54:	f003 031f 	and.w	r3, r3, #31
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d01a      	beq.n	8008a92 <USBD_LL_SetupStage+0x72>
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d822      	bhi.n	8008aa6 <USBD_LL_SetupStage+0x86>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <USBD_LL_SetupStage+0x4a>
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d00a      	beq.n	8008a7e <USBD_LL_SetupStage+0x5e>
 8008a68:	e01d      	b.n	8008aa6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f9ee 	bl	8008e54 <USBD_StdDevReq>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7c:	e020      	b.n	8008ac0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa52 	bl	8008f30 <USBD_StdItfReq>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a90:	e016      	b.n	8008ac0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa91 	bl	8008fc2 <USBD_StdEPReq>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa4:	e00c      	b.n	8008ac0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 fbe1 	bl	800a27c <USBD_LL_StallEP>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]
      break;
 8008abe:	bf00      	nop
  }

  return ret;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ad8:	7afb      	ldrb	r3, [r7, #11]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d138      	bne.n	8008b50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ae4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d14a      	bne.n	8008b86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d913      	bls.n	8008b24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	1ad2      	subs	r2, r2, r3
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bf28      	it	cs
 8008b16:	4613      	movcs	r3, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 ffc5 	bl	8009aac <USBD_CtlContinueRx>
 8008b22:	e030      	b.n	8008b86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d10b      	bne.n	8008b48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 ffc0 	bl	8009ace <USBD_CtlSendStatus>
 8008b4e:	e01a      	b.n	8008b86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d114      	bne.n	8008b86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00e      	beq.n	8008b86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	7afa      	ldrb	r2, [r7, #11]
 8008b72:	4611      	mov	r1, r2
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	4798      	blx	r3
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	e000      	b.n	8008b88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d16b      	bne.n	8008c7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d156      	bne.n	8008c62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d914      	bls.n	8008bea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	1ad2      	subs	r2, r2, r3
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 ff3a 	bl	8009a50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bdc:	2300      	movs	r3, #0
 8008bde:	2200      	movs	r2, #0
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f001 fbf5 	bl	800a3d2 <USBD_LL_PrepareReceive>
 8008be8:	e03b      	b.n	8008c62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d11c      	bne.n	8008c30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d316      	bcc.n	8008c30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d20f      	bcs.n	8008c30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 ff1b 	bl	8009a50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c22:	2300      	movs	r3, #0
 8008c24:	2200      	movs	r2, #0
 8008c26:	2100      	movs	r1, #0
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f001 fbd2 	bl	800a3d2 <USBD_LL_PrepareReceive>
 8008c2e:	e018      	b.n	8008c62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d10b      	bne.n	8008c54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c54:	2180      	movs	r1, #128	; 0x80
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f001 fb10 	bl	800a27c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 ff49 	bl	8009af4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d122      	bne.n	8008cb2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7ff fe98 	bl	80089a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c7a:	e01a      	b.n	8008cb2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d114      	bne.n	8008cb2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00e      	beq.n	8008cb2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	7afa      	ldrb	r2, [r7, #11]
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	e000      	b.n	8008cb4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e02f      	b.n	8008d50 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00f      	beq.n	8008d1a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6852      	ldr	r2, [r2, #4]
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	4611      	mov	r1, r2
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d1a:	2340      	movs	r3, #64	; 0x40
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2100      	movs	r1, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fa66 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2240      	movs	r2, #64	; 0x40
 8008d32:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d36:	2340      	movs	r3, #64	; 0x40
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2180      	movs	r1, #128	; 0x80
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 fa58 	bl	800a1f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2240      	movs	r2, #64	; 0x40
 8008d4c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2204      	movs	r2, #4
 8008d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d106      	bne.n	8008dc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e012      	b.n	8008e10 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d10b      	bne.n	8008e0e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e36:	8a3b      	ldrh	r3, [r7, #16]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	b21a      	sxth	r2, r3
 8008e3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b21b      	sxth	r3, r3
 8008e44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e46:	89fb      	ldrh	r3, [r7, #14]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e6a:	2b40      	cmp	r3, #64	; 0x40
 8008e6c:	d005      	beq.n	8008e7a <USBD_StdDevReq+0x26>
 8008e6e:	2b40      	cmp	r3, #64	; 0x40
 8008e70:	d853      	bhi.n	8008f1a <USBD_StdDevReq+0xc6>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <USBD_StdDevReq+0x3a>
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d14f      	bne.n	8008f1a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	4798      	blx	r3
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e8c:	e04a      	b.n	8008f24 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b09      	cmp	r3, #9
 8008e94:	d83b      	bhi.n	8008f0e <USBD_StdDevReq+0xba>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_StdDevReq+0x48>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f0f 	.word	0x08008f0f
 8008ea8:	08008efb 	.word	0x08008efb
 8008eac:	08008f0f 	.word	0x08008f0f
 8008eb0:	08008ecf 	.word	0x08008ecf
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008f0f 	.word	0x08008f0f
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ed9 	.word	0x08008ed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ec4:	6839      	ldr	r1, [r7, #0]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9de 	bl	8009288 <USBD_GetDescriptor>
          break;
 8008ecc:	e024      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb6d 	bl	80095b0 <USBD_SetAddress>
          break;
 8008ed6:	e01f      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fbac 	bl	8009638 <USBD_SetConfig>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8008ee4:	e018      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc4b 	bl	8009784 <USBD_GetConfig>
          break;
 8008eee:	e013      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fc7c 	bl	80097f0 <USBD_GetStatus>
          break;
 8008ef8:	e00e      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fcab 	bl	8009858 <USBD_SetFeature>
          break;
 8008f02:	e009      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fcba 	bl	8009880 <USBD_ClrFeature>
          break;
 8008f0c:	e004      	b.n	8008f18 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fd11 	bl	8009938 <USBD_CtlError>
          break;
 8008f16:	bf00      	nop
      }
      break;
 8008f18:	e004      	b.n	8008f24 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd0b 	bl	8009938 <USBD_CtlError>
      break;
 8008f22:	bf00      	nop
  }

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop

08008f30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d005      	beq.n	8008f56 <USBD_StdItfReq+0x26>
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	d82f      	bhi.n	8008fae <USBD_StdItfReq+0x7e>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <USBD_StdItfReq+0x26>
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d12b      	bne.n	8008fae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d81d      	bhi.n	8008fa0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	889b      	ldrh	r3, [r3, #4]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d813      	bhi.n	8008f96 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	88db      	ldrh	r3, [r3, #6]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d110      	bne.n	8008faa <USBD_StdItfReq+0x7a>
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fd9d 	bl	8009ace <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f94:	e009      	b.n	8008faa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fccd 	bl	8009938 <USBD_CtlError>
          break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fcc8 	bl	8009938 <USBD_CtlError>
          break;
 8008fa8:	e000      	b.n	8008fac <USBD_StdItfReq+0x7c>
          break;
 8008faa:	bf00      	nop
      }
      break;
 8008fac:	e004      	b.n	8008fb8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fcc1 	bl	8009938 <USBD_CtlError>
      break;
 8008fb6:	bf00      	nop
  }

  return ret;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	889b      	ldrh	r3, [r3, #4]
 8008fd4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d007      	beq.n	8008ff2 <USBD_StdEPReq+0x30>
 8008fe2:	2b40      	cmp	r3, #64	; 0x40
 8008fe4:	f200 8145 	bhi.w	8009272 <USBD_StdEPReq+0x2b0>
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00c      	beq.n	8009006 <USBD_StdEPReq+0x44>
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	f040 8140 	bne.w	8009272 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
      break;
 8009004:	e13a      	b.n	800927c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d007      	beq.n	800901e <USBD_StdEPReq+0x5c>
 800900e:	2b03      	cmp	r3, #3
 8009010:	f300 8129 	bgt.w	8009266 <USBD_StdEPReq+0x2a4>
 8009014:	2b00      	cmp	r3, #0
 8009016:	d07f      	beq.n	8009118 <USBD_StdEPReq+0x156>
 8009018:	2b01      	cmp	r3, #1
 800901a:	d03c      	beq.n	8009096 <USBD_StdEPReq+0xd4>
 800901c:	e123      	b.n	8009266 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d002      	beq.n	8009030 <USBD_StdEPReq+0x6e>
 800902a:	2b03      	cmp	r3, #3
 800902c:	d016      	beq.n	800905c <USBD_StdEPReq+0x9a>
 800902e:	e02c      	b.n	800908a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00d      	beq.n	8009052 <USBD_StdEPReq+0x90>
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	d00a      	beq.n	8009052 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f91b 	bl	800a27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009046:	2180      	movs	r1, #128	; 0x80
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 f917 	bl	800a27c <USBD_LL_StallEP>
 800904e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009050:	e020      	b.n	8009094 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fc6f 	bl	8009938 <USBD_CtlError>
              break;
 800905a:	e01b      	b.n	8009094 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10e      	bne.n	8009082 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00b      	beq.n	8009082 <USBD_StdEPReq+0xc0>
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d008      	beq.n	8009082 <USBD_StdEPReq+0xc0>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	88db      	ldrh	r3, [r3, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f8fd 	bl	800a27c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fd23 	bl	8009ace <USBD_CtlSendStatus>

              break;
 8009088:	e004      	b.n	8009094 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc53 	bl	8009938 <USBD_CtlError>
              break;
 8009092:	bf00      	nop
          }
          break;
 8009094:	e0ec      	b.n	8009270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d002      	beq.n	80090a8 <USBD_StdEPReq+0xe6>
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d016      	beq.n	80090d4 <USBD_StdEPReq+0x112>
 80090a6:	e030      	b.n	800910a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00d      	beq.n	80090ca <USBD_StdEPReq+0x108>
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b80      	cmp	r3, #128	; 0x80
 80090b2:	d00a      	beq.n	80090ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f8df 	bl	800a27c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f8db 	bl	800a27c <USBD_LL_StallEP>
 80090c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090c8:	e025      	b.n	8009116 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fc33 	bl	8009938 <USBD_CtlError>
              break;
 80090d2:	e020      	b.n	8009116 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	885b      	ldrh	r3, [r3, #2]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d11b      	bne.n	8009114 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f8e5 	bl	800a2ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fcec 	bl	8009ace <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009108:	e004      	b.n	8009114 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc13 	bl	8009938 <USBD_CtlError>
              break;
 8009112:	e000      	b.n	8009116 <USBD_StdEPReq+0x154>
              break;
 8009114:	bf00      	nop
          }
          break;
 8009116:	e0ab      	b.n	8009270 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d002      	beq.n	800912a <USBD_StdEPReq+0x168>
 8009124:	2b03      	cmp	r3, #3
 8009126:	d032      	beq.n	800918e <USBD_StdEPReq+0x1cc>
 8009128:	e097      	b.n	800925a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <USBD_StdEPReq+0x17e>
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b80      	cmp	r3, #128	; 0x80
 8009134:	d004      	beq.n	8009140 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fbfd 	bl	8009938 <USBD_CtlError>
                break;
 800913e:	e091      	b.n	8009264 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	da0b      	bge.n	8009160 <USBD_StdEPReq+0x19e>
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800914e:	4613      	mov	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	3310      	adds	r3, #16
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4413      	add	r3, r2
 800915c:	3304      	adds	r3, #4
 800915e:	e00b      	b.n	8009178 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009166:	4613      	mov	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	4413      	add	r3, r2
 8009176:	3304      	adds	r3, #4
 8009178:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2202      	movs	r2, #2
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fc47 	bl	8009a1a <USBD_CtlSendData>
              break;
 800918c:	e06a      	b.n	8009264 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800918e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	da11      	bge.n	80091ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	f003 020f 	and.w	r2, r3, #15
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	3324      	adds	r3, #36	; 0x24
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d117      	bne.n	80091e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fbc0 	bl	8009938 <USBD_CtlError>
                  break;
 80091b8:	e054      	b.n	8009264 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	f003 020f 	and.w	r2, r3, #15
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d104      	bne.n	80091e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fbad 	bl	8009938 <USBD_CtlError>
                  break;
 80091de:	e041      	b.n	8009264 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da0b      	bge.n	8009200 <USBD_StdEPReq+0x23e>
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	3310      	adds	r3, #16
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	4413      	add	r3, r2
 80091fc:	3304      	adds	r3, #4
 80091fe:	e00b      	b.n	8009218 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <USBD_StdEPReq+0x264>
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2b80      	cmp	r3, #128	; 0x80
 8009224:	d103      	bne.n	800922e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	e00e      	b.n	800924c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 f860 	bl	800a2f8 <USBD_LL_IsStallEP>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2201      	movs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	e002      	b.n	800924c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2202      	movs	r2, #2
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fbe1 	bl	8009a1a <USBD_CtlSendData>
              break;
 8009258:	e004      	b.n	8009264 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fb6b 	bl	8009938 <USBD_CtlError>
              break;
 8009262:	bf00      	nop
          }
          break;
 8009264:	e004      	b.n	8009270 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb65 	bl	8009938 <USBD_CtlError>
          break;
 800926e:	bf00      	nop
      }
      break;
 8009270:	e004      	b.n	800927c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fb5f 	bl	8009938 <USBD_CtlError>
      break;
 800927a:	bf00      	nop
  }

  return ret;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	885b      	ldrh	r3, [r3, #2]
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	2b0e      	cmp	r3, #14
 80092aa:	f200 8152 	bhi.w	8009552 <USBD_GetDescriptor+0x2ca>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <USBD_GetDescriptor+0x2c>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	08009325 	.word	0x08009325
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	0800937d 	.word	0x0800937d
 80092c0:	08009553 	.word	0x08009553
 80092c4:	08009553 	.word	0x08009553
 80092c8:	080094f3 	.word	0x080094f3
 80092cc:	0800951f 	.word	0x0800951f
 80092d0:	08009553 	.word	0x08009553
 80092d4:	08009553 	.word	0x08009553
 80092d8:	08009553 	.word	0x08009553
 80092dc:	08009553 	.word	0x08009553
 80092e0:	08009553 	.word	0x08009553
 80092e4:	08009553 	.word	0x08009553
 80092e8:	08009553 	.word	0x08009553
 80092ec:	080092f1 	.word	0x080092f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009312:	e126      	b.n	8009562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fb0e 	bl	8009938 <USBD_CtlError>
        err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
      break;
 8009322:	e11e      	b.n	8009562 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
      break;
 800933a:	e112      	b.n	8009562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7c1b      	ldrb	r3, [r3, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10d      	bne.n	8009360 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f107 0208 	add.w	r2, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	2202      	movs	r2, #2
 800935c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800935e:	e100      	b.n	8009562 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	f107 0208 	add.w	r2, r7, #8
 800936c:	4610      	mov	r0, r2
 800936e:	4798      	blx	r3
 8009370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	2202      	movs	r2, #2
 8009378:	701a      	strb	r2, [r3, #0]
      break;
 800937a:	e0f2      	b.n	8009562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	885b      	ldrh	r3, [r3, #2]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b05      	cmp	r3, #5
 8009384:	f200 80ac 	bhi.w	80094e0 <USBD_GetDescriptor+0x258>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <USBD_GetDescriptor+0x108>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093a9 	.word	0x080093a9
 8009394:	080093dd 	.word	0x080093dd
 8009398:	08009411 	.word	0x08009411
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009479 	.word	0x08009479
 80093a4:	080094ad 	.word	0x080094ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7c12      	ldrb	r2, [r2, #16]
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ca:	e091      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fab2 	bl	8009938 <USBD_CtlError>
            err++;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	3301      	adds	r3, #1
 80093d8:	72fb      	strb	r3, [r7, #11]
          break;
 80093da:	e089      	b.n	80094f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	7c12      	ldrb	r2, [r2, #16]
 80093f4:	f107 0108 	add.w	r1, r7, #8
 80093f8:	4610      	mov	r0, r2
 80093fa:	4798      	blx	r3
 80093fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093fe:	e077      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa98 	bl	8009938 <USBD_CtlError>
            err++;
 8009408:	7afb      	ldrb	r3, [r7, #11]
 800940a:	3301      	adds	r3, #1
 800940c:	72fb      	strb	r3, [r7, #11]
          break;
 800940e:	e06f      	b.n	80094f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7c12      	ldrb	r2, [r2, #16]
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009432:	e05d      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa7e 	bl	8009938 <USBD_CtlError>
            err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
          break;
 8009442:	e055      	b.n	80094f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	7c12      	ldrb	r2, [r2, #16]
 800945c:	f107 0108 	add.w	r1, r7, #8
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009466:	e043      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa64 	bl	8009938 <USBD_CtlError>
            err++;
 8009470:	7afb      	ldrb	r3, [r7, #11]
 8009472:	3301      	adds	r3, #1
 8009474:	72fb      	strb	r3, [r7, #11]
          break;
 8009476:	e03b      	b.n	80094f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	7c12      	ldrb	r2, [r2, #16]
 8009490:	f107 0108 	add.w	r1, r7, #8
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
 8009498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949a:	e029      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa4a 	bl	8009938 <USBD_CtlError>
            err++;
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	3301      	adds	r3, #1
 80094a8:	72fb      	strb	r3, [r7, #11]
          break;
 80094aa:	e021      	b.n	80094f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00b      	beq.n	80094d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	7c12      	ldrb	r2, [r2, #16]
 80094c4:	f107 0108 	add.w	r1, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ce:	e00f      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa30 	bl	8009938 <USBD_CtlError>
            err++;
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	3301      	adds	r3, #1
 80094dc:	72fb      	strb	r3, [r7, #11]
          break;
 80094de:	e007      	b.n	80094f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fa28 	bl	8009938 <USBD_CtlError>
          err++;
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	3301      	adds	r3, #1
 80094ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80094ee:	bf00      	nop
      }
      break;
 80094f0:	e037      	b.n	8009562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	7c1b      	ldrb	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d109      	bne.n	800950e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	f107 0208 	add.w	r2, r7, #8
 8009506:	4610      	mov	r0, r2
 8009508:	4798      	blx	r3
 800950a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800950c:	e029      	b.n	8009562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fa11 	bl	8009938 <USBD_CtlError>
        err++;
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	3301      	adds	r3, #1
 800951a:	72fb      	strb	r3, [r7, #11]
      break;
 800951c:	e021      	b.n	8009562 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7c1b      	ldrb	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10d      	bne.n	8009542 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f107 0208 	add.w	r2, r7, #8
 8009532:	4610      	mov	r0, r2
 8009534:	4798      	blx	r3
 8009536:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	2207      	movs	r2, #7
 800953e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009540:	e00f      	b.n	8009562 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f9f7 	bl	8009938 <USBD_CtlError>
        err++;
 800954a:	7afb      	ldrb	r3, [r7, #11]
 800954c:	3301      	adds	r3, #1
 800954e:	72fb      	strb	r3, [r7, #11]
      break;
 8009550:	e007      	b.n	8009562 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f9ef 	bl	8009938 <USBD_CtlError>
      err++;
 800955a:	7afb      	ldrb	r3, [r7, #11]
 800955c:	3301      	adds	r3, #1
 800955e:	72fb      	strb	r3, [r7, #11]
      break;
 8009560:	bf00      	nop
  }

  if (err != 0U)
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11e      	bne.n	80095a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	88db      	ldrh	r3, [r3, #6]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d016      	beq.n	800959e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009570:	893b      	ldrh	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00e      	beq.n	8009594 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	88da      	ldrh	r2, [r3, #6]
 800957a:	893b      	ldrh	r3, [r7, #8]
 800957c:	4293      	cmp	r3, r2
 800957e:	bf28      	it	cs
 8009580:	4613      	movcs	r3, r2
 8009582:	b29b      	uxth	r3, r3
 8009584:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009586:	893b      	ldrh	r3, [r7, #8]
 8009588:	461a      	mov	r2, r3
 800958a:	68f9      	ldr	r1, [r7, #12]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa44 	bl	8009a1a <USBD_CtlSendData>
 8009592:	e009      	b.n	80095a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f9ce 	bl	8009938 <USBD_CtlError>
 800959c:	e004      	b.n	80095a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fa95 	bl	8009ace <USBD_CtlSendStatus>
 80095a4:	e000      	b.n	80095a8 <USBD_GetDescriptor+0x320>
    return;
 80095a6:	bf00      	nop
  }
}
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop

080095b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	889b      	ldrh	r3, [r3, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d131      	bne.n	8009626 <USBD_SetAddress+0x76>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88db      	ldrh	r3, [r3, #6]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d12d      	bne.n	8009626 <USBD_SetAddress+0x76>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	885b      	ldrh	r3, [r3, #2]
 80095ce:	2b7f      	cmp	r3, #127	; 0x7f
 80095d0:	d829      	bhi.n	8009626 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d104      	bne.n	80095f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f9a3 	bl	8009938 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f2:	e01d      	b.n	8009630 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	7bfa      	ldrb	r2, [r7, #15]
 80095f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fea6 	bl	800a352 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa61 	bl	8009ace <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961a:	e009      	b.n	8009630 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	e004      	b.n	8009630 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f985 	bl	8009938 <USBD_CtlError>
  }
}
 800962e:	bf00      	nop
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	b2da      	uxtb	r2, r3
 800964c:	4b4c      	ldr	r3, [pc, #304]	; (8009780 <USBD_SetConfig+0x148>)
 800964e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009650:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <USBD_SetConfig+0x148>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d905      	bls.n	8009664 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f96c 	bl	8009938 <USBD_CtlError>
    return USBD_FAIL;
 8009660:	2303      	movs	r3, #3
 8009662:	e088      	b.n	8009776 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b02      	cmp	r3, #2
 800966e:	d002      	beq.n	8009676 <USBD_SetConfig+0x3e>
 8009670:	2b03      	cmp	r3, #3
 8009672:	d025      	beq.n	80096c0 <USBD_SetConfig+0x88>
 8009674:	e071      	b.n	800975a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009676:	4b42      	ldr	r3, [pc, #264]	; (8009780 <USBD_SetConfig+0x148>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01c      	beq.n	80096b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800967e:	4b40      	ldr	r3, [pc, #256]	; (8009780 <USBD_SetConfig+0x148>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009688:	4b3d      	ldr	r3, [pc, #244]	; (8009780 <USBD_SetConfig+0x148>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff f992 	bl	80089b8 <USBD_SetClassConfig>
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d004      	beq.n	80096a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f949 	bl	8009938 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096a6:	e065      	b.n	8009774 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa10 	bl	8009ace <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2203      	movs	r2, #3
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096b6:	e05d      	b.n	8009774 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fa08 	bl	8009ace <USBD_CtlSendStatus>
      break;
 80096be:	e059      	b.n	8009774 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096c0:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <USBD_SetConfig+0x148>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d112      	bne.n	80096ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096d0:	4b2b      	ldr	r3, [pc, #172]	; (8009780 <USBD_SetConfig+0x148>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096da:	4b29      	ldr	r3, [pc, #164]	; (8009780 <USBD_SetConfig+0x148>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff f985 	bl	80089f0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f9f1 	bl	8009ace <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096ec:	e042      	b.n	8009774 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <USBD_SetConfig+0x148>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d02a      	beq.n	8009752 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff f973 	bl	80089f0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800970a:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <USBD_SetConfig+0x148>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009714:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <USBD_SetConfig+0x148>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff f94c 	bl	80089b8 <USBD_SetClassConfig>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00f      	beq.n	800974a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f903 	bl	8009938 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff f958 	bl	80089f0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009748:	e014      	b.n	8009774 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9bf 	bl	8009ace <USBD_CtlSendStatus>
      break;
 8009750:	e010      	b.n	8009774 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9bb 	bl	8009ace <USBD_CtlSendStatus>
      break;
 8009758:	e00c      	b.n	8009774 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f8eb 	bl	8009938 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <USBD_SetConfig+0x148>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff f941 	bl	80089f0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800976e:	2303      	movs	r3, #3
 8009770:	73fb      	strb	r3, [r7, #15]
      break;
 8009772:	bf00      	nop
  }

  return ret;
 8009774:	7bfb      	ldrb	r3, [r7, #15]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	2000040c 	.word	0x2000040c

08009784 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	88db      	ldrh	r3, [r3, #6]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d004      	beq.n	80097a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f8cd 	bl	8009938 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800979e:	e023      	b.n	80097e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	dc02      	bgt.n	80097b2 <USBD_GetConfig+0x2e>
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dc03      	bgt.n	80097b8 <USBD_GetConfig+0x34>
 80097b0:	e015      	b.n	80097de <USBD_GetConfig+0x5a>
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d00b      	beq.n	80097ce <USBD_GetConfig+0x4a>
 80097b6:	e012      	b.n	80097de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3308      	adds	r3, #8
 80097c2:	2201      	movs	r2, #1
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f927 	bl	8009a1a <USBD_CtlSendData>
        break;
 80097cc:	e00c      	b.n	80097e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3304      	adds	r3, #4
 80097d2:	2201      	movs	r2, #1
 80097d4:	4619      	mov	r1, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f91f 	bl	8009a1a <USBD_CtlSendData>
        break;
 80097dc:	e004      	b.n	80097e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f8a9 	bl	8009938 <USBD_CtlError>
        break;
 80097e6:	bf00      	nop
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009800:	b2db      	uxtb	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	2b02      	cmp	r3, #2
 8009806:	d81e      	bhi.n	8009846 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	88db      	ldrh	r3, [r3, #6]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d004      	beq.n	800981a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f890 	bl	8009938 <USBD_CtlError>
        break;
 8009818:	e01a      	b.n	8009850 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f043 0202 	orr.w	r2, r3, #2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	330c      	adds	r3, #12
 800983a:	2202      	movs	r2, #2
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f8eb 	bl	8009a1a <USBD_CtlSendData>
      break;
 8009844:	e004      	b.n	8009850 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f875 	bl	8009938 <USBD_CtlError>
      break;
 800984e:	bf00      	nop
  }
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	885b      	ldrh	r3, [r3, #2]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d106      	bne.n	8009878 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f92b 	bl	8009ace <USBD_CtlSendStatus>
  }
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009890:	b2db      	uxtb	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	2b02      	cmp	r3, #2
 8009896:	d80b      	bhi.n	80098b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	885b      	ldrh	r3, [r3, #2]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d10c      	bne.n	80098ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f910 	bl	8009ace <USBD_CtlSendStatus>
      }
      break;
 80098ae:	e004      	b.n	80098ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f840 	bl	8009938 <USBD_CtlError>
      break;
 80098b8:	e000      	b.n	80098bc <USBD_ClrFeature+0x3c>
      break;
 80098ba:	bf00      	nop
  }
}
 80098bc:	bf00      	nop
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fa92 	bl	8008e18 <SWAPBYTE>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fa85 	bl	8008e18 <SWAPBYTE>
 800990e:	4603      	mov	r3, r0
 8009910:	461a      	mov	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7ff fa78 	bl	8008e18 <SWAPBYTE>
 8009928:	4603      	mov	r3, r0
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	80da      	strh	r2, [r3, #6]
}
 8009930:	bf00      	nop
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009942:	2180      	movs	r1, #128	; 0x80
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 fc99 	bl	800a27c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800994a:	2100      	movs	r1, #0
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fc95 	bl	800a27c <USBD_LL_StallEP>
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d036      	beq.n	80099de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009974:	6938      	ldr	r0, [r7, #16]
 8009976:	f000 f836 	bl	80099e6 <USBD_GetLen>
 800997a:	4603      	mov	r3, r0
 800997c:	3301      	adds	r3, #1
 800997e:	b29b      	uxth	r3, r3
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009988:	7dfb      	ldrb	r3, [r7, #23]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	4413      	add	r3, r2
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	7812      	ldrb	r2, [r2, #0]
 8009992:	701a      	strb	r2, [r3, #0]
  idx++;
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	3301      	adds	r3, #1
 8009998:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	4413      	add	r3, r2
 80099a0:	2203      	movs	r2, #3
 80099a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	3301      	adds	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099aa:	e013      	b.n	80099d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	4413      	add	r3, r2
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	7812      	ldrb	r2, [r2, #0]
 80099b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	3301      	adds	r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
    idx++;
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	3301      	adds	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	4413      	add	r3, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	3301      	adds	r3, #1
 80099d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e7      	bne.n	80099ac <USBD_GetString+0x52>
 80099dc:	e000      	b.n	80099e0 <USBD_GetString+0x86>
    return;
 80099de:	bf00      	nop
  }
}
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80099f6:	e005      	b.n	8009a04 <USBD_GetLen+0x1e>
  {
    len++;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	3301      	adds	r3, #1
 80099fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3301      	adds	r3, #1
 8009a02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1f5      	bne.n	80099f8 <USBD_GetLen+0x12>
  }

  return len;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	2100      	movs	r1, #0
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 fca5 	bl	800a390 <USBD_LL_Transmit>

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	2100      	movs	r1, #0
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 fc94 	bl	800a390 <USBD_LL_Transmit>

  return USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2203      	movs	r2, #3
 8009a82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fc98 	bl	800a3d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fc87 	bl	800a3d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc53 	bl	800a390 <USBD_LL_Transmit>

  return USBD_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2205      	movs	r2, #5
 8009b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b04:	2300      	movs	r3, #0
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fc61 	bl	800a3d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b20:	2200      	movs	r2, #0
 8009b22:	4912      	ldr	r1, [pc, #72]	; (8009b6c <MX_USB_Device_Init+0x50>)
 8009b24:	4812      	ldr	r0, [pc, #72]	; (8009b70 <MX_USB_Device_Init+0x54>)
 8009b26:	f7fe fed9 	bl	80088dc <USBD_Init>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b30:	f7f7 fa6a 	bl	8001008 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b34:	490f      	ldr	r1, [pc, #60]	; (8009b74 <MX_USB_Device_Init+0x58>)
 8009b36:	480e      	ldr	r0, [pc, #56]	; (8009b70 <MX_USB_Device_Init+0x54>)
 8009b38:	f7fe ff00 	bl	800893c <USBD_RegisterClass>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b42:	f7f7 fa61 	bl	8001008 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b46:	490c      	ldr	r1, [pc, #48]	; (8009b78 <MX_USB_Device_Init+0x5c>)
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <MX_USB_Device_Init+0x54>)
 8009b4a:	f7fe fe21 	bl	8008790 <USBD_CDC_RegisterInterface>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009b54:	f7f7 fa58 	bl	8001008 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <MX_USB_Device_Init+0x54>)
 8009b5a:	f7fe ff16 	bl	800898a <USBD_Start>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009b64:	f7f7 fa50 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009b68:	bf00      	nop
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000144 	.word	0x20000144
 8009b70:	20000410 	.word	0x20000410
 8009b74:	2000002c 	.word	0x2000002c
 8009b78:	20000130 	.word	0x20000130

08009b7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b80:	2200      	movs	r2, #0
 8009b82:	4905      	ldr	r1, [pc, #20]	; (8009b98 <CDC_Init_FS+0x1c>)
 8009b84:	4805      	ldr	r0, [pc, #20]	; (8009b9c <CDC_Init_FS+0x20>)
 8009b86:	f7fe fe18 	bl	80087ba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b8a:	4905      	ldr	r1, [pc, #20]	; (8009ba0 <CDC_Init_FS+0x24>)
 8009b8c:	4803      	ldr	r0, [pc, #12]	; (8009b9c <CDC_Init_FS+0x20>)
 8009b8e:	f7fe fe32 	bl	80087f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000ac8 	.word	0x20000ac8
 8009b9c:	20000410 	.word	0x20000410
 8009ba0:	200006e0 	.word	0x200006e0

08009ba4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b23      	cmp	r3, #35	; 0x23
 8009bc8:	d84a      	bhi.n	8009c60 <CDC_Control_FS+0xac>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <CDC_Control_FS+0x1c>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009c61 	.word	0x08009c61
 8009bd4:	08009c61 	.word	0x08009c61
 8009bd8:	08009c61 	.word	0x08009c61
 8009bdc:	08009c61 	.word	0x08009c61
 8009be0:	08009c61 	.word	0x08009c61
 8009be4:	08009c61 	.word	0x08009c61
 8009be8:	08009c61 	.word	0x08009c61
 8009bec:	08009c61 	.word	0x08009c61
 8009bf0:	08009c61 	.word	0x08009c61
 8009bf4:	08009c61 	.word	0x08009c61
 8009bf8:	08009c61 	.word	0x08009c61
 8009bfc:	08009c61 	.word	0x08009c61
 8009c00:	08009c61 	.word	0x08009c61
 8009c04:	08009c61 	.word	0x08009c61
 8009c08:	08009c61 	.word	0x08009c61
 8009c0c:	08009c61 	.word	0x08009c61
 8009c10:	08009c61 	.word	0x08009c61
 8009c14:	08009c61 	.word	0x08009c61
 8009c18:	08009c61 	.word	0x08009c61
 8009c1c:	08009c61 	.word	0x08009c61
 8009c20:	08009c61 	.word	0x08009c61
 8009c24:	08009c61 	.word	0x08009c61
 8009c28:	08009c61 	.word	0x08009c61
 8009c2c:	08009c61 	.word	0x08009c61
 8009c30:	08009c61 	.word	0x08009c61
 8009c34:	08009c61 	.word	0x08009c61
 8009c38:	08009c61 	.word	0x08009c61
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c61 	.word	0x08009c61
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c61 	.word	0x08009c61
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c61 	.word	0x08009c61
 8009c54:	08009c61 	.word	0x08009c61
 8009c58:	08009c61 	.word	0x08009c61
 8009c5c:	08009c61 	.word	0x08009c61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c60:	bf00      	nop
  }

  return (USBD_OK);
 8009c62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7f6 fae7 	bl	8000250 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c82:	6879      	ldr	r1, [r7, #4]
 8009c84:	4805      	ldr	r0, [pc, #20]	; (8009c9c <CDC_Receive_FS+0x2c>)
 8009c86:	f7fe fdb6 	bl	80087f6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009c8a:	4804      	ldr	r0, [pc, #16]	; (8009c9c <CDC_Receive_FS+0x2c>)
 8009c8c:	f7fe fdfc 	bl	8008888 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009c90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000410 	.word	0x20000410

08009ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e00b      	b.n	8009cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	4806      	ldr	r0, [pc, #24]	; (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cce:	f7fe fd74 	bl	80087ba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cd2:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <CDC_Transmit_FS+0x48>)
 8009cd4:	f7fe fda8 	bl	8008828 <USBD_CDC_TransmitPacket>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000410 	.word	0x20000410

08009cec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4603      	mov	r3, r0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2212      	movs	r2, #18
 8009d20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d22:	4b03      	ldr	r3, [pc, #12]	; (8009d30 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr
 8009d30:	20000164 	.word	0x20000164

08009d34 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2204      	movs	r2, #4
 8009d44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d46:	4b03      	ldr	r3, [pc, #12]	; (8009d54 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	20000178 	.word	0x20000178

08009d58 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4907      	ldr	r1, [pc, #28]	; (8009d8c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d6e:	4808      	ldr	r0, [pc, #32]	; (8009d90 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d70:	f7ff fdf3 	bl	800995a <USBD_GetString>
 8009d74:	e004      	b.n	8009d80 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d7c:	f7ff fded 	bl	800995a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000eb0 	.word	0x20000eb0
 8009d90:	0800a5c8 	.word	0x0800a5c8

08009d94 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	4904      	ldr	r1, [pc, #16]	; (8009db4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009da4:	4804      	ldr	r0, [pc, #16]	; (8009db8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009da6:	f7ff fdd8 	bl	800995a <USBD_GetString>
  return USBD_StrDesc;
 8009daa:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000eb0 	.word	0x20000eb0
 8009db8:	0800a5e0 	.word	0x0800a5e0

08009dbc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	221a      	movs	r2, #26
 8009dcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dce:	f000 f843 	bl	8009e58 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009dd2:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	2000017c 	.word	0x2000017c

08009de0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4907      	ldr	r1, [pc, #28]	; (8009e14 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009df6:	4808      	ldr	r0, [pc, #32]	; (8009e18 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009df8:	f7ff fdaf 	bl	800995a <USBD_GetString>
 8009dfc:	e004      	b.n	8009e08 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4904      	ldr	r1, [pc, #16]	; (8009e14 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e02:	4805      	ldr	r0, [pc, #20]	; (8009e18 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e04:	f7ff fda9 	bl	800995a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	; (8009e14 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000eb0 	.word	0x20000eb0
 8009e18:	0800a5f4 	.word	0x0800a5f4

08009e1c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	; (8009e50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e34:	f7ff fd91 	bl	800995a <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	; (8009e54 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e40:	f7ff fd8b 	bl	800995a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000eb0 	.word	0x20000eb0
 8009e54:	0800a600 	.word	0x0800a600

08009e58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <Get_SerialNum+0x44>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e64:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <Get_SerialNum+0x48>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ea4 <Get_SerialNum+0x4c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4413      	add	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e7e:	2208      	movs	r2, #8
 8009e80:	4909      	ldr	r1, [pc, #36]	; (8009ea8 <Get_SerialNum+0x50>)
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 f814 	bl	8009eb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e88:	2204      	movs	r2, #4
 8009e8a:	4908      	ldr	r1, [pc, #32]	; (8009eac <Get_SerialNum+0x54>)
 8009e8c:	68b8      	ldr	r0, [r7, #8]
 8009e8e:	f000 f80f 	bl	8009eb0 <IntToUnicode>
  }
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	1fff7590 	.word	0x1fff7590
 8009ea0:	1fff7594 	.word	0x1fff7594
 8009ea4:	1fff7598 	.word	0x1fff7598
 8009ea8:	2000017e 	.word	0x2000017e
 8009eac:	2000018e 	.word	0x2000018e

08009eb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b087      	sub	sp, #28
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	75fb      	strb	r3, [r7, #23]
 8009ec6:	e027      	b.n	8009f18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	0f1b      	lsrs	r3, r3, #28
 8009ecc:	2b09      	cmp	r3, #9
 8009ece:	d80b      	bhi.n	8009ee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	0f1b      	lsrs	r3, r3, #28
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	7dfb      	ldrb	r3, [r7, #23]
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4619      	mov	r1, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	440b      	add	r3, r1
 8009ee0:	3230      	adds	r2, #48	; 0x30
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	e00a      	b.n	8009efe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	0f1b      	lsrs	r3, r3, #28
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3237      	adds	r2, #55	; 0x37
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	3301      	adds	r3, #1
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	3301      	adds	r3, #1
 8009f16:	75fb      	strb	r3, [r7, #23]
 8009f18:	7dfa      	ldrb	r2, [r7, #23]
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d3d3      	bcc.n	8009ec8 <IntToUnicode+0x18>
  }
}
 8009f20:	bf00      	nop
 8009f22:	bf00      	nop
 8009f24:	371c      	adds	r7, #28
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
	...

08009f30 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b094      	sub	sp, #80	; 0x50
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	2244      	movs	r2, #68	; 0x44
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fb2d 	bl	800a5a0 <memset>
  if(pcdHandle->Instance==USB)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a15      	ldr	r2, [pc, #84]	; (8009fa0 <HAL_PCD_MspInit+0x70>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d122      	bne.n	8009f96 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f54:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f56:	2300      	movs	r3, #0
 8009f58:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa f8de 	bl	8004120 <HAL_RCCEx_PeriphCLKConfig>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009f6a:	f7f7 f84d 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <HAL_PCD_MspInit+0x74>)
 8009f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f72:	4a0c      	ldr	r2, [pc, #48]	; (8009fa4 <HAL_PCD_MspInit+0x74>)
 8009f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f78:	6593      	str	r3, [r2, #88]	; 0x58
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <HAL_PCD_MspInit+0x74>)
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f82:	60bb      	str	r3, [r7, #8]
 8009f84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	2014      	movs	r0, #20
 8009f8c:	f7f7 fc0d 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009f90:	2014      	movs	r0, #20
 8009f92:	f7f7 fc24 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f96:	bf00      	nop
 8009f98:	3750      	adds	r7, #80	; 0x50
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	40005c00 	.word	0x40005c00
 8009fa4:	40021000 	.word	0x40021000

08009fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	f7fe fd2e 	bl	8008a20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	440b      	add	r3, r1
 8009fec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	78fb      	ldrb	r3, [r7, #3]
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	f7fe fd68 	bl	8008aca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a014:	78fa      	ldrb	r2, [r7, #3]
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	440b      	add	r3, r1
 800a022:	333c      	adds	r3, #60	; 0x3c
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	78fb      	ldrb	r3, [r7, #3]
 800a028:	4619      	mov	r1, r3
 800a02a:	f7fe fdb1 	bl	8008b90 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fec5 	bl	8008dd4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a05a:	2301      	movs	r3, #1
 800a05c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d001      	beq.n	800a06a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a066:	f7f6 ffcf 	bl	8001008 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a070:	7bfa      	ldrb	r2, [r7, #15]
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fe6f 	bl	8008d58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fe1b 	bl	8008cbc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fe6a 	bl	8008d78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d005      	beq.n	800a0b8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0ac:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <HAL_PCD_SuspendCallback+0x30>)
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	4a03      	ldr	r2, [pc, #12]	; (800a0c0 <HAL_PCD_SuspendCallback+0x30>)
 800a0b2:	f043 0306 	orr.w	r3, r3, #6
 800a0b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	e000ed00 	.word	0xe000ed00

0800a0c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <HAL_PCD_ResumeCallback+0x34>)
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	4a07      	ldr	r2, [pc, #28]	; (800a0f8 <HAL_PCD_ResumeCallback+0x34>)
 800a0da:	f023 0306 	bic.w	r3, r3, #6
 800a0de:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a0e0:	f000 f9fa 	bl	800a4d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fe5a 	bl	8008da4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed00 	.word	0xe000ed00

0800a0fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a104:	4a2b      	ldr	r2, [pc, #172]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a29      	ldr	r2, [pc, #164]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a110:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a114:	4b27      	ldr	r3, [pc, #156]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a116:	4a28      	ldr	r2, [pc, #160]	; (800a1b8 <USBD_LL_Init+0xbc>)
 800a118:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a11a:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a11c:	2208      	movs	r2, #8
 800a11e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a120:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a122:	2202      	movs	r2, #2
 800a124:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a126:	4b23      	ldr	r3, [pc, #140]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a128:	2202      	movs	r2, #2
 800a12a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a12c:	4b21      	ldr	r3, [pc, #132]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a12e:	2200      	movs	r2, #0
 800a130:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a132:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a134:	2200      	movs	r2, #0
 800a136:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a138:	4b1e      	ldr	r3, [pc, #120]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a140:	2200      	movs	r2, #0
 800a142:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a144:	481b      	ldr	r0, [pc, #108]	; (800a1b4 <USBD_LL_Init+0xb8>)
 800a146:	f7f7 fd17 	bl	8001b78 <HAL_PCD_Init>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a150:	f7f6 ff5a 	bl	8001008 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a15a:	2318      	movs	r3, #24
 800a15c:	2200      	movs	r2, #0
 800a15e:	2100      	movs	r1, #0
 800a160:	f7f9 f9d0 	bl	8003504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a16a:	2358      	movs	r3, #88	; 0x58
 800a16c:	2200      	movs	r2, #0
 800a16e:	2180      	movs	r1, #128	; 0x80
 800a170:	f7f9 f9c8 	bl	8003504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a17a:	23c0      	movs	r3, #192	; 0xc0
 800a17c:	2200      	movs	r2, #0
 800a17e:	2181      	movs	r1, #129	; 0x81
 800a180:	f7f9 f9c0 	bl	8003504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a18a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a18e:	2200      	movs	r2, #0
 800a190:	2101      	movs	r1, #1
 800a192:	f7f9 f9b7 	bl	8003504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a19c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2182      	movs	r1, #130	; 0x82
 800a1a4:	f7f9 f9ae 	bl	8003504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200010b0 	.word	0x200010b0
 800a1b8:	40005c00 	.word	0x40005c00

0800a1bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7f7 fdb5 	bl	8001d42 <HAL_PCD_Start>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 f980 	bl	800a4e4 <USBD_Get_USB_Status>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	461a      	mov	r2, r3
 800a200:	4603      	mov	r3, r0
 800a202:	70fb      	strb	r3, [r7, #3]
 800a204:	460b      	mov	r3, r1
 800a206:	70bb      	strb	r3, [r7, #2]
 800a208:	4613      	mov	r3, r2
 800a20a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a21a:	78bb      	ldrb	r3, [r7, #2]
 800a21c:	883a      	ldrh	r2, [r7, #0]
 800a21e:	78f9      	ldrb	r1, [r7, #3]
 800a220:	f7f7 fefd 	bl	800201e <HAL_PCD_EP_Open>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f95a 	bl	800a4e4 <USBD_Get_USB_Status>
 800a230:	4603      	mov	r3, r0
 800a232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a234:	7bbb      	ldrb	r3, [r7, #14]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a258:	78fa      	ldrb	r2, [r7, #3]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f7 ff44 	bl	80020ea <HAL_PCD_EP_Close>
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f93b 	bl	800a4e4 <USBD_Get_USB_Status>
 800a26e:	4603      	mov	r3, r0
 800a270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a272:	7bbb      	ldrb	r3, [r7, #14]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f8 f805 	bl	80022aa <HAL_PCD_EP_SetStall>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 f91c 	bl	800a4e4 <USBD_Get_USB_Status>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f8 f838 	bl	800234e <HAL_PCD_EP_ClrStall>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f8fd 	bl	800a4e4 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a30a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a30c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a310:	2b00      	cmp	r3, #0
 800a312:	da0c      	bge.n	800a32e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a314:	78fb      	ldrb	r3, [r7, #3]
 800a316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	440b      	add	r3, r1
 800a328:	3302      	adds	r3, #2
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	e00b      	b.n	800a346 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a334:	68f9      	ldr	r1, [r7, #12]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	00db      	lsls	r3, r3, #3
 800a33e:	440b      	add	r3, r1
 800a340:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a344:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a362:	2300      	movs	r3, #0
 800a364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a36c:	78fa      	ldrb	r2, [r7, #3]
 800a36e:	4611      	mov	r1, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f7f7 fe2f 	bl	8001fd4 <HAL_PCD_SetAddress>
 800a376:	4603      	mov	r3, r0
 800a378:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 f8b1 	bl	800a4e4 <USBD_Get_USB_Status>
 800a382:	4603      	mov	r3, r0
 800a384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a386:	7bbb      	ldrb	r3, [r7, #14]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	603b      	str	r3, [r7, #0]
 800a39c:	460b      	mov	r3, r1
 800a39e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3ae:	7af9      	ldrb	r1, [r7, #11]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	f7f7 ff36 	bl	8002224 <HAL_PCD_EP_Transmit>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 f890 	bl	800a4e4 <USBD_Get_USB_Status>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3f0:	7af9      	ldrb	r1, [r7, #11]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	f7f7 fec0 	bl	800217a <HAL_PCD_EP_Receive>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	4618      	mov	r0, r3
 800a402:	f000 f86f 	bl	800a4e4 <USBD_Get_USB_Status>
 800a406:	4603      	mov	r3, r0
 800a408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a40a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f7 fee2 	bl	80021f4 <HAL_PCD_EP_GetRxCount>
 800a430:	4603      	mov	r3, r0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_PCDEx_LPM_Callback+0x18>
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d013      	beq.n	800a47a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a452:	e023      	b.n	800a49c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a45c:	f000 f83c 	bl	800a4d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a460:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	4a0f      	ldr	r2, [pc, #60]	; (800a4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a466:	f023 0306 	bic.w	r3, r3, #6
 800a46a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a472:	4618      	mov	r0, r3
 800a474:	f7fe fc96 	bl	8008da4 <USBD_LL_Resume>
    break;
 800a478:	e010      	b.n	800a49c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fc79 	bl	8008d78 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a48e:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	4a04      	ldr	r2, [pc, #16]	; (800a4a4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a494:	f043 0306 	orr.w	r3, r3, #6
 800a498:	6113      	str	r3, [r2, #16]
    break;
 800a49a:	bf00      	nop
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	e000ed00 	.word	0xe000ed00

0800a4a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4b0:	4b03      	ldr	r3, [pc, #12]	; (800a4c0 <USBD_static_malloc+0x18>)
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	200013a4 	.word	0x200013a4

0800a4c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]

}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a4dc:	f7f6 f9f2 	bl	80008c4 <SystemClock_Config>
}
 800a4e0:	bf00      	nop
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d817      	bhi.n	800a528 <USBD_Get_USB_Status+0x44>
 800a4f8:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <USBD_Get_USB_Status+0x1c>)
 800a4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fe:	bf00      	nop
 800a500:	0800a511 	.word	0x0800a511
 800a504:	0800a517 	.word	0x0800a517
 800a508:	0800a51d 	.word	0x0800a51d
 800a50c:	0800a523 	.word	0x0800a523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
    break;
 800a514:	e00b      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a516:	2303      	movs	r3, #3
 800a518:	73fb      	strb	r3, [r7, #15]
    break;
 800a51a:	e008      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
    break;
 800a520:	e005      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a522:	2303      	movs	r3, #3
 800a524:	73fb      	strb	r3, [r7, #15]
    break;
 800a526:	e002      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a528:	2303      	movs	r3, #3
 800a52a:	73fb      	strb	r3, [r7, #15]
    break;
 800a52c:	bf00      	nop
  }
  return usb_status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <__libc_init_array>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4d0d      	ldr	r5, [pc, #52]	; (800a574 <__libc_init_array+0x38>)
 800a540:	4c0d      	ldr	r4, [pc, #52]	; (800a578 <__libc_init_array+0x3c>)
 800a542:	1b64      	subs	r4, r4, r5
 800a544:	10a4      	asrs	r4, r4, #2
 800a546:	2600      	movs	r6, #0
 800a548:	42a6      	cmp	r6, r4
 800a54a:	d109      	bne.n	800a560 <__libc_init_array+0x24>
 800a54c:	4d0b      	ldr	r5, [pc, #44]	; (800a57c <__libc_init_array+0x40>)
 800a54e:	4c0c      	ldr	r4, [pc, #48]	; (800a580 <__libc_init_array+0x44>)
 800a550:	f000 f82e 	bl	800a5b0 <_init>
 800a554:	1b64      	subs	r4, r4, r5
 800a556:	10a4      	asrs	r4, r4, #2
 800a558:	2600      	movs	r6, #0
 800a55a:	42a6      	cmp	r6, r4
 800a55c:	d105      	bne.n	800a56a <__libc_init_array+0x2e>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	f855 3b04 	ldr.w	r3, [r5], #4
 800a564:	4798      	blx	r3
 800a566:	3601      	adds	r6, #1
 800a568:	e7ee      	b.n	800a548 <__libc_init_array+0xc>
 800a56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a56e:	4798      	blx	r3
 800a570:	3601      	adds	r6, #1
 800a572:	e7f2      	b.n	800a55a <__libc_init_array+0x1e>
 800a574:	0800a620 	.word	0x0800a620
 800a578:	0800a620 	.word	0x0800a620
 800a57c:	0800a620 	.word	0x0800a620
 800a580:	0800a624 	.word	0x0800a624

0800a584 <memcpy>:
 800a584:	440a      	add	r2, r1
 800a586:	4291      	cmp	r1, r2
 800a588:	f100 33ff 	add.w	r3, r0, #4294967295
 800a58c:	d100      	bne.n	800a590 <memcpy+0xc>
 800a58e:	4770      	bx	lr
 800a590:	b510      	push	{r4, lr}
 800a592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a59a:	4291      	cmp	r1, r2
 800a59c:	d1f9      	bne.n	800a592 <memcpy+0xe>
 800a59e:	bd10      	pop	{r4, pc}

0800a5a0 <memset>:
 800a5a0:	4402      	add	r2, r0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d100      	bne.n	800a5aa <memset+0xa>
 800a5a8:	4770      	bx	lr
 800a5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ae:	e7f9      	b.n	800a5a4 <memset+0x4>

0800a5b0 <_init>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	bf00      	nop
 800a5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b6:	bc08      	pop	{r3}
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	4770      	bx	lr

0800a5bc <_fini>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	bf00      	nop
 800a5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5c2:	bc08      	pop	{r3}
 800a5c4:	469e      	mov	lr, r3
 800a5c6:	4770      	bx	lr
