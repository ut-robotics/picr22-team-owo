
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9ec  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac1c  0800ac1c  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac1c  0800ac1c  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac1c  0800ac1c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac1c  0800ac1c  0001ac1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac20  0800ac20  0001ac20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800ac24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000194  0800adb8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800adb8  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016701  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362c  00000000  00000000  000368c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016669  00000000  00000000  0005d0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c656d  00000000  00000000  00073710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005184  00000000  00000000  00139cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800abac 	.word	0x0800abac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	0800abac 	.word	0x0800abac

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <clamp>:

volatile uint8_t isCommandReceived = 0;

volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	429a      	cmp	r2, r3
 800084c:	d901      	bls.n	8000852 <clamp+0x1e>
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	e006      	b.n	8000860 <clamp+0x2c>
	else if (value < min) {return min;}
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d201      	bcs.n	800085e <clamp+0x2a>
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	e000      	b.n	8000860 <clamp+0x2c>
	return value;
 800085e:	88fb      	ldrh	r3, [r7, #6]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b0e      	cmp	r3, #14
 800087c:	d110      	bne.n	80008a0 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 800087e:	220e      	movs	r2, #14
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <CDC_On_Receive+0x3c>)
 8000884:	f00a f97c 	bl	800ab80 <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <CDC_On_Receive+0x3c>)
 800088a:	899b      	ldrh	r3, [r3, #12]
 800088c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <CDC_On_Receive+0x40>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <CDC_On_Receive+0x44>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	2000040c 	.word	0x2000040c
 80008b0:	2000040e 	.word	0x2000040e

080008b4 <enc_init>:

// Initialises the encoders
void enc_init() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 80008b8:	2104      	movs	r1, #4
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <enc_init+0x20>)
 80008bc:	f004 fbde 	bl	800507c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80008c0:	2104      	movs	r1, #4
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <enc_init+0x24>)
 80008c4:	f004 fbda 	bl	800507c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80008c8:	2104      	movs	r1, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <enc_init+0x28>)
 80008cc:	f004 fbd6 	bl	800507c <HAL_TIM_Encoder_Start>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000294 	.word	0x20000294
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	20000248 	.word	0x20000248

080008e0 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <pwm_init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <pwm_init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <pwm_init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80008f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fa:	f241 3233 	movw	r2, #4915	; 0x1333
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <pwm_init+0x68>)
 8000902:	f241 320b 	movw	r2, #4875	; 0x130b
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <pwm_init+0x68>)
 800090a:	f641 0206 	movw	r2, #6150	; 0x1806
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 30);
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <pwm_init+0x6c>)
 8000914:	f004 fa0c 	bl	8004d30 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <pwm_init+0x6c>)
 800091c:	f005 faa4 	bl	8005e68 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <pwm_init+0x6c>)
 8000924:	f005 faa0 	bl	8005e68 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <pwm_init+0x70>)
 800092c:	f004 fa00 	bl	8004d30 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <pwm_init+0x74>)
 8000934:	f004 f9fc 	bl	8004d30 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <pwm_init+0x74>)
 800093c:	f004 f9f8 	bl	8004d30 <HAL_TIM_PWM_Start>
    //TIM15->CCR1 = 32000;
    //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013400 	.word	0x40013400
 8000948:	40014000 	.word	0x40014000
 800094c:	2000032c 	.word	0x2000032c
 8000950:	200001fc 	.word	0x200001fc
 8000954:	20000378 	.word	0x20000378

08000958 <motor_status_update>:

// Updates the motor's speed and direction from the command struct
void motor_status_update() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e053      	b.n	8000a0c <motor_status_update+0xb4>
		if (command.speed[i] >= 0) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <motor_status_update+0xc8>)
 8000968:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db23      	blt.n	80009b8 <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	492c      	ldr	r1, [pc, #176]	; (8000a24 <motor_status_update+0xcc>)
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	3302      	adds	r3, #2
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <motor_status_update+0xc8>)
 8000988:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d104      	bne.n	800099a <motor_status_update+0x42>
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <motor_status_update+0xc8>)
 8000994:	2102      	movs	r1, #2
 8000996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <motor_status_update+0xc8>)
 800099e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	b298      	uxth	r0, r3
 80009a6:	491f      	ldr	r1, [pc, #124]	; (8000a24 <motor_status_update+0xcc>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	4602      	mov	r2, r0
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e026      	b.n	8000a06 <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	491a      	ldr	r1, [pc, #104]	; (8000a24 <motor_status_update+0xcc>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	3302      	adds	r3, #2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <motor_status_update+0xc8>)
 80009d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d105      	bne.n	80009e6 <motor_status_update+0x8e>
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <motor_status_update+0xc8>)
 80009de:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80009e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <motor_status_update+0xc8>)
 80009ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	425b      	negs	r3, r3
 80009f4:	b298      	uxth	r0, r3
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <motor_status_update+0xcc>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	4602      	mov	r2, r0
 8000a04:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d9a8      	bls.n	8000964 <motor_status_update+0xc>
		}
	}
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200003c4 	.word	0x200003c4

08000a28 <motor_pwm>:
volatile uint16_t pi_cycles = 0;

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <motor_pwm+0x1d0>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	81bb      	strh	r3, [r7, #12]
	uint16_t pwm = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d00e      	beq.n	8000a70 <motor_pwm+0x48>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	dc10      	bgt.n	8000a78 <motor_pwm+0x50>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <motor_pwm+0x38>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d004      	beq.n	8000a68 <motor_pwm+0x40>
 8000a5e:	e00b      	b.n	8000a78 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 8000a60:	4b66      	ldr	r3, [pc, #408]	; (8000bfc <motor_pwm+0x1d4>)
 8000a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a64:	82bb      	strh	r3, [r7, #20]
			break;
 8000a66:	e007      	b.n	8000a78 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000a68:	4b65      	ldr	r3, [pc, #404]	; (8000c00 <motor_pwm+0x1d8>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	82bb      	strh	r3, [r7, #20]
			break;
 8000a6e:	e003      	b.n	8000a78 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 8000a70:	4b64      	ldr	r3, [pc, #400]	; (8000c04 <motor_pwm+0x1dc>)
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	82bb      	strh	r3, [r7, #20]
			break;
 8000a76:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000a78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	495d      	ldr	r1, [pc, #372]	; (8000bf8 <motor_pwm+0x1d0>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	1ac3      	subs	r3, r0, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	817b      	strh	r3, [r7, #10]

	motor_status[mot_id].enc_pos = new_pos;
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000aa2:	4955      	ldr	r1, [pc, #340]	; (8000bf8 <motor_pwm+0x1d0>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	3304      	adds	r3, #4
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <motor_pwm+0x1d0>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	897a      	ldrh	r2, [r7, #10]
 8000ac6:	801a      	strh	r2, [r3, #0]

	if (pi_cycles > 200) {
 8000ac8:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <motor_pwm+0x1e0>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	2bc8      	cmp	r3, #200	; 0xc8
 8000ad0:	d915      	bls.n	8000afe <motor_pwm+0xd6>
		for (int x = 0; x < 3; x++) {motor_status[x].integral = 0;}
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e00c      	b.n	8000af2 <motor_pwm+0xca>
 8000ad8:	4947      	ldr	r1, [pc, #284]	; (8000bf8 <motor_pwm+0x1d0>)
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	3301      	adds	r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	ddef      	ble.n	8000ad8 <motor_pwm+0xb0>
		pi_cycles = 0;
 8000af8:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <motor_pwm+0x1e0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	801a      	strh	r2, [r3, #0]
	}
	pi_cycles++;
 8000afe:	4b42      	ldr	r3, [pc, #264]	; (8000c08 <motor_pwm+0x1e0>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <motor_pwm+0x1e0>)
 8000b0a:	801a      	strh	r2, [r3, #0]

	int16_t error = motor_status[mot_id].target_speed - pos_change;
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	493a      	ldr	r1, [pc, #232]	; (8000bf8 <motor_pwm+0x1d0>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	881a      	ldrh	r2, [r3, #0]
 8000b1c:	897b      	ldrh	r3, [r7, #10]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	813b      	strh	r3, [r7, #8]
	motor_status[mot_id].integral += error;
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	4934      	ldr	r1, [pc, #208]	; (8000bf8 <motor_pwm+0x1d0>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	440b      	add	r3, r1
 8000b32:	3308      	adds	r3, #8
 8000b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	79fa      	ldrb	r2, [r7, #7]
 8000b42:	b218      	sxth	r0, r3
 8000b44:	492c      	ldr	r1, [pc, #176]	; (8000bf8 <motor_pwm+0x1d0>)
 8000b46:	4613      	mov	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4413      	add	r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	440b      	add	r3, r1
 8000b50:	3308      	adds	r3, #8
 8000b52:	4602      	mov	r2, r0
 8000b54:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = error * 5 + (int16_t)(motor_status[mot_id].integral * 0.1);
 8000b56:	893b      	ldrh	r3, [r7, #8]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29c      	uxth	r4, r3
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	4925      	ldr	r1, [pc, #148]	; (8000bf8 <motor_pwm+0x1d0>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	440b      	add	r3, r1
 8000b6e:	3308      	adds	r3, #8
 8000b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdcb 	bl	8000710 <__aeabi_i2d>
 8000b7a:	a31d      	add	r3, pc, #116	; (adr r3, 8000bf0 <motor_pwm+0x1c8>)
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	f7ff fb4a 	bl	8000218 <__aeabi_dmul>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4610      	mov	r0, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f7ff fe2a 	bl	80007e4 <__aeabi_d2iz>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4423      	add	r3, r4
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	81fb      	strh	r3, [r7, #14]

	if (pid_speed < 0) {
 8000b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da01      	bge.n	8000ba8 <motor_pwm+0x180>
		pid_speed = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	81fb      	strh	r3, [r7, #14]
	}

	if (speed > 0) {
 8000ba8:	89bb      	ldrh	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d011      	beq.n	8000bd2 <motor_pwm+0x1aa>
		pwm = 4500 + pid_speed * 700; // Effectively linear
 8000bae:	89fb      	ldrh	r3, [r7, #14]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	0091      	lsls	r1, r2, #2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	00d2      	lsls	r2, r2, #3
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000bce:	3314      	adds	r3, #20
 8000bd0:	82fb      	strh	r3, [r7, #22]
	}

	if (pwm > 49151) { // emergency limiter, set to 75% currently (49151)
 8000bd2:	8afb      	ldrh	r3, [r7, #22]
 8000bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000bd8:	d302      	bcc.n	8000be0 <motor_pwm+0x1b8>
		pwm = 49151;
 8000bda:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000bde:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 8000be0:	8afb      	ldrh	r3, [r7, #22]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	f3af 8000 	nop.w
 8000bf0:	9999999a 	.word	0x9999999a
 8000bf4:	3fb99999 	.word	0x3fb99999
 8000bf8:	200003c4 	.word	0x200003c4
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40000800 	.word	0x40000800
 8000c08:	20000410 	.word	0x20000410

08000c0c <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d018      	beq.n	8000c4e <motor_direction+0x42>
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	dc1f      	bgt.n	8000c60 <motor_direction+0x54>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <motor_direction+0x1e>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d009      	beq.n	8000c3c <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000c28:	e01a      	b.n	8000c60 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <motor_direction+0x5c>)
 8000c2c:	789b      	ldrb	r3, [r3, #2]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f001 fa6b 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c3a:	e011      	b.n	8000c60 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <motor_direction+0x5c>)
 8000c3e:	7e9b      	ldrb	r3, [r3, #26]
 8000c40:	461a      	mov	r2, r3
 8000c42:	2120      	movs	r1, #32
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 fa62 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c4c:	e008      	b.n	8000c60 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <motor_direction+0x5c>)
 8000c50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c54:	461a      	mov	r2, r3
 8000c56:	2110      	movs	r1, #16
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <motor_direction+0x60>)
 8000c5a:	f001 fa59 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c5e:	bf00      	nop
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200003c4 	.word	0x200003c4
 8000c6c:	48000400 	.word	0x48000400

08000c70 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <wake_drivers_up+0x58>)
 8000c7c:	f001 fa48 	bl	8002110 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000c80:	2300      	movs	r3, #0
 8000c82:	80fb      	strh	r3, [r7, #6]
 8000c84:	e003      	b.n	8000c8e <wake_drivers_up+0x1e>
 8000c86:	bf00      	nop
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c94:	d3f7      	bcc.n	8000c86 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2108      	movs	r1, #8
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <wake_drivers_up+0x58>)
 8000c9c:	f001 fa38 	bl	8002110 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	80bb      	strh	r3, [r7, #4]
 8000ca4:	e003      	b.n	8000cae <wake_drivers_up+0x3e>
 8000ca6:	bf00      	nop
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	80bb      	strh	r3, [r7, #4]
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000cb4:	d3f7      	bcc.n	8000ca6 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <wake_drivers_up+0x58>)
 8000cbc:	f001 fa28 	bl	8002110 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	48000400 	.word	0x48000400

08000ccc <thrower_pwm>:
// Sends DSHOT150  PWM commands, commented throughly for the enjoyment of the reader :D
void thrower_pwm(uint16_t thrower_speed) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);					// Stop transmitting previous thrower value
	return;
 8000cd6:	bf00      	nop
			thrower_data[15-i] = 399;
		}
	}
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 20); // Each pulse draws takes its length from array
}
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <HAL_TIM_PeriodElapsedCallback>:

// 100 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!
 8000cec:	2101      	movs	r1, #1
 8000cee:	4837      	ldr	r0, [pc, #220]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cf0:	f001 fa26 	bl	8002140 <HAL_GPIO_TogglePin>

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fe97 	bl	8000a28 <motor_pwm>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fe90 	bl	8000a28 <motor_pwm>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fe89 	bl	8000a28 <motor_pwm>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d1c:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff74 	bl	8000c0c <motor_direction>
	motor_direction(1); // Motor 2
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff ff71 	bl	8000c0c <motor_direction>
	motor_direction(2); // Motor 3
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff ff6e 	bl	8000c0c <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000d30:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d32:	88db      	ldrh	r3, [r3, #6]
 8000d34:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d38:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fd79 	bl	8000834 <clamp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d4e:	891b      	ldrh	r3, [r3, #8]
 8000d50:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d54:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd6b 	bl	8000834 <clamp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d68:	895b      	ldrh	r3, [r3, #10]
 8000d6a:	f641 0206 	movw	r2, #6150	; 0x1806
 8000d6e:	f241 215c 	movw	r1, #4700	; 0x125c
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fd5e 	bl	8000834 <clamp>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38

	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2b31      	cmp	r3, #49	; 0x31
 8000d88:	d914      	bls.n	8000db4 <HAL_TIM_PeriodElapsedCallback+0xd0>
		TIM8->CCR2 = 0;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da0:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000da8:	f241 320b 	movw	r2, #4875	; 0x130b
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
		commandless_count = 0;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	801a      	strh	r2, [r3, #0]
	}
	commandless_count++;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dc0:	801a      	strh	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	40013400 	.word	0x40013400
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	40014000 	.word	0x40014000
 8000ddc:	2000040e 	.word	0x2000040e

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fe6e 	bl	8001ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f867 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f000 fb87 	bl	8001500 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000df2:	f000 f90b 	bl	800100c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000df6:	f000 f963 	bl	80010c0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dfa:	f000 f8ad 	bl	8000f58 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dfe:	f000 f9b5 	bl	800116c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e02:	f000 fa3f 	bl	8001284 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000e06:	f000 fae9 	bl	80013dc <MX_TIM15_Init>
  MX_TIM6_Init();
 8000e0a:	f000 fa05 	bl	8001218 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000e0e:	f009 f983 	bl	800a118 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000e12:	2300      	movs	r3, #0
 8000e14:	803b      	strh	r3, [r7, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	80bb      	strh	r3, [r7, #4]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	2300      	movs	r3, #0
 8000e24:	813b      	strh	r3, [r7, #8]
 8000e26:	2300      	movs	r3, #0
 8000e28:	817b      	strh	r3, [r7, #10]
 8000e2a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000e2e:	81bb      	strh	r3, [r7, #12]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <main+0xcc>)
 8000e32:	f003 febb 	bl	8004bac <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000e36:	2064      	movs	r0, #100	; 0x64
 8000e38:	f000 feb6 	bl	8001ba8 <HAL_Delay>
  enc_init();
 8000e3c:	f7ff fd3a 	bl	80008b4 <enc_init>
  pwm_init();
 8000e40:	f7ff fd4e 	bl	80008e0 <pwm_init>
  wake_drivers_up();
 8000e44:	f7ff ff14 	bl	8000c70 <wake_drivers_up>
  thrower_pwm(0);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff3f 	bl	8000ccc <thrower_pwm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <main+0xd0>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0fa      	beq.n	8000e4e <main+0x6e>
    	isCommandReceived = 0;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <main+0xd0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000e5e:	f7ff ff07 	bl	8000c70 <wake_drivers_up>
    	motor_status_update();
 8000e62:	f7ff fd79 	bl	8000958 <motor_status_update>
    	thrower_pwm(command.thrower_speed);
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0xd4>)
 8000e68:	88db      	ldrh	r3, [r3, #6]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff2e 	bl	8000ccc <thrower_pwm>

		feedback.speed[0] = motor_status[0].target_speed; // In the current state it retuns the uint8 version without direction, whoops!
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <main+0xd8>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <main+0xd8>)
 8000e7a:	8b1b      	ldrh	r3, [r3, #24]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <main+0xd8>)
 8000e82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <main+0xd8>)
 8000e8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e8e:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <main+0xd8>)
 8000e92:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e96:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <main+0xd8>)
 8000e9a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000e9e:	817b      	strh	r3, [r7, #10]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	210e      	movs	r1, #14
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f009 f9f9 	bl	800a29c <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000eaa:	e7d0      	b.n	8000e4e <main+0x6e>
 8000eac:	200002e0 	.word	0x200002e0
 8000eb0:	2000040c 	.word	0x2000040c
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	200003c4 	.word	0x200003c4

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	2238      	movs	r2, #56	; 0x38
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f009 fe66 	bl	800ab9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f002 fe7c 	bl	8003bdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ee4:	2322      	movs	r3, #34	; 0x22
 8000ee6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efa:	2302      	movs	r3, #2
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000f02:	2314      	movs	r3, #20
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 ff04 	bl	8003d24 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f22:	f000 fb6d 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fa08 	bl	8004354 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f4a:	f000 fb59 	bl	8001600 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2224      	movs	r2, #36	; 0x24
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f009 fe18 	bl	800ab9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <MX_TIM1_Init+0xb0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM1_Init+0xac>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000faa:	2301      	movs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_TIM1_Init+0xac>)
 8000fce:	f003 ffaf 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fd8:	f000 fb12 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM1_Init+0xac>)
 8000fee:	f004 ffef 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ff8:	f000 fb02 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001b0 	.word	0x200001b0
 8001008:	40012c00 	.word	0x40012c00

0800100c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_TIM2_Init+0xb0>)
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_TIM2_Init+0xb0>)
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_TIM2_Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM2_Init+0xb0>)
 8001046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM2_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_TIM2_Init+0xb0>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001058:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_TIM2_Init+0xb0>)
 800105a:	f003 fe11 	bl	8004c80 <HAL_TIM_PWM_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 facc 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4811      	ldr	r0, [pc, #68]	; (80010bc <MX_TIM2_Init+0xb0>)
 8001078:	f004 ffaa 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001082:	f000 fabd 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM2_Init+0xb0>)
 800109e:	f004 f9fb 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010a8:	f000 faaa 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM2_Init+0xb0>)
 80010ae:	f000 fbe3 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001fc 	.word	0x200001fc

080010c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fd64 	bl	800ab9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_TIM3_Init+0xa4>)
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <MX_TIM3_Init+0xa8>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_TIM3_Init+0xa4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_TIM3_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_TIM3_Init+0xa4>)
 80010f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_TIM3_Init+0xa4>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_TIM3_Init+0xa4>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001104:	2301      	movs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800110c:	2301      	movs	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800111c:	2301      	movs	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM3_Init+0xa4>)
 8001130:	f003 fefe 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800113a:	f000 fa61 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM3_Init+0xa4>)
 800114c:	f004 ff40 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001156:	f000 fa53 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000248 	.word	0x20000248
 8001168:	40000400 	.word	0x40000400

0800116c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f009 fd0e 	bl	800ab9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_TIM4_Init+0xa4>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_TIM4_Init+0xa8>)
 800118e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_TIM4_Init+0xa4>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <MX_TIM4_Init+0xa4>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_TIM4_Init+0xa4>)
 800119e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_TIM4_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_TIM4_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM4_Init+0xa4>)
 80011dc:	f003 fea8 	bl	8004f30 <HAL_TIM_Encoder_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011e6:	f000 fa0b 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_TIM4_Init+0xa4>)
 80011f8:	f004 feea 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001202:	f000 f9fd 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000294 	.word	0x20000294
 8001214:	40000800 	.word	0x40000800

08001218 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_TIM6_Init+0x64>)
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_TIM6_Init+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_TIM6_Init+0x64>)
 8001230:	2217      	movs	r2, #23
 8001232:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_TIM6_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_TIM6_Init+0x64>)
 800123c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001240:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_TIM6_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <MX_TIM6_Init+0x64>)
 800124a:	f003 fc57 	bl	8004afc <HAL_TIM_Base_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001254:	f000 f9d4 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM6_Init+0x64>)
 8001266:	f004 feb3 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001270:	f000 f9c6 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002e0 	.word	0x200002e0
 8001280:	40001000 	.word	0x40001000

08001284 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b098      	sub	sp, #96	; 0x60
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2234      	movs	r2, #52	; 0x34
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 fc73 	bl	800ab9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012b8:	4a47      	ldr	r2, [pc, #284]	; (80013d8 <MX_TIM8_Init+0x154>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012bc:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012c8:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012e2:	483c      	ldr	r0, [pc, #240]	; (80013d4 <MX_TIM8_Init+0x150>)
 80012e4:	f003 fccc 	bl	8004c80 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 f987 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001302:	4619      	mov	r1, r3
 8001304:	4833      	ldr	r0, [pc, #204]	; (80013d4 <MX_TIM8_Init+0x150>)
 8001306:	f004 fe63 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001310:	f000 f976 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001314:	2360      	movs	r3, #96	; 0x60
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4826      	ldr	r0, [pc, #152]	; (80013d4 <MX_TIM8_Init+0x150>)
 800133a:	f004 f8ad 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001344:	f000 f95c 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001348:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134c:	2204      	movs	r2, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4820      	ldr	r0, [pc, #128]	; (80013d4 <MX_TIM8_Init+0x150>)
 8001352:	f004 f8a1 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800135c:	f000 f950 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001360:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001364:	2208      	movs	r2, #8
 8001366:	4619      	mov	r1, r3
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <MX_TIM8_Init+0x150>)
 800136a:	f004 f895 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001374:	f000 f944 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800139e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM8_Init+0x150>)
 80013b6:	f004 fe8d 	bl	80060d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80013c0:	f000 f91e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM8_Init+0x150>)
 80013c6:	f000 fa57 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3760      	adds	r7, #96	; 0x60
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000032c 	.word	0x2000032c
 80013d8:	40013400 	.word	0x40013400

080013dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b098      	sub	sp, #96	; 0x60
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2234      	movs	r2, #52	; 0x34
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f009 fbc7 	bl	800ab9c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <MX_TIM15_Init+0x11c>)
 8001410:	4a3a      	ldr	r2, [pc, #232]	; (80014fc <MX_TIM15_Init+0x120>)
 8001412:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <MX_TIM15_Init+0x11c>)
 8001416:	2230      	movs	r2, #48	; 0x30
 8001418:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <MX_TIM15_Init+0x11c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <MX_TIM15_Init+0x11c>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <MX_TIM15_Init+0x11c>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <MX_TIM15_Init+0x11c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <MX_TIM15_Init+0x11c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800143a:	482f      	ldr	r0, [pc, #188]	; (80014f8 <MX_TIM15_Init+0x11c>)
 800143c:	f003 fc20 	bl	8004c80 <HAL_TIM_PWM_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 f8db 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001452:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001456:	4619      	mov	r1, r3
 8001458:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_TIM15_Init+0x11c>)
 800145a:	f004 fdb9 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001464:	f000 f8cc 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001484:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001488:	2200      	movs	r2, #0
 800148a:	4619      	mov	r1, r3
 800148c:	481a      	ldr	r0, [pc, #104]	; (80014f8 <MX_TIM15_Init+0x11c>)
 800148e:	f004 f803 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001498:	f000 f8b2 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <MX_TIM15_Init+0x11c>)
 80014a6:	f003 fff7 	bl	8005498 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80014b0:	f000 f8a6 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM15_Init+0x11c>)
 80014dc:	f004 fdfa 	bl	80060d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80014e6:	f000 f88b 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM15_Init+0x11c>)
 80014ec:	f000 f9c4 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3760      	adds	r7, #96	; 0x60
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000378 	.word	0x20000378
 80014fc:	40014000 	.word	0x40014000

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <MX_GPIO_Init+0xf4>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a30      	ldr	r2, [pc, #192]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_GPIO_Init+0xf4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <MX_GPIO_Init+0xf4>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <MX_GPIO_Init+0xf4>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	4825      	ldr	r0, [pc, #148]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001564:	f000 fdd4 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	21a2      	movs	r1, #162	; 0xa2
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f000 fdce 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2118      	movs	r1, #24
 8001578:	4820      	ldr	r0, [pc, #128]	; (80015fc <MX_GPIO_Init+0xfc>)
 800157a:	f000 fdc9 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4619      	mov	r1, r3
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001596:	f000 fc39 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 800159a:	2302      	movs	r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4812      	ldr	r0, [pc, #72]	; (80015f8 <MX_GPIO_Init+0xf8>)
 80015ae:	f000 fc2d 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 80015b2:	23a2      	movs	r3, #162	; 0xa2
 80015b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f000 fc1e 	bl	8001e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 80015d0:	2318      	movs	r3, #24
 80015d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_GPIO_Init+0xfc>)
 80015e8:	f000 fc10 	bl	8001e0c <HAL_GPIO_Init>

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48001400 	.word	0x48001400
 80015fc:	48000400 	.word	0x48000400

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001608:	e7fe      	b.n	8001608 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_MspInit+0x44>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_MspInit+0x44>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_MspInit+0x44>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_MspInit+0x44>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6593      	str	r3, [r2, #88]	; 0x58
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_TIM_Encoder_MspInit+0x138>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d12a      	bne.n	80016cc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 800167c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001680:	6613      	str	r3, [r2, #96]	; 0x60
 8001682:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168a:	623b      	str	r3, [r7, #32]
 800168c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80016a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016b8:	2306      	movs	r3, #6
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f000 fba1 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016ca:	e05b      	b.n	8001784 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a30      	ldr	r2, [pc, #192]	; (8001794 <HAL_TIM_Encoder_MspInit+0x140>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d129      	bne.n	800172a <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 8001706:	2350      	movs	r3, #80	; 0x50
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001716:	2302      	movs	r3, #2
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001724:	f000 fb72 	bl	8001e0c <HAL_GPIO_Init>
}
 8001728:	e02c      	b.n	8001784 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <HAL_TIM_Encoder_MspInit+0x144>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d127      	bne.n	8001784 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6593      	str	r3, [r2, #88]	; 0x58
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_TIM_Encoder_MspInit+0x13c>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001774:	2302      	movs	r3, #2
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <HAL_TIM_Encoder_MspInit+0x148>)
 8001780:	f000 fb44 	bl	8001e0c <HAL_GPIO_Init>
}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40012c00 	.word	0x40012c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40000400 	.word	0x40000400
 8001798:	40000800 	.word	0x40000800
 800179c:	48000400 	.word	0x48000400

080017a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d10c      	bne.n	80017cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017ca:	e022      	b.n	8001812 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_TIM_PWM_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10c      	bne.n	80017f0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a11      	ldr	r2, [pc, #68]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
}
 80017ee:	e010      	b.n	8001812 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <HAL_TIM_PWM_MspInit+0x88>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10b      	bne.n	8001812 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_TIM_PWM_MspInit+0x80>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40013400 	.word	0x40013400
 8001828:	40014000 	.word	0x40014000

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_TIM_Base_MspInit+0x44>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d113      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_TIM_Base_MspInit+0x48>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_TIM_Base_MspInit+0x48>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_TIM_Base_MspInit+0x48>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2036      	movs	r0, #54	; 0x36
 800185c:	f000 faa1 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001860:	2036      	movs	r0, #54	; 0x36
 8001862:	f000 fab8 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40001000 	.word	0x40001000
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	; 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001898:	d11d      	bne.n	80018d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018c2:	2301      	movs	r3, #1
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f000 fa9c 	bl	8001e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018d4:	e071      	b.n	80019ba <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_TIM_MspPostInit+0x150>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d14a      	bne.n	8001976 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	4a37      	ldr	r2, [pc, #220]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ec:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001920:	2304      	movs	r3, #4
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4828      	ldr	r0, [pc, #160]	; (80019cc <HAL_TIM_MspPostInit+0x154>)
 800192c:	f000 fa6e 	bl	8001e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001942:	2302      	movs	r3, #2
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f000 fa5c 	bl	8001e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8001954:	2320      	movs	r3, #32
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001964:	2303      	movs	r3, #3
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4817      	ldr	r0, [pc, #92]	; (80019cc <HAL_TIM_MspPostInit+0x154>)
 8001970:	f000 fa4c 	bl	8001e0c <HAL_GPIO_Init>
}
 8001974:	e021      	b.n	80019ba <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <HAL_TIM_MspPostInit+0x158>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d11c      	bne.n	80019ba <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_TIM_MspPostInit+0x14c>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 8001998:	230c      	movs	r3, #12
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80019a8:	2309      	movs	r3, #9
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f000 fa29 	bl	8001e0c <HAL_GPIO_Init>
}
 80019ba:	bf00      	nop
 80019bc:	3730      	adds	r7, #48	; 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40013400 	.word	0x40013400
 80019cc:	48000400 	.word	0x48000400
 80019d0:	40014000 	.word	0x40014000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 f8a4 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <USB_LP_IRQHandler+0x10>)
 8001a2e:	f000 fca8 	bl	8002382 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200010bc 	.word	0x200010bc

08001a3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM6_DAC_IRQHandler+0x10>)
 8001a42:	f003 fba9 	bl	8005198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200002e0 	.word	0x200002e0

08001a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <Reset_Handler>:
 8001a74:	480d      	ldr	r0, [pc, #52]	; (8001aac <LoopForever+0x2>)
 8001a76:	4685      	mov	sp, r0
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <LoopForever+0x6>)
 8001a7a:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <LoopForever+0xa>)
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <LoopForever+0xe>)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:
 8001a82:	58d4      	ldr	r4, [r2, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:
 8001a88:	18c4      	adds	r4, r0, r3
 8001a8a:	428c      	cmp	r4, r1
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LoopForever+0x12>)
 8001a90:	4c0b      	ldr	r4, [pc, #44]	; (8001ac0 <LoopForever+0x16>)
 8001a92:	2300      	movs	r3, #0
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:
 8001a9a:	42a2      	cmp	r2, r4
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>
 8001a9e:	f7ff ffd7 	bl	8001a50 <SystemInit>
 8001aa2:	f009 f849 	bl	800ab38 <__libc_init_array>
 8001aa6:	f7ff f99b 	bl	8000de0 <main>

08001aaa <LoopForever>:
 8001aaa:	e7fe      	b.n	8001aaa <LoopForever>
 8001aac:	20008000 	.word	0x20008000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000194 	.word	0x20000194
 8001ab8:	0800ac24 	.word	0x0800ac24
 8001abc:	20000194 	.word	0x20000194
 8001ac0:	200015d0 	.word	0x200015d0

08001ac4 <ADC1_2_IRQHandler>:
 8001ac4:	e7fe      	b.n	8001ac4 <ADC1_2_IRQHandler>

08001ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f95b 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f80e 	bl	8001af8 <HAL_InitTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e001      	b.n	8001aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae8:	f7ff fd90 	bl	800160c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aec:	79fb      	ldrb	r3, [r7, #7]

}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_InitTick+0x68>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d022      	beq.n	8001b52 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_InitTick+0x6c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_InitTick+0x68>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f966 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10f      	bne.n	8001b4c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	d809      	bhi.n	8001b46 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b32:	2200      	movs	r2, #0
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3a:	f000 f932 	bl	8001da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_InitTick+0x70>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e004      	b.n	8001b56 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e001      	b.n	8001b56 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000018 	.word	0x20000018
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000014 	.word	0x20000014

08001b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x1c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_IncTick+0x20>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x1c>)
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	20000414 	.word	0x20000414
 8001b8c:	20000018 	.word	0x20000018

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000414 	.word	0x20000414

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d004      	beq.n	8001bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_Delay+0x40>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bcc:	bf00      	nop
 8001bce:	f7ff ffdf 	bl	8001b90 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d8f7      	bhi.n	8001bce <HAL_Delay+0x26>
  {
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000018 	.word	0x20000018

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f7ff ff8e 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff29 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff40 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff33 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa4 	bl	8001d48 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e1a:	e15a      	b.n	80020d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 814c 	beq.w	80020cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d005      	beq.n	8001e4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d130      	bne.n	8001eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e82:	2201      	movs	r2, #1
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	f003 0201 	and.w	r2, r3, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d017      	beq.n	8001eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d123      	bne.n	8001f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	6939      	ldr	r1, [r7, #16]
 8001f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0203 	and.w	r2, r3, #3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a6 	beq.w	80020cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x2e4>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	4a5a      	ldr	r2, [pc, #360]	; (80020f0 <HAL_GPIO_Init+0x2e4>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8c:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <HAL_GPIO_Init+0x2e4>)
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <HAL_GPIO_Init+0x2e8>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fc2:	d01f      	beq.n	8002004 <HAL_GPIO_Init+0x1f8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x2ec>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d019      	beq.n	8002000 <HAL_GPIO_Init+0x1f4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_GPIO_Init+0x2f0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_Init+0x1f0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_GPIO_Init+0x2f4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_Init+0x1ec>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a49      	ldr	r2, [pc, #292]	; (8002104 <HAL_GPIO_Init+0x2f8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_Init+0x1e8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_GPIO_Init+0x2fc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_Init+0x1e4>
 8001fec:	2305      	movs	r3, #5
 8001fee:	e00a      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	e008      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1fa>
 8002004:	2300      	movs	r3, #0
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002016:	4937      	ldr	r1, [pc, #220]	; (80020f4 <HAL_GPIO_Init+0x2e8>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <HAL_GPIO_Init+0x300>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_GPIO_Init+0x300>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_GPIO_Init+0x300>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002072:	4a26      	ldr	r2, [pc, #152]	; (800210c <HAL_GPIO_Init+0x300>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_GPIO_Init+0x300>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_GPIO_Init+0x300>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_GPIO_Init+0x300>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <HAL_GPIO_Init+0x300>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f ae9d 	bne.w	8001e1c <HAL_GPIO_Init+0x10>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	48001000 	.word	0x48001000
 8002108:	48001400 	.word	0x48001400
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800212c:	e002      	b.n	8002134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43d9      	mvns	r1, r3
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	400b      	ands	r3, r1
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b08b      	sub	sp, #44	; 0x2c
 8002178:	af06      	add	r7, sp, #24
 800217a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0d7      	b.n	8002336 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f008 f9c6 	bl	800a52c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2203      	movs	r2, #3
 80021a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f004 f8b3 	bl	8006318 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e04c      	b.n	8002252 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3301      	adds	r3, #1
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b298      	uxth	r0, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3336      	adds	r3, #54	; 0x36
 80021f6:	4602      	mov	r2, r0
 80021f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3303      	adds	r3, #3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	3338      	adds	r3, #56	; 0x38
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	333c      	adds	r3, #60	; 0x3c
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3340      	adds	r3, #64	; 0x40
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3ad      	bcc.n	80021b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e044      	b.n	80022ec <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3b5      	bcc.n	8002262 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	687e      	ldr	r6, [r7, #4]
 80022fe:	466d      	mov	r5, sp
 8002300:	f106 0410 	add.w	r4, r6, #16
 8002304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	602b      	str	r3, [r5, #0]
 800230c:	1d33      	adds	r3, r6, #4
 800230e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	f004 f81c 	bl	800634e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f001 fc29 	bl	8003b86 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800233e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_PCD_Start+0x16>
 8002350:	2302      	movs	r3, #2
 8002352:	e012      	b.n	800237a <HAL_PCD_Start+0x3c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f003 ffc2 	bl	80062ea <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f006 f9da 	bl	8008724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f006 f9df 	bl	8008752 <USB_ReadInterrupts>
 8002394:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fb26 	bl	80029f2 <PCD_EP_ISR_Handler>

    return;
 80023a6:	e110      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d013      	beq.n	80023da <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	b292      	uxth	r2, r2
 80023c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f008 f93f 	bl	800a64e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8fc 	bl	80025d0 <HAL_PCD_SetAddress>

    return;
 80023d8:	e0f7      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023f6:	b292      	uxth	r2, r2
 80023f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023fc:	e0e5      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00c      	beq.n	8002422 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800241a:	b292      	uxth	r2, r2
 800241c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002420:	e0d3      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d034      	beq.n	8002496 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0204 	bic.w	r2, r2, #4
 800243e:	b292      	uxth	r2, r2
 8002440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0208 	bic.w	r2, r2, #8
 8002456:	b292      	uxth	r2, r2
 8002458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800246e:	2100      	movs	r1, #0
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f008 fae1 	bl	800aa38 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f008 f922 	bl	800a6c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800248e:	b292      	uxth	r2, r2
 8002490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002494:	e099      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800249c:	2b00      	cmp	r3, #0
 800249e:	d027      	beq.n	80024f0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0208 	orr.w	r2, r2, #8
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	b292      	uxth	r2, r2
 80024cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0204 	orr.w	r2, r2, #4
 80024e2:	b292      	uxth	r2, r2
 80024e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f008 f8cf 	bl	800a68c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024ee:	e06c      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250c:	b292      	uxth	r2, r2
 800250e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d12b      	bne.n	8002574 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002524:	b29a      	uxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0204 	orr.w	r2, r2, #4
 800252e:	b292      	uxth	r2, r2
 8002530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0208 	orr.w	r2, r2, #8
 8002546:	b292      	uxth	r2, r2
 8002548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800255c:	b29b      	uxth	r3, r3
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800256a:	2101      	movs	r1, #1
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f008 fa63 	bl	800aa38 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002572:	e02a      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f008 f889 	bl	800a68c <HAL_PCD_SuspendCallback>
    return;
 800257a:	e026      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00f      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002598:	b292      	uxth	r2, r2
 800259a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f008 f847 	bl	800a632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025a4:	e011      	b.n	80025ca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00c      	beq.n	80025ca <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c2:	b292      	uxth	r2, r2
 80025c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80025c8:	bf00      	nop
  }
}
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_PCD_SetAddress+0x1a>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e013      	b.n	8002612 <HAL_PCD_SetAddress+0x42>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f006 f87a 	bl	80086fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	70fb      	strb	r3, [r7, #3]
 800262c:	460b      	mov	r3, r1
 800262e:	803b      	strh	r3, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002638:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da0e      	bge.n	800265e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	705a      	strb	r2, [r3, #1]
 800265c:	e00e      	b.n	800267c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0207 	and.w	r2, r3, #7
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002688:	883a      	ldrh	r2, [r7, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	78ba      	ldrb	r2, [r7, #2]
 8002692:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026a6:	78bb      	ldrb	r3, [r7, #2]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d102      	bne.n	80026b2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_PCD_EP_Open+0xa6>
 80026bc:	2302      	movs	r3, #2
 80026be:	e00e      	b.n	80026de <HAL_PCD_EP_Open+0xc4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f003 fe5e 	bl	8006390 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80026dc:	7afb      	ldrb	r3, [r7, #11]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da0e      	bge.n	8002718 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	705a      	strb	r2, [r3, #1]
 8002716:	e00e      	b.n	8002736 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_PCD_EP_Close+0x6a>
 800274c:	2302      	movs	r3, #2
 800274e:	e00e      	b.n	800276e <HAL_PCD_EP_Close+0x88>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68f9      	ldr	r1, [r7, #12]
 800275e:	4618      	mov	r0, r3
 8002760:	f004 f9aa 	bl	8006ab8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b086      	sub	sp, #24
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
 8002782:	460b      	mov	r3, r1
 8002784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	f003 0207 	and.w	r2, r3, #7
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2200      	movs	r2, #0
 80027b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027c2:	7afb      	ldrb	r3, [r7, #11]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6979      	ldr	r1, [r7, #20]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fb5d 	bl	8006e92 <USB_EPStartXfer>
 80027d8:	e005      	b.n	80027e6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6979      	ldr	r1, [r7, #20]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fb56 	bl	8006e92 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 0207 	and.w	r2, r3, #7
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	460b      	mov	r3, r1
 800282e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2201      	movs	r2, #1
 800286a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800286c:	7afb      	ldrb	r3, [r7, #11]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	b2da      	uxtb	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002878:	7afb      	ldrb	r3, [r7, #11]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6979      	ldr	r1, [r7, #20]
 8002888:	4618      	mov	r0, r3
 800288a:	f004 fb02 	bl	8006e92 <USB_EPStartXfer>
 800288e:	e005      	b.n	800289c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6979      	ldr	r1, [r7, #20]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fafb 	bl	8006e92 <USB_EPStartXfer>
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 0207 	and.w	r2, r3, #7
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d901      	bls.n	80028c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e03e      	b.n	8002942 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da0e      	bge.n	80028ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	705a      	strb	r2, [r3, #1]
 80028e8:	e00c      	b.n	8002904 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_EP_SetStall+0x7e>
 8002920:	2302      	movs	r3, #2
 8002922:	e00e      	b.n	8002942 <HAL_PCD_EP_SetStall+0x9c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f005 fde3 	bl	80084fe <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d901      	bls.n	8002968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e040      	b.n	80029ea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da0e      	bge.n	800298e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	705a      	strb	r2, [r3, #1]
 800298c:	e00e      	b.n	80029ac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 0207 	and.w	r2, r3, #7
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_PCD_EP_ClrStall+0x82>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e00e      	b.n	80029ea <HAL_PCD_EP_ClrStall+0xa0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	4618      	mov	r0, r3
 80029dc:	f005 fde0 	bl	80085a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b096      	sub	sp, #88	; 0x58
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029fa:	e39c      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002a16:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 815e 	bne.w	8002cdc <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d150      	bne.n	8002ace <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3c:	81fb      	strh	r3, [r7, #14]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3328      	adds	r3, #40	; 0x28
 8002a54:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	441a      	add	r2, r3
 8002a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f007 fdb5 	bl	800a5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 834a 	beq.w	8003136 <PCD_EP_ISR_Handler+0x744>
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8345 	bne.w	8003136 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002acc:	e333      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ae0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f005 fe65 	bl	80087f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b38:	4013      	ands	r3, r2
 8002b3a:	823b      	strh	r3, [r7, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	8a3a      	ldrh	r2, [r7, #16]
 8002b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b46:	b292      	uxth	r2, r2
 8002b48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f007 fd2a 	bl	800a5a4 <HAL_PCD_SetupStageCallback>
 8002b50:	e2f1      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b52:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f280 82ed 	bge.w	8003136 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b68:	4013      	ands	r3, r2
 8002b6a:	83fb      	strh	r3, [r7, #30]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	8bfa      	ldrh	r2, [r7, #30]
 8002b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b76:	b292      	uxth	r2, r2
 8002b78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <PCD_EP_ISR_Handler+0x1ec>
 8002baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	6959      	ldr	r1, [r3, #20]
 8002bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f005 fe17 	bl	80087f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	441a      	add	r2, r3
 8002bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f007 fcf5 	bl	800a5c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 82a3 	bne.w	8003136 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b3e      	cmp	r3, #62	; 0x3e
 8002c16:	d918      	bls.n	8002c4a <PCD_EP_ISR_Handler+0x258>
 8002c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <PCD_EP_ISR_Handler+0x240>
 8002c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
 8002c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	029b      	lsls	r3, r3, #10
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	801a      	strh	r2, [r3, #0]
 8002c48:	e029      	b.n	8002c9e <PCD_EP_ISR_Handler+0x2ac>
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d112      	bne.n	8002c78 <PCD_EP_ISR_Handler+0x286>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	801a      	strh	r2, [r3, #0]
 8002c76:	e012      	b.n	8002c9e <PCD_EP_ISR_Handler+0x2ac>
 8002c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <PCD_EP_ISR_Handler+0x2a0>
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	3301      	adds	r3, #1
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
 8002c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	827b      	strh	r3, [r7, #18]
 8002cb0:	8a7b      	ldrh	r3, [r7, #18]
 8002cb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002cb6:	827b      	strh	r3, [r7, #18]
 8002cb8:	8a7b      	ldrh	r3, [r7, #18]
 8002cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cbe:	827b      	strh	r3, [r7, #18]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	8a7b      	ldrh	r3, [r7, #18]
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
 8002cda:	e22c      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cf0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f280 80f6 	bge.w	8002ee6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d10:	4013      	ands	r3, r2
 8002d12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d2c:	b292      	uxth	r2, r2
 8002d2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d30:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	7b1b      	ldrb	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d123      	bne.n	8002d96 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002d76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 808e 	beq.w	8002e9c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d86:	6959      	ldr	r1, [r3, #20]
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8a:	88da      	ldrh	r2, [r3, #6]
 8002d8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d90:	f005 fd31 	bl	80087f6 <USB_ReadPMA>
 8002d94:	e082      	b.n	8002e9c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d98:	78db      	ldrb	r3, [r3, #3]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d10a      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d9e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002da2:	461a      	mov	r2, r3
 8002da4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9d3 	bl	8003152 <HAL_PCD_EP_DB_Receive>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002db2:	e073      	b.n	8002e9c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d022      	beq.n	8002e58 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e48:	6959      	ldr	r1, [r3, #20]
 8002e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4c:	891a      	ldrh	r2, [r3, #8]
 8002e4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e52:	f005 fcd0 	bl	80087f6 <USB_ReadPMA>
 8002e56:	e021      	b.n	8002e9c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	6959      	ldr	r1, [r3, #20]
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	895a      	ldrh	r2, [r3, #10]
 8002e94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e98:	f005 fcad 	bl	80087f6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ea4:	441a      	add	r2, r3
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002eb2:	441a      	add	r2, r3
 8002eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <PCD_EP_ISR_Handler+0x4da>
 8002ec0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d206      	bcs.n	8002eda <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f007 fb78 	bl	800a5c8 <HAL_PCD_DataOutStageCallback>
 8002ed8:	e005      	b.n	8002ee6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ffd6 	bl	8006e92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ee6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8121 	beq.w	8003136 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ef4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	f000 80a2 	beq.w	8003092 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f50:	2200      	movs	r2, #0
 8002f52:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f56:	7b1b      	ldrb	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8093 	beq.w	8003084 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d046      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d126      	bne.n	8002fc0 <PCD_EP_ISR_Handler+0x5ce>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	4413      	add	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	00da      	lsls	r2, r3, #3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	4413      	add	r3, r2
 8002f94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	801a      	strh	r2, [r3, #0]
 8002fbe:	e061      	b.n	8003084 <PCD_EP_ISR_Handler+0x692>
 8002fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d15d      	bne.n	8003084 <PCD_EP_ISR_Handler+0x692>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	4413      	add	r3, r2
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00da      	lsls	r2, r3, #3
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	4413      	add	r3, r2
 8002fea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	e045      	b.n	8003084 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d126      	bne.n	8003054 <PCD_EP_ISR_Handler+0x662>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003014:	b29b      	uxth	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	4413      	add	r3, r2
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
 800301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	00da      	lsls	r2, r3, #3
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	4413      	add	r3, r2
 8003028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003038:	b29a      	uxth	r2, r3
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304c:	b29a      	uxth	r2, r3
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	e017      	b.n	8003084 <PCD_EP_ISR_Handler+0x692>
 8003054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d113      	bne.n	8003084 <PCD_EP_ISR_Handler+0x692>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306a:	4413      	add	r3, r2
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	00da      	lsls	r2, r3, #3
 8003074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003076:	4413      	add	r3, r2
 8003078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f007 fab7 	bl	800a5fe <HAL_PCD_DataInStageCallback>
 8003090:	e051      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003092:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d144      	bne.n	8003128 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d907      	bls.n	80030e2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030de:	619a      	str	r2, [r3, #24]
 80030e0:	e002      	b.n	80030e8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	2200      	movs	r2, #0
 80030e6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80030e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f007 fa81 	bl	800a5fe <HAL_PCD_DataInStageCallback>
 80030fc:	e01b      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003106:	441a      	add	r2, r3
 8003108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003114:	441a      	add	r2, r3
 8003116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003118:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003120:	4618      	mov	r0, r3
 8003122:	f003 feb6 	bl	8006e92 <USB_EPStartXfer>
 8003126:	e006      	b.n	8003136 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003128:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800312c:	461a      	mov	r2, r3
 800312e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f917 	bl	8003364 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800313e:	b29b      	uxth	r3, r3
 8003140:	b21b      	sxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f6ff ac5a 	blt.w	80029fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3758      	adds	r7, #88	; 0x58
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b088      	sub	sp, #32
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d07c      	beq.n	8003264 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	4413      	add	r3, r2
 8003184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	8b7b      	ldrh	r3, [r7, #26]
 8003196:	429a      	cmp	r2, r3
 8003198:	d306      	bcc.n	80031a8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	8b7b      	ldrh	r3, [r7, #26]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	619a      	str	r2, [r3, #24]
 80031a6:	e002      	b.n	80031ae <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d123      	bne.n	80031fe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	833b      	strh	r3, [r7, #24]
 80031d2:	8b3b      	ldrh	r3, [r7, #24]
 80031d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031d8:	833b      	strh	r3, [r7, #24]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	8b3b      	ldrh	r3, [r7, #24]
 80031ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01f      	beq.n	8003248 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	82fb      	strh	r3, [r7, #22]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	8afb      	ldrh	r3, [r7, #22]
 8003234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003244:	b29b      	uxth	r3, r3
 8003246:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003248:	8b7b      	ldrh	r3, [r7, #26]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8085 	beq.w	800335a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6959      	ldr	r1, [r3, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	891a      	ldrh	r2, [r3, #8]
 800325c:	8b7b      	ldrh	r3, [r7, #26]
 800325e:	f005 faca 	bl	80087f6 <USB_ReadPMA>
 8003262:	e07a      	b.n	800335a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4413      	add	r3, r2
 800327e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003288:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	8b7b      	ldrh	r3, [r7, #26]
 8003290:	429a      	cmp	r2, r3
 8003292:	d306      	bcc.n	80032a2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	8b7b      	ldrh	r3, [r7, #26]
 800329a:	1ad2      	subs	r2, r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	619a      	str	r2, [r3, #24]
 80032a0:	e002      	b.n	80032a8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d123      	bne.n	80032f8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	83fb      	strh	r3, [r7, #30]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032d2:	83fb      	strh	r3, [r7, #30]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	8bfb      	ldrh	r3, [r7, #30]
 80032e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331c:	83bb      	strh	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	8bbb      	ldrh	r3, [r7, #28]
 800332e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800333e:	b29b      	uxth	r3, r3
 8003340:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003342:	8b7b      	ldrh	r3, [r7, #26]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6959      	ldr	r1, [r3, #20]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	895a      	ldrh	r2, [r3, #10]
 8003354:	8b7b      	ldrh	r3, [r7, #26]
 8003356:	f005 fa4e 	bl	80087f6 <USB_ReadPMA>
    }
  }

  return count;
 800335a:	8b7b      	ldrh	r3, [r7, #26]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b0a2      	sub	sp, #136	; 0x88
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 81c5 	beq.w	8003708 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	4413      	add	r3, r2
 8003398:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d907      	bls.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ba:	1ad2      	subs	r2, r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	619a      	str	r2, [r3, #24]
 80033c0:	e002      	b.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f040 80b9 	bne.w	8003544 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d126      	bne.n	8003428 <HAL_PCD_EP_DB_Transmit+0xc4>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	4413      	add	r3, r2
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00da      	lsls	r2, r3, #3
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800340c:	b29a      	uxth	r2, r3
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003420:	b29a      	uxth	r2, r3
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	e01a      	b.n	800345e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d116      	bne.n	800345e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800343e:	b29b      	uxth	r3, r3
 8003440:	461a      	mov	r2, r3
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	4413      	add	r3, r2
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	00da      	lsls	r2, r3, #3
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	4413      	add	r3, r2
 8003452:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	2200      	movs	r2, #0
 800345c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	623b      	str	r3, [r7, #32]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d126      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0x156>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4413      	add	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00da      	lsls	r2, r3, #3
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	4413      	add	r3, r2
 800348e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800349e:	b29a      	uxth	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	e017      	b.n	80034ea <HAL_PCD_EP_DB_Transmit+0x186>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d113      	bne.n	80034ea <HAL_PCD_EP_DB_Transmit+0x186>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	4413      	add	r3, r2
 80034d2:	623b      	str	r3, [r7, #32]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00da      	lsls	r2, r3, #3
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	4413      	add	r3, r2
 80034de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2200      	movs	r2, #0
 80034e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	4619      	mov	r1, r3
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f007 f884 	bl	800a5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 82d2 	beq.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	827b      	strh	r3, [r7, #18]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8a7b      	ldrh	r3, [r7, #18]
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800353a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]
 8003542:	e2b0      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d021      	beq.n	8003592 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800357e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	b29b      	uxth	r3, r3
 8003590:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 8284 	bne.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a6:	441a      	add	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b4:	441a      	add	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6a1a      	ldr	r2, [r3, #32]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d309      	bcc.n	80035da <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	621a      	str	r2, [r3, #32]
 80035d8:	e015      	b.n	8003606 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d107      	bne.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80035e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035f0:	e009      	b.n	8003606 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2200      	movs	r2, #0
 8003604:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d155      	bne.n	80036ba <HAL_PCD_EP_DB_Transmit+0x356>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	4413      	add	r3, r2
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00da      	lsls	r2, r3, #3
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	4413      	add	r3, r2
 8003630:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	2b3e      	cmp	r3, #62	; 0x3e
 800363a:	d916      	bls.n	800366a <HAL_PCD_EP_DB_Transmit+0x306>
 800363c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
 8003642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	3b01      	subs	r3, #1
 8003650:	64bb      	str	r3, [r7, #72]	; 0x48
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	b29b      	uxth	r3, r3
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29a      	uxth	r2, r3
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e043      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366c:	2b00      	cmp	r3, #0
 800366e:	d112      	bne.n	8003696 <HAL_PCD_EP_DB_Transmit+0x332>
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800367a:	b29a      	uxth	r2, r3
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	801a      	strh	r2, [r3, #0]
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800368e:	b29a      	uxth	r2, r3
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	e02d      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_PCD_EP_DB_Transmit+0x348>
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a8:	3301      	adds	r3, #1
 80036aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e01b      	b.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x38e>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d117      	bne.n	80036f2 <HAL_PCD_EP_DB_Transmit+0x38e>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	643b      	str	r3, [r7, #64]	; 0x40
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d6:	4413      	add	r3, r2
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	00da      	lsls	r2, r3, #3
 80036e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e2:	4413      	add	r3, r2
 80036e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	6959      	ldr	r1, [r3, #20]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	891a      	ldrh	r2, [r3, #8]
 80036fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	f005 f836 	bl	8008772 <USB_WritePMA>
 8003706:	e1ce      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003710:	b29b      	uxth	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	4413      	add	r3, r2
 8003722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003738:	429a      	cmp	r2, r3
 800373a:	d307      	bcc.n	800374c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003744:	1ad2      	subs	r2, r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	619a      	str	r2, [r3, #24]
 800374a:	e002      	b.n	8003752 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f040 80c4 	bne.w	80038e4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d126      	bne.n	80037b2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	66bb      	str	r3, [r7, #104]	; 0x68
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003778:	4413      	add	r3, r2
 800377a:	66bb      	str	r3, [r7, #104]	; 0x68
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	00da      	lsls	r2, r3, #3
 8003782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003784:	4413      	add	r3, r2
 8003786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800378a:	667b      	str	r3, [r7, #100]	; 0x64
 800378c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003796:	b29a      	uxth	r2, r3
 8003798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	e01a      	b.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x484>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d116      	bne.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x484>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	673b      	str	r3, [r7, #112]	; 0x70
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ce:	4413      	add	r3, r2
 80037d0:	673b      	str	r3, [r7, #112]	; 0x70
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	00da      	lsls	r2, r3, #3
 80037d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037da:	4413      	add	r3, r2
 80037dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	2200      	movs	r2, #0
 80037e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d12f      	bne.n	8003856 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800380e:	4413      	add	r3, r2
 8003810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00da      	lsls	r2, r3, #3
 800381a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800381e:	4413      	add	r3, r2
 8003820:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003834:	b29a      	uxth	r2, r3
 8003836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800384c:	b29a      	uxth	r2, r3
 800384e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	e017      	b.n	8003886 <HAL_PCD_EP_DB_Transmit+0x522>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d113      	bne.n	8003886 <HAL_PCD_EP_DB_Transmit+0x522>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003866:	b29b      	uxth	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800386c:	4413      	add	r3, r2
 800386e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	00da      	lsls	r2, r3, #3
 8003876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003878:	4413      	add	r3, r2
 800387a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800387e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003882:	2200      	movs	r2, #0
 8003884:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	4619      	mov	r1, r3
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f006 feb6 	bl	800a5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003898:	2b00      	cmp	r3, #0
 800389a:	f040 8104 	bne.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038de:	b29b      	uxth	r3, r3
 80038e0:	8013      	strh	r3, [r2, #0]
 80038e2:	e0e0      	b.n	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d121      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800391e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392e:	b29b      	uxth	r3, r3
 8003930:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 80b4 	bne.w	8003aa6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003946:	441a      	add	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003954:	441a      	add	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	429a      	cmp	r2, r3
 8003964:	d309      	bcc.n	800397a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	621a      	str	r2, [r3, #32]
 8003978:	e015      	b.n	80039a6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003986:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003990:	e009      	b.n	80039a6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	663b      	str	r3, [r7, #96]	; 0x60
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	785b      	ldrb	r3, [r3, #1]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d155      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c8:	4413      	add	r3, r2
 80039ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	00da      	lsls	r2, r3, #3
 80039d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d4:	4413      	add	r3, r2
 80039d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039da:	657b      	str	r3, [r7, #84]	; 0x54
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	2b3e      	cmp	r3, #62	; 0x3e
 80039e0:	d916      	bls.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80039e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	677b      	str	r3, [r7, #116]	; 0x74
 80039e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x694>
 80039f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f4:	3b01      	subs	r3, #1
 80039f6:	677b      	str	r3, [r7, #116]	; 0x74
 80039f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e040      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	e02a      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	677b      	str	r3, [r7, #116]	; 0x74
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4e:	3301      	adds	r3, #1
 8003a50:	677b      	str	r3, [r7, #116]	; 0x74
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	029b      	lsls	r3, r3, #10
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e018      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d114      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a76:	4413      	add	r3, r2
 8003a78:	663b      	str	r3, [r7, #96]	; 0x60
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a82:	4413      	add	r3, r2
 8003a84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6959      	ldr	r1, [r3, #20]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	895a      	ldrh	r2, [r3, #10]
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f004 fe66 	bl	8008772 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac0:	823b      	strh	r3, [r7, #16]
 8003ac2:	8a3b      	ldrh	r3, [r7, #16]
 8003ac4:	f083 0310 	eor.w	r3, r3, #16
 8003ac8:	823b      	strh	r3, [r7, #16]
 8003aca:	8a3b      	ldrh	r3, [r7, #16]
 8003acc:	f083 0320 	eor.w	r3, r3, #32
 8003ad0:	823b      	strh	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	441a      	add	r2, r3
 8003ae0:	8a3b      	ldrh	r3, [r7, #16]
 8003ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3788      	adds	r7, #136	; 0x88
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	817b      	strh	r3, [r7, #10]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b12:	897b      	ldrh	r3, [r7, #10]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e009      	b.n	8003b4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b36:	897a      	ldrh	r2, [r7, #10]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	80da      	strh	r2, [r3, #6]
 8003b5e:	e00b      	b.n	8003b78 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2201      	movs	r2, #1
 8003b64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d141      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bea:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d131      	bne.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf8:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfe:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c08:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c10:	4a41      	ldr	r2, [pc, #260]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c18:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a3f      	ldr	r2, [pc, #252]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	0c9b      	lsrs	r3, r3, #18
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2e:	e002      	b.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d102      	bne.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f2      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c4a:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d158      	bne.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e057      	b.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c5c:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c6c:	e04d      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d141      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d131      	bne.n	8003ce8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c9c:	4a1e      	ldr	r2, [pc, #120]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2232      	movs	r2, #50	; 0x32
 8003caa:	fb02 f303 	mul.w	r3, r2, r3
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb4:	0c9b      	lsrs	r3, r3, #18
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cba:	e002      	b.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc2:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cce:	d102      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f2      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d112      	bne.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e011      	b.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cf8:	e007      	b.n	8003d0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	20000010 	.word	0x20000010
 8003d20:	431bde83 	.word	0x431bde83

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e306      	b.n	8004344 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d075      	beq.n	8003e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b97      	ldr	r3, [pc, #604]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d4c:	4b94      	ldr	r3, [pc, #592]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d102      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3e>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d002      	beq.n	8003d68 <HAL_RCC_OscConfig+0x44>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b8d      	ldr	r3, [pc, #564]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05b      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d157      	bne.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e2e1      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x74>
 8003d8a:	4b85      	ldr	r3, [pc, #532]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a84      	ldr	r2, [pc, #528]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e01d      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x98>
 8003da2:	4b7f      	ldr	r3, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7b      	ldr	r2, [pc, #492]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a77      	ldr	r2, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a74      	ldr	r2, [pc, #464]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fed8 	bl	8001b90 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fed4 	bl	8001b90 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e2a6      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0xc0>
 8003e02:	e014      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fec4 	bl	8001b90 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fec0 	bl	8001b90 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e292      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b60      	ldr	r3, [pc, #384]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe8>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d075      	beq.n	8003f26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3a:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d102      	bne.n	8003e5a <HAL_RCC_OscConfig+0x136>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_OscConfig+0x13c>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d11f      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_OscConfig+0x154>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e265      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	4946      	ldr	r1, [pc, #280]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd fe31 	bl	8001af8 <HAL_InitTick>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d043      	beq.n	8003f24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e251      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a3c      	ldr	r2, [pc, #240]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fe6c 	bl	8001b90 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fe68 	bl	8001b90 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e23a      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
 8003eee:	e01a      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fe48 	bl	8001b90 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fd fe44 	bl	8001b90 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e216      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_OscConfig+0x1e0>
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d041      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fe21 	bl	8001b90 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f52:	f7fd fe1d 	bl	8001b90 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1ef      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <HAL_RCC_OscConfig+0x22e>
 8003f72:	e020      	b.n	8003fb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fe04 	bl	8001b90 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f8a:	e00d      	b.n	8003fa8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fe00 	bl	8001b90 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d906      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1d2      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
 8003f9e:	bf00      	nop
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ea      	bne.n	8003f8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 80a6 	beq.w	8004110 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fc8:	4b84      	ldr	r3, [pc, #528]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2b4>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x2b6>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b7f      	ldr	r3, [pc, #508]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8003fea:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffa:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d118      	bne.n	8004038 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7fd fdbd 	bl	8001b90 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401a:	f7fd fdb9 	bl	8001b90 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e18b      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x4bc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_RCC_OscConfig+0x32e>
 8004040:	4b66      	ldr	r3, [pc, #408]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	4a65      	ldr	r2, [pc, #404]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004050:	e024      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d110      	bne.n	800407c <HAL_RCC_OscConfig+0x358>
 800405a:	4b60      	ldr	r3, [pc, #384]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406a:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	4a5a      	ldr	r2, [pc, #360]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407a:	e00f      	b.n	800409c <HAL_RCC_OscConfig+0x378>
 800407c:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	4a56      	ldr	r2, [pc, #344]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d016      	beq.n	80040d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fd fd74 	bl	8001b90 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fd fd70 	bl	8001b90 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e140      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	4b46      	ldr	r3, [pc, #280]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ed      	beq.n	80040ac <HAL_RCC_OscConfig+0x388>
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fd fd5d 	bl	8001b90 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fd fd59 	bl	8001b90 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e129      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ed      	bne.n	80040da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b35      	ldr	r3, [pc, #212]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d03c      	beq.n	8004196 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004124:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd fd2c 	bl	8001b90 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800413c:	f7fd fd28 	bl	8001b90 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e0fa      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <HAL_RCC_OscConfig+0x418>
 800415c:	e01b      	b.n	8004196 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004164:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fd fd0f 	bl	8001b90 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004176:	f7fd fd0b 	bl	8001b90 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0dd      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 800418a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ef      	bne.n	8004176 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80d1 	beq.w	8004342 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	f000 808b 	beq.w	80042c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d15e      	bne.n	8004274 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a08      	ldr	r2, [pc, #32]	; (80041dc <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fce5 	bl	8001b90 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c8:	e00c      	b.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd fce1 	bl	8001b90 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d905      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0b3      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCC_OscConfig+0x628>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ec      	bne.n	80041ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b56      	ldr	r3, [pc, #344]	; (800434c <HAL_RCC_OscConfig+0x628>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b56      	ldr	r3, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x62c>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a11      	ldr	r1, [r2, #32]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004200:	3a01      	subs	r2, #1
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800420a:	0212      	lsls	r2, r2, #8
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0552      	lsls	r2, r2, #21
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800421e:	0852      	lsrs	r2, r2, #1
 8004220:	3a01      	subs	r2, #1
 8004222:	0652      	lsls	r2, r2, #25
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800422a:	06d2      	lsls	r2, r2, #27
 800422c:	430a      	orrs	r2, r1
 800422e:	4947      	ldr	r1, [pc, #284]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004230:	4313      	orrs	r3, r2
 8004232:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004234:	4b45      	ldr	r3, [pc, #276]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a44      	ldr	r2, [pc, #272]	; (800434c <HAL_RCC_OscConfig+0x628>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004240:	4b42      	ldr	r3, [pc, #264]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a41      	ldr	r2, [pc, #260]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fca0 	bl	8001b90 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fc9c 	bl	8001b90 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e06e      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x530>
 8004272:	e066      	b.n	8004342 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a34      	ldr	r2, [pc, #208]	; (800434c <HAL_RCC_OscConfig+0x628>)
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a31      	ldr	r2, [pc, #196]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_RCC_OscConfig+0x628>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a2e      	ldr	r2, [pc, #184]	; (800434c <HAL_RCC_OscConfig+0x628>)
 8004292:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fc78 	bl	8001b90 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd fc74 	bl	8001b90 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e046      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_OscConfig+0x628>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x580>
 80042c2:	e03e      	b.n	8004342 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e039      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <HAL_RCC_OscConfig+0x628>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0203 	and.w	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d12c      	bne.n	800433e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	3b01      	subs	r3, #1
 80042f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d123      	bne.n	800433e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d11b      	bne.n	800433e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d113      	bne.n	800433e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d109      	bne.n	800433e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	019f800c 	.word	0x019f800c

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e11e      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b8e      	ldr	r3, [pc, #568]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	498c      	ldr	r1, [pc, #560]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e106      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d073      	beq.n	8004490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d129      	bne.n	8004404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b0:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0f4      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043c0:	f000 f966 	bl	8004690 <RCC_GetSysClockFreqFromPLLSource>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4a7c      	ldr	r2, [pc, #496]	; (80045bc <HAL_RCC_ClockConfig+0x268>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d93f      	bls.n	800444e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ce:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d033      	beq.n	800444e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12f      	bne.n	800444e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ee:	4b72      	ldr	r3, [pc, #456]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f6:	4a70      	ldr	r2, [pc, #448]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e024      	b.n	800444e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d107      	bne.n	800441c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440c:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0c6      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	4b66      	ldr	r3, [pc, #408]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0be      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800442c:	f000 f8ce 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4a61      	ldr	r2, [pc, #388]	; (80045bc <HAL_RCC_ClockConfig+0x268>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d909      	bls.n	800444e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800443a:	4b5f      	ldr	r3, [pc, #380]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004442:	4a5d      	ldr	r2, [pc, #372]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4957      	ldr	r1, [pc, #348]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7fd fb96 	bl	8001b90 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fd fb92 	bl	8001b90 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e095      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a42      	ldr	r2, [pc, #264]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044c0:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044c8:	4a3b      	ldr	r2, [pc, #236]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4936      	ldr	r1, [pc, #216]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d21d      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 020f 	bic.w	r2, r3, #15
 800450c:	4929      	ldr	r1, [pc, #164]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004514:	f7fd fb3c 	bl	8001b90 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451c:	f7fd fb38 	bl	8001b90 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e03b      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d1ed      	bne.n	800451c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4917      	ldr	r1, [pc, #92]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490f      	ldr	r1, [pc, #60]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800457e:	f000 f825 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490c      	ldr	r1, [pc, #48]	; (80045c0 <HAL_RCC_ClockConfig+0x26c>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <HAL_RCC_ClockConfig+0x270>)
 800459c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <HAL_RCC_ClockConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fd faa8 	bl	8001af8 <HAL_InitTick>
 80045a8:	4603      	mov	r3, r0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40021000 	.word	0x40021000
 80045bc:	04c4b400 	.word	0x04c4b400
 80045c0:	0800ac0c 	.word	0x0800ac0c
 80045c4:	20000010 	.word	0x20000010
 80045c8:	20000014 	.word	0x20000014

080045cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045d2:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	e047      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d102      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	e03e      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045f6:	4b23      	ldr	r3, [pc, #140]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d136      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3301      	adds	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d10c      	bne.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004620:	4a1a      	ldr	r2, [pc, #104]	; (800468c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800462a:	68d2      	ldr	r2, [r2, #12]
 800462c:	0a12      	lsrs	r2, r2, #8
 800462e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	617b      	str	r3, [r7, #20]
      break;
 8004638:	e00c      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	0a12      	lsrs	r2, r2, #8
 8004648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
      break;
 8004652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0e5b      	lsrs	r3, r3, #25
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e001      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004674:	693b      	ldr	r3, [r7, #16]
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	3301      	adds	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d10c      	bne.n	80046ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046b4:	4a17      	ldr	r2, [pc, #92]	; (8004714 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046be:	68d2      	ldr	r2, [r2, #12]
 80046c0:	0a12      	lsrs	r2, r2, #8
 80046c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	617b      	str	r3, [r7, #20]
    break;
 80046cc:	e00c      	b.n	80046e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d8:	68d2      	ldr	r2, [r2, #12]
 80046da:	0a12      	lsrs	r2, r2, #8
 80046dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    break;
 80046e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	0e5b      	lsrs	r3, r3, #25
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	3301      	adds	r3, #1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004702:	687b      	ldr	r3, [r7, #4]
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40021000 	.word	0x40021000
 8004714:	007a1200 	.word	0x007a1200
 8004718:	00f42400 	.word	0x00f42400

0800471c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004724:	2300      	movs	r3, #0
 8004726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004728:	2300      	movs	r3, #0
 800472a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8098 	beq.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10d      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	4b40      	ldr	r3, [pc, #256]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a3f      	ldr	r2, [pc, #252]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004762:	2301      	movs	r3, #1
 8004764:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a39      	ldr	r2, [pc, #228]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004772:	f7fd fa0d 	bl	8001b90 <HAL_GetTick>
 8004776:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004778:	e009      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7fd fa09 	bl	8001b90 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d902      	bls.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	74fb      	strb	r3, [r7, #19]
        break;
 800478c:	e005      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478e:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ef      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d159      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047a0:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01e      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d019      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	4a1f      	ldr	r2, [pc, #124]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a1b      	ldr	r2, [pc, #108]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd f9c9 	bl	8001b90 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004800:	e00b      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fd f9c5 	bl	8001b90 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d902      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	74fb      	strb	r3, [r7, #19]
            break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ec      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4903      	ldr	r1, [pc, #12]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004844:	e008      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	74bb      	strb	r3, [r7, #18]
 800484a:	e005      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004858:	7c7b      	ldrb	r3, [r7, #17]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4ba6      	ldr	r3, [pc, #664]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	4aa5      	ldr	r2, [pc, #660]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004876:	4ba0      	ldr	r3, [pc, #640]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f023 0203 	bic.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	499c      	ldr	r1, [pc, #624]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004898:	4b97      	ldr	r3, [pc, #604]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f023 020c 	bic.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4994      	ldr	r1, [pc, #592]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ba:	4b8f      	ldr	r3, [pc, #572]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	498b      	ldr	r1, [pc, #556]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048dc:	4b86      	ldr	r3, [pc, #536]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	4983      	ldr	r1, [pc, #524]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048fe:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	497a      	ldr	r1, [pc, #488]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004920:	4b75      	ldr	r3, [pc, #468]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	4972      	ldr	r1, [pc, #456]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004942:	4b6d      	ldr	r3, [pc, #436]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	4969      	ldr	r1, [pc, #420]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004964:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4961      	ldr	r1, [pc, #388]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004986:	4b5c      	ldr	r3, [pc, #368]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	4958      	ldr	r1, [pc, #352]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	4950      	ldr	r1, [pc, #320]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c6:	d105      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a4a      	ldr	r2, [pc, #296]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049e0:	4b45      	ldr	r3, [pc, #276]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4942      	ldr	r1, [pc, #264]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a00:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a18:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	4934      	ldr	r1, [pc, #208]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a36:	d105      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a38:	4b2f      	ldr	r3, [pc, #188]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	4926      	ldr	r1, [pc, #152]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	4918      	ldr	r1, [pc, #96]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	490a      	ldr	r1, [pc, #40]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ade:	d105      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e049      	b.n	8004ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc fe82 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 fde8 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d001      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e04a      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <HAL_TIM_Base_Start_IT+0xbc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d018      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x6c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d013      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x6c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <HAL_TIM_Base_Start_IT+0xc0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00e      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x6c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x6c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1a      	ldr	r2, [pc, #104]	; (8004c74 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x6c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d115      	bne.n	8004c44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d015      	beq.n	8004c56 <HAL_TIM_Base_Start_IT+0xaa>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d011      	beq.n	8004c56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c42:	e008      	b.n	8004c56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40013400 	.word	0x40013400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	00010007 	.word	0x00010007

08004c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e049      	b.n	8004d26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fd7a 	bl	80017a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fd26 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x24>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e03c      	b.n	8004dce <HAL_TIM_PWM_Start+0x9e>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d109      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x3e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e02f      	b.n	8004dce <HAL_TIM_PWM_Start+0x9e>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start+0x58>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e022      	b.n	8004dce <HAL_TIM_PWM_Start+0x9e>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d109      	bne.n	8004da2 <HAL_TIM_PWM_Start+0x72>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e015      	b.n	8004dce <HAL_TIM_PWM_Start+0x9e>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start+0x8c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e008      	b.n	8004dce <HAL_TIM_PWM_Start+0x9e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e097      	b.n	8004f06 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_PWM_Start+0xb6>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004de4:	e023      	b.n	8004e2e <HAL_TIM_PWM_Start+0xfe>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0xc6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df4:	e01b      	b.n	8004e2e <HAL_TIM_PWM_Start+0xfe>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0xd6>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e04:	e013      	b.n	8004e2e <HAL_TIM_PWM_Start+0xfe>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xe6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e14:	e00b      	b.n	8004e2e <HAL_TIM_PWM_Start+0xfe>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start+0xf6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e24:	e003      	b.n	8004e2e <HAL_TIM_PWM_Start+0xfe>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2201      	movs	r2, #1
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fff0 	bl	8005e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a33      	ldr	r2, [pc, #204]	; (8004f10 <HAL_TIM_PWM_Start+0x1e0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x13e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <HAL_TIM_PWM_Start+0x1e4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x13e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_TIM_PWM_Start+0x1e8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x13e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <HAL_TIM_PWM_Start+0x1ec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x13e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HAL_TIM_PWM_Start+0x1f0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_PWM_Start+0x142>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_PWM_Start+0x144>
 8004e72:	2300      	movs	r3, #0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <HAL_TIM_PWM_Start+0x1e0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0x194>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d013      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0x194>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <HAL_TIM_PWM_Start+0x1f4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0x194>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_TIM_PWM_Start+0x1f8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0x194>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <HAL_TIM_PWM_Start+0x1e4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0x194>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_TIM_PWM_Start+0x1e8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d115      	bne.n	8004ef0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_TIM_PWM_Start+0x1fc>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d015      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x1d2>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d011      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e008      	b.n	8004f02 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e000      	b.n	8004f04 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e097      	b.n	8005074 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fc fb7b 	bl	8001654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f000 fbc3 	bl	8005710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fd0:	f023 030c 	bic.w	r3, r3, #12
 8004fd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	4313      	orrs	r3, r2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	011a      	lsls	r2, r3, #4
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	031b      	lsls	r3, r3, #12
 8005000:	4313      	orrs	r3, r2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	4313      	orrs	r3, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005094:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e069      	b.n	8005190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050cc:	e031      	b.n	8005132 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d110      	bne.n	80050f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e055      	b.n	8005190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f4:	e01d      	b.n	8005132 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d108      	bne.n	800510e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005102:	7b7b      	ldrb	r3, [r7, #13]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005108:	7b3b      	ldrb	r3, [r7, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e03e      	b.n	8005190 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_Encoder_Start+0xc4>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d008      	beq.n	8005150 <HAL_TIM_Encoder_Start+0xd4>
 800513e:	e00f      	b.n	8005160 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fe67 	bl	8005e1c <TIM_CCxChannelCmd>
      break;
 800514e:	e016      	b.n	800517e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	2104      	movs	r1, #4
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fe5f 	bl	8005e1c <TIM_CCxChannelCmd>
      break;
 800515e:	e00e      	b.n	800517e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fe57 	bl	8005e1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	2104      	movs	r1, #4
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fe50 	bl	8005e1c <TIM_CCxChannelCmd>
      break;
 800517c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0202 	mvn.w	r2, #2
 80051c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa7a 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa6c 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa7d 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d122      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0204 	mvn.w	r2, #4
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fa50 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa42 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fa53 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b08      	cmp	r3, #8
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0208 	mvn.w	r2, #8
 800526c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa26 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa18 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fa29 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0210 	mvn.w	r2, #16
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2208      	movs	r2, #8
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9fc 	bl	80056d4 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9ee 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f9ff 	bl	80056e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b01      	cmp	r3, #1
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0201 	mvn.w	r2, #1
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb fce4 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b80      	cmp	r3, #128	; 0x80
 8005328:	d10e      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d107      	bne.n	8005348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 ff70 	bl	8006228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 ff63 	bl	800623c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f9ad 	bl	80056fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d10e      	bne.n	80053ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0220 	mvn.w	r2, #32
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 ff23 	bl	8006214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053dc:	d10f      	bne.n	80053fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 ff29 	bl	8006250 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800540c:	d10f      	bne.n	800542e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 ff1b 	bl	8006264 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800543c:	d10f      	bne.n	800545e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d107      	bne.n	800545e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 ff0d 	bl	8006278 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800546c:	d10f      	bne.n	800548e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800547c:	d107      	bne.n	800548e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 feff 	bl	800628c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0ff      	b.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b14      	cmp	r3, #20
 80054c2:	f200 80f0 	bhi.w	80056a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054c6:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	08005521 	.word	0x08005521
 80054d0:	080056a7 	.word	0x080056a7
 80054d4:	080056a7 	.word	0x080056a7
 80054d8:	080056a7 	.word	0x080056a7
 80054dc:	08005561 	.word	0x08005561
 80054e0:	080056a7 	.word	0x080056a7
 80054e4:	080056a7 	.word	0x080056a7
 80054e8:	080056a7 	.word	0x080056a7
 80054ec:	080055a3 	.word	0x080055a3
 80054f0:	080056a7 	.word	0x080056a7
 80054f4:	080056a7 	.word	0x080056a7
 80054f8:	080056a7 	.word	0x080056a7
 80054fc:	080055e3 	.word	0x080055e3
 8005500:	080056a7 	.word	0x080056a7
 8005504:	080056a7 	.word	0x080056a7
 8005508:	080056a7 	.word	0x080056a7
 800550c:	08005625 	.word	0x08005625
 8005510:	080056a7 	.word	0x080056a7
 8005514:	080056a7 	.word	0x080056a7
 8005518:	080056a7 	.word	0x080056a7
 800551c:	08005665 	.word	0x08005665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f982 	bl	8005830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0208 	orr.w	r2, r2, #8
 800553a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0204 	bic.w	r2, r2, #4
 800554a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6999      	ldr	r1, [r3, #24]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	619a      	str	r2, [r3, #24]
      break;
 800555e:	e0a5      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f9f2 	bl	8005950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6999      	ldr	r1, [r3, #24]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	619a      	str	r2, [r3, #24]
      break;
 80055a0:	e084      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fa5b 	bl	8005a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0208 	orr.w	r2, r2, #8
 80055bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0204 	bic.w	r2, r2, #4
 80055cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	61da      	str	r2, [r3, #28]
      break;
 80055e0:	e064      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fac3 	bl	8005b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69d9      	ldr	r1, [r3, #28]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	021a      	lsls	r2, r3, #8
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	61da      	str	r2, [r3, #28]
      break;
 8005622:	e043      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fb2c 	bl	8005c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0208 	orr.w	r2, r2, #8
 800563e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0204 	bic.w	r2, r2, #4
 800564e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005662:	e023      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fb70 	bl	8005d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800567e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	021a      	lsls	r2, r3, #8
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80056a4:	e002      	b.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
      break;
 80056aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop

080056c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3c      	ldr	r2, [pc, #240]	; (8005814 <TIM_Base_SetConfig+0x104>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00f      	beq.n	8005748 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d00b      	beq.n	8005748 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a39      	ldr	r2, [pc, #228]	; (8005818 <TIM_Base_SetConfig+0x108>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_Base_SetConfig+0x38>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a38      	ldr	r2, [pc, #224]	; (800581c <TIM_Base_SetConfig+0x10c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_Base_SetConfig+0x38>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a37      	ldr	r2, [pc, #220]	; (8005820 <TIM_Base_SetConfig+0x110>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d108      	bne.n	800575a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2d      	ldr	r2, [pc, #180]	; (8005814 <TIM_Base_SetConfig+0x104>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01b      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d017      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <TIM_Base_SetConfig+0x108>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a29      	ldr	r2, [pc, #164]	; (800581c <TIM_Base_SetConfig+0x10c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <TIM_Base_SetConfig+0x110>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a27      	ldr	r2, [pc, #156]	; (8005824 <TIM_Base_SetConfig+0x114>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a26      	ldr	r2, [pc, #152]	; (8005828 <TIM_Base_SetConfig+0x118>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_Base_SetConfig+0x8a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a25      	ldr	r2, [pc, #148]	; (800582c <TIM_Base_SetConfig+0x11c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d108      	bne.n	80057ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <TIM_Base_SetConfig+0x104>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0xe8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a11      	ldr	r2, [pc, #68]	; (8005820 <TIM_Base_SetConfig+0x110>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0xe8>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a10      	ldr	r2, [pc, #64]	; (8005824 <TIM_Base_SetConfig+0x114>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0xe8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <TIM_Base_SetConfig+0x118>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0xe8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a0e      	ldr	r2, [pc, #56]	; (800582c <TIM_Base_SetConfig+0x11c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d103      	bne.n	8005800 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	615a      	str	r2, [r3, #20]
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40013400 	.word	0x40013400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0302 	bic.w	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <TIM_OC1_SetConfig+0x10c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_OC1_SetConfig+0x80>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a2b      	ldr	r2, [pc, #172]	; (8005940 <TIM_OC1_SetConfig+0x110>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_OC1_SetConfig+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <TIM_OC1_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_OC1_SetConfig+0x80>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a29      	ldr	r2, [pc, #164]	; (8005948 <TIM_OC1_SetConfig+0x118>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_OC1_SetConfig+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a28      	ldr	r2, [pc, #160]	; (800594c <TIM_OC1_SetConfig+0x11c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10c      	bne.n	80058ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0308 	bic.w	r3, r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <TIM_OC1_SetConfig+0x10c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_OC1_SetConfig+0xc2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <TIM_OC1_SetConfig+0x110>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_OC1_SetConfig+0xc2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <TIM_OC1_SetConfig+0x114>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC1_SetConfig+0xc2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <TIM_OC1_SetConfig+0x118>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC1_SetConfig+0xc2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIM_OC1_SetConfig+0x11c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d111      	bne.n	8005916 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	621a      	str	r2, [r3, #32]
}
 8005930:	bf00      	nop
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	40012c00 	.word	0x40012c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800

08005950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0210 	bic.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <TIM_OC2_SetConfig+0x100>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x6c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a27      	ldr	r2, [pc, #156]	; (8005a54 <TIM_OC2_SetConfig+0x104>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <TIM_OC2_SetConfig+0x100>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <TIM_OC2_SetConfig+0xb0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC2_SetConfig+0x104>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_OC2_SetConfig+0xb0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <TIM_OC2_SetConfig+0x108>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_OC2_SetConfig+0xb0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <TIM_OC2_SetConfig+0x10c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC2_SetConfig+0xb0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <TIM_OC2_SetConfig+0x110>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d113      	bne.n	8005a28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40013400 	.word	0x40013400
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800

08005a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a27      	ldr	r2, [pc, #156]	; (8005b60 <TIM_OC3_SetConfig+0xfc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0x6a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a26      	ldr	r2, [pc, #152]	; (8005b64 <TIM_OC3_SetConfig+0x100>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10d      	bne.n	8005aea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <TIM_OC3_SetConfig+0xfc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_OC3_SetConfig+0xae>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <TIM_OC3_SetConfig+0x100>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_OC3_SetConfig+0xae>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <TIM_OC3_SetConfig+0x104>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_OC3_SetConfig+0xae>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a19      	ldr	r2, [pc, #100]	; (8005b6c <TIM_OC3_SetConfig+0x108>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC3_SetConfig+0xae>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a18      	ldr	r2, [pc, #96]	; (8005b70 <TIM_OC3_SetConfig+0x10c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d113      	bne.n	8005b3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40013400 	.word	0x40013400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800

08005b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <TIM_OC4_SetConfig+0x100>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC4_SetConfig+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <TIM_OC4_SetConfig+0x104>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d10d      	bne.n	8005bfc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <TIM_OC4_SetConfig+0x100>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC4_SetConfig+0xb0>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a1c      	ldr	r2, [pc, #112]	; (8005c78 <TIM_OC4_SetConfig+0x104>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC4_SetConfig+0xb0>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <TIM_OC4_SetConfig+0x108>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC4_SetConfig+0xb0>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <TIM_OC4_SetConfig+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC4_SetConfig+0xb0>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <TIM_OC4_SetConfig+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d113      	bne.n	8005c4c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c32:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	019b      	lsls	r3, r3, #6
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40013400 	.word	0x40013400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800

08005c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ccc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <TIM_OC5_SetConfig+0xb4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <TIM_OC5_SetConfig+0x7a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <TIM_OC5_SetConfig+0xb8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_OC5_SetConfig+0x7a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <TIM_OC5_SetConfig+0xbc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC5_SetConfig+0x7a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <TIM_OC5_SetConfig+0xc0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC5_SetConfig+0x7a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <TIM_OC5_SetConfig+0xc4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d109      	bne.n	8005d16 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	621a      	str	r2, [r3, #32]
}
 8005d30:	bf00      	nop
 8005d32:	371c      	adds	r7, #28
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	051b      	lsls	r3, r3, #20
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <TIM_OC6_SetConfig+0xb8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00f      	beq.n	8005dcc <TIM_OC6_SetConfig+0x7c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <TIM_OC6_SetConfig+0xbc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_OC6_SetConfig+0x7c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <TIM_OC6_SetConfig+0xc0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_OC6_SetConfig+0x7c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <TIM_OC6_SetConfig+0xc4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC6_SetConfig+0x7c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_OC6_SetConfig+0xc8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d109      	bne.n	8005de0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00
 8005e0c:	40013400 	.word	0x40013400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800

08005e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2201      	movs	r2, #1
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1a      	ldr	r2, [r3, #32]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	fa01 f303 	lsl.w	r3, r1, r3
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_TIMEx_PWMN_Start+0x24>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e022      	b.n	8005ed2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d109      	bne.n	8005ea6 <HAL_TIMEx_PWMN_Start+0x3e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	bf14      	ite	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	2300      	moveq	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	e015      	b.n	8005ed2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d109      	bne.n	8005ec0 <HAL_TIMEx_PWMN_Start+0x58>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	bf14      	ite	ne
 8005eb8:	2301      	movne	r3, #1
 8005eba:	2300      	moveq	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e069      	b.n	8005fae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d104      	bne.n	8005eea <HAL_TIMEx_PWMN_Start+0x82>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee8:	e013      	b.n	8005f12 <HAL_TIMEx_PWMN_Start+0xaa>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d104      	bne.n	8005efa <HAL_TIMEx_PWMN_Start+0x92>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIMEx_PWMN_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d104      	bne.n	8005f0a <HAL_TIMEx_PWMN_Start+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f08:	e003      	b.n	8005f12 <HAL_TIMEx_PWMN_Start+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2204      	movs	r2, #4
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 f9c0 	bl	80062a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <HAL_TIMEx_PWMN_Start+0x150>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <HAL_TIMEx_PWMN_Start+0x104>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d013      	beq.n	8005f6c <HAL_TIMEx_PWMN_Start+0x104>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <HAL_TIMEx_PWMN_Start+0x154>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <HAL_TIMEx_PWMN_Start+0x104>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1b      	ldr	r2, [pc, #108]	; (8005fc0 <HAL_TIMEx_PWMN_Start+0x158>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_TIMEx_PWMN_Start+0x104>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a19      	ldr	r2, [pc, #100]	; (8005fc4 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIMEx_PWMN_Start+0x104>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <HAL_TIMEx_PWMN_Start+0x160>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d115      	bne.n	8005f98 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <HAL_TIMEx_PWMN_Start+0x164>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d015      	beq.n	8005faa <HAL_TIMEx_PWMN_Start+0x142>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d011      	beq.n	8005faa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f96:	e008      	b.n	8005faa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e000      	b.n	8005fac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40013400 	.word	0x40013400
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	00010007 	.word	0x00010007

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e065      	b.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d013      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d10c      	bne.n	80060a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40000800 	.word	0x40000800
 80060d0:	40014000 	.word	0x40014000

080060d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e087      	b.n	8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a27      	ldr	r2, [pc, #156]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a25      	ldr	r2, [pc, #148]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d106      	bne.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1e      	ldr	r2, [pc, #120]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1d      	ldr	r2, [pc, #116]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d126      	bne.n	80061ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	051b      	lsls	r3, r3, #20
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0e      	ldr	r2, [pc, #56]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d106      	bne.n	80061ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40013400 	.word	0x40013400

08006214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2204      	movs	r2, #4
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1a      	ldr	r2, [r3, #32]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062fa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006320:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006324:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	b29b      	uxth	r3, r3
 8006332:	43db      	mvns	r3, r3
 8006334:	b29b      	uxth	r3, r3
 8006336:	4013      	ands	r3, r2
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800634e:	b084      	sub	sp, #16
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	f107 0014 	add.w	r0, r7, #20
 800635c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	b004      	add	sp, #16
 800638e:	4770      	bx	lr

08006390 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006390:	b480      	push	{r7}
 8006392:	b09d      	sub	sp, #116	; 0x74
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	78db      	ldrb	r3, [r3, #3]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d81f      	bhi.n	8006402 <USB_ActivateEndpoint+0x72>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <USB_ActivateEndpoint+0x38>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	0800640b 	.word	0x0800640b
 80063d4:	080063e7 	.word	0x080063e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063e4:	e012      	b.n	800640c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80063ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063f2:	e00b      	b.n	800640c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006400:	e004      	b.n	800640c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006408:	e000      	b.n	800640c <USB_ActivateEndpoint+0x7c>
      break;
 800640a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800641a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642a:	b29b      	uxth	r3, r3
 800642c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	b21b      	sxth	r3, r3
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	b21a      	sxth	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b21b      	sxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b21b      	sxth	r3, r3
 8006452:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006474:	b29b      	uxth	r3, r3
 8006476:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8149 	bne.w	8006714 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8084 	beq.w	8006594 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	4413      	add	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	00da      	lsls	r2, r3, #3
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	88db      	ldrh	r3, [r3, #6]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	827b      	strh	r3, [r7, #18]
 80064ce:	8a7b      	ldrh	r3, [r7, #18]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01b      	beq.n	8006510 <USB_ActivateEndpoint+0x180>
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	823b      	strh	r3, [r7, #16]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	8a3b      	ldrh	r3, [r7, #16]
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	78db      	ldrb	r3, [r3, #3]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d020      	beq.n	800655a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652e:	81bb      	strh	r3, [r7, #12]
 8006530:	89bb      	ldrh	r3, [r7, #12]
 8006532:	f083 0320 	eor.w	r3, r3, #32
 8006536:	81bb      	strh	r3, [r7, #12]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	89bb      	ldrh	r3, [r7, #12]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
 8006558:	e2a6      	b.n	8006aa8 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006570:	81fb      	strh	r3, [r7, #14]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	89fb      	ldrh	r3, [r7, #14]
 800657e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]
 8006592:	e289      	b.n	8006aa8 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	633b      	str	r3, [r7, #48]	; 0x30
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	4413      	add	r3, r2
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00da      	lsls	r2, r3, #3
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	88db      	ldrh	r3, [r3, #6]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	4413      	add	r3, r2
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00da      	lsls	r2, r3, #3
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b3e      	cmp	r3, #62	; 0x3e
 80065f2:	d918      	bls.n	8006626 <USB_ActivateEndpoint+0x296>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <USB_ActivateEndpoint+0x27e>
 8006608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800660a:	3b01      	subs	r3, #1
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
 800660e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661e:	b29a      	uxth	r2, r3
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	e029      	b.n	800667a <USB_ActivateEndpoint+0x2ea>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d112      	bne.n	8006654 <USB_ActivateEndpoint+0x2c4>
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006638:	b29a      	uxth	r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664c:	b29a      	uxth	r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e012      	b.n	800667a <USB_ActivateEndpoint+0x2ea>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	66bb      	str	r3, [r7, #104]	; 0x68
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <USB_ActivateEndpoint+0x2de>
 8006668:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800666a:	3301      	adds	r3, #1
 800666c:	66bb      	str	r3, [r7, #104]	; 0x68
 800666e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006670:	b29b      	uxth	r3, r3
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	b29a      	uxth	r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	847b      	strh	r3, [r7, #34]	; 0x22
 8006688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800668a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <USB_ActivateEndpoint+0x33a>
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	843b      	strh	r3, [r7, #32]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8c3b      	ldrh	r3, [r7, #32]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	83fb      	strh	r3, [r7, #30]
 80066e2:	8bfb      	ldrh	r3, [r7, #30]
 80066e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066e8:	83fb      	strh	r3, [r7, #30]
 80066ea:	8bfb      	ldrh	r3, [r7, #30]
 80066ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066f0:	83fb      	strh	r3, [r7, #30]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8bfb      	ldrh	r3, [r7, #30]
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]
 8006712:	e1c9      	b.n	8006aa8 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	78db      	ldrb	r3, [r3, #3]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d11e      	bne.n	800675a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]
 8006758:	e01d      	b.n	8006796 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006792:	b29b      	uxth	r3, r3
 8006794:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a6:	4413      	add	r3, r2
 80067a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	891b      	ldrh	r3, [r3, #8]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c8:	801a      	strh	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	657b      	str	r3, [r7, #84]	; 0x54
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	4413      	add	r3, r2
 80067dc:	657b      	str	r3, [r7, #84]	; 0x54
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	00da      	lsls	r2, r3, #3
 80067e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8093 	bne.w	800692e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006818:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800681c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <USB_ActivateEndpoint+0x4cc>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800686a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01b      	beq.n	80068ac <USB_ActivateEndpoint+0x51c>
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c2:	873b      	strh	r3, [r7, #56]	; 0x38
 80068c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80068cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	441a      	add	r2, r3
 80068de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]
 800692c:	e0bc      	b.n	8006aa8 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800693e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d01d      	beq.n	8006986 <USB_ActivateEndpoint+0x5f6>
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	441a      	add	r2, r3
 800696e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800697a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800697e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006996:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01d      	beq.n	80069de <USB_ActivateEndpoint+0x64e>
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d024      	beq.n	8006a30 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a04:	f083 0320 	eor.w	r3, r3, #32
 8006a08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
 8006a2e:	e01d      	b.n	8006a6c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3774      	adds	r7, #116	; 0x74
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b08d      	sub	sp, #52	; 0x34
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	7b1b      	ldrb	r3, [r3, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 808e 	bne.w	8006be8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d044      	beq.n	8006b5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	81bb      	strh	r3, [r7, #12]
 8006ae2:	89bb      	ldrh	r3, [r7, #12]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01b      	beq.n	8006b24 <USB_DeactivateEndpoint+0x6c>
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	817b      	strh	r3, [r7, #10]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	441a      	add	r2, r3
 8006b0e:	897b      	ldrh	r3, [r7, #10]
 8006b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3a:	813b      	strh	r3, [r7, #8]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8013      	strh	r3, [r2, #0]
 8006b5c:	e192      	b.n	8006e84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	827b      	strh	r3, [r7, #18]
 8006b6c:	8a7b      	ldrh	r3, [r7, #18]
 8006b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01b      	beq.n	8006bae <USB_DeactivateEndpoint+0xf6>
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	823b      	strh	r3, [r7, #16]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8a3b      	ldrh	r3, [r7, #16]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc4:	81fb      	strh	r3, [r7, #14]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	8013      	strh	r3, [r2, #0]
 8006be6:	e14d      	b.n	8006e84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 80a5 	bne.w	8006d3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	843b      	strh	r3, [r7, #32]
 8006c00:	8c3b      	ldrh	r3, [r7, #32]
 8006c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01b      	beq.n	8006c42 <USB_DeactivateEndpoint+0x18a>
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c20:	83fb      	strh	r3, [r7, #30]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	441a      	add	r2, r3
 8006c2c:	8bfb      	ldrh	r3, [r7, #30]
 8006c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	83bb      	strh	r3, [r7, #28]
 8006c50:	8bbb      	ldrh	r3, [r7, #28]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01b      	beq.n	8006c92 <USB_DeactivateEndpoint+0x1da>
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	837b      	strh	r3, [r7, #26]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	441a      	add	r2, r3
 8006c7c:	8b7b      	ldrh	r3, [r7, #26]
 8006c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca8:	833b      	strh	r3, [r7, #24]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	8b3b      	ldrh	r3, [r7, #24]
 8006cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	82fb      	strh	r3, [r7, #22]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	441a      	add	r2, r3
 8006cec:	8afb      	ldrh	r3, [r7, #22]
 8006cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d18:	82bb      	strh	r3, [r7, #20]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	441a      	add	r2, r3
 8006d24:	8abb      	ldrh	r3, [r7, #20]
 8006d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	8013      	strh	r3, [r2, #0]
 8006d3a:	e0a3      	b.n	8006e84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01b      	beq.n	8006d8c <USB_DeactivateEndpoint+0x2d4>
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01b      	beq.n	8006ddc <USB_DeactivateEndpoint+0x324>
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	441a      	add	r2, r3
 8006dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	441a      	add	r2, r3
 8006dfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3734      	adds	r7, #52	; 0x34
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b0c2      	sub	sp, #264	; 0x108
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eaa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	f040 867b 	bne.w	8007bb4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d908      	bls.n	8006eec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eea:	e007      	b.n	8006efc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	7b1b      	ldrb	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d13a      	bne.n	8006f82 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	88da      	ldrh	r2, [r3, #6]
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f32:	6800      	ldr	r0, [r0, #0]
 8006f34:	f001 fc1d 	bl	8008772 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	4413      	add	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	00da      	lsls	r2, r3, #3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	f000 bde3 	b.w	8007b48 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	f040 843a 	bne.w	8007808 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a1a      	ldr	r2, [r3, #32]
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	f240 83b7 	bls.w	8007720 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007002:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800700e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 81b3 	beq.w	80073ba <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	633b      	str	r3, [r7, #48]	; 0x30
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d16d      	bne.n	800714c <USB_EPStartXfer+0x2ba>
 8007070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
 800707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708a:	b29b      	uxth	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	4413      	add	r3, r2
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
 8007094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	00da      	lsls	r2, r3, #3
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
 80070ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b0:	2b3e      	cmp	r3, #62	; 0x3e
 80070b2:	d91c      	bls.n	80070ee <USB_EPStartXfer+0x25c>
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <USB_EPStartXfer+0x242>
 80070ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070ce:	3b01      	subs	r3, #1
 80070d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070d8:	b29b      	uxth	r3, r3
 80070da:	029b      	lsls	r3, r3, #10
 80070dc:	b29b      	uxth	r3, r3
 80070de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e053      	b.n	8007196 <USB_EPStartXfer+0x304>
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d112      	bne.n	800711c <USB_EPStartXfer+0x28a>
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007100:	b29a      	uxth	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007114:	b29a      	uxth	r2, r3
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	801a      	strh	r2, [r3, #0]
 800711a:	e03c      	b.n	8007196 <USB_EPStartXfer+0x304>
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <USB_EPStartXfer+0x2aa>
 8007132:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007136:	3301      	adds	r3, #1
 8007138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800713c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007140:	b29b      	uxth	r3, r3
 8007142:	029b      	lsls	r3, r3, #10
 8007144:	b29a      	uxth	r2, r3
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e024      	b.n	8007196 <USB_EPStartXfer+0x304>
 800714c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d11c      	bne.n	8007196 <USB_EPStartXfer+0x304>
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716a:	b29b      	uxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	4413      	add	r3, r2
 8007172:	633b      	str	r3, [r7, #48]	; 0x30
 8007174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	00da      	lsls	r2, r3, #3
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	4413      	add	r3, r2
 8007186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007190:	b29a      	uxth	r2, r3
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	895b      	ldrh	r3, [r3, #10]
 80071a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6959      	ldr	r1, [r3, #20]
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80071bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80071c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80071c4:	6800      	ldr	r0, [r0, #0]
 80071c6:	f001 fad4 	bl	8008772 <USB_WritePMA>
            ep->xfer_buff += len;
 80071ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695a      	ldr	r2, [r3, #20]
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071da:	441a      	add	r2, r3
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d90f      	bls.n	8007224 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8007204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6a1a      	ldr	r2, [r3, #32]
 8007210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	621a      	str	r2, [r3, #32]
 8007222:	e00e      	b.n	8007242 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d16d      	bne.n	800732e <USB_EPStartXfer+0x49c>
 8007252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726c:	b29b      	uxth	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	4413      	add	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00da      	lsls	r2, r3, #3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	4413      	add	r3, r2
 8007288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	2b3e      	cmp	r3, #62	; 0x3e
 8007294:	d91c      	bls.n	80072d0 <USB_EPStartXfer+0x43e>
 8007296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <USB_EPStartXfer+0x424>
 80072ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072b0:	3b01      	subs	r3, #1
 80072b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	029b      	lsls	r3, r3, #10
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	e059      	b.n	8007384 <USB_EPStartXfer+0x4f2>
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d112      	bne.n	80072fe <USB_EPStartXfer+0x46c>
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e042      	b.n	8007384 <USB_EPStartXfer+0x4f2>
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d004      	beq.n	800731e <USB_EPStartXfer+0x48c>
 8007314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800731e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007322:	b29b      	uxth	r3, r3
 8007324:	029b      	lsls	r3, r3, #10
 8007326:	b29a      	uxth	r2, r3
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	801a      	strh	r2, [r3, #0]
 800732c:	e02a      	b.n	8007384 <USB_EPStartXfer+0x4f2>
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d122      	bne.n	8007384 <USB_EPStartXfer+0x4f2>
 800733e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	4413      	add	r3, r2
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	00da      	lsls	r2, r3, #3
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	4413      	add	r3, r2
 8007374:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800737e:	b29a      	uxth	r2, r3
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	891b      	ldrh	r3, [r3, #8]
 8007390:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6959      	ldr	r1, [r3, #20]
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073b2:	6800      	ldr	r0, [r0, #0]
 80073b4:	f001 f9dd 	bl	8008772 <USB_WritePMA>
 80073b8:	e3c6      	b.n	8007b48 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d16d      	bne.n	80074a6 <USB_EPStartXfer+0x614>
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ea:	4413      	add	r3, r2
 80073ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	00da      	lsls	r2, r3, #3
 80073fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fe:	4413      	add	r3, r2
 8007400:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	2b3e      	cmp	r3, #62	; 0x3e
 800740c:	d91c      	bls.n	8007448 <USB_EPStartXfer+0x5b6>
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <USB_EPStartXfer+0x59c>
 8007424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007428:	3b01      	subs	r3, #1
 800742a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800742e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007432:	b29b      	uxth	r3, r3
 8007434:	029b      	lsls	r3, r3, #10
 8007436:	b29b      	uxth	r3, r3
 8007438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007440:	b29a      	uxth	r2, r3
 8007442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e059      	b.n	80074fc <USB_EPStartXfer+0x66a>
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744c:	2b00      	cmp	r3, #0
 800744e:	d112      	bne.n	8007476 <USB_EPStartXfer+0x5e4>
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745a:	b29a      	uxth	r2, r3
 800745c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745e:	801a      	strh	r2, [r3, #0]
 8007460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746e:	b29a      	uxth	r2, r3
 8007470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e042      	b.n	80074fc <USB_EPStartXfer+0x66a>
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <USB_EPStartXfer+0x604>
 800748c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e02a      	b.n	80074fc <USB_EPStartXfer+0x66a>
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d122      	bne.n	80074fc <USB_EPStartXfer+0x66a>
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	653b      	str	r3, [r7, #80]	; 0x50
 80074c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	461a      	mov	r2, r3
 80074d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d6:	4413      	add	r3, r2
 80074d8:	653b      	str	r3, [r7, #80]	; 0x50
 80074da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	00da      	lsls	r2, r3, #3
 80074e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ea:	4413      	add	r3, r2
 80074ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	891b      	ldrh	r3, [r3, #8]
 8007508:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800750c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6959      	ldr	r1, [r3, #20]
 8007518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751c:	b29b      	uxth	r3, r3
 800751e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007522:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007526:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	f001 f921 	bl	8008772 <USB_WritePMA>
            ep->xfer_buff += len;
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007540:	441a      	add	r2, r3
 8007542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800754e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6a1a      	ldr	r2, [r3, #32]
 800755a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	429a      	cmp	r2, r3
 8007568:	d90f      	bls.n	800758a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800756a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6a1a      	ldr	r2, [r3, #32]
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800757a:	1ad2      	subs	r2, r2, r3
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	621a      	str	r2, [r3, #32]
 8007588:	e00e      	b.n	80075a8 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800758a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800759a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2200      	movs	r2, #0
 80075a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	643b      	str	r3, [r7, #64]	; 0x40
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d16d      	bne.n	80076a0 <USB_EPStartXfer+0x80e>
 80075c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e4:	4413      	add	r3, r2
 80075e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	00da      	lsls	r2, r3, #3
 80075f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f8:	4413      	add	r3, r2
 80075fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007604:	2b3e      	cmp	r3, #62	; 0x3e
 8007606:	d91c      	bls.n	8007642 <USB_EPStartXfer+0x7b0>
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007616:	f003 031f 	and.w	r3, r3, #31
 800761a:	2b00      	cmp	r3, #0
 800761c:	d104      	bne.n	8007628 <USB_EPStartXfer+0x796>
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007622:	3b01      	subs	r3, #1
 8007624:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762c:	b29b      	uxth	r3, r3
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763a:	b29a      	uxth	r2, r3
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	e053      	b.n	80076ea <USB_EPStartXfer+0x858>
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007646:	2b00      	cmp	r3, #0
 8007648:	d112      	bne.n	8007670 <USB_EPStartXfer+0x7de>
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007654:	b29a      	uxth	r2, r3
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007668:	b29a      	uxth	r2, r3
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e03c      	b.n	80076ea <USB_EPStartXfer+0x858>
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	085b      	lsrs	r3, r3, #1
 8007676:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <USB_EPStartXfer+0x7fe>
 8007686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768a:	3301      	adds	r3, #1
 800768c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	b29b      	uxth	r3, r3
 8007696:	029b      	lsls	r3, r3, #10
 8007698:	b29a      	uxth	r2, r3
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e024      	b.n	80076ea <USB_EPStartXfer+0x858>
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d11c      	bne.n	80076ea <USB_EPStartXfer+0x858>
 80076b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076be:	b29b      	uxth	r3, r3
 80076c0:	461a      	mov	r2, r3
 80076c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076c4:	4413      	add	r3, r2
 80076c6:	643b      	str	r3, [r7, #64]	; 0x40
 80076c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	00da      	lsls	r2, r3, #3
 80076d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d8:	4413      	add	r3, r2
 80076da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	895b      	ldrh	r3, [r3, #10]
 80076f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6959      	ldr	r1, [r3, #20]
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	b29b      	uxth	r3, r3
 800770c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007710:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007714:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007718:	6800      	ldr	r0, [r0, #0]
 800771a:	f001 f82a 	bl	8008772 <USB_WritePMA>
 800771e:	e213      	b.n	8007b48 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800775a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	441a      	add	r2, r3
 8007774:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800777c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007788:	b29b      	uxth	r3, r3
 800778a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800778c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ac:	4413      	add	r3, r2
 80077ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	00da      	lsls	r2, r3, #3
 80077be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	891b      	ldrh	r3, [r3, #8]
 80077de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6959      	ldr	r1, [r3, #20]
 80077ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007800:	6800      	ldr	r0, [r0, #0]
 8007802:	f000 ffb6 	bl	8008772 <USB_WritePMA>
 8007806:	e19f      	b.n	8007b48 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6a1a      	ldr	r2, [r3, #32]
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007818:	1ad2      	subs	r2, r2, r3
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80bc 	beq.w	80079c6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	673b      	str	r3, [r7, #112]	; 0x70
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d16d      	bne.n	8007946 <USB_EPStartXfer+0xab4>
 800786a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	66bb      	str	r3, [r7, #104]	; 0x68
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800788a:	4413      	add	r3, r2
 800788c:	66bb      	str	r3, [r7, #104]	; 0x68
 800788e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	00da      	lsls	r2, r3, #3
 800789c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800789e:	4413      	add	r3, r2
 80078a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078a4:	667b      	str	r3, [r7, #100]	; 0x64
 80078a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078aa:	2b3e      	cmp	r3, #62	; 0x3e
 80078ac:	d91c      	bls.n	80078e8 <USB_EPStartXfer+0xa56>
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_EPStartXfer+0xa3c>
 80078c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	e053      	b.n	8007990 <USB_EPStartXfer+0xafe>
 80078e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d112      	bne.n	8007916 <USB_EPStartXfer+0xa84>
 80078f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800790a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790e:	b29a      	uxth	r2, r3
 8007910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007912:	801a      	strh	r2, [r3, #0]
 8007914:	e03c      	b.n	8007990 <USB_EPStartXfer+0xafe>
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <USB_EPStartXfer+0xaa4>
 800792c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007930:	3301      	adds	r3, #1
 8007932:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29a      	uxth	r2, r3
 8007940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007942:	801a      	strh	r2, [r3, #0]
 8007944:	e024      	b.n	8007990 <USB_EPStartXfer+0xafe>
 8007946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	785b      	ldrb	r3, [r3, #1]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d11c      	bne.n	8007990 <USB_EPStartXfer+0xafe>
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796a:	4413      	add	r3, r2
 800796c:	673b      	str	r3, [r7, #112]	; 0x70
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	00da      	lsls	r2, r3, #3
 800797c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800797e:	4413      	add	r3, r2
 8007980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798a:	b29a      	uxth	r2, r3
 800798c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	895b      	ldrh	r3, [r3, #10]
 800799c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6959      	ldr	r1, [r3, #20]
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	f000 fed7 	bl	8008772 <USB_WritePMA>
 80079c4:	e0c0      	b.n	8007b48 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d16d      	bne.n	8007ab2 <USB_EPStartXfer+0xc20>
 80079d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079f6:	4413      	add	r3, r2
 80079f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	00da      	lsls	r2, r3, #3
 8007a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a16:	2b3e      	cmp	r3, #62	; 0x3e
 8007a18:	d91c      	bls.n	8007a54 <USB_EPStartXfer+0xbc2>
 8007a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1e:	095b      	lsrs	r3, r3, #5
 8007a20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USB_EPStartXfer+0xba8>
 8007a30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a34:	3b01      	subs	r3, #1
 8007a36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	029b      	lsls	r3, r3, #10
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a50:	801a      	strh	r2, [r3, #0]
 8007a52:	e05f      	b.n	8007b14 <USB_EPStartXfer+0xc82>
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d112      	bne.n	8007a82 <USB_EPStartXfer+0xbf0>
 8007a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e048      	b.n	8007b14 <USB_EPStartXfer+0xc82>
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <USB_EPStartXfer+0xc10>
 8007a98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	029b      	lsls	r3, r3, #10
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aae:	801a      	strh	r2, [r3, #0]
 8007ab0:	e030      	b.n	8007b14 <USB_EPStartXfer+0xc82>
 8007ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d128      	bne.n	8007b14 <USB_EPStartXfer+0xc82>
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	00da      	lsls	r2, r3, #3
 8007afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	891b      	ldrh	r3, [r3, #8]
 8007b20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6959      	ldr	r1, [r3, #20]
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	f000 fe15 	bl	8008772 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	817b      	strh	r3, [r7, #10]
 8007b70:	897b      	ldrh	r3, [r7, #10]
 8007b72:	f083 0310 	eor.w	r3, r3, #16
 8007b76:	817b      	strh	r3, [r7, #10]
 8007b78:	897b      	ldrh	r3, [r7, #10]
 8007b7a:	f083 0320 	eor.w	r3, r3, #32
 8007b7e:	817b      	strh	r3, [r7, #10]
 8007b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	441a      	add	r2, r3
 8007b9a:	897b      	ldrh	r3, [r7, #10]
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]
 8007bb0:	f000 bc9f 	b.w	80084f2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	7b1b      	ldrb	r3, [r3, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f040 80ae 	bne.w	8007d22 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d917      	bls.n	8007c12 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c02:	1ad2      	subs	r2, r2, r3
 8007c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	619a      	str	r2, [r3, #24]
 8007c10:	e00e      	b.n	8007c30 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c54:	4413      	add	r3, r2
 8007c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	00da      	lsls	r2, r3, #3
 8007c68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c7c:	d91d      	bls.n	8007cba <USB_EPStartXfer+0xe28>
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8c:	f003 031f 	and.w	r3, r3, #31
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <USB_EPStartXfer+0xe0c>
 8007c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e3e1      	b.n	800847e <USB_EPStartXfer+0x15ec>
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d116      	bne.n	8007cf0 <USB_EPStartXfer+0xe5e>
 8007cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cec:	801a      	strh	r2, [r3, #0]
 8007cee:	e3c6      	b.n	800847e <USB_EPStartXfer+0x15ec>
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf4:	085b      	lsrs	r3, r3, #1
 8007cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <USB_EPStartXfer+0xe7e>
 8007d06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	029b      	lsls	r3, r3, #10
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	e3ad      	b.n	800847e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	f040 8200 	bne.w	8008134 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 8091 	bne.w	8007e68 <USB_EPStartXfer+0xfd6>
 8007d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	00da      	lsls	r2, r3, #3
 8007d7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d82:	4413      	add	r3, r2
 8007d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b3e      	cmp	r3, #62	; 0x3e
 8007d9a:	d925      	bls.n	8007de8 <USB_EPStartXfer+0xf56>
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 031f 	and.w	r3, r3, #31
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d104      	bne.n	8007dcc <USB_EPStartXfer+0xf3a>
 8007dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	029b      	lsls	r3, r3, #10
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	e074      	b.n	8007ed2 <USB_EPStartXfer+0x1040>
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <USB_EPStartXfer+0xf94>
 8007df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e055      	b.n	8007ed2 <USB_EPStartXfer+0x1040>
 8007e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <USB_EPStartXfer+0xfc4>
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e50:	3301      	adds	r3, #1
 8007e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	029b      	lsls	r3, r3, #10
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	e034      	b.n	8007ed2 <USB_EPStartXfer+0x1040>
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d12c      	bne.n	8007ed2 <USB_EPStartXfer+0x1040>
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	00da      	lsls	r2, r3, #3
 8007eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8091 	bne.w	8008014 <USB_EPStartXfer+0x1182>
 8007ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f16:	4413      	add	r3, r2
 8007f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	00da      	lsls	r2, r3, #3
 8007f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2e:	4413      	add	r3, r2
 8007f30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b3e      	cmp	r3, #62	; 0x3e
 8007f46:	d925      	bls.n	8007f94 <USB_EPStartXfer+0x1102>
 8007f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 031f 	and.w	r3, r3, #31
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USB_EPStartXfer+0x10e6>
 8007f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f72:	3b01      	subs	r3, #1
 8007f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	029b      	lsls	r3, r3, #10
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e06d      	b.n	8008070 <USB_EPStartXfer+0x11de>
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d116      	bne.n	8007fd2 <USB_EPStartXfer+0x1140>
 8007fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	e04e      	b.n	8008070 <USB_EPStartXfer+0x11de>
 8007fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <USB_EPStartXfer+0x1170>
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008006:	b29b      	uxth	r3, r3
 8008008:	029b      	lsls	r3, r3, #10
 800800a:	b29a      	uxth	r2, r3
 800800c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e02d      	b.n	8008070 <USB_EPStartXfer+0x11de>
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d125      	bne.n	8008070 <USB_EPStartXfer+0x11de>
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008032:	b29b      	uxth	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800803a:	4413      	add	r3, r2
 800803c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	00da      	lsls	r2, r3, #3
 800804e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008052:	4413      	add	r3, r2
 8008054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800806e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 81fe 	beq.w	800847e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <USB_EPStartXfer+0x1228>
 80080ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10d      	bne.n	80080d6 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f040 81db 	bne.w	800847e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f040 81d4 	bne.w	800847e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	441a      	add	r2, r3
 800811a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800811e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800812e:	b29b      	uxth	r3, r3
 8008130:	8013      	strh	r3, [r2, #0]
 8008132:	e1a4      	b.n	800847e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	78db      	ldrb	r3, [r3, #3]
 8008140:	2b01      	cmp	r3, #1
 8008142:	f040 819a 	bne.w	800847a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d917      	bls.n	8008192 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	619a      	str	r2, [r3, #24]
 8008190:	e00e      	b.n	80081b0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8008192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80081a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2200      	movs	r2, #0
 80081ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	785b      	ldrb	r3, [r3, #1]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d178      	bne.n	80082b2 <USB_EPStartXfer+0x1420>
 80081c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081dc:	b29b      	uxth	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081e4:	4413      	add	r3, r2
 80081e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	00da      	lsls	r2, r3, #3
 80081f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081fc:	4413      	add	r3, r2
 80081fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800820a:	2b3e      	cmp	r3, #62	; 0x3e
 800820c:	d91d      	bls.n	800824a <USB_EPStartXfer+0x13b8>
 800820e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <USB_EPStartXfer+0x139c>
 8008224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008228:	3b01      	subs	r3, #1
 800822a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800822e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008232:	b29b      	uxth	r3, r3
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	b29b      	uxth	r3, r3
 8008238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008240:	b29a      	uxth	r2, r3
 8008242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008246:	801a      	strh	r2, [r3, #0]
 8008248:	e064      	b.n	8008314 <USB_EPStartXfer+0x1482>
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	2b00      	cmp	r3, #0
 8008250:	d116      	bne.n	8008280 <USB_EPStartXfer+0x13ee>
 8008252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800825e:	b29a      	uxth	r2, r3
 8008260:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	e049      	b.n	8008314 <USB_EPStartXfer+0x1482>
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <USB_EPStartXfer+0x140e>
 8008296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800829a:	3301      	adds	r3, #1
 800829c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80082a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	029b      	lsls	r3, r3, #10
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e030      	b.n	8008314 <USB_EPStartXfer+0x1482>
 80082b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d128      	bne.n	8008314 <USB_EPStartXfer+0x1482>
 80082c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082de:	b29b      	uxth	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082e6:	4413      	add	r3, r2
 80082e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	00da      	lsls	r2, r3, #3
 80082fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fe:	4413      	add	r3, r2
 8008300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830c:	b29a      	uxth	r2, r3
 800830e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d178      	bne.n	8008424 <USB_EPStartXfer+0x1592>
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834e:	b29b      	uxth	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008356:	4413      	add	r3, r2
 8008358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	00da      	lsls	r2, r3, #3
 800836a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800836e:	4413      	add	r3, r2
 8008370:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800837c:	2b3e      	cmp	r3, #62	; 0x3e
 800837e:	d91d      	bls.n	80083bc <USB_EPStartXfer+0x152a>
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800838a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <USB_EPStartXfer+0x150e>
 8008396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800839a:	3b01      	subs	r3, #1
 800839c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	029b      	lsls	r3, r3, #10
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e060      	b.n	800847e <USB_EPStartXfer+0x15ec>
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d116      	bne.n	80083f2 <USB_EPStartXfer+0x1560>
 80083c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e045      	b.n	800847e <USB_EPStartXfer+0x15ec>
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <USB_EPStartXfer+0x1580>
 8008408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800840c:	3301      	adds	r3, #1
 800840e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29a      	uxth	r2, r3
 800841c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e02c      	b.n	800847e <USB_EPStartXfer+0x15ec>
 8008424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d124      	bne.n	800847e <USB_EPStartXfer+0x15ec>
 8008434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800844a:	4413      	add	r3, r2
 800844c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	00da      	lsls	r2, r3, #3
 800845e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008462:	4413      	add	r3, r2
 8008464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008470:	b29a      	uxth	r2, r3
 8008472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e001      	b.n	800847e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e03a      	b.n	80084f4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800847e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80084c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d020      	beq.n	8008552 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008526:	81bb      	strh	r3, [r7, #12]
 8008528:	89bb      	ldrh	r3, [r7, #12]
 800852a:	f083 0310 	eor.w	r3, r3, #16
 800852e:	81bb      	strh	r3, [r7, #12]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	441a      	add	r2, r3
 800853a:	89bb      	ldrh	r3, [r7, #12]
 800853c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854c:	b29b      	uxth	r3, r3
 800854e:	8013      	strh	r3, [r2, #0]
 8008550:	e01f      	b.n	8008592 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008568:	81fb      	strh	r3, [r7, #14]
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008570:	81fb      	strh	r3, [r7, #14]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	441a      	add	r2, r3
 800857c:	89fb      	ldrh	r3, [r7, #14]
 800857e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858e:	b29b      	uxth	r3, r3
 8008590:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	7b1b      	ldrb	r3, [r3, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 809d 	bne.w	80086ee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d04c      	beq.n	8008656 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	823b      	strh	r3, [r7, #16]
 80085ca:	8a3b      	ldrh	r3, [r7, #16]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <USB_EPClearStall+0x6c>
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	81fb      	strh	r3, [r7, #14]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	89fb      	ldrh	r3, [r7, #14]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	78db      	ldrb	r3, [r3, #3]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d06c      	beq.n	80086ee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862a:	81bb      	strh	r3, [r7, #12]
 800862c:	89bb      	ldrh	r3, [r7, #12]
 800862e:	f083 0320 	eor.w	r3, r3, #32
 8008632:	81bb      	strh	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	89bb      	ldrh	r3, [r7, #12]
 8008640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
 8008654:	e04b      	b.n	80086ee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	82fb      	strh	r3, [r7, #22]
 8008664:	8afb      	ldrh	r3, [r7, #22]
 8008666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01b      	beq.n	80086a6 <USB_EPClearStall+0x106>
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008684:	82bb      	strh	r3, [r7, #20]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	441a      	add	r2, r3
 8008690:	8abb      	ldrh	r3, [r7, #20]
 8008692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	827b      	strh	r3, [r7, #18]
 80086be:	8a7b      	ldrh	r3, [r7, #18]
 80086c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086c4:	827b      	strh	r3, [r7, #18]
 80086c6:	8a7b      	ldrh	r3, [r7, #18]
 80086c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086cc:	827b      	strh	r3, [r7, #18]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	8a7b      	ldrh	r3, [r7, #18]
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2280      	movs	r2, #128	; 0x80
 8008712:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008732:	b29b      	uxth	r3, r3
 8008734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008760:	b29b      	uxth	r3, r3
 8008762:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008764:	68fb      	ldr	r3, [r7, #12]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008772:	b480      	push	{r7}
 8008774:	b08d      	sub	sp, #52	; 0x34
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	4611      	mov	r1, r2
 800877e:	461a      	mov	r2, r3
 8008780:	460b      	mov	r3, r1
 8008782:	80fb      	strh	r3, [r7, #6]
 8008784:	4613      	mov	r3, r2
 8008786:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008788:	88bb      	ldrh	r3, [r7, #4]
 800878a:	3301      	adds	r3, #1
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008798:	88fa      	ldrh	r2, [r7, #6]
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087a8:	e01b      	b.n	80087e2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	3301      	adds	r3, #1
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	b29b      	uxth	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	3302      	adds	r3, #2
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	3301      	adds	r3, #1
 80087da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	3b01      	subs	r3, #1
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e0      	bne.n	80087aa <USB_WritePMA+0x38>
  }
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3734      	adds	r7, #52	; 0x34
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b08b      	sub	sp, #44	; 0x2c
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	4611      	mov	r1, r2
 8008802:	461a      	mov	r2, r3
 8008804:	460b      	mov	r3, r1
 8008806:	80fb      	strh	r3, [r7, #6]
 8008808:	4613      	mov	r3, r2
 800880a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800880c:	88bb      	ldrh	r3, [r7, #4]
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	b29b      	uxth	r3, r3
 8008812:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800881c:	88fa      	ldrh	r2, [r7, #6]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008826:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	e018      	b.n	8008860 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	3302      	adds	r3, #2
 800883a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	3301      	adds	r3, #1
 8008848:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	0a1b      	lsrs	r3, r3, #8
 800884e:	b2da      	uxtb	r2, r3
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	3b01      	subs	r3, #1
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e3      	bne.n	800882e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008866:	88bb      	ldrh	r3, [r7, #4]
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d007      	beq.n	8008882 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	701a      	strb	r2, [r3, #0]
  }
}
 8008882:	bf00      	nop
 8008884:	372c      	adds	r7, #44	; 0x2c
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800889a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800889e:	f002 f901 	bl	800aaa4 <USBD_static_malloc>
 80088a2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80088b2:	2302      	movs	r3, #2
 80088b4:	e066      	b.n	8008984 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7c1b      	ldrb	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d119      	bne.n	80088fa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ca:	2202      	movs	r2, #2
 80088cc:	2181      	movs	r1, #129	; 0x81
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 ff8d 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088de:	2202      	movs	r2, #2
 80088e0:	2101      	movs	r1, #1
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f001 ff83 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2210      	movs	r2, #16
 80088f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088f8:	e016      	b.n	8008928 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088fa:	2340      	movs	r3, #64	; 0x40
 80088fc:	2202      	movs	r2, #2
 80088fe:	2181      	movs	r1, #129	; 0x81
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 ff74 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800890c:	2340      	movs	r3, #64	; 0x40
 800890e:	2202      	movs	r2, #2
 8008910:	2101      	movs	r1, #1
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f001 ff6b 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2210      	movs	r2, #16
 8008924:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008928:	2308      	movs	r3, #8
 800892a:	2203      	movs	r2, #3
 800892c:	2182      	movs	r1, #130	; 0x82
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 ff5d 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7c1b      	ldrb	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008968:	2101      	movs	r1, #1
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f002 f82f 	bl	800a9ce <USBD_LL_PrepareReceive>
 8008970:	e007      	b.n	8008982 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008978:	2340      	movs	r3, #64	; 0x40
 800897a:	2101      	movs	r1, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f002 f826 	bl	800a9ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008998:	2181      	movs	r1, #129	; 0x81
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f001 ff4d 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089a6:	2101      	movs	r1, #1
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 ff46 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089b6:	2182      	movs	r1, #130	; 0x82
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 ff3e 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e8:	4618      	mov	r0, r3
 80089ea:	f002 f869 	bl	800aac0 <USBD_static_free>
    pdev->pClassData = NULL;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e0af      	b.n	8008b88 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d03f      	beq.n	8008ab4 <USBD_CDC_Setup+0xb4>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	f040 809f 	bne.w	8008b78 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d02e      	beq.n	8008aa0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da16      	bge.n	8008a7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	88d2      	ldrh	r2, [r2, #6]
 8008a5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	88db      	ldrh	r3, [r3, #6]
 8008a64:	2b07      	cmp	r3, #7
 8008a66:	bf28      	it	cs
 8008a68:	2307      	movcs	r3, #7
 8008a6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	89fa      	ldrh	r2, [r7, #14]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 facf 	bl	800a016 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a78:	e085      	b.n	8008b86 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	785a      	ldrb	r2, [r3, #1]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	88db      	ldrh	r3, [r3, #6]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a90:	6939      	ldr	r1, [r7, #16]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	88db      	ldrh	r3, [r3, #6]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fae8 	bl	800a06e <USBD_CtlPrepareRx>
      break;
 8008a9e:	e072      	b.n	8008b86 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	7850      	ldrb	r0, [r2, #1]
 8008aac:	2200      	movs	r2, #0
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	4798      	blx	r3
      break;
 8008ab2:	e068      	b.n	8008b86 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b0b      	cmp	r3, #11
 8008aba:	d852      	bhi.n	8008b62 <USBD_CDC_Setup+0x162>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <USBD_CDC_Setup+0xc4>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008b63 	.word	0x08008b63
 8008ad0:	08008b63 	.word	0x08008b63
 8008ad4:	08008b63 	.word	0x08008b63
 8008ad8:	08008b63 	.word	0x08008b63
 8008adc:	08008b63 	.word	0x08008b63
 8008ae0:	08008b63 	.word	0x08008b63
 8008ae4:	08008b63 	.word	0x08008b63
 8008ae8:	08008b63 	.word	0x08008b63
 8008aec:	08008b1f 	.word	0x08008b1f
 8008af0:	08008b49 	.word	0x08008b49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d107      	bne.n	8008b10 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b00:	f107 030a 	add.w	r3, r7, #10
 8008b04:	2202      	movs	r2, #2
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fa84 	bl	800a016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b0e:	e032      	b.n	8008b76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fa0e 	bl	8009f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	75fb      	strb	r3, [r7, #23]
          break;
 8008b1c:	e02b      	b.n	8008b76 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d107      	bne.n	8008b3a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b2a:	f107 030d 	add.w	r3, r7, #13
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fa6f 	bl	800a016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b38:	e01d      	b.n	8008b76 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f9f9 	bl	8009f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b42:	2303      	movs	r3, #3
 8008b44:	75fb      	strb	r3, [r7, #23]
          break;
 8008b46:	e016      	b.n	8008b76 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d00f      	beq.n	8008b74 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f9ec 	bl	8009f34 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b60:	e008      	b.n	8008b74 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 f9e5 	bl	8009f34 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b6e:	e002      	b.n	8008b76 <USBD_CDC_Setup+0x176>
          break;
 8008b70:	bf00      	nop
 8008b72:	e008      	b.n	8008b86 <USBD_CDC_Setup+0x186>
          break;
 8008b74:	bf00      	nop
      }
      break;
 8008b76:	e006      	b.n	8008b86 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f9da 	bl	8009f34 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	75fb      	strb	r3, [r7, #23]
      break;
 8008b84:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ba2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e04f      	b.n	8008c52 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bba:	78fa      	ldrb	r2, [r7, #3]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3318      	adds	r3, #24
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d029      	beq.n	8008c24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	3318      	adds	r3, #24
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	78f9      	ldrb	r1, [r7, #3]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	460b      	mov	r3, r1
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	4403      	add	r3, r0
 8008bf0:	3338      	adds	r3, #56	; 0x38
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bf8:	fb01 f303 	mul.w	r3, r1, r3
 8008bfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d110      	bne.n	8008c24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	3318      	adds	r3, #24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c16:	78f9      	ldrb	r1, [r7, #3]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 feb5 	bl	800a98c <USBD_LL_Transmit>
 8008c22:	e015      	b.n	8008c50 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c4c:	78fa      	ldrb	r2, [r7, #3]
 8008c4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e015      	b.n	8008ca8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fec5 	bl	800aa10 <USBD_LL_GetRxDataSize>
 8008c86:	4602      	mov	r2, r0
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e01b      	b.n	8008d02 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d015      	beq.n	8008d00 <USBD_CDC_EP0_RxReady+0x50>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cda:	2bff      	cmp	r3, #255	; 0xff
 8008cdc:	d010      	beq.n	8008d00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cf4:	b292      	uxth	r2, r2
 8008cf6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	22ff      	movs	r2, #255	; 0xff
 8008cfc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2243      	movs	r2, #67	; 0x43
 8008d18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	200000a4 	.word	0x200000a4

08008d2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2243      	movs	r2, #67	; 0x43
 8008d38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d3a:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000060 	.word	0x20000060

08008d4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2243      	movs	r2, #67	; 0x43
 8008d58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d5a:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	200000e8 	.word	0x200000e8

08008d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	220a      	movs	r2, #10
 8008d78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d7a:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	2000001c 	.word	0x2000001c

08008d8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e004      	b.n	8008daa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dc8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e008      	b.n	8008de6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b085      	sub	sp, #20
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e004      	b.n	8008e18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e34:	2301      	movs	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e01a      	b.n	8008e7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d114      	bne.n	8008e7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008e6e:	2181      	movs	r1, #129	; 0x81
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 fd8b 	bl	800a98c <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e016      	b.n	8008ed0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7c1b      	ldrb	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d109      	bne.n	8008ebe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 fd89 	bl	800a9ce <USBD_LL_PrepareReceive>
 8008ebc:	e007      	b.n	8008ece <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 fd80 	bl	800a9ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e01f      	b.n	8008f30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	79fa      	ldrb	r2, [r7, #7]
 8008f22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f001 fbe7 	bl	800a6f8 <USBD_LL_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e016      	b.n	8008f7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	f107 020e 	add.w	r2, r7, #14
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	4602      	mov	r2, r0
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fc12 	bl	800a7b8 <USBD_LL_Start>
 8008f94:	4603      	mov	r3, r0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
  }

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f000 ff46 	bl	8009ec0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009042:	461a      	mov	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	2b02      	cmp	r3, #2
 8009056:	d01a      	beq.n	800908e <USBD_LL_SetupStage+0x72>
 8009058:	2b02      	cmp	r3, #2
 800905a:	d822      	bhi.n	80090a2 <USBD_LL_SetupStage+0x86>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <USBD_LL_SetupStage+0x4a>
 8009060:	2b01      	cmp	r3, #1
 8009062:	d00a      	beq.n	800907a <USBD_LL_SetupStage+0x5e>
 8009064:	e01d      	b.n	80090a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9ee 	bl	8009450 <USBD_StdDevReq>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
      break;
 8009078:	e020      	b.n	80090bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa52 	bl	800952c <USBD_StdItfReq>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
      break;
 800908c:	e016      	b.n	80090bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa91 	bl	80095be <USBD_StdEPReq>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]
      break;
 80090a0:	e00c      	b.n	80090bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fbe1 	bl	800a878 <USBD_LL_StallEP>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ba:	bf00      	nop
  }

  return ret;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	460b      	mov	r3, r1
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d138      	bne.n	800914c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d14a      	bne.n	8009182 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d913      	bls.n	8009120 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	1ad2      	subs	r2, r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	4293      	cmp	r3, r2
 8009110:	bf28      	it	cs
 8009112:	4613      	movcs	r3, r2
 8009114:	461a      	mov	r2, r3
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 ffc5 	bl	800a0a8 <USBD_CtlContinueRx>
 800911e:	e030      	b.n	8009182 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b03      	cmp	r3, #3
 800912a:	d10b      	bne.n	8009144 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 ffc0 	bl	800a0ca <USBD_CtlSendStatus>
 800914a:	e01a      	b.n	8009182 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b03      	cmp	r3, #3
 8009156:	d114      	bne.n	8009182 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00e      	beq.n	8009182 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	7afa      	ldrb	r2, [r7, #11]
 800916e:	4611      	mov	r1, r2
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	4798      	blx	r3
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	e000      	b.n	8009184 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	460b      	mov	r3, r1
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d16b      	bne.n	8009278 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3314      	adds	r3, #20
 80091a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d156      	bne.n	800925e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d914      	bls.n	80091e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	1ad2      	subs	r2, r2, r3
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 ff3a 	bl	800a04c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091d8:	2300      	movs	r3, #0
 80091da:	2200      	movs	r2, #0
 80091dc:	2100      	movs	r1, #0
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f001 fbf5 	bl	800a9ce <USBD_LL_PrepareReceive>
 80091e4:	e03b      	b.n	800925e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d11c      	bne.n	800922c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d316      	bcc.n	800922c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009208:	429a      	cmp	r2, r3
 800920a:	d20f      	bcs.n	800922c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800920c:	2200      	movs	r2, #0
 800920e:	2100      	movs	r1, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 ff1b 	bl	800a04c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800921e:	2300      	movs	r3, #0
 8009220:	2200      	movs	r2, #0
 8009222:	2100      	movs	r1, #0
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f001 fbd2 	bl	800a9ce <USBD_LL_PrepareReceive>
 800922a:	e018      	b.n	800925e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b03      	cmp	r3, #3
 8009236:	d10b      	bne.n	8009250 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009250:	2180      	movs	r1, #128	; 0x80
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f001 fb10 	bl	800a878 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 ff49 	bl	800a0f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009264:	2b01      	cmp	r3, #1
 8009266:	d122      	bne.n	80092ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fe98 	bl	8008f9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009276:	e01a      	b.n	80092ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b03      	cmp	r3, #3
 8009282:	d114      	bne.n	80092ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	695b      	ldr	r3, [r3, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	7afa      	ldrb	r2, [r7, #11]
 800929a:	4611      	mov	r1, r2
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092a4:	7dfb      	ldrb	r3, [r7, #23]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
 80092ac:	e000      	b.n	80092b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e02f      	b.n	800934c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00f      	beq.n	8009316 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d009      	beq.n	8009316 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6852      	ldr	r2, [r2, #4]
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	4611      	mov	r1, r2
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009316:	2340      	movs	r3, #64	; 0x40
 8009318:	2200      	movs	r2, #0
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fa66 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2240      	movs	r2, #64	; 0x40
 800932e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009332:	2340      	movs	r3, #64	; 0x40
 8009334:	2200      	movs	r2, #0
 8009336:	2180      	movs	r1, #128	; 0x80
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fa58 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2240      	movs	r2, #64	; 0x40
 8009348:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2da      	uxtb	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2204      	movs	r2, #4
 800938e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d106      	bne.n	80093c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e012      	b.n	800940c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d10b      	bne.n	800940a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f8:	69db      	ldr	r3, [r3, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	3301      	adds	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009432:	8a3b      	ldrh	r3, [r7, #16]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	b21a      	sxth	r2, r3
 8009438:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800943c:	4313      	orrs	r3, r2
 800943e:	b21b      	sxth	r3, r3
 8009440:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009442:	89fb      	ldrh	r3, [r7, #14]
}
 8009444:	4618      	mov	r0, r3
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d005      	beq.n	8009476 <USBD_StdDevReq+0x26>
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d853      	bhi.n	8009516 <USBD_StdDevReq+0xc6>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <USBD_StdDevReq+0x3a>
 8009472:	2b20      	cmp	r3, #32
 8009474:	d14f      	bne.n	8009516 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
      break;
 8009488:	e04a      	b.n	8009520 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b09      	cmp	r3, #9
 8009490:	d83b      	bhi.n	800950a <USBD_StdDevReq+0xba>
 8009492:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <USBD_StdDevReq+0x48>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094ed 	.word	0x080094ed
 800949c:	08009501 	.word	0x08009501
 80094a0:	0800950b 	.word	0x0800950b
 80094a4:	080094f7 	.word	0x080094f7
 80094a8:	0800950b 	.word	0x0800950b
 80094ac:	080094cb 	.word	0x080094cb
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	0800950b 	.word	0x0800950b
 80094b8:	080094e3 	.word	0x080094e3
 80094bc:	080094d5 	.word	0x080094d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f9de 	bl	8009884 <USBD_GetDescriptor>
          break;
 80094c8:	e024      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fb6d 	bl	8009bac <USBD_SetAddress>
          break;
 80094d2:	e01f      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fbac 	bl	8009c34 <USBD_SetConfig>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
          break;
 80094e0:	e018      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fc4b 	bl	8009d80 <USBD_GetConfig>
          break;
 80094ea:	e013      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fc7c 	bl	8009dec <USBD_GetStatus>
          break;
 80094f4:	e00e      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fcab 	bl	8009e54 <USBD_SetFeature>
          break;
 80094fe:	e009      	b.n	8009514 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fcba 	bl	8009e7c <USBD_ClrFeature>
          break;
 8009508:	e004      	b.n	8009514 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fd11 	bl	8009f34 <USBD_CtlError>
          break;
 8009512:	bf00      	nop
      }
      break;
 8009514:	e004      	b.n	8009520 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd0b 	bl	8009f34 <USBD_CtlError>
      break;
 800951e:	bf00      	nop
  }

  return ret;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop

0800952c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d005      	beq.n	8009552 <USBD_StdItfReq+0x26>
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d82f      	bhi.n	80095aa <USBD_StdItfReq+0x7e>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <USBD_StdItfReq+0x26>
 800954e:	2b20      	cmp	r3, #32
 8009550:	d12b      	bne.n	80095aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009558:	b2db      	uxtb	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	2b02      	cmp	r3, #2
 800955e:	d81d      	bhi.n	800959c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	889b      	ldrh	r3, [r3, #4]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b01      	cmp	r3, #1
 8009568:	d813      	bhi.n	8009592 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	88db      	ldrh	r3, [r3, #6]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d110      	bne.n	80095a6 <USBD_StdItfReq+0x7a>
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10d      	bne.n	80095a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fd9d 	bl	800a0ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009590:	e009      	b.n	80095a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fccd 	bl	8009f34 <USBD_CtlError>
          break;
 800959a:	e004      	b.n	80095a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fcc8 	bl	8009f34 <USBD_CtlError>
          break;
 80095a4:	e000      	b.n	80095a8 <USBD_StdItfReq+0x7c>
          break;
 80095a6:	bf00      	nop
      }
      break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fcc1 	bl	8009f34 <USBD_CtlError>
      break;
 80095b2:	bf00      	nop
  }

  return ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	889b      	ldrh	r3, [r3, #4]
 80095d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d007      	beq.n	80095ee <USBD_StdEPReq+0x30>
 80095de:	2b40      	cmp	r3, #64	; 0x40
 80095e0:	f200 8145 	bhi.w	800986e <USBD_StdEPReq+0x2b0>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00c      	beq.n	8009602 <USBD_StdEPReq+0x44>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	f040 8140 	bne.w	800986e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009600:	e13a      	b.n	8009878 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b03      	cmp	r3, #3
 8009608:	d007      	beq.n	800961a <USBD_StdEPReq+0x5c>
 800960a:	2b03      	cmp	r3, #3
 800960c:	f300 8129 	bgt.w	8009862 <USBD_StdEPReq+0x2a4>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d07f      	beq.n	8009714 <USBD_StdEPReq+0x156>
 8009614:	2b01      	cmp	r3, #1
 8009616:	d03c      	beq.n	8009692 <USBD_StdEPReq+0xd4>
 8009618:	e123      	b.n	8009862 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b02      	cmp	r3, #2
 8009624:	d002      	beq.n	800962c <USBD_StdEPReq+0x6e>
 8009626:	2b03      	cmp	r3, #3
 8009628:	d016      	beq.n	8009658 <USBD_StdEPReq+0x9a>
 800962a:	e02c      	b.n	8009686 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00d      	beq.n	800964e <USBD_StdEPReq+0x90>
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d00a      	beq.n	800964e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f91b 	bl	800a878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009642:	2180      	movs	r1, #128	; 0x80
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f917 	bl	800a878 <USBD_LL_StallEP>
 800964a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800964c:	e020      	b.n	8009690 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc6f 	bl	8009f34 <USBD_CtlError>
              break;
 8009656:	e01b      	b.n	8009690 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	885b      	ldrh	r3, [r3, #2]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10e      	bne.n	800967e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <USBD_StdEPReq+0xc0>
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	d008      	beq.n	800967e <USBD_StdEPReq+0xc0>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	88db      	ldrh	r3, [r3, #6]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d104      	bne.n	800967e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 f8fd 	bl	800a878 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fd23 	bl	800a0ca <USBD_CtlSendStatus>

              break;
 8009684:	e004      	b.n	8009690 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fc53 	bl	8009f34 <USBD_CtlError>
              break;
 800968e:	bf00      	nop
          }
          break;
 8009690:	e0ec      	b.n	800986c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b02      	cmp	r3, #2
 800969c:	d002      	beq.n	80096a4 <USBD_StdEPReq+0xe6>
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d016      	beq.n	80096d0 <USBD_StdEPReq+0x112>
 80096a2:	e030      	b.n	8009706 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <USBD_StdEPReq+0x108>
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
 80096ac:	2b80      	cmp	r3, #128	; 0x80
 80096ae:	d00a      	beq.n	80096c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 f8df 	bl	800a878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ba:	2180      	movs	r1, #128	; 0x80
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f8db 	bl	800a878 <USBD_LL_StallEP>
 80096c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096c4:	e025      	b.n	8009712 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fc33 	bl	8009f34 <USBD_CtlError>
              break;
 80096ce:	e020      	b.n	8009712 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	885b      	ldrh	r3, [r3, #2]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11b      	bne.n	8009710 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f8e5 	bl	800a8b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fcec 	bl	800a0ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009704:	e004      	b.n	8009710 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc13 	bl	8009f34 <USBD_CtlError>
              break;
 800970e:	e000      	b.n	8009712 <USBD_StdEPReq+0x154>
              break;
 8009710:	bf00      	nop
          }
          break;
 8009712:	e0ab      	b.n	800986c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d002      	beq.n	8009726 <USBD_StdEPReq+0x168>
 8009720:	2b03      	cmp	r3, #3
 8009722:	d032      	beq.n	800978a <USBD_StdEPReq+0x1cc>
 8009724:	e097      	b.n	8009856 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d007      	beq.n	800973c <USBD_StdEPReq+0x17e>
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	2b80      	cmp	r3, #128	; 0x80
 8009730:	d004      	beq.n	800973c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fbfd 	bl	8009f34 <USBD_CtlError>
                break;
 800973a:	e091      	b.n	8009860 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	da0b      	bge.n	800975c <USBD_StdEPReq+0x19e>
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974a:	4613      	mov	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	3310      	adds	r3, #16
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	4413      	add	r3, r2
 8009758:	3304      	adds	r3, #4
 800975a:	e00b      	b.n	8009774 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	3304      	adds	r3, #4
 8009774:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2202      	movs	r2, #2
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fc47 	bl	800a016 <USBD_CtlSendData>
              break;
 8009788:	e06a      	b.n	8009860 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800978a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800978e:	2b00      	cmp	r3, #0
 8009790:	da11      	bge.n	80097b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	f003 020f 	and.w	r2, r3, #15
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	440b      	add	r3, r1
 80097a4:	3324      	adds	r3, #36	; 0x24
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d117      	bne.n	80097dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fbc0 	bl	8009f34 <USBD_CtlError>
                  break;
 80097b4:	e054      	b.n	8009860 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	f003 020f 	and.w	r2, r3, #15
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	440b      	add	r3, r1
 80097c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d104      	bne.n	80097dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fbad 	bl	8009f34 <USBD_CtlError>
                  break;
 80097da:	e041      	b.n	8009860 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da0b      	bge.n	80097fc <USBD_StdEPReq+0x23e>
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	3310      	adds	r3, #16
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	3304      	adds	r3, #4
 80097fa:	e00b      	b.n	8009814 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	4413      	add	r3, r2
 8009812:	3304      	adds	r3, #4
 8009814:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <USBD_StdEPReq+0x264>
 800981c:	7bbb      	ldrb	r3, [r7, #14]
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d103      	bne.n	800982a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e00e      	b.n	8009848 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	4619      	mov	r1, r3
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 f860 	bl	800a8f4 <USBD_LL_IsStallEP>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e002      	b.n	8009848 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2202      	movs	r2, #2
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fbe1 	bl	800a016 <USBD_CtlSendData>
              break;
 8009854:	e004      	b.n	8009860 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fb6b 	bl	8009f34 <USBD_CtlError>
              break;
 800985e:	bf00      	nop
          }
          break;
 8009860:	e004      	b.n	800986c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fb65 	bl	8009f34 <USBD_CtlError>
          break;
 800986a:	bf00      	nop
      }
      break;
 800986c:	e004      	b.n	8009878 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fb5f 	bl	8009f34 <USBD_CtlError>
      break;
 8009876:	bf00      	nop
  }

  return ret;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009896:	2300      	movs	r3, #0
 8009898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b01      	subs	r3, #1
 80098a4:	2b0e      	cmp	r3, #14
 80098a6:	f200 8152 	bhi.w	8009b4e <USBD_GetDescriptor+0x2ca>
 80098aa:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <USBD_GetDescriptor+0x2c>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	08009921 	.word	0x08009921
 80098b4:	08009939 	.word	0x08009939
 80098b8:	08009979 	.word	0x08009979
 80098bc:	08009b4f 	.word	0x08009b4f
 80098c0:	08009b4f 	.word	0x08009b4f
 80098c4:	08009aef 	.word	0x08009aef
 80098c8:	08009b1b 	.word	0x08009b1b
 80098cc:	08009b4f 	.word	0x08009b4f
 80098d0:	08009b4f 	.word	0x08009b4f
 80098d4:	08009b4f 	.word	0x08009b4f
 80098d8:	08009b4f 	.word	0x08009b4f
 80098dc:	08009b4f 	.word	0x08009b4f
 80098e0:	08009b4f 	.word	0x08009b4f
 80098e4:	08009b4f 	.word	0x08009b4f
 80098e8:	080098ed 	.word	0x080098ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00b      	beq.n	8009910 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	7c12      	ldrb	r2, [r2, #16]
 8009904:	f107 0108 	add.w	r1, r7, #8
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
 800990c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800990e:	e126      	b.n	8009b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fb0e 	bl	8009f34 <USBD_CtlError>
        err++;
 8009918:	7afb      	ldrb	r3, [r7, #11]
 800991a:	3301      	adds	r3, #1
 800991c:	72fb      	strb	r3, [r7, #11]
      break;
 800991e:	e11e      	b.n	8009b5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	7c12      	ldrb	r2, [r2, #16]
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	4610      	mov	r0, r2
 8009932:	4798      	blx	r3
 8009934:	60f8      	str	r0, [r7, #12]
      break;
 8009936:	e112      	b.n	8009b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7c1b      	ldrb	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10d      	bne.n	800995c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009948:	f107 0208 	add.w	r2, r7, #8
 800994c:	4610      	mov	r0, r2
 800994e:	4798      	blx	r3
 8009950:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	2202      	movs	r2, #2
 8009958:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800995a:	e100      	b.n	8009b5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009964:	f107 0208 	add.w	r2, r7, #8
 8009968:	4610      	mov	r0, r2
 800996a:	4798      	blx	r3
 800996c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	2202      	movs	r2, #2
 8009974:	701a      	strb	r2, [r3, #0]
      break;
 8009976:	e0f2      	b.n	8009b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b05      	cmp	r3, #5
 8009980:	f200 80ac 	bhi.w	8009adc <USBD_GetDescriptor+0x258>
 8009984:	a201      	add	r2, pc, #4	; (adr r2, 800998c <USBD_GetDescriptor+0x108>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	080099a5 	.word	0x080099a5
 8009990:	080099d9 	.word	0x080099d9
 8009994:	08009a0d 	.word	0x08009a0d
 8009998:	08009a41 	.word	0x08009a41
 800999c:	08009a75 	.word	0x08009a75
 80099a0:	08009aa9 	.word	0x08009aa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	7c12      	ldrb	r2, [r2, #16]
 80099bc:	f107 0108 	add.w	r1, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c6:	e091      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fab2 	bl	8009f34 <USBD_CtlError>
            err++;
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	3301      	adds	r3, #1
 80099d4:	72fb      	strb	r3, [r7, #11]
          break;
 80099d6:	e089      	b.n	8009aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00b      	beq.n	80099fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	7c12      	ldrb	r2, [r2, #16]
 80099f0:	f107 0108 	add.w	r1, r7, #8
 80099f4:	4610      	mov	r0, r2
 80099f6:	4798      	blx	r3
 80099f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099fa:	e077      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa98 	bl	8009f34 <USBD_CtlError>
            err++;
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	3301      	adds	r3, #1
 8009a08:	72fb      	strb	r3, [r7, #11]
          break;
 8009a0a:	e06f      	b.n	8009aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7c12      	ldrb	r2, [r2, #16]
 8009a24:	f107 0108 	add.w	r1, r7, #8
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2e:	e05d      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa7e 	bl	8009f34 <USBD_CtlError>
            err++;
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3e:	e055      	b.n	8009aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7c12      	ldrb	r2, [r2, #16]
 8009a58:	f107 0108 	add.w	r1, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a62:	e043      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa64 	bl	8009f34 <USBD_CtlError>
            err++;
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	72fb      	strb	r3, [r7, #11]
          break;
 8009a72:	e03b      	b.n	8009aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7c12      	ldrb	r2, [r2, #16]
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a96:	e029      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa4a 	bl	8009f34 <USBD_CtlError>
            err++;
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa6:	e021      	b.n	8009aec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00b      	beq.n	8009acc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7c12      	ldrb	r2, [r2, #16]
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
 8009ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aca:	e00f      	b.n	8009aec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa30 	bl	8009f34 <USBD_CtlError>
            err++;
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ada:	e007      	b.n	8009aec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa28 	bl	8009f34 <USBD_CtlError>
          err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009aea:	bf00      	nop
      }
      break;
 8009aec:	e037      	b.n	8009b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7c1b      	ldrb	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d109      	bne.n	8009b0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afe:	f107 0208 	add.w	r2, r7, #8
 8009b02:	4610      	mov	r0, r2
 8009b04:	4798      	blx	r3
 8009b06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b08:	e029      	b.n	8009b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fa11 	bl	8009f34 <USBD_CtlError>
        err++;
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	3301      	adds	r3, #1
 8009b16:	72fb      	strb	r3, [r7, #11]
      break;
 8009b18:	e021      	b.n	8009b5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7c1b      	ldrb	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10d      	bne.n	8009b3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4798      	blx	r3
 8009b32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	2207      	movs	r2, #7
 8009b3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b3c:	e00f      	b.n	8009b5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f9f7 	bl	8009f34 <USBD_CtlError>
        err++;
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b4c:	e007      	b.n	8009b5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f9ef 	bl	8009f34 <USBD_CtlError>
      err++;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5c:	bf00      	nop
  }

  if (err != 0U)
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d11e      	bne.n	8009ba2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d016      	beq.n	8009b9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b6c:	893b      	ldrh	r3, [r7, #8]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00e      	beq.n	8009b90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88da      	ldrh	r2, [r3, #6]
 8009b76:	893b      	ldrh	r3, [r7, #8]
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	bf28      	it	cs
 8009b7c:	4613      	movcs	r3, r2
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b82:	893b      	ldrh	r3, [r7, #8]
 8009b84:	461a      	mov	r2, r3
 8009b86:	68f9      	ldr	r1, [r7, #12]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fa44 	bl	800a016 <USBD_CtlSendData>
 8009b8e:	e009      	b.n	8009ba4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f9ce 	bl	8009f34 <USBD_CtlError>
 8009b98:	e004      	b.n	8009ba4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fa95 	bl	800a0ca <USBD_CtlSendStatus>
 8009ba0:	e000      	b.n	8009ba4 <USBD_GetDescriptor+0x320>
    return;
 8009ba2:	bf00      	nop
  }
}
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop

08009bac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	889b      	ldrh	r3, [r3, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d131      	bne.n	8009c22 <USBD_SetAddress+0x76>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	88db      	ldrh	r3, [r3, #6]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d12d      	bne.n	8009c22 <USBD_SetAddress+0x76>
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	2b7f      	cmp	r3, #127	; 0x7f
 8009bcc:	d829      	bhi.n	8009c22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d104      	bne.n	8009bf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f9a3 	bl	8009f34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bee:	e01d      	b.n	8009c2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	7bfa      	ldrb	r2, [r7, #15]
 8009bf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fea6 	bl	800a94e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa61 	bl	800a0ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d004      	beq.n	8009c18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c16:	e009      	b.n	8009c2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c20:	e004      	b.n	8009c2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f985 	bl	8009f34 <USBD_CtlError>
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	885b      	ldrh	r3, [r3, #2]
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	4b4c      	ldr	r3, [pc, #304]	; (8009d7c <USBD_SetConfig+0x148>)
 8009c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c4c:	4b4b      	ldr	r3, [pc, #300]	; (8009d7c <USBD_SetConfig+0x148>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d905      	bls.n	8009c60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f96c 	bl	8009f34 <USBD_CtlError>
    return USBD_FAIL;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e088      	b.n	8009d72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d002      	beq.n	8009c72 <USBD_SetConfig+0x3e>
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d025      	beq.n	8009cbc <USBD_SetConfig+0x88>
 8009c70:	e071      	b.n	8009d56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c72:	4b42      	ldr	r3, [pc, #264]	; (8009d7c <USBD_SetConfig+0x148>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01c      	beq.n	8009cb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c7a:	4b40      	ldr	r3, [pc, #256]	; (8009d7c <USBD_SetConfig+0x148>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c84:	4b3d      	ldr	r3, [pc, #244]	; (8009d7c <USBD_SetConfig+0x148>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff f992 	bl	8008fb4 <USBD_SetClassConfig>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f949 	bl	8009f34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ca2:	e065      	b.n	8009d70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fa10 	bl	800a0ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2203      	movs	r2, #3
 8009cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cb2:	e05d      	b.n	8009d70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fa08 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009cba:	e059      	b.n	8009d70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cbc:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <USBD_SetConfig+0x148>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d112      	bne.n	8009cea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ccc:	4b2b      	ldr	r3, [pc, #172]	; (8009d7c <USBD_SetConfig+0x148>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cd6:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <USBD_SetConfig+0x148>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff f985 	bl	8008fec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9f1 	bl	800a0ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ce8:	e042      	b.n	8009d70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009cea:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <USBD_SetConfig+0x148>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d02a      	beq.n	8009d4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff f973 	bl	8008fec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d06:	4b1d      	ldr	r3, [pc, #116]	; (8009d7c <USBD_SetConfig+0x148>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d10:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <USBD_SetConfig+0x148>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff f94c 	bl	8008fb4 <USBD_SetClassConfig>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00f      	beq.n	8009d46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f903 	bl	8009f34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff f958 	bl	8008fec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d44:	e014      	b.n	8009d70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9bf 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009d4c:	e010      	b.n	8009d70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f9bb 	bl	800a0ca <USBD_CtlSendStatus>
      break;
 8009d54:	e00c      	b.n	8009d70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f8eb 	bl	8009f34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d5e:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <USBD_SetConfig+0x148>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff f941 	bl	8008fec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6e:	bf00      	nop
  }

  return ret;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000418 	.word	0x20000418

08009d80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	88db      	ldrh	r3, [r3, #6]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d004      	beq.n	8009d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f8cd 	bl	8009f34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d9a:	e023      	b.n	8009de4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	dc02      	bgt.n	8009dae <USBD_GetConfig+0x2e>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dc03      	bgt.n	8009db4 <USBD_GetConfig+0x34>
 8009dac:	e015      	b.n	8009dda <USBD_GetConfig+0x5a>
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d00b      	beq.n	8009dca <USBD_GetConfig+0x4a>
 8009db2:	e012      	b.n	8009dda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f927 	bl	800a016 <USBD_CtlSendData>
        break;
 8009dc8:	e00c      	b.n	8009de4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f91f 	bl	800a016 <USBD_CtlSendData>
        break;
 8009dd8:	e004      	b.n	8009de4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f8a9 	bl	8009f34 <USBD_CtlError>
        break;
 8009de2:	bf00      	nop
}
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d81e      	bhi.n	8009e42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	88db      	ldrh	r3, [r3, #6]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d004      	beq.n	8009e16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e0c:	6839      	ldr	r1, [r7, #0]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f890 	bl	8009f34 <USBD_CtlError>
        break;
 8009e14:	e01a      	b.n	8009e4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f043 0202 	orr.w	r2, r3, #2
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	330c      	adds	r3, #12
 8009e36:	2202      	movs	r2, #2
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f8eb 	bl	800a016 <USBD_CtlSendData>
      break;
 8009e40:	e004      	b.n	8009e4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f875 	bl	8009f34 <USBD_CtlError>
      break;
 8009e4a:	bf00      	nop
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	885b      	ldrh	r3, [r3, #2]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d106      	bne.n	8009e74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f92b 	bl	800a0ca <USBD_CtlSendStatus>
  }
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d80b      	bhi.n	8009eac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	885b      	ldrh	r3, [r3, #2]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10c      	bne.n	8009eb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f910 	bl	800a0ca <USBD_CtlSendStatus>
      }
      break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f840 	bl	8009f34 <USBD_CtlError>
      break;
 8009eb4:	e000      	b.n	8009eb8 <USBD_ClrFeature+0x3c>
      break;
 8009eb6:	bf00      	nop
  }
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	781a      	ldrb	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fa92 	bl	8009414 <SWAPBYTE>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff fa85 	bl	8009414 <SWAPBYTE>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f7ff fa78 	bl	8009414 <SWAPBYTE>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461a      	mov	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	80da      	strh	r2, [r3, #6]
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f3e:	2180      	movs	r1, #128	; 0x80
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fc99 	bl	800a878 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f46:	2100      	movs	r1, #0
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fc95 	bl	800a878 <USBD_LL_StallEP>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d036      	beq.n	8009fda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f70:	6938      	ldr	r0, [r7, #16]
 8009f72:	f000 f836 	bl	8009fe2 <USBD_GetLen>
 8009f76:	4603      	mov	r3, r0
 8009f78:	3301      	adds	r3, #1
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	4413      	add	r3, r2
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	3301      	adds	r3, #1
 8009f94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	2203      	movs	r2, #3
 8009f9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009fa6:	e013      	b.n	8009fd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	4413      	add	r3, r2
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	7812      	ldrb	r2, [r2, #0]
 8009fb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	613b      	str	r3, [r7, #16]
    idx++;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e7      	bne.n	8009fa8 <USBD_GetString+0x52>
 8009fd8:	e000      	b.n	8009fdc <USBD_GetString+0x86>
    return;
 8009fda:	bf00      	nop
  }
}
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ff2:	e005      	b.n	800a000 <USBD_GetLen+0x1e>
  {
    len++;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f5      	bne.n	8009ff4 <USBD_GetLen+0x12>
  }

  return len;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2202      	movs	r2, #2
 800a026:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	2100      	movs	r1, #0
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f000 fca5 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	2100      	movs	r1, #0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fc94 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2203      	movs	r2, #3
 800a07e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	2100      	movs	r1, #0
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 fc98 	bl	800a9ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fc87 	bl	800a9ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fc53 	bl	800a98c <USBD_LL_Transmit>

  return USBD_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a100:	2300      	movs	r3, #0
 800a102:	2200      	movs	r2, #0
 800a104:	2100      	movs	r1, #0
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fc61 	bl	800a9ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a11c:	2200      	movs	r2, #0
 800a11e:	4912      	ldr	r1, [pc, #72]	; (800a168 <MX_USB_Device_Init+0x50>)
 800a120:	4812      	ldr	r0, [pc, #72]	; (800a16c <MX_USB_Device_Init+0x54>)
 800a122:	f7fe fed9 	bl	8008ed8 <USBD_Init>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a12c:	f7f7 fa68 	bl	8001600 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a130:	490f      	ldr	r1, [pc, #60]	; (800a170 <MX_USB_Device_Init+0x58>)
 800a132:	480e      	ldr	r0, [pc, #56]	; (800a16c <MX_USB_Device_Init+0x54>)
 800a134:	f7fe ff00 	bl	8008f38 <USBD_RegisterClass>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a13e:	f7f7 fa5f 	bl	8001600 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a142:	490c      	ldr	r1, [pc, #48]	; (800a174 <MX_USB_Device_Init+0x5c>)
 800a144:	4809      	ldr	r0, [pc, #36]	; (800a16c <MX_USB_Device_Init+0x54>)
 800a146:	f7fe fe21 	bl	8008d8c <USBD_CDC_RegisterInterface>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a150:	f7f7 fa56 	bl	8001600 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a154:	4805      	ldr	r0, [pc, #20]	; (800a16c <MX_USB_Device_Init+0x54>)
 800a156:	f7fe ff16 	bl	8008f86 <USBD_Start>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a160:	f7f7 fa4e 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a164:	bf00      	nop
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000140 	.word	0x20000140
 800a16c:	2000041c 	.word	0x2000041c
 800a170:	20000028 	.word	0x20000028
 800a174:	2000012c 	.word	0x2000012c

0800a178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a17c:	2200      	movs	r2, #0
 800a17e:	4905      	ldr	r1, [pc, #20]	; (800a194 <CDC_Init_FS+0x1c>)
 800a180:	4805      	ldr	r0, [pc, #20]	; (800a198 <CDC_Init_FS+0x20>)
 800a182:	f7fe fe18 	bl	8008db6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a186:	4905      	ldr	r1, [pc, #20]	; (800a19c <CDC_Init_FS+0x24>)
 800a188:	4803      	ldr	r0, [pc, #12]	; (800a198 <CDC_Init_FS+0x20>)
 800a18a:	f7fe fe32 	bl	8008df2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a18e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a190:	4618      	mov	r0, r3
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000ad4 	.word	0x20000ad4
 800a198:	2000041c 	.word	0x2000041c
 800a19c:	200006ec 	.word	0x200006ec

0800a1a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	2b23      	cmp	r3, #35	; 0x23
 800a1c4:	d84a      	bhi.n	800a25c <CDC_Control_FS+0xac>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <CDC_Control_FS+0x1c>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a25d 	.word	0x0800a25d
 800a1d0:	0800a25d 	.word	0x0800a25d
 800a1d4:	0800a25d 	.word	0x0800a25d
 800a1d8:	0800a25d 	.word	0x0800a25d
 800a1dc:	0800a25d 	.word	0x0800a25d
 800a1e0:	0800a25d 	.word	0x0800a25d
 800a1e4:	0800a25d 	.word	0x0800a25d
 800a1e8:	0800a25d 	.word	0x0800a25d
 800a1ec:	0800a25d 	.word	0x0800a25d
 800a1f0:	0800a25d 	.word	0x0800a25d
 800a1f4:	0800a25d 	.word	0x0800a25d
 800a1f8:	0800a25d 	.word	0x0800a25d
 800a1fc:	0800a25d 	.word	0x0800a25d
 800a200:	0800a25d 	.word	0x0800a25d
 800a204:	0800a25d 	.word	0x0800a25d
 800a208:	0800a25d 	.word	0x0800a25d
 800a20c:	0800a25d 	.word	0x0800a25d
 800a210:	0800a25d 	.word	0x0800a25d
 800a214:	0800a25d 	.word	0x0800a25d
 800a218:	0800a25d 	.word	0x0800a25d
 800a21c:	0800a25d 	.word	0x0800a25d
 800a220:	0800a25d 	.word	0x0800a25d
 800a224:	0800a25d 	.word	0x0800a25d
 800a228:	0800a25d 	.word	0x0800a25d
 800a22c:	0800a25d 	.word	0x0800a25d
 800a230:	0800a25d 	.word	0x0800a25d
 800a234:	0800a25d 	.word	0x0800a25d
 800a238:	0800a25d 	.word	0x0800a25d
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a25d 	.word	0x0800a25d
 800a244:	0800a25d 	.word	0x0800a25d
 800a248:	0800a25d 	.word	0x0800a25d
 800a24c:	0800a25d 	.word	0x0800a25d
 800a250:	0800a25d 	.word	0x0800a25d
 800a254:	0800a25d 	.word	0x0800a25d
 800a258:	0800a25d 	.word	0x0800a25d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a25c:	bf00      	nop
  }

  return (USBD_OK);
 800a25e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7f6 faf7 	bl	800086c <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	4805      	ldr	r0, [pc, #20]	; (800a298 <CDC_Receive_FS+0x2c>)
 800a282:	f7fe fdb6 	bl	8008df2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a286:	4804      	ldr	r0, [pc, #16]	; (800a298 <CDC_Receive_FS+0x2c>)
 800a288:	f7fe fdfc 	bl	8008e84 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800a28c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	2000041c 	.word	0x2000041c

0800a29c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <CDC_Transmit_FS+0x48>)
 800a2ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d001      	beq.n	800a2c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e00b      	b.n	800a2da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2c2:	887b      	ldrh	r3, [r7, #2]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4806      	ldr	r0, [pc, #24]	; (800a2e4 <CDC_Transmit_FS+0x48>)
 800a2ca:	f7fe fd74 	bl	8008db6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2ce:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <CDC_Transmit_FS+0x48>)
 800a2d0:	f7fe fda8 	bl	8008e24 <USBD_CDC_TransmitPacket>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000041c 	.word	0x2000041c

0800a2e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	371c      	adds	r7, #28
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2212      	movs	r2, #18
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20000160 	.word	0x20000160

0800a330 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	6039      	str	r1, [r7, #0]
 800a33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2204      	movs	r2, #4
 800a340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a342:	4b03      	ldr	r3, [pc, #12]	; (800a350 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a344:	4618      	mov	r0, r3
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	20000174 	.word	0x20000174

0800a354 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	6039      	str	r1, [r7, #0]
 800a35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d105      	bne.n	800a372 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4907      	ldr	r1, [pc, #28]	; (800a388 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a36a:	4808      	ldr	r0, [pc, #32]	; (800a38c <USBD_CDC_ProductStrDescriptor+0x38>)
 800a36c:	f7ff fdf3 	bl	8009f56 <USBD_GetString>
 800a370:	e004      	b.n	800a37c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4904      	ldr	r1, [pc, #16]	; (800a388 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <USBD_CDC_ProductStrDescriptor+0x38>)
 800a378:	f7ff fded 	bl	8009f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a37c:	4b02      	ldr	r3, [pc, #8]	; (800a388 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000ebc 	.word	0x20000ebc
 800a38c:	0800abc4 	.word	0x0800abc4

0800a390 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	4603      	mov	r3, r0
 800a398:	6039      	str	r1, [r7, #0]
 800a39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a3a0:	4804      	ldr	r0, [pc, #16]	; (800a3b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a3a2:	f7ff fdd8 	bl	8009f56 <USBD_GetString>
  return USBD_StrDesc;
 800a3a6:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	20000ebc 	.word	0x20000ebc
 800a3b4:	0800abdc 	.word	0x0800abdc

0800a3b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	221a      	movs	r2, #26
 800a3c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ca:	f000 f843 	bl	800a454 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a3ce:	4b02      	ldr	r3, [pc, #8]	; (800a3d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000178 	.word	0x20000178

0800a3dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4907      	ldr	r1, [pc, #28]	; (800a410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3f2:	4808      	ldr	r0, [pc, #32]	; (800a414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a3f4:	f7ff fdaf 	bl	8009f56 <USBD_GetString>
 800a3f8:	e004      	b.n	800a404 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	4904      	ldr	r1, [pc, #16]	; (800a410 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3fe:	4805      	ldr	r0, [pc, #20]	; (800a414 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a400:	f7ff fda9 	bl	8009f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a404:	4b02      	ldr	r3, [pc, #8]	; (800a410 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000ebc 	.word	0x20000ebc
 800a414:	0800abf0 	.word	0x0800abf0

0800a418 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a424:	79fb      	ldrb	r3, [r7, #7]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d105      	bne.n	800a436 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4907      	ldr	r1, [pc, #28]	; (800a44c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a42e:	4808      	ldr	r0, [pc, #32]	; (800a450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a430:	f7ff fd91 	bl	8009f56 <USBD_GetString>
 800a434:	e004      	b.n	800a440 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	4904      	ldr	r1, [pc, #16]	; (800a44c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a43a:	4805      	ldr	r0, [pc, #20]	; (800a450 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a43c:	f7ff fd8b 	bl	8009f56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a440:	4b02      	ldr	r3, [pc, #8]	; (800a44c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a442:	4618      	mov	r0, r3
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20000ebc 	.word	0x20000ebc
 800a450:	0800abfc 	.word	0x0800abfc

0800a454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a45a:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <Get_SerialNum+0x44>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a460:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <Get_SerialNum+0x48>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a466:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <Get_SerialNum+0x4c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4413      	add	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a47a:	2208      	movs	r2, #8
 800a47c:	4909      	ldr	r1, [pc, #36]	; (800a4a4 <Get_SerialNum+0x50>)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f814 	bl	800a4ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a484:	2204      	movs	r2, #4
 800a486:	4908      	ldr	r1, [pc, #32]	; (800a4a8 <Get_SerialNum+0x54>)
 800a488:	68b8      	ldr	r0, [r7, #8]
 800a48a:	f000 f80f 	bl	800a4ac <IntToUnicode>
  }
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	1fff7590 	.word	0x1fff7590
 800a49c:	1fff7594 	.word	0x1fff7594
 800a4a0:	1fff7598 	.word	0x1fff7598
 800a4a4:	2000017a 	.word	0x2000017a
 800a4a8:	2000018a 	.word	0x2000018a

0800a4ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	75fb      	strb	r3, [r7, #23]
 800a4c2:	e027      	b.n	800a514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	0f1b      	lsrs	r3, r3, #28
 800a4c8:	2b09      	cmp	r3, #9
 800a4ca:	d80b      	bhi.n	800a4e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0f1b      	lsrs	r3, r3, #28
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	440b      	add	r3, r1
 800a4dc:	3230      	adds	r2, #48	; 0x30
 800a4de:	b2d2      	uxtb	r2, r2
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e00a      	b.n	800a4fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	0f1b      	lsrs	r3, r3, #28
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	440b      	add	r3, r1
 800a4f4:	3237      	adds	r2, #55	; 0x37
 800a4f6:	b2d2      	uxtb	r2, r2
 800a4f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	3301      	adds	r3, #1
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	3301      	adds	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
 800a514:	7dfa      	ldrb	r2, [r7, #23]
 800a516:	79fb      	ldrb	r3, [r7, #7]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d3d3      	bcc.n	800a4c4 <IntToUnicode+0x18>
  }
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
	...

0800a52c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b094      	sub	sp, #80	; 0x50
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a534:	f107 030c 	add.w	r3, r7, #12
 800a538:	2244      	movs	r2, #68	; 0x44
 800a53a:	2100      	movs	r1, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fb2d 	bl	800ab9c <memset>
  if(pcdHandle->Instance==USB)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a15      	ldr	r2, [pc, #84]	; (800a59c <HAL_PCD_MspInit+0x70>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d122      	bne.n	800a592 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a54c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a550:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a552:	2300      	movs	r3, #0
 800a554:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a556:	f107 030c 	add.w	r3, r7, #12
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fa f8de 	bl	800471c <HAL_RCCEx_PeriphCLKConfig>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a566:	f7f7 f84b 	bl	8001600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a56a:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <HAL_PCD_MspInit+0x74>)
 800a56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56e:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <HAL_PCD_MspInit+0x74>)
 800a570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a574:	6593      	str	r3, [r2, #88]	; 0x58
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <HAL_PCD_MspInit+0x74>)
 800a578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a57e:	60bb      	str	r3, [r7, #8]
 800a580:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	2014      	movs	r0, #20
 800a588:	f7f7 fc0b 	bl	8001da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a58c:	2014      	movs	r0, #20
 800a58e:	f7f7 fc22 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a592:	bf00      	nop
 800a594:	3750      	adds	r7, #80	; 0x50
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	40005c00 	.word	0x40005c00
 800a5a0:	40021000 	.word	0x40021000

0800a5a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	f7fe fd2e 	bl	800901c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5da:	78fa      	ldrb	r2, [r7, #3]
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	00db      	lsls	r3, r3, #3
 800a5e6:	440b      	add	r3, r1
 800a5e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f7fe fd68 	bl	80090c6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	440b      	add	r3, r1
 800a61e:	333c      	adds	r3, #60	; 0x3c
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	78fb      	ldrb	r3, [r7, #3]
 800a624:	4619      	mov	r1, r3
 800a626:	f7fe fdb1 	bl	800918c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fec5 	bl	80093d0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a656:	2301      	movs	r3, #1
 800a658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d001      	beq.n	800a666 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a662:	f7f6 ffcd 	bl	8001600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a66c:	7bfa      	ldrb	r2, [r7, #15]
 800a66e:	4611      	mov	r1, r2
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe fe6f 	bl	8009354 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fe1b 	bl	80092b8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe fe6a 	bl	8009374 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d005      	beq.n	800a6b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a8:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <HAL_PCD_SuspendCallback+0x30>)
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	4a03      	ldr	r2, [pc, #12]	; (800a6bc <HAL_PCD_SuspendCallback+0x30>)
 800a6ae:	f043 0306 	orr.w	r3, r3, #6
 800a6b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	e000ed00 	.word	0xe000ed00

0800a6c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	699b      	ldr	r3, [r3, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d007      	beq.n	800a6e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6d0:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <HAL_PCD_ResumeCallback+0x34>)
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	4a07      	ldr	r2, [pc, #28]	; (800a6f4 <HAL_PCD_ResumeCallback+0x34>)
 800a6d6:	f023 0306 	bic.w	r3, r3, #6
 800a6da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6dc:	f000 f9fa 	bl	800aad4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fe5a 	bl	80093a0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	e000ed00 	.word	0xe000ed00

0800a6f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a700:	4a2b      	ldr	r2, [pc, #172]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a29      	ldr	r2, [pc, #164]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a70c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a712:	4a28      	ldr	r2, [pc, #160]	; (800a7b4 <USBD_LL_Init+0xbc>)
 800a714:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a716:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a718:	2208      	movs	r2, #8
 800a71a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a71c:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a71e:	2202      	movs	r2, #2
 800a720:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a722:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a724:	2202      	movs	r2, #2
 800a726:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a728:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a72e:	4b20      	ldr	r3, [pc, #128]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a730:	2200      	movs	r2, #0
 800a732:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a734:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a736:	2200      	movs	r2, #0
 800a738:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a73a:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a740:	481b      	ldr	r0, [pc, #108]	; (800a7b0 <USBD_LL_Init+0xb8>)
 800a742:	f7f7 fd17 	bl	8002174 <HAL_PCD_Init>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a74c:	f7f6 ff58 	bl	8001600 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a756:	2318      	movs	r3, #24
 800a758:	2200      	movs	r2, #0
 800a75a:	2100      	movs	r1, #0
 800a75c:	f7f9 f9d0 	bl	8003b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a766:	2358      	movs	r3, #88	; 0x58
 800a768:	2200      	movs	r2, #0
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	f7f9 f9c8 	bl	8003b00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a776:	23c0      	movs	r3, #192	; 0xc0
 800a778:	2200      	movs	r2, #0
 800a77a:	2181      	movs	r1, #129	; 0x81
 800a77c:	f7f9 f9c0 	bl	8003b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a786:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a78a:	2200      	movs	r2, #0
 800a78c:	2101      	movs	r1, #1
 800a78e:	f7f9 f9b7 	bl	8003b00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a79c:	2200      	movs	r2, #0
 800a79e:	2182      	movs	r1, #130	; 0x82
 800a7a0:	f7f9 f9ae 	bl	8003b00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	200010bc 	.word	0x200010bc
 800a7b4:	40005c00 	.word	0x40005c00

0800a7b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f7 fdb5 	bl	800233e <HAL_PCD_Start>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 f980 	bl	800aae0 <USBD_Get_USB_Status>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	70fb      	strb	r3, [r7, #3]
 800a800:	460b      	mov	r3, r1
 800a802:	70bb      	strb	r3, [r7, #2]
 800a804:	4613      	mov	r3, r2
 800a806:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a816:	78bb      	ldrb	r3, [r7, #2]
 800a818:	883a      	ldrh	r2, [r7, #0]
 800a81a:	78f9      	ldrb	r1, [r7, #3]
 800a81c:	f7f7 fefd 	bl	800261a <HAL_PCD_EP_Open>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f95a 	bl	800aae0 <USBD_Get_USB_Status>
 800a82c:	4603      	mov	r3, r0
 800a82e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a830:	7bbb      	ldrb	r3, [r7, #14]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f7 ff44 	bl	80026e6 <HAL_PCD_EP_Close>
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f93b 	bl	800aae0 <USBD_Get_USB_Status>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a892:	78fa      	ldrb	r2, [r7, #3]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7f8 f805 	bl	80028a6 <HAL_PCD_EP_SetStall>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f91c 	bl	800aae0 <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d0:	78fa      	ldrb	r2, [r7, #3]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7f8 f838 	bl	800294a <HAL_PCD_EP_ClrStall>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f8fd 	bl	800aae0 <USBD_Get_USB_Status>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a906:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da0c      	bge.n	800a92a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	68f9      	ldr	r1, [r7, #12]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	440b      	add	r3, r1
 800a924:	3302      	adds	r3, #2
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	e00b      	b.n	800a942 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	440b      	add	r3, r1
 800a93c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a940:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a968:	78fa      	ldrb	r2, [r7, #3]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7f7 fe2f 	bl	80025d0 <HAL_PCD_SetAddress>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f8b1 	bl	800aae0 <USBD_Get_USB_Status>
 800a97e:	4603      	mov	r3, r0
 800a980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a982:	7bbb      	ldrb	r3, [r7, #14]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	607a      	str	r2, [r7, #4]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	460b      	mov	r3, r1
 800a99a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9aa:	7af9      	ldrb	r1, [r7, #11]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	f7f7 ff36 	bl	8002820 <HAL_PCD_EP_Transmit>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f890 	bl	800aae0 <USBD_Get_USB_Status>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9ec:	7af9      	ldrb	r1, [r7, #11]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	f7f7 fec0 	bl	8002776 <HAL_PCD_EP_Receive>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 f86f 	bl	800aae0 <USBD_Get_USB_Status>
 800aa02:	4603      	mov	r3, r0
 800aa04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa06:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa22:	78fa      	ldrb	r2, [r7, #3]
 800aa24:	4611      	mov	r1, r2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7f7 fee2 	bl	80027f0 <HAL_PCD_EP_GetRxCount>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d002      	beq.n	800aa50 <HAL_PCDEx_LPM_Callback+0x18>
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d013      	beq.n	800aa76 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa4e:	e023      	b.n	800aa98 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa58:	f000 f83c 	bl	800aad4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	4a0f      	ldr	r2, [pc, #60]	; (800aaa0 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa62:	f023 0306 	bic.w	r3, r3, #6
 800aa66:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fc96 	bl	80093a0 <USBD_LL_Resume>
    break;
 800aa74:	e010      	b.n	800aa98 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe fc79 	bl	8009374 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d005      	beq.n	800aa96 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	4a04      	ldr	r2, [pc, #16]	; (800aaa0 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa90:	f043 0306 	orr.w	r3, r3, #6
 800aa94:	6113      	str	r3, [r2, #16]
    break;
 800aa96:	bf00      	nop
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	e000ed00 	.word	0xe000ed00

0800aaa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <USBD_static_malloc+0x18>)
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	200013b0 	.word	0x200013b0

0800aac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]

}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aad8:	f7f6 f9f0 	bl	8000ebc <SystemClock_Config>
}
 800aadc:	bf00      	nop
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d817      	bhi.n	800ab24 <USBD_Get_USB_Status+0x44>
 800aaf4:	a201      	add	r2, pc, #4	; (adr r2, 800aafc <USBD_Get_USB_Status+0x1c>)
 800aaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafa:	bf00      	nop
 800aafc:	0800ab0d 	.word	0x0800ab0d
 800ab00:	0800ab13 	.word	0x0800ab13
 800ab04:	0800ab19 	.word	0x0800ab19
 800ab08:	0800ab1f 	.word	0x0800ab1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab10:	e00b      	b.n	800ab2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab12:	2303      	movs	r3, #3
 800ab14:	73fb      	strb	r3, [r7, #15]
    break;
 800ab16:	e008      	b.n	800ab2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1c:	e005      	b.n	800ab2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	73fb      	strb	r3, [r7, #15]
    break;
 800ab22:	e002      	b.n	800ab2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab24:	2303      	movs	r3, #3
 800ab26:	73fb      	strb	r3, [r7, #15]
    break;
 800ab28:	bf00      	nop
  }
  return usb_status;
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <__libc_init_array>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4d0d      	ldr	r5, [pc, #52]	; (800ab70 <__libc_init_array+0x38>)
 800ab3c:	4c0d      	ldr	r4, [pc, #52]	; (800ab74 <__libc_init_array+0x3c>)
 800ab3e:	1b64      	subs	r4, r4, r5
 800ab40:	10a4      	asrs	r4, r4, #2
 800ab42:	2600      	movs	r6, #0
 800ab44:	42a6      	cmp	r6, r4
 800ab46:	d109      	bne.n	800ab5c <__libc_init_array+0x24>
 800ab48:	4d0b      	ldr	r5, [pc, #44]	; (800ab78 <__libc_init_array+0x40>)
 800ab4a:	4c0c      	ldr	r4, [pc, #48]	; (800ab7c <__libc_init_array+0x44>)
 800ab4c:	f000 f82e 	bl	800abac <_init>
 800ab50:	1b64      	subs	r4, r4, r5
 800ab52:	10a4      	asrs	r4, r4, #2
 800ab54:	2600      	movs	r6, #0
 800ab56:	42a6      	cmp	r6, r4
 800ab58:	d105      	bne.n	800ab66 <__libc_init_array+0x2e>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab60:	4798      	blx	r3
 800ab62:	3601      	adds	r6, #1
 800ab64:	e7ee      	b.n	800ab44 <__libc_init_array+0xc>
 800ab66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6a:	4798      	blx	r3
 800ab6c:	3601      	adds	r6, #1
 800ab6e:	e7f2      	b.n	800ab56 <__libc_init_array+0x1e>
 800ab70:	0800ac1c 	.word	0x0800ac1c
 800ab74:	0800ac1c 	.word	0x0800ac1c
 800ab78:	0800ac1c 	.word	0x0800ac1c
 800ab7c:	0800ac20 	.word	0x0800ac20

0800ab80 <memcpy>:
 800ab80:	440a      	add	r2, r1
 800ab82:	4291      	cmp	r1, r2
 800ab84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab88:	d100      	bne.n	800ab8c <memcpy+0xc>
 800ab8a:	4770      	bx	lr
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab96:	4291      	cmp	r1, r2
 800ab98:	d1f9      	bne.n	800ab8e <memcpy+0xe>
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <memset>:
 800ab9c:	4402      	add	r2, r0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d100      	bne.n	800aba6 <memset+0xa>
 800aba4:	4770      	bx	lr
 800aba6:	f803 1b01 	strb.w	r1, [r3], #1
 800abaa:	e7f9      	b.n	800aba0 <memset+0x4>

0800abac <_init>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr

0800abb8 <_fini>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	bf00      	nop
 800abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abbe:	bc08      	pop	{r3}
 800abc0:	469e      	mov	lr, r3
 800abc2:	4770      	bx	lr
