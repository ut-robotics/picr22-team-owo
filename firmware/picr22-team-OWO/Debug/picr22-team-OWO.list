
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9b8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ab90  0800ab90  0001ab90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe8  0800abe8  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800abe8  0800abe8  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abe8  0800abe8  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abec  0800abec  0001abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800abf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000194  0800ad84  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800ad84  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ec  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362c  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00039ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001666c  00000000  00000000  0005d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6571  00000000  00000000  000736fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00139cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab78 	.word	0x0800ab78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	0800ab78 	.word	0x0800ab78

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <clamp>:

volatile uint8_t isCommandReceived = 0;

volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	429a      	cmp	r2, r3
 800084c:	d901      	bls.n	8000852 <clamp+0x1e>
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	e006      	b.n	8000860 <clamp+0x2c>
	else if (value < min) {return min;}
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d201      	bcs.n	800085e <clamp+0x2a>
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	e000      	b.n	8000860 <clamp+0x2c>
	return value;
 800085e:	88fb      	ldrh	r3, [r7, #6]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b0e      	cmp	r3, #14
 800087c:	d110      	bne.n	80008a0 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 800087e:	220e      	movs	r2, #14
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <CDC_On_Receive+0x3c>)
 8000884:	f00a f962 	bl	800ab4c <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <CDC_On_Receive+0x3c>)
 800088a:	899b      	ldrh	r3, [r3, #12]
 800088c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <CDC_On_Receive+0x40>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <CDC_On_Receive+0x44>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	2000040c 	.word	0x2000040c
 80008b0:	2000040e 	.word	0x2000040e

080008b4 <enc_init>:

// Initialises the encoders
void enc_init() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 80008b8:	2104      	movs	r1, #4
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <enc_init+0x20>)
 80008bc:	f004 fbc4 	bl	8005048 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80008c0:	2104      	movs	r1, #4
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <enc_init+0x24>)
 80008c4:	f004 fbc0 	bl	8005048 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80008c8:	2104      	movs	r1, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <enc_init+0x28>)
 80008cc:	f004 fbbc 	bl	8005048 <HAL_TIM_Encoder_Start>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000294 	.word	0x20000294
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	20000248 	.word	0x20000248

080008e0 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <pwm_init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <pwm_init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <pwm_init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80008f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fa:	f241 3233 	movw	r2, #4915	; 0x1333
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <pwm_init+0x68>)
 8000902:	f241 320b 	movw	r2, #4875	; 0x130b
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <pwm_init+0x68>)
 800090a:	f641 0206 	movw	r2, #6150	; 0x1806
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 30);
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <pwm_init+0x6c>)
 8000914:	f004 f9f2 	bl	8004cfc <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <pwm_init+0x6c>)
 800091c:	f005 fa8a 	bl	8005e34 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <pwm_init+0x6c>)
 8000924:	f005 fa86 	bl	8005e34 <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <pwm_init+0x70>)
 800092c:	f004 f9e6 	bl	8004cfc <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <pwm_init+0x74>)
 8000934:	f004 f9e2 	bl	8004cfc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <pwm_init+0x74>)
 800093c:	f004 f9de 	bl	8004cfc <HAL_TIM_PWM_Start>
    //TIM15->CCR1 = 32000;
    //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013400 	.word	0x40013400
 8000948:	40014000 	.word	0x40014000
 800094c:	2000032c 	.word	0x2000032c
 8000950:	200001fc 	.word	0x200001fc
 8000954:	20000378 	.word	0x20000378

08000958 <motor_status_update>:

// Updates the motor's speed and direction from the command struct
void motor_status_update() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e053      	b.n	8000a0c <motor_status_update+0xb4>
		if (command.speed[i] >= 0) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <motor_status_update+0xc8>)
 8000968:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db23      	blt.n	80009b8 <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	492c      	ldr	r1, [pc, #176]	; (8000a24 <motor_status_update+0xcc>)
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	3302      	adds	r3, #2
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <motor_status_update+0xc8>)
 8000988:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d104      	bne.n	800099a <motor_status_update+0x42>
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <motor_status_update+0xc8>)
 8000994:	2102      	movs	r1, #2
 8000996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <motor_status_update+0xc8>)
 800099e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	b298      	uxth	r0, r3
 80009a6:	491f      	ldr	r1, [pc, #124]	; (8000a24 <motor_status_update+0xcc>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	4602      	mov	r2, r0
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e026      	b.n	8000a06 <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	491a      	ldr	r1, [pc, #104]	; (8000a24 <motor_status_update+0xcc>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	3302      	adds	r3, #2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <motor_status_update+0xc8>)
 80009d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d105      	bne.n	80009e6 <motor_status_update+0x8e>
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <motor_status_update+0xc8>)
 80009de:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80009e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <motor_status_update+0xc8>)
 80009ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	425b      	negs	r3, r3
 80009f4:	b298      	uxth	r0, r3
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <motor_status_update+0xcc>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	4602      	mov	r2, r0
 8000a04:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d9a8      	bls.n	8000964 <motor_status_update+0xc>
		}
	}
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200003c4 	.word	0x200003c4

08000a28 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	4968      	ldr	r1, [pc, #416]	; (8000bd8 <motor_pwm+0x1b0>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d00e      	beq.n	8000a70 <motor_pwm+0x48>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	dc10      	bgt.n	8000a78 <motor_pwm+0x50>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <motor_pwm+0x38>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d004      	beq.n	8000a68 <motor_pwm+0x40>
 8000a5e:	e00b      	b.n	8000a78 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 8000a60:	4b5e      	ldr	r3, [pc, #376]	; (8000bdc <motor_pwm+0x1b4>)
 8000a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a64:	82bb      	strh	r3, [r7, #20]
			break;
 8000a66:	e007      	b.n	8000a78 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000a68:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <motor_pwm+0x1b8>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	82bb      	strh	r3, [r7, #20]
			break;
 8000a6e:	e003      	b.n	8000a78 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 8000a70:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <motor_pwm+0x1bc>)
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	82bb      	strh	r3, [r7, #20]
			break;
 8000a76:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000a78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	4955      	ldr	r1, [pc, #340]	; (8000bd8 <motor_pwm+0x1b0>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	1ac3      	subs	r3, r0, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000aa2:	494d      	ldr	r1, [pc, #308]	; (8000bd8 <motor_pwm+0x1b0>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	3304      	adds	r3, #4
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	801a      	strh	r2, [r3, #0]
	} else if (pos_change > speed*0.6) {
		motor_status[mot_id].enc_change = pos_change;
	}*/

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <motor_pwm+0x1b0>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d111      	bne.n	8000ae0 <motor_pwm+0xb8>
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <motor_pwm+0x1b0>)
 8000abe:	8b1b      	ldrh	r3, [r3, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10d      	bne.n	8000ae0 <motor_pwm+0xb8>
 8000ac4:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <motor_pwm+0x1b0>)
 8000ac6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <motor_pwm+0xb8>
		motor_status[mot_id].integral = 0;
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	4942      	ldr	r1, [pc, #264]	; (8000bd8 <motor_pwm+0x1b0>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	3308      	adds	r3, #8
 8000adc:	2200      	movs	r2, #0
 8000ade:	801a      	strh	r2, [r3, #0]
	}

	int16_t error = speed - motor_status[mot_id].enc_change;
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	493d      	ldr	r1, [pc, #244]	; (8000bd8 <motor_pwm+0x1b0>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	3306      	adds	r3, #6
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	8a3a      	ldrh	r2, [r7, #16]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	81bb      	strh	r3, [r7, #12]

	motor_status[mot_id].integral += error;
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	4935      	ldr	r1, [pc, #212]	; (8000bd8 <motor_pwm+0x1b0>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	89bb      	ldrh	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	b218      	sxth	r0, r3
 8000b1e:	492e      	ldr	r1, [pc, #184]	; (8000bd8 <motor_pwm+0x1b0>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	440b      	add	r3, r1
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].integral = 0;
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	4929      	ldr	r1, [pc, #164]	; (8000bd8 <motor_pwm+0x1b0>)
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3308      	adds	r3, #8
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = error * 1 + (int16_t)(motor_status[mot_id].integral * 0.1);
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4924      	ldr	r1, [pc, #144]	; (8000bd8 <motor_pwm+0x1b0>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	3308      	adds	r3, #8
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fdd9 	bl	8000710 <__aeabi_i2d>
 8000b5e:	a31c      	add	r3, pc, #112	; (adr r3, 8000bd0 <motor_pwm+0x1a8>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	f7ff fb58 	bl	8000218 <__aeabi_dmul>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff fe38 	bl	80007e4 <__aeabi_d2iz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {
 8000b82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da01      	bge.n	8000b8e <motor_pwm+0x166>
		pid_speed = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	827b      	strh	r3, [r7, #18]
	}

	if (speed > 0) {
 8000b8e:	8a3b      	ldrh	r3, [r7, #16]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d011      	beq.n	8000bb8 <motor_pwm+0x190>
		pwm = 4500 + pid_speed * 350; // Effectively linear
 8000b94:	8a7b      	ldrh	r3, [r7, #18]
 8000b96:	461a      	mov	r2, r3
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	0091      	lsls	r1, r2, #2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	00d2      	lsls	r2, r2, #3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000bb4:	3314      	adds	r3, #20
 8000bb6:	82fb      	strh	r3, [r7, #22]
	}

	if (pwm > 49151) { // emergency limiter, set to 75% currently (49151)
 8000bb8:	8afb      	ldrh	r3, [r7, #22]
 8000bba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000bbe:	d302      	bcc.n	8000bc6 <motor_pwm+0x19e>
		pwm = 49151;
 8000bc0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000bc4:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 8000bc6:	8afb      	ldrh	r3, [r7, #22]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	9999999a 	.word	0x9999999a
 8000bd4:	3fb99999 	.word	0x3fb99999
 8000bd8:	200003c4 	.word	0x200003c4
 8000bdc:	40000400 	.word	0x40000400
 8000be0:	40012c00 	.word	0x40012c00
 8000be4:	40000800 	.word	0x40000800

08000be8 <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d018      	beq.n	8000c2a <motor_direction+0x42>
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	dc1f      	bgt.n	8000c3c <motor_direction+0x54>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <motor_direction+0x1e>
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d009      	beq.n	8000c18 <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000c04:	e01a      	b.n	8000c3c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <motor_direction+0x5c>)
 8000c08:	789b      	ldrb	r3, [r3, #2]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fa7d 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c16:	e011      	b.n	8000c3c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <motor_direction+0x5c>)
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2120      	movs	r1, #32
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f001 fa74 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c28:	e008      	b.n	8000c3c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <motor_direction+0x5c>)
 8000c2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c30:	461a      	mov	r2, r3
 8000c32:	2110      	movs	r1, #16
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <motor_direction+0x60>)
 8000c36:	f001 fa6b 	bl	8002110 <HAL_GPIO_WritePin>
			break;
 8000c3a:	bf00      	nop
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200003c4 	.word	0x200003c4
 8000c48:	48000400 	.word	0x48000400

08000c4c <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	2108      	movs	r1, #8
 8000c56:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <wake_drivers_up+0x58>)
 8000c58:	f001 fa5a 	bl	8002110 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	80fb      	strh	r3, [r7, #6]
 8000c60:	e003      	b.n	8000c6a <wake_drivers_up+0x1e>
 8000c62:	bf00      	nop
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	3301      	adds	r3, #1
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c70:	d3f7      	bcc.n	8000c62 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <wake_drivers_up+0x58>)
 8000c78:	f001 fa4a 	bl	8002110 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	80bb      	strh	r3, [r7, #4]
 8000c80:	e003      	b.n	8000c8a <wake_drivers_up+0x3e>
 8000c82:	bf00      	nop
 8000c84:	88bb      	ldrh	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c90:	d3f7      	bcc.n	8000c82 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <wake_drivers_up+0x58>)
 8000c98:	f001 fa3a 	bl	8002110 <HAL_GPIO_WritePin>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <thrower_pwm>:
// Currently abandoned.
void thrower_pwm(uint16_t thrower_speed) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);					// Stop transmitting previous thrower value
	return;
 8000cb2:	bf00      	nop
			thrower_data[15-i] = 399;
		}
	}
	//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 20); // Each pulse draws takes its length from array
}
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_TIM_PeriodElapsedCallback>:

// 100 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!

	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000cc8:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	2b31      	cmp	r3, #49	; 0x31
 8000cd0:	d912      	bls.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000cd8:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce8:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cf0:	f241 320b 	movw	r2, #4875	; 0x130b
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8000cf6:	e04c      	b.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fe95 	bl	8000a28 <motor_pwm>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fe8e 	bl	8000a28 <motor_pwm>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000d14:	2002      	movs	r0, #2
 8000d16:	f7ff fe87 	bl	8000a28 <motor_pwm>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff60 	bl	8000be8 <motor_direction>
	motor_direction(1); // Motor 2
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff5d 	bl	8000be8 <motor_direction>
	motor_direction(2); // Motor 3
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f7ff ff5a 	bl	8000be8 <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d36:	88db      	ldrh	r3, [r3, #6]
 8000d38:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d3c:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fd77 	bl	8000834 <clamp>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d52:	891b      	ldrh	r3, [r3, #8]
 8000d54:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d58:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fd69 	bl	8000834 <clamp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d6c:	895b      	ldrh	r3, [r3, #10]
 8000d6e:	f641 0206 	movw	r2, #6150	; 0x1806
 8000d72:	f241 215c 	movw	r1, #4700	; 0x125c
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd5c 	bl	8000834 <clamp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d90:	801a      	strh	r2, [r3, #0]
}
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000040e 	.word	0x2000040e
 8000d9c:	40013400 	.word	0x40013400
 8000da0:	40014000 	.word	0x40014000
 8000da4:	20000000 	.word	0x20000000

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f000 fe72 	bl	8001a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f86b 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 fb8b 	bl	80014d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dba:	f000 f90f 	bl	8000fdc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dbe:	f000 f967 	bl	8001090 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dc2:	f000 f8b1 	bl	8000f28 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dc6:	f000 f9b9 	bl	800113c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000dca:	f000 fa43 	bl	8001254 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000dce:	f000 faed 	bl	80013ac <MX_TIM15_Init>
  MX_TIM6_Init();
 8000dd2:	f000 fa09 	bl	80011e8 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000dd6:	f009 f985 	bl	800a0e4 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000dea:	81fb      	strh	r3, [r7, #14]
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	4822      	ldr	r0, [pc, #136]	; (8000e78 <main+0xd0>)
 8000dee:	f003 fec3 	bl	8004b78 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f000 fec0 	bl	8001b78 <HAL_Delay>
  enc_init();
 8000df8:	f7ff fd5c 	bl	80008b4 <enc_init>
  pwm_init();
 8000dfc:	f7ff fd70 	bl	80008e0 <pwm_init>
  wake_drivers_up();
 8000e00:	f7ff ff24 	bl	8000c4c <wake_drivers_up>
  thrower_pwm(0);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff ff4f 	bl	8000ca8 <thrower_pwm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <main+0xd4>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0fa      	beq.n	8000e0a <main+0x62>
    	isCommandReceived = 0;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <main+0xd4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000e1a:	f7ff ff17 	bl	8000c4c <wake_drivers_up>
    	motor_status_update();
 8000e1e:	f7ff fd9b 	bl	8000958 <motor_status_update>
    	thrower_pwm(command.thrower_speed);
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0xd8>)
 8000e24:	88db      	ldrh	r3, [r3, #6]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff3e 	bl	8000ca8 <thrower_pwm>

		feedback.speed[0] = motor_status[0].target_speed;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <main+0xdc>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <main+0xdc>)
 8000e36:	8b1b      	ldrh	r3, [r3, #24]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <main+0xdc>)
 8000e3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <main+0xdc>)
 8000e46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e4a:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <main+0xdc>)
 8000e4e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e52:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <main+0xdc>)
 8000e56:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000e5a:	817b      	strh	r3, [r7, #10]
		//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!

		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <main+0xe0>)
 8000e60:	f001 f93e 	bl	80020e0 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	81bb      	strh	r3, [r7, #12]
		// This doesn't work lol
		//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, HAL_GPIO_ReadPin(INFR_GPIO_Port, INFR_Pin));

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f009 f9fa 	bl	800a268 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000e74:	e7c9      	b.n	8000e0a <main+0x62>
 8000e76:	bf00      	nop
 8000e78:	200002e0 	.word	0x200002e0
 8000e7c:	2000040c 	.word	0x2000040c
 8000e80:	20000000 	.word	0x20000000
 8000e84:	200003c4 	.word	0x200003c4
 8000e88:	48001400 	.word	0x48001400

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	2238      	movs	r2, #56	; 0x38
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f009 fe64 	bl	800ab68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f002 fe7a 	bl	8003ba8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000eb4:	2322      	movs	r3, #34	; 0x22
 8000eb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebe:	2340      	movs	r3, #64	; 0x40
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 ff02 	bl	8003cf0 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ef2:	f000 fb6d 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2303      	movs	r3, #3
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fa06 	bl	8004320 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f1a:	f000 fb59 	bl	80015d0 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	; 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2224      	movs	r2, #36	; 0x24
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 fe16 	bl	800ab68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f48:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_TIM1_Init+0xb0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000f9e:	f003 ffad 	bl	8004efc <HAL_TIM_Encoder_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fa8:	f000 fb12 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_TIM1_Init+0xac>)
 8000fbe:	f004 ffed 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000fc8:	f000 fb02 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	40012c00 	.word	0x40012c00

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_TIM2_Init+0xb0>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_TIM2_Init+0xb0>)
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_TIM2_Init+0xb0>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_TIM2_Init+0xb0>)
 8001016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_TIM2_Init+0xb0>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_TIM2_Init+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM2_Init+0xb0>)
 800102a:	f003 fe0f 	bl	8004c4c <HAL_TIM_PWM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001034:	f000 facc 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_TIM2_Init+0xb0>)
 8001048:	f004 ffa8 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001052:	f000 fabd 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM2_Init+0xb0>)
 800106e:	f004 f9f9 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001078:	f000 faaa 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM2_Init+0xb0>)
 800107e:	f000 fbe3 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001fc 	.word	0x200001fc

08001090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2224      	movs	r2, #36	; 0x24
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fd62 	bl	800ab68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <MX_TIM3_Init+0xa8>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_TIM3_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010dc:	2301      	movs	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM3_Init+0xa4>)
 8001100:	f003 fefc 	bl	8004efc <HAL_TIM_Encoder_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800110a:	f000 fa61 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM3_Init+0xa4>)
 800111c:	f004 ff3e 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001126:	f000 fa53 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000248 	.word	0x20000248
 8001138:	40000400 	.word	0x40000400

0800113c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f009 fd0c 	bl	800ab68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_TIM4_Init+0xa4>)
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <MX_TIM4_Init+0xa8>)
 800115e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_TIM4_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_TIM4_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM4_Init+0xa4>)
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM4_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM4_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001180:	2301      	movs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001198:	2301      	movs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_TIM4_Init+0xa4>)
 80011ac:	f003 fea6 	bl	8004efc <HAL_TIM_Encoder_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011b6:	f000 fa0b 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM4_Init+0xa4>)
 80011c8:	f004 fee8 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011d2:	f000 f9fd 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000294 	.word	0x20000294
 80011e4:	40000800 	.word	0x40000800

080011e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_TIM6_Init+0x64>)
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <MX_TIM6_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_TIM6_Init+0x64>)
 8001200:	222f      	movs	r2, #47	; 0x2f
 8001202:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_TIM6_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_TIM6_Init+0x64>)
 800120c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001210:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_TIM6_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM6_Init+0x64>)
 800121a:	f003 fc55 	bl	8004ac8 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001224:	f000 f9d4 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM6_Init+0x64>)
 8001236:	f004 feb1 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 f9c6 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002e0 	.word	0x200002e0
 8001250:	40001000 	.word	0x40001000

08001254 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b098      	sub	sp, #96	; 0x60
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2234      	movs	r2, #52	; 0x34
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f009 fc71 	bl	800ab68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <MX_TIM8_Init+0x150>)
 8001288:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <MX_TIM8_Init+0x154>)
 800128a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <MX_TIM8_Init+0x150>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_TIM8_Init+0x150>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001298:	4b42      	ldr	r3, [pc, #264]	; (80013a4 <MX_TIM8_Init+0x150>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b40      	ldr	r3, [pc, #256]	; (80013a4 <MX_TIM8_Init+0x150>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <MX_TIM8_Init+0x150>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_TIM8_Init+0x150>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012b2:	483c      	ldr	r0, [pc, #240]	; (80013a4 <MX_TIM8_Init+0x150>)
 80012b4:	f003 fcca 	bl	8004c4c <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80012be:	f000 f987 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d2:	4619      	mov	r1, r3
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <MX_TIM8_Init+0x150>)
 80012d6:	f004 fe61 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80012e0:	f000 f976 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e4:	2360      	movs	r3, #96	; 0x60
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f0:	2300      	movs	r3, #0
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001300:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	4826      	ldr	r0, [pc, #152]	; (80013a4 <MX_TIM8_Init+0x150>)
 800130a:	f004 f8ab 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001314:	f000 f95c 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800131c:	2204      	movs	r2, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_TIM8_Init+0x150>)
 8001322:	f004 f89f 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 800132c:	f000 f950 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001334:	2208      	movs	r2, #8
 8001336:	4619      	mov	r1, r3
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_TIM8_Init+0x150>)
 800133a:	f004 f893 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001344:	f000 f944 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800136e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM8_Init+0x150>)
 8001386:	f004 fe8b 	bl	80060a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001390:	f000 f91e 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM8_Init+0x150>)
 8001396:	f000 fa57 	bl	8001848 <HAL_TIM_MspPostInit>

}
 800139a:	bf00      	nop
 800139c:	3760      	adds	r7, #96	; 0x60
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000032c 	.word	0x2000032c
 80013a8:	40013400 	.word	0x40013400

080013ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b098      	sub	sp, #96	; 0x60
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2234      	movs	r2, #52	; 0x34
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 fbc5 	bl	800ab68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80013e0:	4a3a      	ldr	r2, [pc, #232]	; (80014cc <MX_TIM15_Init+0x120>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80013f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MX_TIM15_Init+0x11c>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <MX_TIM15_Init+0x11c>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800140a:	482f      	ldr	r0, [pc, #188]	; (80014c8 <MX_TIM15_Init+0x11c>)
 800140c:	f003 fc1e 	bl	8004c4c <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 f8db 	bl	80015d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001426:	4619      	mov	r1, r3
 8001428:	4827      	ldr	r0, [pc, #156]	; (80014c8 <MX_TIM15_Init+0x11c>)
 800142a:	f004 fdb7 	bl	8005f9c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 f8cc 	bl	80015d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <MX_TIM15_Init+0x11c>)
 800145e:	f004 f801 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001468:	f000 f8b2 	bl	80015d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800146c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001470:	2204      	movs	r2, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <MX_TIM15_Init+0x11c>)
 8001476:	f003 fff5 	bl	8005464 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001480:	f000 f8a6 	bl	80015d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80014ac:	f004 fdf8 	bl	80060a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80014b6:	f000 f88b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM15_Init+0x11c>)
 80014bc:	f000 f9c4 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80014c0:	bf00      	nop
 80014c2:	3760      	adds	r7, #96	; 0x60
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000378 	.word	0x20000378
 80014cc:	40014000 	.word	0x40014000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <MX_GPIO_Init+0xf4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <MX_GPIO_Init+0xf4>)
 80014ec:	f043 0320 	orr.w	r3, r3, #32
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <MX_GPIO_Init+0xf4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_GPIO_Init+0xf4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <MX_GPIO_Init+0xf4>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_GPIO_Init+0xf4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_GPIO_Init+0xf4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <MX_GPIO_Init+0xf4>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <MX_GPIO_Init+0xf4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	4825      	ldr	r0, [pc, #148]	; (80015c8 <MX_GPIO_Init+0xf8>)
 8001534:	f000 fdec 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	21a2      	movs	r1, #162	; 0xa2
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f000 fde6 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2118      	movs	r1, #24
 8001548:	4820      	ldr	r0, [pc, #128]	; (80015cc <MX_GPIO_Init+0xfc>)
 800154a:	f000 fde1 	bl	8002110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800154e:	2301      	movs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_GPIO_Init+0xf8>)
 8001566:	f000 fc39 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 800156a:	2302      	movs	r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4812      	ldr	r0, [pc, #72]	; (80015c8 <MX_GPIO_Init+0xf8>)
 800157e:	f000 fc2d 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8001582:	23a2      	movs	r3, #162	; 0xa2
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f000 fc1e 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 80015a0:	2318      	movs	r3, #24
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_GPIO_Init+0xfc>)
 80015b8:	f000 fc10 	bl	8001ddc <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	48000400 	.word	0x48000400

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_MspInit+0x44>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <HAL_MspInit+0x44>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6613      	str	r3, [r2, #96]	; 0x60
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_MspInit+0x44>)
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_MspInit+0x44>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6593      	str	r3, [r2, #88]	; 0x58
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_MspInit+0x44>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	; 0x38
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_TIM_Encoder_MspInit+0x138>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12a      	bne.n	800169c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	4a45      	ldr	r2, [pc, #276]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 800164c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001650:	6613      	str	r3, [r2, #96]	; 0x60
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001688:	2306      	movs	r3, #6
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f000 fba1 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800169a:	e05b      	b.n	8001754 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a30      	ldr	r2, [pc, #192]	; (8001764 <HAL_TIM_Encoder_MspInit+0x140>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d129      	bne.n	80016fa <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 80016d6:	2350      	movs	r3, #80	; 0x50
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e6:	2302      	movs	r3, #2
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f000 fb72 	bl	8001ddc <HAL_GPIO_Init>
}
 80016f8:	e02c      	b.n	8001754 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_TIM_Encoder_MspInit+0x144>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d127      	bne.n	8001754 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001722:	f043 0302 	orr.w	r3, r3, #2
 8001726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_TIM_Encoder_MspInit+0x13c>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 8001734:	23c0      	movs	r3, #192	; 0xc0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001744:	2302      	movs	r3, #2
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <HAL_TIM_Encoder_MspInit+0x148>)
 8001750:	f000 fb44 	bl	8001ddc <HAL_GPIO_Init>
}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	; 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40000400 	.word	0x40000400
 8001768:	40000800 	.word	0x40000800
 800176c:	48000400 	.word	0x48000400

08001770 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001780:	d10c      	bne.n	800179c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800179a:	e022      	b.n	80017e2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_TIM_PWM_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10c      	bne.n	80017c0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b0:	6613      	str	r3, [r2, #96]	; 0x60
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
}
 80017be:	e010      	b.n	80017e2 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_TIM_PWM_MspInit+0x88>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_TIM_PWM_MspInit+0x80>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	bf00      	nop
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40013400 	.word	0x40013400
 80017f8:	40014000 	.word	0x40014000

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_TIM_Base_MspInit+0x44>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d113      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f000 faa1 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001830:	2036      	movs	r0, #54	; 0x36
 8001832:	f000 fab8 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40001000 	.word	0x40001000
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d11d      	bne.n	80018a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a49      	ldr	r2, [pc, #292]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 8001882:	2301      	movs	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001892:	2301      	movs	r3, #1
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fa9c 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018a4:	e071      	b.n	800198a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_TIM_MspPostInit+0x150>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d14a      	bne.n	8001946 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	4a37      	ldr	r2, [pc, #220]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	4a31      	ldr	r2, [pc, #196]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80018f0:	2304      	movs	r3, #4
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4828      	ldr	r0, [pc, #160]	; (800199c <HAL_TIM_MspPostInit+0x154>)
 80018fc:	f000 fa6e 	bl	8001ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001900:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001912:	2302      	movs	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f000 fa5c 	bl	8001ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8001924:	2320      	movs	r3, #32
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001934:	2303      	movs	r3, #3
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4817      	ldr	r0, [pc, #92]	; (800199c <HAL_TIM_MspPostInit+0x154>)
 8001940:	f000 fa4c 	bl	8001ddc <HAL_GPIO_Init>
}
 8001944:	e021      	b.n	800198a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_TIM_MspPostInit+0x158>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d11c      	bne.n	800198a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_MspPostInit+0x14c>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 8001968:	230c      	movs	r3, #12
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001978:	2309      	movs	r3, #9
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f000 fa29 	bl	8001ddc <HAL_GPIO_Init>
}
 800198a:	bf00      	nop
 800198c:	3730      	adds	r7, #48	; 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	40013400 	.word	0x40013400
 800199c:	48000400 	.word	0x48000400
 80019a0:	40014000 	.word	0x40014000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f0:	f000 f8a4 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USB_LP_IRQHandler+0x10>)
 80019fe:	f000 fca6 	bl	800234e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200010b8 	.word	0x200010b8

08001a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM6_DAC_IRQHandler+0x10>)
 8001a12:	f003 fba7 	bl	8005164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002e0 	.word	0x200002e0

08001a20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	; (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <LoopForever+0x2>)
 8001a46:	4685      	mov	sp, r0
 8001a48:	480d      	ldr	r0, [pc, #52]	; (8001a80 <LoopForever+0x6>)
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <LoopForever+0xa>)
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <LoopForever+0xe>)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e002      	b.n	8001a58 <LoopCopyDataInit>

08001a52 <CopyDataInit>:
 8001a52:	58d4      	ldr	r4, [r2, r3]
 8001a54:	50c4      	str	r4, [r0, r3]
 8001a56:	3304      	adds	r3, #4

08001a58 <LoopCopyDataInit>:
 8001a58:	18c4      	adds	r4, r0, r3
 8001a5a:	428c      	cmp	r4, r1
 8001a5c:	d3f9      	bcc.n	8001a52 <CopyDataInit>
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <LoopForever+0x12>)
 8001a60:	4c0b      	ldr	r4, [pc, #44]	; (8001a90 <LoopForever+0x16>)
 8001a62:	2300      	movs	r3, #0
 8001a64:	e001      	b.n	8001a6a <LoopFillZerobss>

08001a66 <FillZerobss>:
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	3204      	adds	r2, #4

08001a6a <LoopFillZerobss>:
 8001a6a:	42a2      	cmp	r2, r4
 8001a6c:	d3fb      	bcc.n	8001a66 <FillZerobss>
 8001a6e:	f7ff ffd7 	bl	8001a20 <SystemInit>
 8001a72:	f009 f847 	bl	800ab04 <__libc_init_array>
 8001a76:	f7ff f997 	bl	8000da8 <main>

08001a7a <LoopForever>:
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
 8001a7c:	20008000 	.word	0x20008000
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000194 	.word	0x20000194
 8001a88:	0800abf0 	.word	0x0800abf0
 8001a8c:	20000194 	.word	0x20000194
 8001a90:	200015cc 	.word	0x200015cc

08001a94 <ADC1_2_IRQHandler>:
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>

08001a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f000 f95b 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f000 f80e 	bl	8001ac8 <HAL_InitTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	e001      	b.n	8001abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab8:	f7ff fd90 	bl	80015dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001abc:	79fb      	ldrb	r3, [r7, #7]

}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_InitTick+0x68>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d022      	beq.n	8001b22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_InitTick+0x6c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_InitTick+0x68>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f966 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	d809      	bhi.n	8001b16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b02:	2200      	movs	r2, #0
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0a:	f000 f932 	bl	8001d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0x70>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	e004      	b.n	8001b26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e001      	b.n	8001b26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000018 	.word	0x20000018
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000014 	.word	0x20000014

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_IncTick+0x1c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_IncTick+0x20>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <HAL_IncTick+0x1c>)
 8001b4c:	6013      	str	r3, [r2, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	20000410 	.word	0x20000410
 8001b5c:	20000018 	.word	0x20000018

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000410 	.word	0x20000410

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d004      	beq.n	8001b9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_Delay+0x40>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b9c:	bf00      	nop
 8001b9e:	f7ff ffdf 	bl	8001b60 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d8f7      	bhi.n	8001b9e <HAL_Delay+0x26>
  {
  }
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000018 	.word	0x20000018

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff40 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff33 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffa4 	bl	8001d18 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dea:	e15a      	b.n	80020a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 814c 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0201 	and.w	r2, r3, #1
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d123      	bne.n	8001f0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80a6 	beq.w	800209c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f50:	4b5b      	ldr	r3, [pc, #364]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f54:	4a5a      	ldr	r2, [pc, #360]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <HAL_GPIO_Init+0x2e4>)
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f68:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f92:	d01f      	beq.n	8001fd4 <HAL_GPIO_Init+0x1f8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d019      	beq.n	8001fd0 <HAL_GPIO_Init+0x1f4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4b      	ldr	r2, [pc, #300]	; (80020cc <HAL_GPIO_Init+0x2f0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1f0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_GPIO_Init+0x2f4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x2f8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2fc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	e00a      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	e008      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1fa>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_GPIO_Init+0x300>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002018:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_GPIO_Init+0x300>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002042:	4a26      	ldr	r2, [pc, #152]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_GPIO_Init+0x300>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206c:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_GPIO_Init+0x300>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_GPIO_Init+0x300>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae9d 	bne.w	8001dec <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800212c:	e002      	b.n	8002134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af06      	add	r7, sp, #24
 8002146:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0d7      	b.n	8002302 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f008 f9c6 	bl	800a4f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 f8b3 	bl	80062e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	e04c      	b.n	800221e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3301      	adds	r3, #1
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	7bfa      	ldrb	r2, [r7, #15]
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	b298      	uxth	r0, r3
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	3336      	adds	r3, #54	; 0x36
 80021c2:	4602      	mov	r2, r0
 80021c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3303      	adds	r3, #3
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3338      	adds	r3, #56	; 0x38
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	333c      	adds	r3, #60	; 0x3c
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	3340      	adds	r3, #64	; 0x40
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	3301      	adds	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d3ad      	bcc.n	8002184 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e044      	b.n	80022b8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	3301      	adds	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3b5      	bcc.n	800222e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	687e      	ldr	r6, [r7, #4]
 80022ca:	466d      	mov	r5, sp
 80022cc:	f106 0410 	add.w	r4, r6, #16
 80022d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	1d33      	adds	r3, r6, #4
 80022da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f004 f81c 	bl	800631a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f001 fc29 	bl	8003b52 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800230a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_PCD_Start+0x16>
 800231c:	2302      	movs	r3, #2
 800231e:	e012      	b.n	8002346 <HAL_PCD_Start+0x3c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 ffc2 	bl	80062b6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f006 f9da 	bl	80086f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f006 f9df 	bl	800871e <USB_ReadInterrupts>
 8002360:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb26 	bl	80029be <PCD_EP_ISR_Handler>

    return;
 8002372:	e110      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002390:	b292      	uxth	r2, r2
 8002392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f008 f93f 	bl	800a61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800239c:	2100      	movs	r1, #0
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8fc 	bl	800259c <HAL_PCD_SetAddress>

    return;
 80023a4:	e0f7      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00c      	beq.n	80023ca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023c2:	b292      	uxth	r2, r2
 80023c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023c8:	e0e5      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00c      	beq.n	80023ee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023dc:	b29a      	uxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023ec:	e0d3      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d034      	beq.n	8002462 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	b292      	uxth	r2, r2
 800240c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0208 	bic.w	r2, r2, #8
 8002422:	b292      	uxth	r2, r2
 8002424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f008 fae1 	bl	800aa04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f008 f922 	bl	800a68c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800245a:	b292      	uxth	r2, r2
 800245c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002460:	e099      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002468:	2b00      	cmp	r3, #0
 800246a:	d027      	beq.n	80024bc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	b292      	uxth	r2, r2
 8002480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	b292      	uxth	r2, r2
 8002498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0204 	orr.w	r2, r2, #4
 80024ae:	b292      	uxth	r2, r2
 80024b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f008 f8cf 	bl	800a658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024ba:	e06c      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d040      	beq.n	8002548 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d8:	b292      	uxth	r2, r2
 80024da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d12b      	bne.n	8002540 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0204 	orr.w	r2, r2, #4
 80024fa:	b292      	uxth	r2, r2
 80024fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	b292      	uxth	r2, r2
 8002514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002528:	b29b      	uxth	r3, r3
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002536:	2101      	movs	r1, #1
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f008 fa63 	bl	800aa04 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800253e:	e02a      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f008 f889 	bl	800a658 <HAL_PCD_SuspendCallback>
    return;
 8002546:	e026      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00f      	beq.n	8002572 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002564:	b292      	uxth	r2, r2
 8002566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f008 f847 	bl	800a5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002570:	e011      	b.n	8002596 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00c      	beq.n	8002596 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002584:	b29a      	uxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800258e:	b292      	uxth	r2, r2
 8002590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002594:	bf00      	nop
  }
}
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_PCD_SetAddress+0x1a>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e013      	b.n	80025de <HAL_PCD_SetAddress+0x42>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f006 f87a 	bl	80086c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	4608      	mov	r0, r1
 80025f0:	4611      	mov	r1, r2
 80025f2:	461a      	mov	r2, r3
 80025f4:	4603      	mov	r3, r0
 80025f6:	70fb      	strb	r3, [r7, #3]
 80025f8:	460b      	mov	r3, r1
 80025fa:	803b      	strh	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002608:	2b00      	cmp	r3, #0
 800260a:	da0e      	bge.n	800262a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	705a      	strb	r2, [r3, #1]
 8002628:	e00e      	b.n	8002648 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	f003 0207 	and.w	r2, r3, #7
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002654:	883a      	ldrh	r2, [r7, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	78ba      	ldrb	r2, [r7, #2]
 800265e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002672:	78bb      	ldrb	r3, [r7, #2]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d102      	bne.n	800267e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_PCD_EP_Open+0xa6>
 8002688:	2302      	movs	r3, #2
 800268a:	e00e      	b.n	80026aa <HAL_PCD_EP_Open+0xc4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fe5e 	bl	800635c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80026a8:	7afb      	ldrb	r3, [r7, #11]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da0e      	bge.n	80026e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	705a      	strb	r2, [r3, #1]
 80026e2:	e00e      	b.n	8002702 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_PCD_EP_Close+0x6a>
 8002718:	2302      	movs	r3, #2
 800271a:	e00e      	b.n	800273a <HAL_PCD_EP_Close+0x88>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68f9      	ldr	r1, [r7, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 f9aa 	bl	8006a84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	460b      	mov	r3, r1
 8002750:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002752:	7afb      	ldrb	r3, [r7, #11]
 8002754:	f003 0207 	and.w	r2, r3, #7
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2200      	movs	r2, #0
 8002780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	b2da      	uxtb	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6979      	ldr	r1, [r7, #20]
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fb5d 	bl	8006e5e <USB_EPStartXfer>
 80027a4:	e005      	b.n	80027b2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6979      	ldr	r1, [r7, #20]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fb56 	bl	8006e5e <USB_EPStartXfer>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	f003 0207 	and.w	r2, r3, #7
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	7afb      	ldrb	r3, [r7, #11]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2201      	movs	r2, #1
 8002836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	b2da      	uxtb	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6979      	ldr	r1, [r7, #20]
 8002854:	4618      	mov	r0, r3
 8002856:	f004 fb02 	bl	8006e5e <USB_EPStartXfer>
 800285a:	e005      	b.n	8002868 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fafb 	bl	8006e5e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 0207 	and.w	r2, r3, #7
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	d901      	bls.n	8002890 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e03e      	b.n	800290e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0e      	bge.n	80028b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
 80028b4:	e00c      	b.n	80028d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_EP_SetStall+0x7e>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e00e      	b.n	800290e <HAL_PCD_EP_SetStall+0x9c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	4618      	mov	r0, r3
 8002900:	f005 fde3 	bl	80084ca <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	d901      	bls.n	8002934 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e040      	b.n	80029b6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da0e      	bge.n	800295a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	705a      	strb	r2, [r3, #1]
 8002958:	e00e      	b.n	8002978 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 0207 	and.w	r2, r3, #7
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_PCD_EP_ClrStall+0x82>
 8002994:	2302      	movs	r3, #2
 8002996:	e00e      	b.n	80029b6 <HAL_PCD_EP_ClrStall+0xa0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fde0 	bl	800856c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b096      	sub	sp, #88	; 0x58
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029c6:	e39c      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80029e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 815e 	bne.w	8002ca8 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d150      	bne.n	8002a9a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	81fb      	strh	r3, [r7, #14]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	89fb      	ldrh	r3, [r7, #14]
 8002a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3328      	adds	r3, #40	; 0x28
 8002a20:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a48:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	441a      	add	r2, r3
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f007 fdb5 	bl	800a5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 834a 	beq.w	8003102 <PCD_EP_ISR_Handler+0x744>
 8002a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 8345 	bne.w	8003102 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a98:	e333      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002aac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ade:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f005 fe65 	bl	80087c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b04:	4013      	ands	r3, r2
 8002b06:	823b      	strh	r3, [r7, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	8a3a      	ldrh	r2, [r7, #16]
 8002b0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b12:	b292      	uxth	r2, r2
 8002b14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f007 fd2a 	bl	800a570 <HAL_PCD_SetupStageCallback>
 8002b1c:	e2f1      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b1e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f280 82ed 	bge.w	8003102 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b34:	4013      	ands	r3, r2
 8002b36:	83fb      	strh	r3, [r7, #30]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	8bfa      	ldrh	r2, [r7, #30]
 8002b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b42:	b292      	uxth	r2, r2
 8002b44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <PCD_EP_ISR_Handler+0x1ec>
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b84:	6959      	ldr	r1, [r3, #20]
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b88:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f005 fe17 	bl	80087c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f007 fcf5 	bl	800a594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 82a3 	bne.w	8003102 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b3e      	cmp	r3, #62	; 0x3e
 8002be2:	d918      	bls.n	8002c16 <PCD_EP_ISR_Handler+0x258>
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <PCD_EP_ISR_Handler+0x240>
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	e029      	b.n	8002c6a <PCD_EP_ISR_Handler+0x2ac>
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d112      	bne.n	8002c44 <PCD_EP_ISR_Handler+0x286>
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	801a      	strh	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e012      	b.n	8002c6a <PCD_EP_ISR_Handler+0x2ac>
 8002c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <PCD_EP_ISR_Handler+0x2a0>
 8002c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	029b      	lsls	r3, r3, #10
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	827b      	strh	r3, [r7, #18]
 8002c7c:	8a7b      	ldrh	r3, [r7, #18]
 8002c7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c82:	827b      	strh	r3, [r7, #18]
 8002c84:	8a7b      	ldrh	r3, [r7, #18]
 8002c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c8a:	827b      	strh	r3, [r7, #18]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	8a7b      	ldrh	r3, [r7, #18]
 8002c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]
 8002ca6:	e22c      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cbc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f280 80f6 	bge.w	8002eb2 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002cdc:	4013      	ands	r3, r2
 8002cde:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cfc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d14:	7b1b      	ldrb	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d123      	bne.n	8002d62 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002d42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 808e 	beq.w	8002e68 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	88da      	ldrh	r2, [r3, #6]
 8002d58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d5c:	f005 fd31 	bl	80087c2 <USB_ReadPMA>
 8002d60:	e082      	b.n	8002e68 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	78db      	ldrb	r3, [r3, #3]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d10a      	bne.n	8002d80 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d6a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9d3 	bl	800311e <HAL_PCD_EP_DB_Receive>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d7e:	e073      	b.n	8002e68 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d022      	beq.n	8002e24 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d02c      	beq.n	8002e68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	6959      	ldr	r1, [r3, #20]
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	891a      	ldrh	r2, [r3, #8]
 8002e1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e1e:	f005 fcd0 	bl	80087c2 <USB_ReadPMA>
 8002e22:	e021      	b.n	8002e68 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	6959      	ldr	r1, [r3, #20]
 8002e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5e:	895a      	ldrh	r2, [r3, #10]
 8002e60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e64:	f005 fcad 	bl	80087c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e70:	441a      	add	r2, r3
 8002e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e7e:	441a      	add	r2, r3
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <PCD_EP_ISR_Handler+0x4da>
 8002e8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d206      	bcs.n	8002ea6 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f007 fb78 	bl	800a594 <HAL_PCD_DataOutStageCallback>
 8002ea4:	e005      	b.n	8002eb2 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 ffd6 	bl	8006e5e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002eb2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8121 	beq.w	8003102 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ec0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	441a      	add	r2, r3
 8002f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f12:	78db      	ldrb	r3, [r3, #3]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f000 80a2 	beq.w	800305e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8093 	beq.w	8003050 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d046      	beq.n	8002fc4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d126      	bne.n	8002f8c <PCD_EP_ISR_Handler+0x5ce>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	4413      	add	r3, r2
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
 8002f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	00da      	lsls	r2, r3, #3
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	4413      	add	r3, r2
 8002f60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e061      	b.n	8003050 <PCD_EP_ISR_Handler+0x692>
 8002f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d15d      	bne.n	8003050 <PCD_EP_ISR_Handler+0x692>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	4413      	add	r3, r2
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	00da      	lsls	r2, r3, #3
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e045      	b.n	8003050 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d126      	bne.n	8003020 <PCD_EP_ISR_Handler+0x662>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe6:	4413      	add	r3, r2
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003004:	b29a      	uxth	r2, r3
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003018:	b29a      	uxth	r2, r3
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	e017      	b.n	8003050 <PCD_EP_ISR_Handler+0x692>
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d113      	bne.n	8003050 <PCD_EP_ISR_Handler+0x692>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	4413      	add	r3, r2
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	00da      	lsls	r2, r3, #3
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	4413      	add	r3, r2
 8003044:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f007 fab7 	bl	800a5ca <HAL_PCD_DataInStageCallback>
 800305c:	e051      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800305e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d144      	bne.n	80030f4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	4413      	add	r3, r2
 8003084:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800308e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800309a:	429a      	cmp	r2, r3
 800309c:	d907      	bls.n	80030ae <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e002      	b.n	80030b4 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 fa81 	bl	800a5ca <HAL_PCD_DataInStageCallback>
 80030c8:	e01b      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030d2:	441a      	add	r2, r3
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030e0:	441a      	add	r2, r3
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 feb6 	bl	8006e5e <USB_EPStartXfer>
 80030f2:	e006      	b.n	8003102 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030f8:	461a      	mov	r2, r3
 80030fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f917 	bl	8003330 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800310a:	b29b      	uxth	r3, r3
 800310c:	b21b      	sxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	f6ff ac5a 	blt.w	80029c8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3758      	adds	r7, #88	; 0x58
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b088      	sub	sp, #32
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	4613      	mov	r3, r2
 800312a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d07c      	beq.n	8003230 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	4413      	add	r3, r2
 8003150:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800315a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	8b7b      	ldrh	r3, [r7, #26]
 8003162:	429a      	cmp	r2, r3
 8003164:	d306      	bcc.n	8003174 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	8b7b      	ldrh	r3, [r7, #26]
 800316c:	1ad2      	subs	r2, r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	619a      	str	r2, [r3, #24]
 8003172:	e002      	b.n	800317a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d123      	bne.n	80031ca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	833b      	strh	r3, [r7, #24]
 800319e:	8b3b      	ldrh	r3, [r7, #24]
 80031a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a4:	833b      	strh	r3, [r7, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	8b3b      	ldrh	r3, [r7, #24]
 80031b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01f      	beq.n	8003214 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	82fb      	strh	r3, [r7, #22]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003210:	b29b      	uxth	r3, r3
 8003212:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8085 	beq.w	8003326 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6959      	ldr	r1, [r3, #20]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	891a      	ldrh	r2, [r3, #8]
 8003228:	8b7b      	ldrh	r3, [r7, #26]
 800322a:	f005 faca 	bl	80087c2 <USB_ReadPMA>
 800322e:	e07a      	b.n	8003326 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003254:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	8b7b      	ldrh	r3, [r7, #26]
 800325c:	429a      	cmp	r2, r3
 800325e:	d306      	bcc.n	800326e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	619a      	str	r2, [r3, #24]
 800326c:	e002      	b.n	8003274 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d123      	bne.n	80032c4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	83fb      	strh	r3, [r7, #30]
 8003298:	8bfb      	ldrh	r3, [r7, #30]
 800329a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800329e:	83fb      	strh	r3, [r7, #30]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	8bfb      	ldrh	r3, [r7, #30]
 80032b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11f      	bne.n	800330e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	83bb      	strh	r3, [r7, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	441a      	add	r2, r3
 80032f8:	8bbb      	ldrh	r3, [r7, #28]
 80032fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6959      	ldr	r1, [r3, #20]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	895a      	ldrh	r2, [r3, #10]
 8003320:	8b7b      	ldrh	r3, [r7, #26]
 8003322:	f005 fa4e 	bl	80087c2 <USB_ReadPMA>
    }
  }

  return count;
 8003326:	8b7b      	ldrh	r3, [r7, #26]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0a2      	sub	sp, #136	; 0x88
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 81c5 	beq.w	80036d4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	4413      	add	r3, r2
 8003364:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800337a:	429a      	cmp	r2, r3
 800337c:	d907      	bls.n	800338e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003386:	1ad2      	subs	r2, r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	619a      	str	r2, [r3, #24]
 800338c:	e002      	b.n	8003394 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f040 80b9 	bne.w	8003510 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d126      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0xc4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	4413      	add	r3, r2
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	00da      	lsls	r2, r3, #3
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	4413      	add	r3, r2
 80033c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033d8:	b29a      	uxth	r2, r3
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	801a      	strh	r2, [r3, #0]
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e01a      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0xfa>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d116      	bne.n	800342a <HAL_PCD_EP_DB_Transmit+0xfa>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	633b      	str	r3, [r7, #48]	; 0x30
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	4413      	add	r3, r2
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	00da      	lsls	r2, r3, #3
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	4413      	add	r3, r2
 800341e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2200      	movs	r2, #0
 8003428:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	623b      	str	r3, [r7, #32]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d126      	bne.n	8003486 <HAL_PCD_EP_DB_Transmit+0x156>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00da      	lsls	r2, r3, #3
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4413      	add	r3, r2
 800345a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29b      	uxth	r3, r3
 8003466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800346a:	b29a      	uxth	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347e:	b29a      	uxth	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	e017      	b.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x186>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785b      	ldrb	r3, [r3, #1]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d113      	bne.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	4413      	add	r3, r2
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00da      	lsls	r2, r3, #3
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4413      	add	r3, r2
 80034aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2200      	movs	r2, #0
 80034b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f007 f884 	bl	800a5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 82d2 	beq.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	827b      	strh	r3, [r7, #18]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8a7b      	ldrh	r3, [r7, #18]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
 800350e:	e2b0      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d021      	beq.n	800355e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003534:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	441a      	add	r2, r3
 8003546:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800354a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355a:	b29b      	uxth	r3, r3
 800355c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8284 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003572:	441a      	add	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003580:	441a      	add	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a1a      	ldr	r2, [r3, #32]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	d309      	bcc.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	621a      	str	r2, [r3, #32]
 80035a4:	e015      	b.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80035ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035bc:	e009      	b.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d155      	bne.n	8003686 <HAL_PCD_EP_DB_Transmit+0x356>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	4413      	add	r3, r2
 80035f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	00da      	lsls	r2, r3, #3
 80035f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fa:	4413      	add	r3, r2
 80035fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
 8003602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003604:	2b3e      	cmp	r3, #62	; 0x3e
 8003606:	d916      	bls.n	8003636 <HAL_PCD_EP_DB_Transmit+0x306>
 8003608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	64bb      	str	r3, [r7, #72]	; 0x48
 800360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800361a:	3b01      	subs	r3, #1
 800361c:	64bb      	str	r3, [r7, #72]	; 0x48
 800361e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003620:	b29b      	uxth	r3, r3
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	b29b      	uxth	r3, r3
 8003626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362e:	b29a      	uxth	r2, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	801a      	strh	r2, [r3, #0]
 8003634:	e043      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x38e>
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	2b00      	cmp	r3, #0
 800363a:	d112      	bne.n	8003662 <HAL_PCD_EP_DB_Transmit+0x332>
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003646:	b29a      	uxth	r2, r3
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365a:	b29a      	uxth	r2, r3
 800365c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e02d      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x38e>
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
 8003668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_PCD_EP_DB_Transmit+0x348>
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	3301      	adds	r3, #1
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	b29b      	uxth	r3, r3
 800367c:	029b      	lsls	r3, r3, #10
 800367e:	b29a      	uxth	r2, r3
 8003680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003682:	801a      	strh	r2, [r3, #0]
 8003684:	e01b      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x38e>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d117      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x38e>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	643b      	str	r3, [r7, #64]	; 0x40
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a2:	4413      	add	r3, r2
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6959      	ldr	r1, [r3, #20]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	891a      	ldrh	r2, [r3, #8]
 80036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f005 f836 	bl	800873e <USB_WritePMA>
 80036d2:	e1ce      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003704:	429a      	cmp	r2, r3
 8003706:	d307      	bcc.n	8003718 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003710:	1ad2      	subs	r2, r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	619a      	str	r2, [r3, #24]
 8003716:	e002      	b.n	800371e <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80c4 	bne.w	80038b0 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d126      	bne.n	800377e <HAL_PCD_EP_DB_Transmit+0x44e>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	66bb      	str	r3, [r7, #104]	; 0x68
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003744:	4413      	add	r3, r2
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	00da      	lsls	r2, r3, #3
 800374e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003750:	4413      	add	r3, r2
 8003752:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003756:	667b      	str	r3, [r7, #100]	; 0x64
 8003758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003762:	b29a      	uxth	r2, r3
 8003764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003776:	b29a      	uxth	r2, r3
 8003778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800377a:	801a      	strh	r2, [r3, #0]
 800377c:	e01a      	b.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x484>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d116      	bne.n	80037b4 <HAL_PCD_EP_DB_Transmit+0x484>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	673b      	str	r3, [r7, #112]	; 0x70
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800379a:	4413      	add	r3, r2
 800379c:	673b      	str	r3, [r7, #112]	; 0x70
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00da      	lsls	r2, r3, #3
 80037a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a6:	4413      	add	r3, r2
 80037a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12f      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037da:	4413      	add	r3, r2
 80037dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	00da      	lsls	r2, r3, #3
 80037e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ea:	4413      	add	r3, r2
 80037ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003800:	b29a      	uxth	r2, r3
 8003802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003806:	801a      	strh	r2, [r3, #0]
 8003808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003818:	b29a      	uxth	r2, r3
 800381a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	e017      	b.n	8003852 <HAL_PCD_EP_DB_Transmit+0x522>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d113      	bne.n	8003852 <HAL_PCD_EP_DB_Transmit+0x522>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003838:	4413      	add	r3, r2
 800383a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	00da      	lsls	r2, r3, #3
 8003842:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003844:	4413      	add	r3, r2
 8003846:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800384a:	67bb      	str	r3, [r7, #120]	; 0x78
 800384c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f006 feb6 	bl	800a5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 8104 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003884:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800389a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800389e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8013      	strh	r3, [r2, #0]
 80038ae:	e0e0      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d121      	bne.n	80038fe <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	441a      	add	r2, r3
 80038e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 80b4 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003912:	441a      	add	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003920:	441a      	add	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d309      	bcc.n	8003946 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	621a      	str	r2, [r3, #32]
 8003944:	e015      	b.n	8003972 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800394e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003952:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800395c:	e009      	b.n	8003972 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	663b      	str	r3, [r7, #96]	; 0x60
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d155      	bne.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	65bb      	str	r3, [r7, #88]	; 0x58
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003994:	4413      	add	r3, r2
 8003996:	65bb      	str	r3, [r7, #88]	; 0x58
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	00da      	lsls	r2, r3, #3
 800399e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a0:	4413      	add	r3, r2
 80039a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039a6:	657b      	str	r3, [r7, #84]	; 0x54
 80039a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039aa:	2b3e      	cmp	r3, #62	; 0x3e
 80039ac:	d916      	bls.n	80039dc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	677b      	str	r3, [r7, #116]	; 0x74
 80039b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x694>
 80039be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c0:	3b01      	subs	r3, #1
 80039c2:	677b      	str	r3, [r7, #116]	; 0x74
 80039c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	e040      	b.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x72e>
 80039dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d112      	bne.n	8003a08 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80039e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	e02a      	b.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	677b      	str	r3, [r7, #116]	; 0x74
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8003a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	e018      	b.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d114      	bne.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a42:	4413      	add	r3, r2
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6959      	ldr	r1, [r3, #20]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	895a      	ldrh	r2, [r3, #10]
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f004 fe66 	bl	800873e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8c:	823b      	strh	r3, [r7, #16]
 8003a8e:	8a3b      	ldrh	r3, [r7, #16]
 8003a90:	f083 0310 	eor.w	r3, r3, #16
 8003a94:	823b      	strh	r3, [r7, #16]
 8003a96:	8a3b      	ldrh	r3, [r7, #16]
 8003a98:	f083 0320 	eor.w	r3, r3, #32
 8003a9c:	823b      	strh	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	8a3b      	ldrh	r3, [r7, #16]
 8003aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3788      	adds	r7, #136	; 0x88
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	817b      	strh	r3, [r7, #10]
 8003ada:	4613      	mov	r3, r2
 8003adc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e009      	b.n	8003b16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b02:	897a      	ldrh	r2, [r7, #10]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b16:	893b      	ldrh	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	80da      	strh	r2, [r3, #6]
 8003b2a:	e00b      	b.n	8003b44 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d141      	bne.n	8003c3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bb6:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc2:	d131      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bca:	4a46      	ldr	r2, [pc, #280]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bdc:	4a41      	ldr	r2, [pc, #260]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2232      	movs	r2, #50	; 0x32
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfa:	e002      	b.n	8003c02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	4b38      	ldr	r3, [pc, #224]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d102      	bne.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f2      	bne.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d158      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e057      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c38:	e04d      	b.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d141      	bne.n	8003cc6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d131      	bne.n	8003cb4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2232      	movs	r2, #50	; 0x32
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	0c9b      	lsrs	r3, r3, #18
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c86:	e002      	b.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f2      	bne.n	8003c88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cae:	d112      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e011      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cc4:	e007      	b.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	20000010 	.word	0x20000010
 8003cec:	431bde83 	.word	0x431bde83

08003cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e306      	b.n	8004310 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d075      	beq.n	8003dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b94      	ldr	r3, [pc, #592]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d102      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3e>
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_OscConfig+0x44>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05b      	beq.n	8003df8 <HAL_RCC_OscConfig+0x108>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d157      	bne.n	8003df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e2e1      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x74>
 8003d56:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a84      	ldr	r2, [pc, #528]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x98>
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7e      	ldr	r2, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b7c      	ldr	r3, [pc, #496]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7b      	ldr	r2, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xb0>
 8003d88:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a74      	ldr	r2, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fd feda 	bl	8001b60 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd fed6 	bl	8001b60 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e2a6      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc2:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xc0>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fec6 	bl	8001b60 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fec2 	bl	8001b60 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e292      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dea:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe8>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d075      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e06:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e10:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_OscConfig+0x136>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_OscConfig+0x13c>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11f      	bne.n	8003e6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_OscConfig+0x154>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e265      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	4946      	ldr	r1, [pc, #280]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e58:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd fe33 	bl	8001ac8 <HAL_InitTick>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d043      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e251      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fe6e 	bl	8001b60 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fd fe6a 	bl	8001b60 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e23a      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	492d      	ldr	r1, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
 8003eba:	e01a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fe4a 	bl	8001b60 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fe46 	bl	8001b60 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e216      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1e0>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d041      	beq.n	8003f82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f06:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0c:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fe23 	bl	8001b60 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fe1f 	bl	8001b60 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1ef      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCC_OscConfig+0x22e>
 8003f3e:	e020      	b.n	8003f82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd fe06 	bl	8001b60 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f56:	e00d      	b.n	8003f74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd fe02 	bl	8001b60 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d906      	bls.n	8003f74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1d2      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f74:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ea      	bne.n	8003f58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80a6 	beq.w	80040dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f90:	2300      	movs	r3, #0
 8003f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x2b4>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x2b6>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	4a7e      	ldr	r2, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb6:	4b7c      	ldr	r3, [pc, #496]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc6:	4b79      	ldr	r3, [pc, #484]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d118      	bne.n	8004004 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fde:	f7fd fdbf 	bl	8001b60 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd fdbb 	bl	8001b60 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e18b      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x4bc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <HAL_RCC_OscConfig+0x32e>
 800400c:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800401c:	e024      	b.n	8004068 <HAL_RCC_OscConfig+0x378>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b05      	cmp	r3, #5
 8004024:	d110      	bne.n	8004048 <HAL_RCC_OscConfig+0x358>
 8004026:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402c:	4a5e      	ldr	r2, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004046:	e00f      	b.n	8004068 <HAL_RCC_OscConfig+0x378>
 8004048:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	4a56      	ldr	r2, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fd fd76 	bl	8001b60 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd fd72 	bl	8001b60 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e140      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ed      	beq.n	8004078 <HAL_RCC_OscConfig+0x388>
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd fd5f 	bl	8001b60 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fd5b 	bl	8001b60 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e129      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ed      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	4a34      	ldr	r2, [pc, #208]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fd2e 	bl	8001b60 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004108:	f7fd fd2a 	bl	8001b60 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0fa      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x418>
 8004128:	e01b      	b.n	8004162 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004130:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fd11 	bl	8001b60 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004142:	f7fd fd0d 	bl	8001b60 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0dd      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80d1 	beq.w	800430e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b0c      	cmp	r3, #12
 8004176:	f000 808b 	beq.w	8004290 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d15e      	bne.n	8004240 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a08      	ldr	r2, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd fce7 	bl	8001b60 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	e00c      	b.n	80041b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd fce3 	bl	8001b60 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d905      	bls.n	80041b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0b3      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	4b59      	ldr	r3, [pc, #356]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ec      	bne.n	8004196 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041bc:	4b56      	ldr	r3, [pc, #344]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b56      	ldr	r3, [pc, #344]	; (800431c <HAL_RCC_OscConfig+0x62c>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6a11      	ldr	r1, [r2, #32]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041cc:	3a01      	subs	r2, #1
 80041ce:	0112      	lsls	r2, r2, #4
 80041d0:	4311      	orrs	r1, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041d6:	0212      	lsls	r2, r2, #8
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0552      	lsls	r2, r2, #21
 80041e4:	4311      	orrs	r1, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0652      	lsls	r2, r2, #25
 80041f0:	4311      	orrs	r1, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041f6:	06d2      	lsls	r2, r2, #27
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4947      	ldr	r1, [pc, #284]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a44      	ldr	r2, [pc, #272]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800420c:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a41      	ldr	r2, [pc, #260]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fca2 	bl	8001b60 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fc9e 	bl	8001b60 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e06e      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	4b39      	ldr	r3, [pc, #228]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x530>
 800423e:	e066      	b.n	800430e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a34      	ldr	r2, [pc, #208]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800424c:	4b32      	ldr	r3, [pc, #200]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a31      	ldr	r2, [pc, #196]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800425e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fc7a 	bl	8001b60 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd fc76 	bl	8001b60 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e046      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x580>
 800428e:	e03e      	b.n	800430e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e039      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCC_OscConfig+0x628>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0203 	and.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d12c      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	3b01      	subs	r3, #1
 80042bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d123      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11b      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d113      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	3b01      	subs	r3, #1
 80042f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d109      	bne.n	800430a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d001      	beq.n	800430e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	019f800c 	.word	0x019f800c

08004320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e11e      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b91      	ldr	r3, [pc, #580]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d910      	bls.n	8004368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b8e      	ldr	r3, [pc, #568]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	498c      	ldr	r1, [pc, #560]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b8a      	ldr	r3, [pc, #552]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e106      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d073      	beq.n	800445c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d129      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b81      	ldr	r3, [pc, #516]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0f4      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800438c:	f000 f966 	bl	800465c <RCC_GetSysClockFreqFromPLLSource>
 8004390:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d93f      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800439a:	4b7a      	ldr	r3, [pc, #488]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d033      	beq.n	800441a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12f      	bne.n	800441a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ba:	4b72      	ldr	r3, [pc, #456]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c2:	4a70      	ldr	r2, [pc, #448]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e024      	b.n	800441a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0c6      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e0be      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043f8:	f000 f8ce 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a61      	ldr	r2, [pc, #388]	; (8004588 <HAL_RCC_ClockConfig+0x268>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d909      	bls.n	800441a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004406:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440e:	4a5d      	ldr	r2, [pc, #372]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004416:	2380      	movs	r3, #128	; 0x80
 8004418:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b5a      	ldr	r3, [pc, #360]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4957      	ldr	r1, [pc, #348]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004428:	4313      	orrs	r3, r2
 800442a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800442c:	f7fd fb98 	bl	8001b60 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fd fb94 	bl	8001b60 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e095      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d023      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a42      	ldr	r2, [pc, #264]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800447a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800447e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800449a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4936      	ldr	r1, [pc, #216]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4a32      	ldr	r2, [pc, #200]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 80044bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d21d      	bcs.n	800450c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 020f 	bic.w	r2, r3, #15
 80044d8:	4929      	ldr	r1, [pc, #164]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e0:	f7fd fb3e 	bl	8001b60 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fd fb3a 	bl	8001b60 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e03b      	b.n	8004576 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCC_ClockConfig+0x260>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ed      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4917      	ldr	r1, [pc, #92]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490f      	ldr	r1, [pc, #60]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454a:	f000 f825 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCC_ClockConfig+0x264>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490c      	ldr	r1, [pc, #48]	; (800458c <HAL_RCC_ClockConfig+0x26c>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x270>)
 8004568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f7fd faaa 	bl	8001ac8 <HAL_InitTick>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40022000 	.word	0x40022000
 8004584:	40021000 	.word	0x40021000
 8004588:	04c4b400 	.word	0x04c4b400
 800458c:	0800abd8 	.word	0x0800abd8
 8004590:	20000010 	.word	0x20000010
 8004594:	20000014 	.word	0x20000014

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045aa:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e047      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d102      	bne.n	80045c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045bc:	4b26      	ldr	r3, [pc, #152]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e03e      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d136      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3301      	adds	r3, #1
 80045e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d10c      	bne.n	8004606 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a16      	ldr	r2, [pc, #88]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f6:	68d2      	ldr	r2, [r2, #12]
 80045f8:	0a12      	lsrs	r2, r2, #8
 80045fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	617b      	str	r3, [r7, #20]
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004606:	4a13      	ldr	r2, [pc, #76]	; (8004654 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004610:	68d2      	ldr	r2, [r2, #12]
 8004612:	0a12      	lsrs	r2, r2, #8
 8004614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0e5b      	lsrs	r3, r3, #25
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e001      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004640:	693b      	ldr	r3, [r7, #16]
}
 8004642:	4618      	mov	r0, r3
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	00f42400 	.word	0x00f42400
 8004658:	007a1200 	.word	0x007a1200

0800465c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d10c      	bne.n	800469a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	0a12      	lsrs	r2, r2, #8
 800468e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	617b      	str	r3, [r7, #20]
    break;
 8004698:	e00c      	b.n	80046b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	4a0e      	ldr	r2, [pc, #56]	; (80046dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a4:	68d2      	ldr	r2, [r2, #12]
 80046a6:	0a12      	lsrs	r2, r2, #8
 80046a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
    break;
 80046b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0e5b      	lsrs	r3, r3, #25
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046ce:	687b      	ldr	r3, [r7, #4]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40021000 	.word	0x40021000
 80046e0:	007a1200 	.word	0x007a1200
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f0:	2300      	movs	r3, #0
 80046f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f4:	2300      	movs	r3, #0
 80046f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8098 	beq.w	8004836 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10d      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	4a3f      	ldr	r2, [pc, #252]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	6593      	str	r3, [r2, #88]	; 0x58
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800472e:	2301      	movs	r3, #1
 8004730:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004732:	4b3a      	ldr	r3, [pc, #232]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a39      	ldr	r2, [pc, #228]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800473e:	f7fd fa0f 	bl	8001b60 <HAL_GetTick>
 8004742:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004744:	e009      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd fa0b 	bl	8001b60 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d902      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	74fb      	strb	r3, [r7, #19]
        break;
 8004758:	e005      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ef      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d159      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004776:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01e      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	429a      	cmp	r2, r3
 8004786:	d019      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004792:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800479c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd f9cb 	bl	8001b60 <HAL_GetTick>
 80047ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047cc:	e00b      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fd f9c7 	bl	8001b60 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d902      	bls.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	74fb      	strb	r3, [r7, #19]
            break;
 80047e4:	e006      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ec      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	4903      	ldr	r1, [pc, #12]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004810:	e008      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	74bb      	strb	r3, [r7, #18]
 8004816:	e005      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004824:	7c7b      	ldrb	r3, [r7, #17]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482a:	4ba6      	ldr	r3, [pc, #664]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4aa5      	ldr	r2, [pc, #660]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004842:	4ba0      	ldr	r3, [pc, #640]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f023 0203 	bic.w	r2, r3, #3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	499c      	ldr	r1, [pc, #624]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004864:	4b97      	ldr	r3, [pc, #604]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f023 020c 	bic.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4994      	ldr	r1, [pc, #592]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004886:	4b8f      	ldr	r3, [pc, #572]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	498b      	ldr	r1, [pc, #556]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a8:	4b86      	ldr	r3, [pc, #536]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	4983      	ldr	r1, [pc, #524]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ca:	4b7e      	ldr	r3, [pc, #504]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	497a      	ldr	r1, [pc, #488]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ec:	4b75      	ldr	r3, [pc, #468]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	4972      	ldr	r1, [pc, #456]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800490e:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	4969      	ldr	r1, [pc, #420]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004930:	4b64      	ldr	r3, [pc, #400]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	4961      	ldr	r1, [pc, #388]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004952:	4b5c      	ldr	r3, [pc, #368]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	4958      	ldr	r1, [pc, #352]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004974:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	4950      	ldr	r1, [pc, #320]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d105      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004994:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a4a      	ldr	r2, [pc, #296]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800499e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049ac:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	4942      	ldr	r1, [pc, #264]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ca:	d105      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049cc:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049e4:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4934      	ldr	r1, [pc, #208]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a02:	d105      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a04:	4b2f      	ldr	r3, [pc, #188]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a2e      	ldr	r2, [pc, #184]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d015      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	4926      	ldr	r1, [pc, #152]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	4918      	ldr	r1, [pc, #96]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a72:	d105      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	490a      	ldr	r1, [pc, #40]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aaa:	d105      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ab8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e049      	b.n	8004b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc fe84 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 fde8 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e04a      	b.n	8004c26 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a21      	ldr	r2, [pc, #132]	; (8004c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d013      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1d      	ldr	r2, [pc, #116]	; (8004c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <HAL_TIM_Base_Start_IT+0xcc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d115      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d015      	beq.n	8004c22 <HAL_TIM_Base_Start_IT+0xaa>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfc:	d011      	beq.n	8004c22 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e008      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e000      	b.n	8004c24 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	00010007 	.word	0x00010007

08004c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e049      	b.n	8004cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fd7c 	bl	8001770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fd26 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_TIM_PWM_Start+0x24>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e03c      	b.n	8004d9a <HAL_TIM_PWM_Start+0x9e>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d109      	bne.n	8004d3a <HAL_TIM_PWM_Start+0x3e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e02f      	b.n	8004d9a <HAL_TIM_PWM_Start+0x9e>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d109      	bne.n	8004d54 <HAL_TIM_PWM_Start+0x58>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e022      	b.n	8004d9a <HAL_TIM_PWM_Start+0x9e>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d109      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x72>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e015      	b.n	8004d9a <HAL_TIM_PWM_Start+0x9e>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d109      	bne.n	8004d88 <HAL_TIM_PWM_Start+0x8c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	e008      	b.n	8004d9a <HAL_TIM_PWM_Start+0x9e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e097      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0xb6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db0:	e023      	b.n	8004dfa <HAL_TIM_PWM_Start+0xfe>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xc6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	e01b      	b.n	8004dfa <HAL_TIM_PWM_Start+0xfe>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d104      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xd6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd0:	e013      	b.n	8004dfa <HAL_TIM_PWM_Start+0xfe>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	d104      	bne.n	8004de2 <HAL_TIM_PWM_Start+0xe6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de0:	e00b      	b.n	8004dfa <HAL_TIM_PWM_Start+0xfe>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xf6>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	e003      	b.n	8004dfa <HAL_TIM_PWM_Start+0xfe>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2202      	movs	r2, #2
 8004df6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fff0 	bl	8005de8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_TIM_PWM_Start+0x1e0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x13e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_TIM_PWM_Start+0x1e4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x13e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <HAL_TIM_PWM_Start+0x1e8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x13e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_TIM_PWM_Start+0x1ec>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_TIM_PWM_Start+0x13e>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <HAL_TIM_PWM_Start+0x1f0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x142>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_PWM_Start+0x144>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a20      	ldr	r2, [pc, #128]	; (8004edc <HAL_TIM_PWM_Start+0x1e0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d018      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x194>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d013      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x194>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <HAL_TIM_PWM_Start+0x1f4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x194>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <HAL_TIM_PWM_Start+0x1f8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x194>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <HAL_TIM_PWM_Start+0x1e4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIM_PWM_Start+0x194>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <HAL_TIM_PWM_Start+0x1e8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d115      	bne.n	8004ebc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <HAL_TIM_PWM_Start+0x1fc>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d015      	beq.n	8004ece <HAL_TIM_PWM_Start+0x1d2>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d011      	beq.n	8004ece <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	e008      	b.n	8004ece <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e000      	b.n	8004ed0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	00010007 	.word	0x00010007

08004efc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e097      	b.n	8005040 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc fb7d 	bl	8001624 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f40:	f023 0307 	bic.w	r3, r3, #7
 8004f44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fbc3 	bl	80056dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f9c:	f023 030c 	bic.w	r3, r3, #12
 8004fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	011a      	lsls	r2, r3, #4
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	031b      	lsls	r3, r3, #12
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005058:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005060:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005068:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005070:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d102      	bne.n	8005084 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800507e:	7b7b      	ldrb	r3, [r7, #13]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d001      	beq.n	8005088 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e069      	b.n	800515c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005098:	e031      	b.n	80050fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d110      	bne.n	80050c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a0:	7bbb      	ldrb	r3, [r7, #14]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d102      	bne.n	80050ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a6:	7b3b      	ldrb	r3, [r7, #12]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d001      	beq.n	80050b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e055      	b.n	800515c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c0:	e01d      	b.n	80050fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d108      	bne.n	80050da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ce:	7b7b      	ldrb	r3, [r7, #13]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050d4:	7b3b      	ldrb	r3, [r7, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e03e      	b.n	800515c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_TIM_Encoder_Start+0xc4>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d008      	beq.n	800511c <HAL_TIM_Encoder_Start+0xd4>
 800510a:	e00f      	b.n	800512c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2201      	movs	r2, #1
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fe67 	bl	8005de8 <TIM_CCxChannelCmd>
      break;
 800511a:	e016      	b.n	800514a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2201      	movs	r2, #1
 8005122:	2104      	movs	r1, #4
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fe5f 	bl	8005de8 <TIM_CCxChannelCmd>
      break;
 800512a:	e00e      	b.n	800514a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2201      	movs	r2, #1
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fe57 	bl	8005de8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	2104      	movs	r1, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fe50 	bl	8005de8 <TIM_CCxChannelCmd>
      break;
 8005148:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0202 	mvn.w	r2, #2
 8005190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa7a 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa6c 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fa7d 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0204 	mvn.w	r2, #4
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa50 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa42 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fa53 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0208 	mvn.w	r2, #8
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2204      	movs	r2, #4
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa26 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa18 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa29 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b10      	cmp	r3, #16
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b10      	cmp	r3, #16
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0210 	mvn.w	r2, #16
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2208      	movs	r2, #8
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9fc 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9ee 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f9ff 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0201 	mvn.w	r2, #1
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fcec 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b80      	cmp	r3, #128	; 0x80
 80052f4:	d10e      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d107      	bne.n	8005314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 ff70 	bl	80061f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	d10e      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	d107      	bne.n	8005342 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800533a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 ff63 	bl	8006208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d10e      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	d107      	bne.n	800536e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9ad 	bl	80056c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d10e      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b20      	cmp	r3, #32
 8005388:	d107      	bne.n	800539a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f06f 0220 	mvn.w	r2, #32
 8005392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 ff23 	bl	80061e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a8:	d10f      	bne.n	80053ca <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 ff29 	bl	800621c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d8:	d10f      	bne.n	80053fa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e8:	d107      	bne.n	80053fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 ff1b 	bl	8006230 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005408:	d10f      	bne.n	800542a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 ff0d 	bl	8006244 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005438:	d10f      	bne.n	800545a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 feff 	bl	8006258 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547e:	2302      	movs	r3, #2
 8005480:	e0ff      	b.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b14      	cmp	r3, #20
 800548e:	f200 80f0 	bhi.w	8005672 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005673 	.word	0x08005673
 80054a0:	08005673 	.word	0x08005673
 80054a4:	08005673 	.word	0x08005673
 80054a8:	0800552d 	.word	0x0800552d
 80054ac:	08005673 	.word	0x08005673
 80054b0:	08005673 	.word	0x08005673
 80054b4:	08005673 	.word	0x08005673
 80054b8:	0800556f 	.word	0x0800556f
 80054bc:	08005673 	.word	0x08005673
 80054c0:	08005673 	.word	0x08005673
 80054c4:	08005673 	.word	0x08005673
 80054c8:	080055af 	.word	0x080055af
 80054cc:	08005673 	.word	0x08005673
 80054d0:	08005673 	.word	0x08005673
 80054d4:	08005673 	.word	0x08005673
 80054d8:	080055f1 	.word	0x080055f1
 80054dc:	08005673 	.word	0x08005673
 80054e0:	08005673 	.word	0x08005673
 80054e4:	08005673 	.word	0x08005673
 80054e8:	08005631 	.word	0x08005631
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f982 	bl	80057fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e0a5      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f9f2 	bl	800591c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e084      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 fa5b 	bl	8005a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e064      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fac3 	bl	8005b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e043      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fb2c 	bl	8005c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800562e:	e023      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fb70 	bl	8005d1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005670:	e002      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
      break;
 8005676:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005680:	7dfb      	ldrb	r3, [r7, #23]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop

0800568c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <TIM_Base_SetConfig+0x104>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00f      	beq.n	8005714 <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d00b      	beq.n	8005714 <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a39      	ldr	r2, [pc, #228]	; (80057e4 <TIM_Base_SetConfig+0x108>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a38      	ldr	r2, [pc, #224]	; (80057e8 <TIM_Base_SetConfig+0x10c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a37      	ldr	r2, [pc, #220]	; (80057ec <TIM_Base_SetConfig+0x110>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d108      	bne.n	8005726 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <TIM_Base_SetConfig+0x104>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01b      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d017      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <TIM_Base_SetConfig+0x108>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <TIM_Base_SetConfig+0x10c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00f      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <TIM_Base_SetConfig+0x110>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00b      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a25      	ldr	r2, [pc, #148]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800576c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <TIM_Base_SetConfig+0x104>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0xe8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a11      	ldr	r2, [pc, #68]	; (80057ec <TIM_Base_SetConfig+0x110>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0xe8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0xe8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0xe8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <TIM_OC1_SetConfig+0x10c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00f      	beq.n	800587c <TIM_OC1_SetConfig+0x80>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2b      	ldr	r2, [pc, #172]	; (800590c <TIM_OC1_SetConfig+0x110>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00b      	beq.n	800587c <TIM_OC1_SetConfig+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2a      	ldr	r2, [pc, #168]	; (8005910 <TIM_OC1_SetConfig+0x114>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d007      	beq.n	800587c <TIM_OC1_SetConfig+0x80>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a29      	ldr	r2, [pc, #164]	; (8005914 <TIM_OC1_SetConfig+0x118>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_OC1_SetConfig+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a28      	ldr	r2, [pc, #160]	; (8005918 <TIM_OC1_SetConfig+0x11c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d10c      	bne.n	8005896 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0308 	bic.w	r3, r3, #8
 8005882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 0304 	bic.w	r3, r3, #4
 8005894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <TIM_OC1_SetConfig+0x10c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00f      	beq.n	80058be <TIM_OC1_SetConfig+0xc2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1a      	ldr	r2, [pc, #104]	; (800590c <TIM_OC1_SetConfig+0x110>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00b      	beq.n	80058be <TIM_OC1_SetConfig+0xc2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <TIM_OC1_SetConfig+0x114>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <TIM_OC1_SetConfig+0xc2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a18      	ldr	r2, [pc, #96]	; (8005914 <TIM_OC1_SetConfig+0x118>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC1_SetConfig+0xc2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a17      	ldr	r2, [pc, #92]	; (8005918 <TIM_OC1_SetConfig+0x11c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d111      	bne.n	80058e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800

0800591c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	021b      	lsls	r3, r3, #8
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0320 	bic.w	r3, r3, #32
 800596a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <TIM_OC2_SetConfig+0x100>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_OC2_SetConfig+0x6c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <TIM_OC2_SetConfig+0x104>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d10d      	bne.n	80059a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <TIM_OC2_SetConfig+0x100>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00f      	beq.n	80059cc <TIM_OC2_SetConfig+0xb0>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <TIM_OC2_SetConfig+0x104>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_OC2_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <TIM_OC2_SetConfig+0x108>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_OC2_SetConfig+0xb0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1a      	ldr	r2, [pc, #104]	; (8005a28 <TIM_OC2_SetConfig+0x10c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC2_SetConfig+0xb0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a19      	ldr	r2, [pc, #100]	; (8005a2c <TIM_OC2_SetConfig+0x110>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d113      	bne.n	80059f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800

08005a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <TIM_OC3_SetConfig+0xfc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_OC3_SetConfig+0x6a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <TIM_OC3_SetConfig+0x100>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10d      	bne.n	8005ab6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <TIM_OC3_SetConfig+0xfc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00f      	beq.n	8005ade <TIM_OC3_SetConfig+0xae>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <TIM_OC3_SetConfig+0x100>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC3_SetConfig+0xae>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <TIM_OC3_SetConfig+0x104>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d007      	beq.n	8005ade <TIM_OC3_SetConfig+0xae>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <TIM_OC3_SetConfig+0x108>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <TIM_OC3_SetConfig+0xae>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <TIM_OC3_SetConfig+0x10c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d113      	bne.n	8005b06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40013400 	.word	0x40013400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800

08005b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	031b      	lsls	r3, r3, #12
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <TIM_OC4_SetConfig+0x100>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC4_SetConfig+0x6c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <TIM_OC4_SetConfig+0x104>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10d      	bne.n	8005bc8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <TIM_OC4_SetConfig+0x100>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00f      	beq.n	8005bf0 <TIM_OC4_SetConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <TIM_OC4_SetConfig+0x104>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <TIM_OC4_SetConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <TIM_OC4_SetConfig+0x108>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d007      	beq.n	8005bf0 <TIM_OC4_SetConfig+0xb0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <TIM_OC4_SetConfig+0x10c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC4_SetConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <TIM_OC4_SetConfig+0x110>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d113      	bne.n	8005c18 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bfe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	019b      	lsls	r3, r3, #6
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	019b      	lsls	r3, r3, #6
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <TIM_OC5_SetConfig+0xb4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <TIM_OC5_SetConfig+0x7a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <TIM_OC5_SetConfig+0xb8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_OC5_SetConfig+0x7a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <TIM_OC5_SetConfig+0xbc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_OC5_SetConfig+0x7a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <TIM_OC5_SetConfig+0xc0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC5_SetConfig+0x7a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <TIM_OC5_SetConfig+0xc4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d109      	bne.n	8005ce2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800

08005d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <TIM_OC6_SetConfig+0xb8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00f      	beq.n	8005d98 <TIM_OC6_SetConfig+0x7c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <TIM_OC6_SetConfig+0xbc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00b      	beq.n	8005d98 <TIM_OC6_SetConfig+0x7c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <TIM_OC6_SetConfig+0xc0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <TIM_OC6_SetConfig+0x7c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <TIM_OC6_SetConfig+0xc4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC6_SetConfig+0x7c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a14      	ldr	r2, [pc, #80]	; (8005de4 <TIM_OC6_SetConfig+0xc8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	029b      	lsls	r3, r3, #10
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800

08005de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1a      	ldr	r2, [r3, #32]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_TIMEx_PWMN_Start+0x24>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf14      	ite	ne
 8005e50:	2301      	movne	r3, #1
 8005e52:	2300      	moveq	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e022      	b.n	8005e9e <HAL_TIMEx_PWMN_Start+0x6a>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d109      	bne.n	8005e72 <HAL_TIMEx_PWMN_Start+0x3e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	bf14      	ite	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	2300      	moveq	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	e015      	b.n	8005e9e <HAL_TIMEx_PWMN_Start+0x6a>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d109      	bne.n	8005e8c <HAL_TIMEx_PWMN_Start+0x58>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e008      	b.n	8005e9e <HAL_TIMEx_PWMN_Start+0x6a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e069      	b.n	8005f7a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIMEx_PWMN_Start+0x82>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb4:	e013      	b.n	8005ede <HAL_TIMEx_PWMN_Start+0xaa>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d104      	bne.n	8005ec6 <HAL_TIMEx_PWMN_Start+0x92>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec4:	e00b      	b.n	8005ede <HAL_TIMEx_PWMN_Start+0xaa>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d104      	bne.n	8005ed6 <HAL_TIMEx_PWMN_Start+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ed4:	e003      	b.n	8005ede <HAL_TIMEx_PWMN_Start+0xaa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f9c0 	bl	800626c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <HAL_TIMEx_PWMN_Start+0x150>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_TIMEx_PWMN_Start+0x104>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d013      	beq.n	8005f38 <HAL_TIMEx_PWMN_Start+0x104>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_TIMEx_PWMN_Start+0x154>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_TIMEx_PWMN_Start+0x104>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIMEx_PWMN_Start+0x158>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_TIMEx_PWMN_Start+0x104>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_TIMEx_PWMN_Start+0x104>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <HAL_TIMEx_PWMN_Start+0x160>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d115      	bne.n	8005f64 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b06      	cmp	r3, #6
 8005f48:	d015      	beq.n	8005f76 <HAL_TIMEx_PWMN_Start+0x142>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d011      	beq.n	8005f76 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	e008      	b.n	8005f76 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e000      	b.n	8005f78 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e065      	b.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d013      	beq.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a18      	ldr	r2, [pc, #96]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a13      	ldr	r2, [pc, #76]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d10c      	bne.n	800606e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800605a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40013400 	.word	0x40013400
 8006094:	40000400 	.word	0x40000400
 8006098:	40000800 	.word	0x40000800
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e087      	b.n	80061cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a25      	ldr	r2, [pc, #148]	; (80061dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d106      	bne.n	8006158 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d126      	bne.n	80061ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	051b      	lsls	r3, r3, #20
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a0e      	ldr	r2, [pc, #56]	; (80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d106      	bne.n	80061ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40012c00 	.word	0x40012c00
 80061dc:	40013400 	.word	0x40013400

080061e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2204      	movs	r2, #4
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a1a      	ldr	r2, [r3, #32]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	43db      	mvns	r3, r3
 800628e:	401a      	ands	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062c6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	43db      	mvns	r3, r3
 8006300:	b29b      	uxth	r3, r3
 8006302:	4013      	ands	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800631a:	b084      	sub	sp, #16
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	f107 0014 	add.w	r0, r7, #20
 8006328:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	b004      	add	sp, #16
 800635a:	4770      	bx	lr

0800635c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800635c:	b480      	push	{r7}
 800635e:	b09d      	sub	sp, #116	; 0x74
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	b29b      	uxth	r3, r3
 800637a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d81f      	bhi.n	80063ce <USB_ActivateEndpoint+0x72>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <USB_ActivateEndpoint+0x38>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063c1 	.word	0x080063c1
 800639c:	080063d7 	.word	0x080063d7
 80063a0:	080063b3 	.word	0x080063b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063b0:	e012      	b.n	80063d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80063ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063be:	e00b      	b.n	80063d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063cc:	e004      	b.n	80063d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80063d4:	e000      	b.n	80063d8 <USB_ActivateEndpoint+0x7c>
      break;
 80063d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	b21b      	sxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	b21a      	sxth	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	b21b      	sxth	r3, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	b21b      	sxth	r3, r3
 800641e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	441a      	add	r2, r3
 800642c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	7b1b      	ldrb	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8149 	bne.w	80066e0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8084 	beq.w	8006560 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4413      	add	r3, r2
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	00da      	lsls	r2, r3, #3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	88db      	ldrh	r3, [r3, #6]
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	b29b      	uxth	r3, r3
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	b29a      	uxth	r2, r3
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	827b      	strh	r3, [r7, #18]
 800649a:	8a7b      	ldrh	r3, [r7, #18]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <USB_ActivateEndpoint+0x180>
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	823b      	strh	r3, [r7, #16]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8a3b      	ldrh	r3, [r7, #16]
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d020      	beq.n	8006526 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fa:	81bb      	strh	r3, [r7, #12]
 80064fc:	89bb      	ldrh	r3, [r7, #12]
 80064fe:	f083 0320 	eor.w	r3, r3, #32
 8006502:	81bb      	strh	r3, [r7, #12]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	89bb      	ldrh	r3, [r7, #12]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
 8006524:	e2a6      	b.n	8006a74 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	81fb      	strh	r3, [r7, #14]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	89fb      	ldrh	r3, [r7, #14]
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
 800655e:	e289      	b.n	8006a74 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	633b      	str	r3, [r7, #48]	; 0x30
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	4413      	add	r3, r2
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	00da      	lsls	r2, r3, #3
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	88db      	ldrh	r3, [r3, #6]
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	b29b      	uxth	r3, r3
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	4413      	add	r3, r2
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00da      	lsls	r2, r3, #3
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b3e      	cmp	r3, #62	; 0x3e
 80065be:	d918      	bls.n	80065f2 <USB_ActivateEndpoint+0x296>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <USB_ActivateEndpoint+0x27e>
 80065d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065d6:	3b01      	subs	r3, #1
 80065d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065dc:	b29b      	uxth	r3, r3
 80065de:	029b      	lsls	r3, r3, #10
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e029      	b.n	8006646 <USB_ActivateEndpoint+0x2ea>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d112      	bne.n	8006620 <USB_ActivateEndpoint+0x2c4>
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006604:	b29a      	uxth	r2, r3
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006618:	b29a      	uxth	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e012      	b.n	8006646 <USB_ActivateEndpoint+0x2ea>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	66bb      	str	r3, [r7, #104]	; 0x68
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <USB_ActivateEndpoint+0x2de>
 8006634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006636:	3301      	adds	r3, #1
 8006638:	66bb      	str	r3, [r7, #104]	; 0x68
 800663a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29a      	uxth	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	847b      	strh	r3, [r7, #34]	; 0x22
 8006654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01b      	beq.n	8006696 <USB_ActivateEndpoint+0x33a>
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	843b      	strh	r3, [r7, #32]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	8c3b      	ldrh	r3, [r7, #32]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	83fb      	strh	r3, [r7, #30]
 80066ae:	8bfb      	ldrh	r3, [r7, #30]
 80066b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066b4:	83fb      	strh	r3, [r7, #30]
 80066b6:	8bfb      	ldrh	r3, [r7, #30]
 80066b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066bc:	83fb      	strh	r3, [r7, #30]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8bfb      	ldrh	r3, [r7, #30]
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]
 80066de:	e1c9      	b.n	8006a74 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	78db      	ldrb	r3, [r3, #3]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11e      	bne.n	8006726 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006718:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800671c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006720:	b29b      	uxth	r3, r3
 8006722:	8013      	strh	r3, [r2, #0]
 8006724:	e01d      	b.n	8006762 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800674e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675e:	b29b      	uxth	r3, r3
 8006760:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676c:	b29b      	uxth	r3, r3
 800676e:	461a      	mov	r2, r3
 8006770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006772:	4413      	add	r3, r2
 8006774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	00da      	lsls	r2, r3, #3
 800677c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800677e:	4413      	add	r3, r2
 8006780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006784:	65bb      	str	r3, [r7, #88]	; 0x58
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	891b      	ldrh	r3, [r3, #8]
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	657b      	str	r3, [r7, #84]	; 0x54
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a6:	4413      	add	r3, r2
 80067a8:	657b      	str	r3, [r7, #84]	; 0x54
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b8:	653b      	str	r3, [r7, #80]	; 0x50
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	895b      	ldrh	r3, [r3, #10]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 8093 	bne.w	80068fa <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01b      	beq.n	8006828 <USB_ActivateEndpoint+0x4cc>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d01b      	beq.n	8006878 <USB_ActivateEndpoint+0x51c>
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	441a      	add	r2, r3
 8006862:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006870:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006874:	b29b      	uxth	r3, r3
 8006876:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006890:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006892:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006896:	873b      	strh	r3, [r7, #56]	; 0x38
 8006898:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800689a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800689e:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
 80068f8:	e0bc      	b.n	8006a74 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800690a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800690e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01d      	beq.n	8006952 <USB_ActivateEndpoint+0x5f6>
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006962:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01d      	beq.n	80069aa <USB_ActivateEndpoint+0x64e>
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	441a      	add	r2, r3
 8006992:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	78db      	ldrb	r3, [r3, #3]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d024      	beq.n	80069fc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069d0:	f083 0320 	eor.w	r3, r3, #32
 80069d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8013      	strh	r3, [r2, #0]
 80069fa:	e01d      	b.n	8006a38 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3774      	adds	r7, #116	; 0x74
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b08d      	sub	sp, #52	; 0x34
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	7b1b      	ldrb	r3, [r3, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 808e 	bne.w	8006bb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d044      	beq.n	8006b2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	81bb      	strh	r3, [r7, #12]
 8006aae:	89bb      	ldrh	r3, [r7, #12]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01b      	beq.n	8006af0 <USB_DeactivateEndpoint+0x6c>
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	817b      	strh	r3, [r7, #10]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	897b      	ldrh	r3, [r7, #10]
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b06:	813b      	strh	r3, [r7, #8]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	893b      	ldrh	r3, [r7, #8]
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]
 8006b28:	e192      	b.n	8006e50 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	827b      	strh	r3, [r7, #18]
 8006b38:	8a7b      	ldrh	r3, [r7, #18]
 8006b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01b      	beq.n	8006b7a <USB_DeactivateEndpoint+0xf6>
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	823b      	strh	r3, [r7, #16]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	8a3b      	ldrh	r3, [r7, #16]
 8006b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b90:	81fb      	strh	r3, [r7, #14]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e14d      	b.n	8006e50 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 80a5 	bne.w	8006d08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	843b      	strh	r3, [r7, #32]
 8006bcc:	8c3b      	ldrh	r3, [r7, #32]
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01b      	beq.n	8006c0e <USB_DeactivateEndpoint+0x18a>
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bec:	83fb      	strh	r3, [r7, #30]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8bfb      	ldrh	r3, [r7, #30]
 8006bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	83bb      	strh	r3, [r7, #28]
 8006c1c:	8bbb      	ldrh	r3, [r7, #28]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01b      	beq.n	8006c5e <USB_DeactivateEndpoint+0x1da>
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	837b      	strh	r3, [r7, #26]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	8b7b      	ldrh	r3, [r7, #26]
 8006c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c74:	833b      	strh	r3, [r7, #24]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	441a      	add	r2, r3
 8006c80:	8b3b      	ldrh	r3, [r7, #24]
 8006c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cac:	82fb      	strh	r3, [r7, #22]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	8afb      	ldrh	r3, [r7, #22]
 8006cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ce4:	82bb      	strh	r3, [r7, #20]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	8abb      	ldrh	r3, [r7, #20]
 8006cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
 8006d06:	e0a3      	b.n	8006e50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01b      	beq.n	8006d58 <USB_DeactivateEndpoint+0x2d4>
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01b      	beq.n	8006da8 <USB_DeactivateEndpoint+0x324>
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d86:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	441a      	add	r2, r3
 8006d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3734      	adds	r7, #52	; 0x34
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b0c2      	sub	sp, #264	; 0x108
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6c:	6018      	str	r0, [r3, #0]
 8006e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e76:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 867b 	bne.w	8007b80 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d908      	bls.n	8006eb8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006eb6:	e007      	b.n	8006ec8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	7b1b      	ldrb	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d13a      	bne.n	8006f4e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6959      	ldr	r1, [r3, #20]
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	88da      	ldrh	r2, [r3, #6]
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006efa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006efe:	6800      	ldr	r0, [r0, #0]
 8006f00:	f001 fc1d 	bl	800873e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4413      	add	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	00da      	lsls	r2, r3, #3
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	f000 bde3 	b.w	8007b14 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	f040 843a 	bne.w	80077d4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a1a      	ldr	r2, [r3, #32]
 8006f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	f240 83b7 	bls.w	80076ec <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 81b3 	beq.w	8007386 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	633b      	str	r3, [r7, #48]	; 0x30
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d16d      	bne.n	8007118 <USB_EPStartXfer+0x2ba>
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28
 8007048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	4413      	add	r3, r2
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	00da      	lsls	r2, r3, #3
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	4413      	add	r3, r2
 8007072:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	2b3e      	cmp	r3, #62	; 0x3e
 800707e:	d91c      	bls.n	80070ba <USB_EPStartXfer+0x25c>
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b00      	cmp	r3, #0
 8007094:	d104      	bne.n	80070a0 <USB_EPStartXfer+0x242>
 8007096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800709a:	3b01      	subs	r3, #1
 800709c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	e053      	b.n	8007162 <USB_EPStartXfer+0x304>
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d112      	bne.n	80070e8 <USB_EPStartXfer+0x28a>
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e03c      	b.n	8007162 <USB_EPStartXfer+0x304>
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USB_EPStartXfer+0x2aa>
 80070fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007102:	3301      	adds	r3, #1
 8007104:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007108:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800710c:	b29b      	uxth	r3, r3
 800710e:	029b      	lsls	r3, r3, #10
 8007110:	b29a      	uxth	r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e024      	b.n	8007162 <USB_EPStartXfer+0x304>
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d11c      	bne.n	8007162 <USB_EPStartXfer+0x304>
 8007128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	4413      	add	r3, r2
 800713e:	633b      	str	r3, [r7, #48]	; 0x30
 8007140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	00da      	lsls	r2, r3, #3
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	4413      	add	r3, r2
 8007152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715c:	b29a      	uxth	r2, r3
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	895b      	ldrh	r3, [r3, #10]
 800716e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6959      	ldr	r1, [r3, #20]
 800717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007182:	b29b      	uxth	r3, r3
 8007184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007188:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800718c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007190:	6800      	ldr	r0, [r0, #0]
 8007192:	f001 fad4 	bl	800873e <USB_WritePMA>
            ep->xfer_buff += len;
 8007196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695a      	ldr	r2, [r3, #20]
 80071a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a6:	441a      	add	r2, r3
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d90f      	bls.n	80071f0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80071d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	621a      	str	r2, [r3, #32]
 80071ee:	e00e      	b.n	800720e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80071f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2200      	movs	r2, #0
 800720c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800720e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d16d      	bne.n	80072fa <USB_EPStartXfer+0x49c>
 800721e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007238:	b29b      	uxth	r3, r3
 800723a:	461a      	mov	r2, r3
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	4413      	add	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	00da      	lsls	r2, r3, #3
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	4413      	add	r3, r2
 8007254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725e:	2b3e      	cmp	r3, #62	; 0x3e
 8007260:	d91c      	bls.n	800729c <USB_EPStartXfer+0x43e>
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007266:	095b      	lsrs	r3, r3, #5
 8007268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <USB_EPStartXfer+0x424>
 8007278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727c:	3b01      	subs	r3, #1
 800727e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007286:	b29b      	uxth	r3, r3
 8007288:	029b      	lsls	r3, r3, #10
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007294:	b29a      	uxth	r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e059      	b.n	8007350 <USB_EPStartXfer+0x4f2>
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d112      	bne.n	80072ca <USB_EPStartXfer+0x46c>
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	801a      	strh	r2, [r3, #0]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e042      	b.n	8007350 <USB_EPStartXfer+0x4f2>
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <USB_EPStartXfer+0x48c>
 80072e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	029b      	lsls	r3, r3, #10
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	801a      	strh	r2, [r3, #0]
 80072f8:	e02a      	b.n	8007350 <USB_EPStartXfer+0x4f2>
 80072fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d122      	bne.n	8007350 <USB_EPStartXfer+0x4f2>
 800730a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007324:	b29b      	uxth	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	4413      	add	r3, r2
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	00da      	lsls	r2, r3, #3
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	4413      	add	r3, r2
 8007340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734a:	b29a      	uxth	r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6959      	ldr	r1, [r3, #20]
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	b29b      	uxth	r3, r3
 8007372:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007376:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800737a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800737e:	6800      	ldr	r0, [r0, #0]
 8007380:	f001 f9dd 	bl	800873e <USB_WritePMA>
 8007384:	e3c6      	b.n	8007b14 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d16d      	bne.n	8007472 <USB_EPStartXfer+0x614>
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073b6:	4413      	add	r3, r2
 80073b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	00da      	lsls	r2, r3, #3
 80073c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d0:	647b      	str	r3, [r7, #68]	; 0x44
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d6:	2b3e      	cmp	r3, #62	; 0x3e
 80073d8:	d91c      	bls.n	8007414 <USB_EPStartXfer+0x5b6>
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e8:	f003 031f 	and.w	r3, r3, #31
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <USB_EPStartXfer+0x59c>
 80073f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073f4:	3b01      	subs	r3, #1
 80073f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073fe:	b29b      	uxth	r3, r3
 8007400:	029b      	lsls	r3, r3, #10
 8007402:	b29b      	uxth	r3, r3
 8007404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740c:	b29a      	uxth	r2, r3
 800740e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	e059      	b.n	80074c8 <USB_EPStartXfer+0x66a>
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007418:	2b00      	cmp	r3, #0
 800741a:	d112      	bne.n	8007442 <USB_EPStartXfer+0x5e4>
 800741c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007426:	b29a      	uxth	r2, r3
 8007428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742e:	881b      	ldrh	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743a:	b29a      	uxth	r2, r3
 800743c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	e042      	b.n	80074c8 <USB_EPStartXfer+0x66a>
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007446:	085b      	lsrs	r3, r3, #1
 8007448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <USB_EPStartXfer+0x604>
 8007458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800745c:	3301      	adds	r3, #1
 800745e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007466:	b29b      	uxth	r3, r3
 8007468:	029b      	lsls	r3, r3, #10
 800746a:	b29a      	uxth	r2, r3
 800746c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e02a      	b.n	80074c8 <USB_EPStartXfer+0x66a>
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d122      	bne.n	80074c8 <USB_EPStartXfer+0x66a>
 8007482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	653b      	str	r3, [r7, #80]	; 0x50
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749c:	b29b      	uxth	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a2:	4413      	add	r3, r2
 80074a4:	653b      	str	r3, [r7, #80]	; 0x50
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	00da      	lsls	r2, r3, #3
 80074b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b6:	4413      	add	r3, r2
 80074b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	891b      	ldrh	r3, [r3, #8]
 80074d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6959      	ldr	r1, [r3, #20]
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074f6:	6800      	ldr	r0, [r0, #0]
 80074f8:	f001 f921 	bl	800873e <USB_WritePMA>
            ep->xfer_buff += len;
 80074fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750c:	441a      	add	r2, r3
 800750e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	429a      	cmp	r2, r3
 8007534:	d90f      	bls.n	8007556 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a1a      	ldr	r2, [r3, #32]
 8007542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007546:	1ad2      	subs	r2, r2, r3
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	621a      	str	r2, [r3, #32]
 8007554:	e00e      	b.n	8007574 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8007556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d16d      	bne.n	800766c <USB_EPStartXfer+0x80e>
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	63bb      	str	r3, [r7, #56]	; 0x38
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	4413      	add	r3, r2
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	00da      	lsls	r2, r3, #3
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d0:	2b3e      	cmp	r3, #62	; 0x3e
 80075d2:	d91c      	bls.n	800760e <USB_EPStartXfer+0x7b0>
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <USB_EPStartXfer+0x796>
 80075ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ee:	3b01      	subs	r3, #1
 80075f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	029b      	lsls	r3, r3, #10
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007606:	b29a      	uxth	r2, r3
 8007608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e053      	b.n	80076b6 <USB_EPStartXfer+0x858>
 800760e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007612:	2b00      	cmp	r3, #0
 8007614:	d112      	bne.n	800763c <USB_EPStartXfer+0x7de>
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007620:	b29a      	uxth	r2, r3
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007634:	b29a      	uxth	r2, r3
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e03c      	b.n	80076b6 <USB_EPStartXfer+0x858>
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <USB_EPStartXfer+0x7fe>
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007656:	3301      	adds	r3, #1
 8007658:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	b29b      	uxth	r3, r3
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	b29a      	uxth	r2, r3
 8007666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e024      	b.n	80076b6 <USB_EPStartXfer+0x858>
 800766c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d11c      	bne.n	80076b6 <USB_EPStartXfer+0x858>
 800767c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768a:	b29b      	uxth	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007690:	4413      	add	r3, r2
 8007692:	643b      	str	r3, [r7, #64]	; 0x40
 8007694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	00da      	lsls	r2, r3, #3
 80076a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076a4:	4413      	add	r3, r2
 80076a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	895b      	ldrh	r3, [r3, #10]
 80076c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6959      	ldr	r1, [r3, #20]
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076e4:	6800      	ldr	r0, [r0, #0]
 80076e6:	f001 f82a 	bl	800873e <USB_WritePMA>
 80076ea:	e213      	b.n	8007b14 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007754:	b29b      	uxth	r3, r3
 8007756:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007772:	b29b      	uxth	r3, r3
 8007774:	461a      	mov	r2, r3
 8007776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007778:	4413      	add	r3, r2
 800777a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00da      	lsls	r2, r3, #3
 800778a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800778c:	4413      	add	r3, r2
 800778e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007792:	65bb      	str	r3, [r7, #88]	; 0x58
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007798:	b29a      	uxth	r2, r3
 800779a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800779c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	891b      	ldrh	r3, [r3, #8]
 80077aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6959      	ldr	r1, [r3, #20]
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	f000 ffb6 	bl	800873e <USB_WritePMA>
 80077d2:	e19f      	b.n	8007b14 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a1a      	ldr	r2, [r3, #32]
 80077e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e4:	1ad2      	subs	r2, r2, r3
 80077e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80bc 	beq.w	8007992 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800781a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	673b      	str	r3, [r7, #112]	; 0x70
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d16d      	bne.n	8007912 <USB_EPStartXfer+0xab4>
 8007836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800783a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	66bb      	str	r3, [r7, #104]	; 0x68
 8007842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007856:	4413      	add	r3, r2
 8007858:	66bb      	str	r3, [r7, #104]	; 0x68
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00da      	lsls	r2, r3, #3
 8007868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800786a:	4413      	add	r3, r2
 800786c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007870:	667b      	str	r3, [r7, #100]	; 0x64
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007876:	2b3e      	cmp	r3, #62	; 0x3e
 8007878:	d91c      	bls.n	80078b4 <USB_EPStartXfer+0xa56>
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <USB_EPStartXfer+0xa3c>
 8007890:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007894:	3b01      	subs	r3, #1
 8007896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800789a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b0:	801a      	strh	r2, [r3, #0]
 80078b2:	e053      	b.n	800795c <USB_EPStartXfer+0xafe>
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d112      	bne.n	80078e2 <USB_EPStartXfer+0xa84>
 80078bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078da:	b29a      	uxth	r2, r3
 80078dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	e03c      	b.n	800795c <USB_EPStartXfer+0xafe>
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <USB_EPStartXfer+0xaa4>
 80078f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078fc:	3301      	adds	r3, #1
 80078fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007906:	b29b      	uxth	r3, r3
 8007908:	029b      	lsls	r3, r3, #10
 800790a:	b29a      	uxth	r2, r3
 800790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790e:	801a      	strh	r2, [r3, #0]
 8007910:	e024      	b.n	800795c <USB_EPStartXfer+0xafe>
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d11c      	bne.n	800795c <USB_EPStartXfer+0xafe>
 8007922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007930:	b29b      	uxth	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007936:	4413      	add	r3, r2
 8007938:	673b      	str	r3, [r7, #112]	; 0x70
 800793a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	00da      	lsls	r2, r3, #3
 8007948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794a:	4413      	add	r3, r2
 800794c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007956:	b29a      	uxth	r2, r3
 8007958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	895b      	ldrh	r3, [r3, #10]
 8007968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6959      	ldr	r1, [r3, #20]
 8007978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797c:	b29b      	uxth	r3, r3
 800797e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007982:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007986:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	f000 fed7 	bl	800873e <USB_WritePMA>
 8007990:	e0c0      	b.n	8007b14 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d16d      	bne.n	8007a7e <USB_EPStartXfer+0xc20>
 80079a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079c2:	4413      	add	r3, r2
 80079c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	00da      	lsls	r2, r3, #3
 80079d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079d6:	4413      	add	r3, r2
 80079d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e2:	2b3e      	cmp	r3, #62	; 0x3e
 80079e4:	d91c      	bls.n	8007a20 <USB_EPStartXfer+0xbc2>
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f4:	f003 031f 	and.w	r3, r3, #31
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <USB_EPStartXfer+0xba8>
 80079fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e05f      	b.n	8007ae0 <USB_EPStartXfer+0xc82>
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d112      	bne.n	8007a4e <USB_EPStartXfer+0xbf0>
 8007a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	e048      	b.n	8007ae0 <USB_EPStartXfer+0xc82>
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <USB_EPStartXfer+0xc10>
 8007a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	029b      	lsls	r3, r3, #10
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e030      	b.n	8007ae0 <USB_EPStartXfer+0xc82>
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d128      	bne.n	8007ae0 <USB_EPStartXfer+0xc82>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	00da      	lsls	r2, r3, #3
 8007ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	891b      	ldrh	r3, [r3, #8]
 8007aec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6959      	ldr	r1, [r3, #20]
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b0e:	6800      	ldr	r0, [r0, #0]
 8007b10:	f000 fe15 	bl	800873e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b3a:	817b      	strh	r3, [r7, #10]
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	f083 0310 	eor.w	r3, r3, #16
 8007b42:	817b      	strh	r3, [r7, #10]
 8007b44:	897b      	ldrh	r3, [r7, #10]
 8007b46:	f083 0320 	eor.w	r3, r3, #32
 8007b4a:	817b      	strh	r3, [r7, #10]
 8007b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	897b      	ldrh	r3, [r7, #10]
 8007b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	8013      	strh	r3, [r2, #0]
 8007b7c:	f000 bc9f 	b.w	80084be <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	7b1b      	ldrb	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 80ae 	bne.w	8007cee <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d917      	bls.n	8007bde <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	619a      	str	r2, [r3, #24]
 8007bdc:	e00e      	b.n	8007bfc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c20:	4413      	add	r3, r2
 8007c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	00da      	lsls	r2, r3, #3
 8007c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c38:	4413      	add	r3, r2
 8007c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c46:	2b3e      	cmp	r3, #62	; 0x3e
 8007c48:	d91d      	bls.n	8007c86 <USB_EPStartXfer+0xe28>
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <USB_EPStartXfer+0xe0c>
 8007c60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c64:	3b01      	subs	r3, #1
 8007c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	029b      	lsls	r3, r3, #10
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	e3e1      	b.n	800844a <USB_EPStartXfer+0x15ec>
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d116      	bne.n	8007cbc <USB_EPStartXfer+0xe5e>
 8007c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e3c6      	b.n	800844a <USB_EPStartXfer+0x15ec>
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc0:	085b      	lsrs	r3, r3, #1
 8007cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <USB_EPStartXfer+0xe7e>
 8007cd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	029b      	lsls	r3, r3, #10
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	e3ad      	b.n	800844a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	f040 8200 	bne.w	8008100 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8091 	bne.w	8007e34 <USB_EPStartXfer+0xfd6>
 8007d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	461a      	mov	r2, r3
 8007d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	00da      	lsls	r2, r3, #3
 8007d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d4e:	4413      	add	r3, r2
 8007d50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b3e      	cmp	r3, #62	; 0x3e
 8007d66:	d925      	bls.n	8007db4 <USB_EPStartXfer+0xf56>
 8007d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <USB_EPStartXfer+0xf3a>
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d92:	3b01      	subs	r3, #1
 8007d94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	029b      	lsls	r3, r3, #10
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	e074      	b.n	8007e9e <USB_EPStartXfer+0x1040>
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d116      	bne.n	8007df2 <USB_EPStartXfer+0xf94>
 8007dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	e055      	b.n	8007e9e <USB_EPStartXfer+0x1040>
 8007df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <USB_EPStartXfer+0xfc4>
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e034      	b.n	8007e9e <USB_EPStartXfer+0x1040>
 8007e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d12c      	bne.n	8007e9e <USB_EPStartXfer+0x1040>
 8007e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e68:	4413      	add	r3, r2
 8007e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	00da      	lsls	r2, r3, #3
 8007e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e80:	4413      	add	r3, r2
 8007e82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 8091 	bne.w	8007fe0 <USB_EPStartXfer+0x1182>
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	00da      	lsls	r2, r3, #3
 8007ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007efa:	4413      	add	r3, r2
 8007efc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b3e      	cmp	r3, #62	; 0x3e
 8007f12:	d925      	bls.n	8007f60 <USB_EPStartXfer+0x1102>
 8007f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <USB_EPStartXfer+0x10e6>
 8007f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	029b      	lsls	r3, r3, #10
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	e06d      	b.n	800803c <USB_EPStartXfer+0x11de>
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d116      	bne.n	8007f9e <USB_EPStartXfer+0x1140>
 8007f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f82:	801a      	strh	r2, [r3, #0]
 8007f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e04e      	b.n	800803c <USB_EPStartXfer+0x11de>
 8007f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	085b      	lsrs	r3, r3, #1
 8007fac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <USB_EPStartXfer+0x1170>
 8007fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	029b      	lsls	r3, r3, #10
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e02d      	b.n	800803c <USB_EPStartXfer+0x11de>
 8007fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d125      	bne.n	800803c <USB_EPStartXfer+0x11de>
 8007ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008006:	4413      	add	r3, r2
 8008008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800800c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	00da      	lsls	r2, r3, #3
 800801a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800801e:	4413      	add	r3, r2
 8008020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008024:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800802c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	b29a      	uxth	r2, r3
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800803a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800803c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 81fe 	beq.w	800844a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800804e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800806e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <USB_EPStartXfer+0x1228>
 800807a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10d      	bne.n	80080a2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008086:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800808e:	2b00      	cmp	r3, #0
 8008090:	f040 81db 	bne.w	800844a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008094:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 81d4 	bne.w	800844a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80080ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	8013      	strh	r3, [r2, #0]
 80080fe:	e1a4      	b.n	800844a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	78db      	ldrb	r3, [r3, #3]
 800810c:	2b01      	cmp	r3, #1
 800810e:	f040 819a 	bne.w	8008446 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	429a      	cmp	r2, r3
 800812c:	d917      	bls.n	800815e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800812e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800813e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814e:	1ad2      	subs	r2, r2, r3
 8008150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	619a      	str	r2, [r3, #24]
 800815c:	e00e      	b.n	800817c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800815e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2200      	movs	r2, #0
 800817a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800817c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d178      	bne.n	800827e <USB_EPStartXfer+0x1420>
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800819a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081b0:	4413      	add	r3, r2
 80081b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	00da      	lsls	r2, r3, #3
 80081c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081c8:	4413      	add	r3, r2
 80081ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d6:	2b3e      	cmp	r3, #62	; 0x3e
 80081d8:	d91d      	bls.n	8008216 <USB_EPStartXfer+0x13b8>
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <USB_EPStartXfer+0x139c>
 80081f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	b29b      	uxth	r3, r3
 8008200:	029b      	lsls	r3, r3, #10
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820c:	b29a      	uxth	r2, r3
 800820e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e064      	b.n	80082e0 <USB_EPStartXfer+0x1482>
 8008216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821a:	2b00      	cmp	r3, #0
 800821c:	d116      	bne.n	800824c <USB_EPStartXfer+0x13ee>
 800821e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008242:	b29a      	uxth	r2, r3
 8008244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	e049      	b.n	80082e0 <USB_EPStartXfer+0x1482>
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008250:	085b      	lsrs	r3, r3, #1
 8008252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <USB_EPStartXfer+0x140e>
 8008262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008266:	3301      	adds	r3, #1
 8008268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800826c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008270:	b29b      	uxth	r3, r3
 8008272:	029b      	lsls	r3, r3, #10
 8008274:	b29a      	uxth	r2, r3
 8008276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e030      	b.n	80082e0 <USB_EPStartXfer+0x1482>
 800827e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d128      	bne.n	80082e0 <USB_EPStartXfer+0x1482>
 800828e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b2:	4413      	add	r3, r2
 80082b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	00da      	lsls	r2, r3, #3
 80082c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ca:	4413      	add	r3, r2
 80082cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d178      	bne.n	80083f0 <USB_EPStartXfer+0x1592>
 80082fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831a:	b29b      	uxth	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008322:	4413      	add	r3, r2
 8008324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	00da      	lsls	r2, r3, #3
 8008336:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800833a:	4413      	add	r3, r2
 800833c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	2b3e      	cmp	r3, #62	; 0x3e
 800834a:	d91d      	bls.n	8008388 <USB_EPStartXfer+0x152a>
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008350:	095b      	lsrs	r3, r3, #5
 8008352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <USB_EPStartXfer+0x150e>
 8008362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008366:	3b01      	subs	r3, #1
 8008368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800836c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008370:	b29b      	uxth	r3, r3
 8008372:	029b      	lsls	r3, r3, #10
 8008374:	b29b      	uxth	r3, r3
 8008376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	e060      	b.n	800844a <USB_EPStartXfer+0x15ec>
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800838c:	2b00      	cmp	r3, #0
 800838e:	d116      	bne.n	80083be <USB_EPStartXfer+0x1560>
 8008390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800839c:	b29a      	uxth	r2, r3
 800839e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083a2:	801a      	strh	r2, [r3, #0]
 80083a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	e045      	b.n	800844a <USB_EPStartXfer+0x15ec>
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c2:	085b      	lsrs	r3, r3, #1
 80083c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <USB_EPStartXfer+0x1580>
 80083d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083d8:	3301      	adds	r3, #1
 80083da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	029b      	lsls	r3, r3, #10
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e02c      	b.n	800844a <USB_EPStartXfer+0x15ec>
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	785b      	ldrb	r3, [r3, #1]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d124      	bne.n	800844a <USB_EPStartXfer+0x15ec>
 8008400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008416:	4413      	add	r3, r2
 8008418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	00da      	lsls	r2, r3, #3
 800842a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800842e:	4413      	add	r3, r2
 8008430:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843c:	b29a      	uxth	r2, r3
 800843e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008442:	801a      	strh	r2, [r3, #0]
 8008444:	e001      	b.n	800844a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e03a      	b.n	80084c0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800844a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800846c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008470:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008474:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800847c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008480:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008488:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800848c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	441a      	add	r2, r3
 80084a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d020      	beq.n	800851e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f2:	81bb      	strh	r3, [r7, #12]
 80084f4:	89bb      	ldrh	r3, [r7, #12]
 80084f6:	f083 0310 	eor.w	r3, r3, #16
 80084fa:	81bb      	strh	r3, [r7, #12]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	89bb      	ldrh	r3, [r7, #12]
 8008508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008518:	b29b      	uxth	r3, r3
 800851a:	8013      	strh	r3, [r2, #0]
 800851c:	e01f      	b.n	800855e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	81fb      	strh	r3, [r7, #14]
 8008536:	89fb      	ldrh	r3, [r7, #14]
 8008538:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800853c:	81fb      	strh	r3, [r7, #14]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	441a      	add	r2, r3
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800855a:	b29b      	uxth	r3, r3
 800855c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	7b1b      	ldrb	r3, [r3, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 809d 	bne.w	80086ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d04c      	beq.n	8008622 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	823b      	strh	r3, [r7, #16]
 8008596:	8a3b      	ldrh	r3, [r7, #16]
 8008598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <USB_EPClearStall+0x6c>
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	81fb      	strh	r3, [r7, #14]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	441a      	add	r2, r3
 80085c2:	89fb      	ldrh	r3, [r7, #14]
 80085c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	78db      	ldrb	r3, [r3, #3]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d06c      	beq.n	80086ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f6:	81bb      	strh	r3, [r7, #12]
 80085f8:	89bb      	ldrh	r3, [r7, #12]
 80085fa:	f083 0320 	eor.w	r3, r3, #32
 80085fe:	81bb      	strh	r3, [r7, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	441a      	add	r2, r3
 800860a:	89bb      	ldrh	r3, [r7, #12]
 800860c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861c:	b29b      	uxth	r3, r3
 800861e:	8013      	strh	r3, [r2, #0]
 8008620:	e04b      	b.n	80086ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	82fb      	strh	r3, [r7, #22]
 8008630:	8afb      	ldrh	r3, [r7, #22]
 8008632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01b      	beq.n	8008672 <USB_EPClearStall+0x106>
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008650:	82bb      	strh	r3, [r7, #20]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	8abb      	ldrh	r3, [r7, #20]
 800865e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800866a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	827b      	strh	r3, [r7, #18]
 800868a:	8a7b      	ldrh	r3, [r7, #18]
 800868c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008690:	827b      	strh	r3, [r7, #18]
 8008692:	8a7b      	ldrh	r3, [r7, #18]
 8008694:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008698:	827b      	strh	r3, [r7, #18]
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	8a7b      	ldrh	r3, [r7, #18]
 80086a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d103      	bne.n	80086e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2280      	movs	r2, #128	; 0x80
 80086de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086fe:	b29b      	uxth	r3, r3
 8008700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008708:	b29a      	uxth	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800871e:	b480      	push	{r7}
 8008720:	b085      	sub	sp, #20
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800872c:	b29b      	uxth	r3, r3
 800872e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008730:	68fb      	ldr	r3, [r7, #12]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800873e:	b480      	push	{r7}
 8008740:	b08d      	sub	sp, #52	; 0x34
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	4611      	mov	r1, r2
 800874a:	461a      	mov	r2, r3
 800874c:	460b      	mov	r3, r1
 800874e:	80fb      	strh	r3, [r7, #6]
 8008750:	4613      	mov	r3, r2
 8008752:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008754:	88bb      	ldrh	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008764:	88fa      	ldrh	r2, [r7, #6]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008774:	e01b      	b.n	80087ae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	3301      	adds	r3, #1
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	b29b      	uxth	r3, r3
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b29b      	uxth	r3, r3
 800878c:	461a      	mov	r2, r3
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	b29a      	uxth	r2, r3
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	3302      	adds	r3, #2
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	3301      	adds	r3, #1
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	3b01      	subs	r3, #1
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e0      	bne.n	8008776 <USB_WritePMA+0x38>
  }
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	3734      	adds	r7, #52	; 0x34
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b08b      	sub	sp, #44	; 0x2c
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	4611      	mov	r1, r2
 80087ce:	461a      	mov	r2, r3
 80087d0:	460b      	mov	r3, r1
 80087d2:	80fb      	strh	r3, [r7, #6]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087d8:	88bb      	ldrh	r3, [r7, #4]
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	b29b      	uxth	r3, r3
 80087de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087f2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
 80087f8:	e018      	b.n	800882c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	3302      	adds	r3, #2
 8008806:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	b2da      	uxtb	r2, r3
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	3301      	adds	r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	3b01      	subs	r3, #1
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e3      	bne.n	80087fa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008832:	88bb      	ldrh	r3, [r7, #4]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d007      	beq.n	800884e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	b29b      	uxth	r3, r3
 8008844:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	b2da      	uxtb	r2, r3
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	701a      	strb	r2, [r3, #0]
  }
}
 800884e:	bf00      	nop
 8008850:	372c      	adds	r7, #44	; 0x2c
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008866:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800886a:	f002 f901 	bl	800aa70 <USBD_static_malloc>
 800886e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800887e:	2302      	movs	r3, #2
 8008880:	e066      	b.n	8008950 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7c1b      	ldrb	r3, [r3, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d119      	bne.n	80088c6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008896:	2202      	movs	r2, #2
 8008898:	2181      	movs	r1, #129	; 0x81
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 ff8d 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088aa:	2202      	movs	r2, #2
 80088ac:	2101      	movs	r1, #1
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 ff83 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2210      	movs	r2, #16
 80088c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088c4:	e016      	b.n	80088f4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088c6:	2340      	movs	r3, #64	; 0x40
 80088c8:	2202      	movs	r2, #2
 80088ca:	2181      	movs	r1, #129	; 0x81
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 ff74 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	2202      	movs	r2, #2
 80088dc:	2101      	movs	r1, #1
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 ff6b 	bl	800a7ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2210      	movs	r2, #16
 80088f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088f4:	2308      	movs	r3, #8
 80088f6:	2203      	movs	r2, #3
 80088f8:	2182      	movs	r1, #130	; 0x82
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 ff5d 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	7c1b      	ldrb	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008934:	2101      	movs	r1, #1
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f002 f82f 	bl	800a99a <USBD_LL_PrepareReceive>
 800893c:	e007      	b.n	800894e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	2101      	movs	r1, #1
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 f826 	bl	800a99a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008964:	2181      	movs	r1, #129	; 0x81
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 ff4d 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008972:	2101      	movs	r1, #1
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 ff46 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008982:	2182      	movs	r1, #130	; 0x82
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 ff3e 	bl	800a806 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00e      	beq.n	80089c2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089b4:	4618      	mov	r0, r3
 80089b6:	f002 f869 	bl	800aa8c <USBD_static_free>
    pdev->pClassData = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089f0:	2303      	movs	r3, #3
 80089f2:	e0af      	b.n	8008b54 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d03f      	beq.n	8008a80 <USBD_CDC_Setup+0xb4>
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	f040 809f 	bne.w	8008b44 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	88db      	ldrh	r3, [r3, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d02e      	beq.n	8008a6c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	b25b      	sxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	da16      	bge.n	8008a46 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	88d2      	ldrh	r2, [r2, #6]
 8008a2a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	88db      	ldrh	r3, [r3, #6]
 8008a30:	2b07      	cmp	r3, #7
 8008a32:	bf28      	it	cs
 8008a34:	2307      	movcs	r3, #7
 8008a36:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	89fa      	ldrh	r2, [r7, #14]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 facf 	bl	8009fe2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a44:	e085      	b.n	8008b52 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	785a      	ldrb	r2, [r3, #1]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a5c:	6939      	ldr	r1, [r7, #16]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 fae8 	bl	800a03a <USBD_CtlPrepareRx>
      break;
 8008a6a:	e072      	b.n	8008b52 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	7850      	ldrb	r0, [r2, #1]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	4798      	blx	r3
      break;
 8008a7e:	e068      	b.n	8008b52 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	785b      	ldrb	r3, [r3, #1]
 8008a84:	2b0b      	cmp	r3, #11
 8008a86:	d852      	bhi.n	8008b2e <USBD_CDC_Setup+0x162>
 8008a88:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <USBD_CDC_Setup+0xc4>)
 8008a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8e:	bf00      	nop
 8008a90:	08008ac1 	.word	0x08008ac1
 8008a94:	08008b3d 	.word	0x08008b3d
 8008a98:	08008b2f 	.word	0x08008b2f
 8008a9c:	08008b2f 	.word	0x08008b2f
 8008aa0:	08008b2f 	.word	0x08008b2f
 8008aa4:	08008b2f 	.word	0x08008b2f
 8008aa8:	08008b2f 	.word	0x08008b2f
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b2f 	.word	0x08008b2f
 8008ab4:	08008b2f 	.word	0x08008b2f
 8008ab8:	08008aeb 	.word	0x08008aeb
 8008abc:	08008b15 	.word	0x08008b15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b03      	cmp	r3, #3
 8008aca:	d107      	bne.n	8008adc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008acc:	f107 030a 	add.w	r3, r7, #10
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fa84 	bl	8009fe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ada:	e032      	b.n	8008b42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fa0e 	bl	8009f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae8:	e02b      	b.n	8008b42 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d107      	bne.n	8008b06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008af6:	f107 030d 	add.w	r3, r7, #13
 8008afa:	2201      	movs	r2, #1
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fa6f 	bl	8009fe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b04:	e01d      	b.n	8008b42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f9f9 	bl	8009f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	75fb      	strb	r3, [r7, #23]
          break;
 8008b12:	e016      	b.n	8008b42 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d00f      	beq.n	8008b40 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f9ec 	bl	8009f00 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b2c:	e008      	b.n	8008b40 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 f9e5 	bl	8009f00 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	75fb      	strb	r3, [r7, #23]
          break;
 8008b3a:	e002      	b.n	8008b42 <USBD_CDC_Setup+0x176>
          break;
 8008b3c:	bf00      	nop
 8008b3e:	e008      	b.n	8008b52 <USBD_CDC_Setup+0x186>
          break;
 8008b40:	bf00      	nop
      }
      break;
 8008b42:	e006      	b.n	8008b52 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 f9da 	bl	8009f00 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b50:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e04f      	b.n	8008c1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	3318      	adds	r3, #24
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d029      	beq.n	8008bf0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b9c:	78fa      	ldrb	r2, [r7, #3]
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	440b      	add	r3, r1
 8008baa:	3318      	adds	r3, #24
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	78f9      	ldrb	r1, [r7, #3]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	4403      	add	r3, r0
 8008bbc:	3338      	adds	r3, #56	; 0x38
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d110      	bne.n	8008bf0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	3318      	adds	r3, #24
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008be2:	78f9      	ldrb	r1, [r7, #3]
 8008be4:	2300      	movs	r3, #0
 8008be6:	2200      	movs	r2, #0
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 feb5 	bl	800a958 <USBD_LL_Transmit>
 8008bee:	e015      	b.n	8008c1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e015      	b.n	8008c74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 fec5 	bl	800a9dc <USBD_LL_GetRxDataSize>
 8008c52:	4602      	mov	r2, r0
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e01b      	b.n	8008cce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <USBD_CDC_EP0_RxReady+0x50>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ca6:	2bff      	cmp	r3, #255	; 0xff
 8008ca8:	d010      	beq.n	8008ccc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc0:	b292      	uxth	r2, r2
 8008cc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	22ff      	movs	r2, #255	; 0xff
 8008cc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
	...

08008cd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2243      	movs	r2, #67	; 0x43
 8008ce4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	200000a4 	.word	0x200000a4

08008cf8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2243      	movs	r2, #67	; 0x43
 8008d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	20000060 	.word	0x20000060

08008d18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2243      	movs	r2, #67	; 0x43
 8008d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d26:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	200000e8 	.word	0x200000e8

08008d38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	220a      	movs	r2, #10
 8008d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	2000001c 	.word	0x2000001c

08008d58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e004      	b.n	8008d76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b087      	sub	sp, #28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e008      	b.n	8008db2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e004      	b.n	8008de4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e01a      	b.n	8008e48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d114      	bne.n	8008e46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008e3a:	2181      	movs	r1, #129	; 0x81
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 fd8b 	bl	800a958 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e016      	b.n	8008e9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7c1b      	ldrb	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d109      	bne.n	8008e8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e80:	2101      	movs	r1, #1
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fd89 	bl	800a99a <USBD_LL_PrepareReceive>
 8008e88:	e007      	b.n	8008e9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e90:	2340      	movs	r3, #64	; 0x40
 8008e92:	2101      	movs	r1, #1
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fd80 	bl	800a99a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e01f      	b.n	8008efc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	79fa      	ldrb	r2, [r7, #7]
 8008eee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 fbe7 	bl	800a6c4 <USBD_LL_Init>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e016      	b.n	8008f4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	f107 020e 	add.w	r2, r7, #14
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	4602      	mov	r2, r0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 fc12 	bl	800a784 <USBD_LL_Start>
 8008f60:	4603      	mov	r3, r0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	78fa      	ldrb	r2, [r7, #3]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
  }

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 ff46 	bl	8009e8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800901c:	f003 031f 	and.w	r3, r3, #31
 8009020:	2b02      	cmp	r3, #2
 8009022:	d01a      	beq.n	800905a <USBD_LL_SetupStage+0x72>
 8009024:	2b02      	cmp	r3, #2
 8009026:	d822      	bhi.n	800906e <USBD_LL_SetupStage+0x86>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <USBD_LL_SetupStage+0x4a>
 800902c:	2b01      	cmp	r3, #1
 800902e:	d00a      	beq.n	8009046 <USBD_LL_SetupStage+0x5e>
 8009030:	e01d      	b.n	800906e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f9ee 	bl	800941c <USBD_StdDevReq>
 8009040:	4603      	mov	r3, r0
 8009042:	73fb      	strb	r3, [r7, #15]
      break;
 8009044:	e020      	b.n	8009088 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa52 	bl	80094f8 <USBD_StdItfReq>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
      break;
 8009058:	e016      	b.n	8009088 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa91 	bl	800958a <USBD_StdEPReq>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	e00c      	b.n	8009088 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009074:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009078:	b2db      	uxtb	r3, r3
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fbe1 	bl	800a844 <USBD_LL_StallEP>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
      break;
 8009086:	bf00      	nop
  }

  return ret;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	460b      	mov	r3, r1
 800909c:	607a      	str	r2, [r7, #4]
 800909e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d138      	bne.n	8009118 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d14a      	bne.n	800914e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	689a      	ldr	r2, [r3, #8]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d913      	bls.n	80090ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	1ad2      	subs	r2, r2, r3
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	4293      	cmp	r3, r2
 80090dc:	bf28      	it	cs
 80090de:	4613      	movcs	r3, r2
 80090e0:	461a      	mov	r2, r3
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 ffc5 	bl	800a074 <USBD_CtlContinueRx>
 80090ea:	e030      	b.n	800914e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d10b      	bne.n	8009110 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 ffc0 	bl	800a096 <USBD_CtlSendStatus>
 8009116:	e01a      	b.n	800914e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b03      	cmp	r3, #3
 8009122:	d114      	bne.n	800914e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	7afa      	ldrb	r2, [r7, #11]
 800913a:	4611      	mov	r1, r2
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	4798      	blx	r3
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	e000      	b.n	8009150 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	460b      	mov	r3, r1
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d16b      	bne.n	8009244 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3314      	adds	r3, #20
 8009170:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009178:	2b02      	cmp	r3, #2
 800917a:	d156      	bne.n	800922a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d914      	bls.n	80091b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	1ad2      	subs	r2, r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	461a      	mov	r2, r3
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 ff3a 	bl	800a018 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a4:	2300      	movs	r3, #0
 80091a6:	2200      	movs	r2, #0
 80091a8:	2100      	movs	r1, #0
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f001 fbf5 	bl	800a99a <USBD_LL_PrepareReceive>
 80091b0:	e03b      	b.n	800922a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d11c      	bne.n	80091f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d316      	bcc.n	80091f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d20f      	bcs.n	80091f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 ff1b 	bl	800a018 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ea:	2300      	movs	r3, #0
 80091ec:	2200      	movs	r2, #0
 80091ee:	2100      	movs	r1, #0
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f001 fbd2 	bl	800a99a <USBD_LL_PrepareReceive>
 80091f6:	e018      	b.n	800922a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b03      	cmp	r3, #3
 8009202:	d10b      	bne.n	800921c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f001 fb10 	bl	800a844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 ff49 	bl	800a0bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009230:	2b01      	cmp	r3, #1
 8009232:	d122      	bne.n	800927a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7ff fe98 	bl	8008f6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009242:	e01a      	b.n	800927a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b03      	cmp	r3, #3
 800924e:	d114      	bne.n	800927a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009256:	695b      	ldr	r3, [r3, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00e      	beq.n	800927a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	7afa      	ldrb	r2, [r7, #11]
 8009266:	4611      	mov	r1, r2
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	4798      	blx	r3
 800926c:	4603      	mov	r3, r0
 800926e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	e000      	b.n	800927c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e02f      	b.n	8009318 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00f      	beq.n	80092e2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d009      	beq.n	80092e2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6852      	ldr	r2, [r2, #4]
 80092da:	b2d2      	uxtb	r2, r2
 80092dc:	4611      	mov	r1, r2
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	2200      	movs	r2, #0
 80092e6:	2100      	movs	r1, #0
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fa66 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2240      	movs	r2, #64	; 0x40
 80092fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	2200      	movs	r2, #0
 8009302:	2180      	movs	r1, #128	; 0x80
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fa58 	bl	800a7ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2240      	movs	r2, #64	; 0x40
 8009314:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	78fa      	ldrb	r2, [r7, #3]
 8009330:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800934e:	b2da      	uxtb	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b04      	cmp	r3, #4
 800937e:	d106      	bne.n	800938e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009386:	b2da      	uxtb	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e012      	b.n	80093d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d10b      	bne.n	80093d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	3301      	adds	r3, #1
 80093f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093fe:	8a3b      	ldrh	r3, [r7, #16]
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	b21a      	sxth	r2, r3
 8009404:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009408:	4313      	orrs	r3, r2
 800940a:	b21b      	sxth	r3, r3
 800940c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800940e:	89fb      	ldrh	r3, [r7, #14]
}
 8009410:	4618      	mov	r0, r3
 8009412:	371c      	adds	r7, #28
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009432:	2b40      	cmp	r3, #64	; 0x40
 8009434:	d005      	beq.n	8009442 <USBD_StdDevReq+0x26>
 8009436:	2b40      	cmp	r3, #64	; 0x40
 8009438:	d853      	bhi.n	80094e2 <USBD_StdDevReq+0xc6>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <USBD_StdDevReq+0x3a>
 800943e:	2b20      	cmp	r3, #32
 8009440:	d14f      	bne.n	80094e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	4798      	blx	r3
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
      break;
 8009454:	e04a      	b.n	80094ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	2b09      	cmp	r3, #9
 800945c:	d83b      	bhi.n	80094d6 <USBD_StdDevReq+0xba>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <USBD_StdDevReq+0x48>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	080094b9 	.word	0x080094b9
 8009468:	080094cd 	.word	0x080094cd
 800946c:	080094d7 	.word	0x080094d7
 8009470:	080094c3 	.word	0x080094c3
 8009474:	080094d7 	.word	0x080094d7
 8009478:	08009497 	.word	0x08009497
 800947c:	0800948d 	.word	0x0800948d
 8009480:	080094d7 	.word	0x080094d7
 8009484:	080094af 	.word	0x080094af
 8009488:	080094a1 	.word	0x080094a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9de 	bl	8009850 <USBD_GetDescriptor>
          break;
 8009494:	e024      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fb6d 	bl	8009b78 <USBD_SetAddress>
          break;
 800949e:	e01f      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fbac 	bl	8009c00 <USBD_SetConfig>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
          break;
 80094ac:	e018      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fc4b 	bl	8009d4c <USBD_GetConfig>
          break;
 80094b6:	e013      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fc7c 	bl	8009db8 <USBD_GetStatus>
          break;
 80094c0:	e00e      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fcab 	bl	8009e20 <USBD_SetFeature>
          break;
 80094ca:	e009      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fcba 	bl	8009e48 <USBD_ClrFeature>
          break;
 80094d4:	e004      	b.n	80094e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fd11 	bl	8009f00 <USBD_CtlError>
          break;
 80094de:	bf00      	nop
      }
      break;
 80094e0:	e004      	b.n	80094ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fd0b 	bl	8009f00 <USBD_CtlError>
      break;
 80094ea:	bf00      	nop
  }

  return ret;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop

080094f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d005      	beq.n	800951e <USBD_StdItfReq+0x26>
 8009512:	2b40      	cmp	r3, #64	; 0x40
 8009514:	d82f      	bhi.n	8009576 <USBD_StdItfReq+0x7e>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <USBD_StdItfReq+0x26>
 800951a:	2b20      	cmp	r3, #32
 800951c:	d12b      	bne.n	8009576 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009524:	b2db      	uxtb	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	2b02      	cmp	r3, #2
 800952a:	d81d      	bhi.n	8009568 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	889b      	ldrh	r3, [r3, #4]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b01      	cmp	r3, #1
 8009534:	d813      	bhi.n	800955e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	4798      	blx	r3
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	88db      	ldrh	r3, [r3, #6]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d110      	bne.n	8009572 <USBD_StdItfReq+0x7a>
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10d      	bne.n	8009572 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fd9d 	bl	800a096 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800955c:	e009      	b.n	8009572 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fccd 	bl	8009f00 <USBD_CtlError>
          break;
 8009566:	e004      	b.n	8009572 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fcc8 	bl	8009f00 <USBD_CtlError>
          break;
 8009570:	e000      	b.n	8009574 <USBD_StdItfReq+0x7c>
          break;
 8009572:	bf00      	nop
      }
      break;
 8009574:	e004      	b.n	8009580 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fcc1 	bl	8009f00 <USBD_CtlError>
      break;
 800957e:	bf00      	nop
  }

  return ret;
 8009580:	7bfb      	ldrb	r3, [r7, #15]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	889b      	ldrh	r3, [r3, #4]
 800959c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d007      	beq.n	80095ba <USBD_StdEPReq+0x30>
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	f200 8145 	bhi.w	800983a <USBD_StdEPReq+0x2b0>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00c      	beq.n	80095ce <USBD_StdEPReq+0x44>
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	f040 8140 	bne.w	800983a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
      break;
 80095cc:	e13a      	b.n	8009844 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	785b      	ldrb	r3, [r3, #1]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d007      	beq.n	80095e6 <USBD_StdEPReq+0x5c>
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	f300 8129 	bgt.w	800982e <USBD_StdEPReq+0x2a4>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d07f      	beq.n	80096e0 <USBD_StdEPReq+0x156>
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d03c      	beq.n	800965e <USBD_StdEPReq+0xd4>
 80095e4:	e123      	b.n	800982e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d002      	beq.n	80095f8 <USBD_StdEPReq+0x6e>
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d016      	beq.n	8009624 <USBD_StdEPReq+0x9a>
 80095f6:	e02c      	b.n	8009652 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00d      	beq.n	800961a <USBD_StdEPReq+0x90>
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b80      	cmp	r3, #128	; 0x80
 8009602:	d00a      	beq.n	800961a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 f91b 	bl	800a844 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800960e:	2180      	movs	r1, #128	; 0x80
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f917 	bl	800a844 <USBD_LL_StallEP>
 8009616:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009618:	e020      	b.n	800965c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fc6f 	bl	8009f00 <USBD_CtlError>
              break;
 8009622:	e01b      	b.n	800965c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	885b      	ldrh	r3, [r3, #2]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10e      	bne.n	800964a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <USBD_StdEPReq+0xc0>
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b80      	cmp	r3, #128	; 0x80
 8009636:	d008      	beq.n	800964a <USBD_StdEPReq+0xc0>
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	88db      	ldrh	r3, [r3, #6]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d104      	bne.n	800964a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 f8fd 	bl	800a844 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fd23 	bl	800a096 <USBD_CtlSendStatus>

              break;
 8009650:	e004      	b.n	800965c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fc53 	bl	8009f00 <USBD_CtlError>
              break;
 800965a:	bf00      	nop
          }
          break;
 800965c:	e0ec      	b.n	8009838 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b02      	cmp	r3, #2
 8009668:	d002      	beq.n	8009670 <USBD_StdEPReq+0xe6>
 800966a:	2b03      	cmp	r3, #3
 800966c:	d016      	beq.n	800969c <USBD_StdEPReq+0x112>
 800966e:	e030      	b.n	80096d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009670:	7bbb      	ldrb	r3, [r7, #14]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00d      	beq.n	8009692 <USBD_StdEPReq+0x108>
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b80      	cmp	r3, #128	; 0x80
 800967a:	d00a      	beq.n	8009692 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 f8df 	bl	800a844 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009686:	2180      	movs	r1, #128	; 0x80
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f8db 	bl	800a844 <USBD_LL_StallEP>
 800968e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009690:	e025      	b.n	80096de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc33 	bl	8009f00 <USBD_CtlError>
              break;
 800969a:	e020      	b.n	80096de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	885b      	ldrh	r3, [r3, #2]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11b      	bne.n	80096dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d004      	beq.n	80096b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 f8e5 	bl	800a882 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fcec 	bl	800a096 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80096d0:	e004      	b.n	80096dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc13 	bl	8009f00 <USBD_CtlError>
              break;
 80096da:	e000      	b.n	80096de <USBD_StdEPReq+0x154>
              break;
 80096dc:	bf00      	nop
          }
          break;
 80096de:	e0ab      	b.n	8009838 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d002      	beq.n	80096f2 <USBD_StdEPReq+0x168>
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d032      	beq.n	8009756 <USBD_StdEPReq+0x1cc>
 80096f0:	e097      	b.n	8009822 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <USBD_StdEPReq+0x17e>
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b80      	cmp	r3, #128	; 0x80
 80096fc:	d004      	beq.n	8009708 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fbfd 	bl	8009f00 <USBD_CtlError>
                break;
 8009706:	e091      	b.n	800982c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800970c:	2b00      	cmp	r3, #0
 800970e:	da0b      	bge.n	8009728 <USBD_StdEPReq+0x19e>
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	3310      	adds	r3, #16
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	4413      	add	r3, r2
 8009724:	3304      	adds	r3, #4
 8009726:	e00b      	b.n	8009740 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	3304      	adds	r3, #4
 8009740:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2202      	movs	r2, #2
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fc47 	bl	8009fe2 <USBD_CtlSendData>
              break;
 8009754:	e06a      	b.n	800982c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009756:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800975a:	2b00      	cmp	r3, #0
 800975c:	da11      	bge.n	8009782 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	f003 020f 	and.w	r2, r3, #15
 8009764:	6879      	ldr	r1, [r7, #4]
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	440b      	add	r3, r1
 8009770:	3324      	adds	r3, #36	; 0x24
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d117      	bne.n	80097a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fbc0 	bl	8009f00 <USBD_CtlError>
                  break;
 8009780:	e054      	b.n	800982c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	f003 020f 	and.w	r2, r3, #15
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fbad 	bl	8009f00 <USBD_CtlError>
                  break;
 80097a6:	e041      	b.n	800982c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da0b      	bge.n	80097c8 <USBD_StdEPReq+0x23e>
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	3310      	adds	r3, #16
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	4413      	add	r3, r2
 80097c4:	3304      	adds	r3, #4
 80097c6:	e00b      	b.n	80097e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	3304      	adds	r3, #4
 80097e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <USBD_StdEPReq+0x264>
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b80      	cmp	r3, #128	; 0x80
 80097ec:	d103      	bne.n	80097f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e00e      	b.n	8009814 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 f860 	bl	800a8c0 <USBD_LL_IsStallEP>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2201      	movs	r2, #1
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	e002      	b.n	8009814 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2200      	movs	r2, #0
 8009812:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2202      	movs	r2, #2
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fbe1 	bl	8009fe2 <USBD_CtlSendData>
              break;
 8009820:	e004      	b.n	800982c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fb6b 	bl	8009f00 <USBD_CtlError>
              break;
 800982a:	bf00      	nop
          }
          break;
 800982c:	e004      	b.n	8009838 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fb65 	bl	8009f00 <USBD_CtlError>
          break;
 8009836:	bf00      	nop
      }
      break;
 8009838:	e004      	b.n	8009844 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fb5f 	bl	8009f00 <USBD_CtlError>
      break;
 8009842:	bf00      	nop
  }

  return ret;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	b29b      	uxth	r3, r3
 800986e:	3b01      	subs	r3, #1
 8009870:	2b0e      	cmp	r3, #14
 8009872:	f200 8152 	bhi.w	8009b1a <USBD_GetDescriptor+0x2ca>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <USBD_GetDescriptor+0x2c>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098ed 	.word	0x080098ed
 8009880:	08009905 	.word	0x08009905
 8009884:	08009945 	.word	0x08009945
 8009888:	08009b1b 	.word	0x08009b1b
 800988c:	08009b1b 	.word	0x08009b1b
 8009890:	08009abb 	.word	0x08009abb
 8009894:	08009ae7 	.word	0x08009ae7
 8009898:	08009b1b 	.word	0x08009b1b
 800989c:	08009b1b 	.word	0x08009b1b
 80098a0:	08009b1b 	.word	0x08009b1b
 80098a4:	08009b1b 	.word	0x08009b1b
 80098a8:	08009b1b 	.word	0x08009b1b
 80098ac:	08009b1b 	.word	0x08009b1b
 80098b0:	08009b1b 	.word	0x08009b1b
 80098b4:	080098b9 	.word	0x080098b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	7c12      	ldrb	r2, [r2, #16]
 80098d0:	f107 0108 	add.w	r1, r7, #8
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
 80098d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098da:	e126      	b.n	8009b2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fb0e 	bl	8009f00 <USBD_CtlError>
        err++;
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	3301      	adds	r3, #1
 80098e8:	72fb      	strb	r3, [r7, #11]
      break;
 80098ea:	e11e      	b.n	8009b2a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	7c12      	ldrb	r2, [r2, #16]
 80098f8:	f107 0108 	add.w	r1, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
      break;
 8009902:	e112      	b.n	8009b2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7c1b      	ldrb	r3, [r3, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10d      	bne.n	8009928 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f107 0208 	add.w	r2, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	2202      	movs	r2, #2
 8009924:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009926:	e100      	b.n	8009b2a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	f107 0208 	add.w	r2, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	2202      	movs	r2, #2
 8009940:	701a      	strb	r2, [r3, #0]
      break;
 8009942:	e0f2      	b.n	8009b2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b05      	cmp	r3, #5
 800994c:	f200 80ac 	bhi.w	8009aa8 <USBD_GetDescriptor+0x258>
 8009950:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <USBD_GetDescriptor+0x108>)
 8009952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009956:	bf00      	nop
 8009958:	08009971 	.word	0x08009971
 800995c:	080099a5 	.word	0x080099a5
 8009960:	080099d9 	.word	0x080099d9
 8009964:	08009a0d 	.word	0x08009a0d
 8009968:	08009a41 	.word	0x08009a41
 800996c:	08009a75 	.word	0x08009a75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00b      	beq.n	8009994 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	7c12      	ldrb	r2, [r2, #16]
 8009988:	f107 0108 	add.w	r1, r7, #8
 800998c:	4610      	mov	r0, r2
 800998e:	4798      	blx	r3
 8009990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009992:	e091      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fab2 	bl	8009f00 <USBD_CtlError>
            err++;
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	3301      	adds	r3, #1
 80099a0:	72fb      	strb	r3, [r7, #11]
          break;
 80099a2:	e089      	b.n	8009ab8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	7c12      	ldrb	r2, [r2, #16]
 80099bc:	f107 0108 	add.w	r1, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099c6:	e077      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa98 	bl	8009f00 <USBD_CtlError>
            err++;
 80099d0:	7afb      	ldrb	r3, [r7, #11]
 80099d2:	3301      	adds	r3, #1
 80099d4:	72fb      	strb	r3, [r7, #11]
          break;
 80099d6:	e06f      	b.n	8009ab8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00b      	beq.n	80099fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	7c12      	ldrb	r2, [r2, #16]
 80099f0:	f107 0108 	add.w	r1, r7, #8
 80099f4:	4610      	mov	r0, r2
 80099f6:	4798      	blx	r3
 80099f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099fa:	e05d      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa7e 	bl	8009f00 <USBD_CtlError>
            err++;
 8009a04:	7afb      	ldrb	r3, [r7, #11]
 8009a06:	3301      	adds	r3, #1
 8009a08:	72fb      	strb	r3, [r7, #11]
          break;
 8009a0a:	e055      	b.n	8009ab8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00b      	beq.n	8009a30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	7c12      	ldrb	r2, [r2, #16]
 8009a24:	f107 0108 	add.w	r1, r7, #8
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4798      	blx	r3
 8009a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2e:	e043      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fa64 	bl	8009f00 <USBD_CtlError>
            err++;
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3e:	e03b      	b.n	8009ab8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7c12      	ldrb	r2, [r2, #16]
 8009a58:	f107 0108 	add.w	r1, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a62:	e029      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa4a 	bl	8009f00 <USBD_CtlError>
            err++;
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	72fb      	strb	r3, [r7, #11]
          break;
 8009a72:	e021      	b.n	8009ab8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7c12      	ldrb	r2, [r2, #16]
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a96:	e00f      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa30 	bl	8009f00 <USBD_CtlError>
            err++;
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa6:	e007      	b.n	8009ab8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa28 	bl	8009f00 <USBD_CtlError>
          err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009ab6:	bf00      	nop
      }
      break;
 8009ab8:	e037      	b.n	8009b2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	7c1b      	ldrb	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	f107 0208 	add.w	r2, r7, #8
 8009ace:	4610      	mov	r0, r2
 8009ad0:	4798      	blx	r3
 8009ad2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ad4:	e029      	b.n	8009b2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa11 	bl	8009f00 <USBD_CtlError>
        err++;
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae4:	e021      	b.n	8009b2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	7c1b      	ldrb	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10d      	bne.n	8009b0a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f107 0208 	add.w	r2, r7, #8
 8009afa:	4610      	mov	r0, r2
 8009afc:	4798      	blx	r3
 8009afe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	2207      	movs	r2, #7
 8009b06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b08:	e00f      	b.n	8009b2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b0a:	6839      	ldr	r1, [r7, #0]
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f9f7 	bl	8009f00 <USBD_CtlError>
        err++;
 8009b12:	7afb      	ldrb	r3, [r7, #11]
 8009b14:	3301      	adds	r3, #1
 8009b16:	72fb      	strb	r3, [r7, #11]
      break;
 8009b18:	e007      	b.n	8009b2a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9ef 	bl	8009f00 <USBD_CtlError>
      err++;
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	3301      	adds	r3, #1
 8009b26:	72fb      	strb	r3, [r7, #11]
      break;
 8009b28:	bf00      	nop
  }

  if (err != 0U)
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d11e      	bne.n	8009b6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	88db      	ldrh	r3, [r3, #6]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d016      	beq.n	8009b66 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b38:	893b      	ldrh	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00e      	beq.n	8009b5c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	88da      	ldrh	r2, [r3, #6]
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	bf28      	it	cs
 8009b48:	4613      	movcs	r3, r2
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b4e:	893b      	ldrh	r3, [r7, #8]
 8009b50:	461a      	mov	r2, r3
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa44 	bl	8009fe2 <USBD_CtlSendData>
 8009b5a:	e009      	b.n	8009b70 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9ce 	bl	8009f00 <USBD_CtlError>
 8009b64:	e004      	b.n	8009b70 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa95 	bl	800a096 <USBD_CtlSendStatus>
 8009b6c:	e000      	b.n	8009b70 <USBD_GetDescriptor+0x320>
    return;
 8009b6e:	bf00      	nop
  }
}
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop

08009b78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	889b      	ldrh	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d131      	bne.n	8009bee <USBD_SetAddress+0x76>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	88db      	ldrh	r3, [r3, #6]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d12d      	bne.n	8009bee <USBD_SetAddress+0x76>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	885b      	ldrh	r3, [r3, #2]
 8009b96:	2b7f      	cmp	r3, #127	; 0x7f
 8009b98:	d829      	bhi.n	8009bee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d104      	bne.n	8009bbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f9a3 	bl	8009f00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bba:	e01d      	b.n	8009bf8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7bfa      	ldrb	r2, [r7, #15]
 8009bc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fea6 	bl	800a91a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fa61 	bl	800a096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be2:	e009      	b.n	8009bf8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bec:	e004      	b.n	8009bf8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f985 	bl	8009f00 <USBD_CtlError>
  }
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	885b      	ldrh	r3, [r3, #2]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	4b4c      	ldr	r3, [pc, #304]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c18:	4b4b      	ldr	r3, [pc, #300]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d905      	bls.n	8009c2c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f96c 	bl	8009f00 <USBD_CtlError>
    return USBD_FAIL;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e088      	b.n	8009d3e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d002      	beq.n	8009c3e <USBD_SetConfig+0x3e>
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d025      	beq.n	8009c88 <USBD_SetConfig+0x88>
 8009c3c:	e071      	b.n	8009d22 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c3e:	4b42      	ldr	r3, [pc, #264]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01c      	beq.n	8009c80 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c46:	4b40      	ldr	r3, [pc, #256]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c50:	4b3d      	ldr	r3, [pc, #244]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff f992 	bl	8008f80 <USBD_SetClassConfig>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f949 	bl	8009f00 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c6e:	e065      	b.n	8009d3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa10 	bl	800a096 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c7e:	e05d      	b.n	8009d3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa08 	bl	800a096 <USBD_CtlSendStatus>
      break;
 8009c86:	e059      	b.n	8009d3c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c88:	4b2f      	ldr	r3, [pc, #188]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d112      	bne.n	8009cb6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c98:	4b2b      	ldr	r3, [pc, #172]	; (8009d48 <USBD_SetConfig+0x148>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ca2:	4b29      	ldr	r3, [pc, #164]	; (8009d48 <USBD_SetConfig+0x148>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff f985 	bl	8008fb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f9f1 	bl	800a096 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cb4:	e042      	b.n	8009d3c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009cb6:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <USBD_SetConfig+0x148>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d02a      	beq.n	8009d1a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff f973 	bl	8008fb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cd2:	4b1d      	ldr	r3, [pc, #116]	; (8009d48 <USBD_SetConfig+0x148>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cdc:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <USBD_SetConfig+0x148>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff f94c 	bl	8008f80 <USBD_SetClassConfig>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00f      	beq.n	8009d12 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f903 	bl	8009f00 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	4619      	mov	r1, r3
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff f958 	bl	8008fb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d10:	e014      	b.n	8009d3c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f9bf 	bl	800a096 <USBD_CtlSendStatus>
      break;
 8009d18:	e010      	b.n	8009d3c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9bb 	bl	800a096 <USBD_CtlSendStatus>
      break;
 8009d20:	e00c      	b.n	8009d3c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f8eb 	bl	8009f00 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <USBD_SetConfig+0x148>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff f941 	bl	8008fb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d36:	2303      	movs	r3, #3
 8009d38:	73fb      	strb	r3, [r7, #15]
      break;
 8009d3a:	bf00      	nop
  }

  return ret;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20000414 	.word	0x20000414

08009d4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d004      	beq.n	8009d68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f8cd 	bl	8009f00 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d66:	e023      	b.n	8009db0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	dc02      	bgt.n	8009d7a <USBD_GetConfig+0x2e>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dc03      	bgt.n	8009d80 <USBD_GetConfig+0x34>
 8009d78:	e015      	b.n	8009da6 <USBD_GetConfig+0x5a>
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d00b      	beq.n	8009d96 <USBD_GetConfig+0x4a>
 8009d7e:	e012      	b.n	8009da6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3308      	adds	r3, #8
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f927 	bl	8009fe2 <USBD_CtlSendData>
        break;
 8009d94:	e00c      	b.n	8009db0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f91f 	bl	8009fe2 <USBD_CtlSendData>
        break;
 8009da4:	e004      	b.n	8009db0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f8a9 	bl	8009f00 <USBD_CtlError>
        break;
 8009dae:	bf00      	nop
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d81e      	bhi.n	8009e0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	88db      	ldrh	r3, [r3, #6]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d004      	beq.n	8009de2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f890 	bl	8009f00 <USBD_CtlError>
        break;
 8009de0:	e01a      	b.n	8009e18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d005      	beq.n	8009dfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f043 0202 	orr.w	r2, r3, #2
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	330c      	adds	r3, #12
 8009e02:	2202      	movs	r2, #2
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f8eb 	bl	8009fe2 <USBD_CtlSendData>
      break;
 8009e0c:	e004      	b.n	8009e18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f875 	bl	8009f00 <USBD_CtlError>
      break;
 8009e16:	bf00      	nop
  }
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d106      	bne.n	8009e40 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2201      	movs	r2, #1
 8009e36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f92b 	bl	800a096 <USBD_CtlSendStatus>
  }
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d80b      	bhi.n	8009e78 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d10c      	bne.n	8009e82 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f910 	bl	800a096 <USBD_CtlSendStatus>
      }
      break;
 8009e76:	e004      	b.n	8009e82 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f840 	bl	8009f00 <USBD_CtlError>
      break;
 8009e80:	e000      	b.n	8009e84 <USBD_ClrFeature+0x3c>
      break;
 8009e82:	bf00      	nop
  }
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	781a      	ldrb	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	781a      	ldrb	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fa92 	bl	80093e0 <SWAPBYTE>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff fa85 	bl	80093e0 <SWAPBYTE>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f7ff fa78 	bl	80093e0 <SWAPBYTE>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	80da      	strh	r2, [r3, #6]
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f0a:	2180      	movs	r1, #128	; 0x80
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fc99 	bl	800a844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f12:	2100      	movs	r1, #0
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fc95 	bl	800a844 <USBD_LL_StallEP>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b086      	sub	sp, #24
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d036      	beq.n	8009fa6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f3c:	6938      	ldr	r0, [r7, #16]
 8009f3e:	f000 f836 	bl	8009fae <USBD_GetLen>
 8009f42:	4603      	mov	r3, r0
 8009f44:	3301      	adds	r3, #1
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	4413      	add	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	7812      	ldrb	r2, [r2, #0]
 8009f5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	4413      	add	r3, r2
 8009f68:	2203      	movs	r2, #3
 8009f6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f72:	e013      	b.n	8009f9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4413      	add	r3, r2
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	7812      	ldrb	r2, [r2, #0]
 8009f7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	3301      	adds	r3, #1
 8009f84:	613b      	str	r3, [r7, #16]
    idx++;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4413      	add	r3, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e7      	bne.n	8009f74 <USBD_GetString+0x52>
 8009fa4:	e000      	b.n	8009fa8 <USBD_GetString+0x86>
    return;
 8009fa6:	bf00      	nop
  }
}
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b085      	sub	sp, #20
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fbe:	e005      	b.n	8009fcc <USBD_GetLen+0x1e>
  {
    len++;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1f5      	bne.n	8009fc0 <USBD_GetLen+0x12>
  }

  return len;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	2100      	movs	r1, #0
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fca5 	bl	800a958 <USBD_LL_Transmit>

  return USBD_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	2100      	movs	r1, #0
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fc94 	bl	800a958 <USBD_LL_Transmit>

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2203      	movs	r2, #3
 800a04a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	2100      	movs	r1, #0
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 fc98 	bl	800a99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	2100      	movs	r1, #0
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fc87 	bl	800a99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fc53 	bl	800a958 <USBD_LL_Transmit>

  return USBD_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2205      	movs	r2, #5
 800a0c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fc61 	bl	800a99a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4912      	ldr	r1, [pc, #72]	; (800a134 <MX_USB_Device_Init+0x50>)
 800a0ec:	4812      	ldr	r0, [pc, #72]	; (800a138 <MX_USB_Device_Init+0x54>)
 800a0ee:	f7fe fed9 	bl	8008ea4 <USBD_Init>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a0f8:	f7f7 fa6a 	bl	80015d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a0fc:	490f      	ldr	r1, [pc, #60]	; (800a13c <MX_USB_Device_Init+0x58>)
 800a0fe:	480e      	ldr	r0, [pc, #56]	; (800a138 <MX_USB_Device_Init+0x54>)
 800a100:	f7fe ff00 	bl	8008f04 <USBD_RegisterClass>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a10a:	f7f7 fa61 	bl	80015d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a10e:	490c      	ldr	r1, [pc, #48]	; (800a140 <MX_USB_Device_Init+0x5c>)
 800a110:	4809      	ldr	r0, [pc, #36]	; (800a138 <MX_USB_Device_Init+0x54>)
 800a112:	f7fe fe21 	bl	8008d58 <USBD_CDC_RegisterInterface>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a11c:	f7f7 fa58 	bl	80015d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a120:	4805      	ldr	r0, [pc, #20]	; (800a138 <MX_USB_Device_Init+0x54>)
 800a122:	f7fe ff16 	bl	8008f52 <USBD_Start>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a12c:	f7f7 fa50 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a130:	bf00      	nop
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20000140 	.word	0x20000140
 800a138:	20000418 	.word	0x20000418
 800a13c:	20000028 	.word	0x20000028
 800a140:	2000012c 	.word	0x2000012c

0800a144 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a148:	2200      	movs	r2, #0
 800a14a:	4905      	ldr	r1, [pc, #20]	; (800a160 <CDC_Init_FS+0x1c>)
 800a14c:	4805      	ldr	r0, [pc, #20]	; (800a164 <CDC_Init_FS+0x20>)
 800a14e:	f7fe fe18 	bl	8008d82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a152:	4905      	ldr	r1, [pc, #20]	; (800a168 <CDC_Init_FS+0x24>)
 800a154:	4803      	ldr	r0, [pc, #12]	; (800a164 <CDC_Init_FS+0x20>)
 800a156:	f7fe fe32 	bl	8008dbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a15a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000ad0 	.word	0x20000ad0
 800a164:	20000418 	.word	0x20000418
 800a168:	200006e8 	.word	0x200006e8

0800a16c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a172:	4618      	mov	r0, r3
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	6039      	str	r1, [r7, #0]
 800a186:	71fb      	strb	r3, [r7, #7]
 800a188:	4613      	mov	r3, r2
 800a18a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	2b23      	cmp	r3, #35	; 0x23
 800a190:	d84a      	bhi.n	800a228 <CDC_Control_FS+0xac>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <CDC_Control_FS+0x1c>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a229 	.word	0x0800a229
 800a19c:	0800a229 	.word	0x0800a229
 800a1a0:	0800a229 	.word	0x0800a229
 800a1a4:	0800a229 	.word	0x0800a229
 800a1a8:	0800a229 	.word	0x0800a229
 800a1ac:	0800a229 	.word	0x0800a229
 800a1b0:	0800a229 	.word	0x0800a229
 800a1b4:	0800a229 	.word	0x0800a229
 800a1b8:	0800a229 	.word	0x0800a229
 800a1bc:	0800a229 	.word	0x0800a229
 800a1c0:	0800a229 	.word	0x0800a229
 800a1c4:	0800a229 	.word	0x0800a229
 800a1c8:	0800a229 	.word	0x0800a229
 800a1cc:	0800a229 	.word	0x0800a229
 800a1d0:	0800a229 	.word	0x0800a229
 800a1d4:	0800a229 	.word	0x0800a229
 800a1d8:	0800a229 	.word	0x0800a229
 800a1dc:	0800a229 	.word	0x0800a229
 800a1e0:	0800a229 	.word	0x0800a229
 800a1e4:	0800a229 	.word	0x0800a229
 800a1e8:	0800a229 	.word	0x0800a229
 800a1ec:	0800a229 	.word	0x0800a229
 800a1f0:	0800a229 	.word	0x0800a229
 800a1f4:	0800a229 	.word	0x0800a229
 800a1f8:	0800a229 	.word	0x0800a229
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	0800a229 	.word	0x0800a229
 800a204:	0800a229 	.word	0x0800a229
 800a208:	0800a229 	.word	0x0800a229
 800a20c:	0800a229 	.word	0x0800a229
 800a210:	0800a229 	.word	0x0800a229
 800a214:	0800a229 	.word	0x0800a229
 800a218:	0800a229 	.word	0x0800a229
 800a21c:	0800a229 	.word	0x0800a229
 800a220:	0800a229 	.word	0x0800a229
 800a224:	0800a229 	.word	0x0800a229
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a228:	bf00      	nop
  }

  return (USBD_OK);
 800a22a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7f6 fb11 	bl	800086c <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4805      	ldr	r0, [pc, #20]	; (800a264 <CDC_Receive_FS+0x2c>)
 800a24e:	f7fe fdb6 	bl	8008dbe <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a252:	4804      	ldr	r0, [pc, #16]	; (800a264 <CDC_Receive_FS+0x2c>)
 800a254:	f7fe fdfc 	bl	8008e50 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800a258:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000418 	.word	0x20000418

0800a268 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a278:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <CDC_Transmit_FS+0x48>)
 800a27a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a27e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e00b      	b.n	800a2a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a28e:	887b      	ldrh	r3, [r7, #2]
 800a290:	461a      	mov	r2, r3
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	4806      	ldr	r0, [pc, #24]	; (800a2b0 <CDC_Transmit_FS+0x48>)
 800a296:	f7fe fd74 	bl	8008d82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a29a:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <CDC_Transmit_FS+0x48>)
 800a29c:	f7fe fda8 	bl	8008df0 <USBD_CDC_TransmitPacket>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000418 	.word	0x20000418

0800a2b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2212      	movs	r2, #18
 800a2e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	20000160 	.word	0x20000160

0800a2fc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2204      	movs	r2, #4
 800a30c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a30e:	4b03      	ldr	r3, [pc, #12]	; (800a31c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	20000174 	.word	0x20000174

0800a320 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d105      	bne.n	800a33e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	4907      	ldr	r1, [pc, #28]	; (800a354 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a336:	4808      	ldr	r0, [pc, #32]	; (800a358 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a338:	f7ff fdf3 	bl	8009f22 <USBD_GetString>
 800a33c:	e004      	b.n	800a348 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	4904      	ldr	r1, [pc, #16]	; (800a354 <USBD_CDC_ProductStrDescriptor+0x34>)
 800a342:	4805      	ldr	r0, [pc, #20]	; (800a358 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a344:	f7ff fded 	bl	8009f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20000eb8 	.word	0x20000eb8
 800a358:	0800ab90 	.word	0x0800ab90

0800a35c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	4904      	ldr	r1, [pc, #16]	; (800a37c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a36c:	4804      	ldr	r0, [pc, #16]	; (800a380 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a36e:	f7ff fdd8 	bl	8009f22 <USBD_GetString>
  return USBD_StrDesc;
 800a372:	4b02      	ldr	r3, [pc, #8]	; (800a37c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20000eb8 	.word	0x20000eb8
 800a380:	0800aba8 	.word	0x0800aba8

0800a384 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	6039      	str	r1, [r7, #0]
 800a38e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	221a      	movs	r2, #26
 800a394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a396:	f000 f843 	bl	800a420 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a39a:	4b02      	ldr	r3, [pc, #8]	; (800a3a4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20000178 	.word	0x20000178

0800a3a8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d105      	bne.n	800a3c6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	4907      	ldr	r1, [pc, #28]	; (800a3dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3be:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a3c0:	f7ff fdaf 	bl	8009f22 <USBD_GetString>
 800a3c4:	e004      	b.n	800a3d0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	4904      	ldr	r1, [pc, #16]	; (800a3dc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a3cc:	f7ff fda9 	bl	8009f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d0:	4b02      	ldr	r3, [pc, #8]	; (800a3dc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000eb8 	.word	0x20000eb8
 800a3e0:	0800abbc 	.word	0x0800abbc

0800a3e4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3f0:	79fb      	ldrb	r3, [r7, #7]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	4907      	ldr	r1, [pc, #28]	; (800a418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a3fa:	4808      	ldr	r0, [pc, #32]	; (800a41c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a3fc:	f7ff fd91 	bl	8009f22 <USBD_GetString>
 800a400:	e004      	b.n	800a40c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4904      	ldr	r1, [pc, #16]	; (800a418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a406:	4805      	ldr	r0, [pc, #20]	; (800a41c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a408:	f7ff fd8b 	bl	8009f22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a40c:	4b02      	ldr	r3, [pc, #8]	; (800a418 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000eb8 	.word	0x20000eb8
 800a41c:	0800abc8 	.word	0x0800abc8

0800a420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <Get_SerialNum+0x44>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a42c:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <Get_SerialNum+0x48>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a432:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <Get_SerialNum+0x4c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4413      	add	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a446:	2208      	movs	r2, #8
 800a448:	4909      	ldr	r1, [pc, #36]	; (800a470 <Get_SerialNum+0x50>)
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f814 	bl	800a478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a450:	2204      	movs	r2, #4
 800a452:	4908      	ldr	r1, [pc, #32]	; (800a474 <Get_SerialNum+0x54>)
 800a454:	68b8      	ldr	r0, [r7, #8]
 800a456:	f000 f80f 	bl	800a478 <IntToUnicode>
  }
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	1fff7590 	.word	0x1fff7590
 800a468:	1fff7594 	.word	0x1fff7594
 800a46c:	1fff7598 	.word	0x1fff7598
 800a470:	2000017a 	.word	0x2000017a
 800a474:	2000018a 	.word	0x2000018a

0800a478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a478:	b480      	push	{r7}
 800a47a:	b087      	sub	sp, #28
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	4613      	mov	r3, r2
 800a484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a48a:	2300      	movs	r3, #0
 800a48c:	75fb      	strb	r3, [r7, #23]
 800a48e:	e027      	b.n	800a4e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	0f1b      	lsrs	r3, r3, #28
 800a494:	2b09      	cmp	r3, #9
 800a496:	d80b      	bhi.n	800a4b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	0f1b      	lsrs	r3, r3, #28
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3230      	adds	r2, #48	; 0x30
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	701a      	strb	r2, [r3, #0]
 800a4ae:	e00a      	b.n	800a4c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	0f1b      	lsrs	r3, r3, #28
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	440b      	add	r3, r1
 800a4c0:	3237      	adds	r2, #55	; 0x37
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
 800a4e0:	7dfa      	ldrb	r2, [r7, #23]
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d3d3      	bcc.n	800a490 <IntToUnicode+0x18>
  }
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	371c      	adds	r7, #28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b094      	sub	sp, #80	; 0x50
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a500:	f107 030c 	add.w	r3, r7, #12
 800a504:	2244      	movs	r2, #68	; 0x44
 800a506:	2100      	movs	r1, #0
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fb2d 	bl	800ab68 <memset>
  if(pcdHandle->Instance==USB)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a15      	ldr	r2, [pc, #84]	; (800a568 <HAL_PCD_MspInit+0x70>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d122      	bne.n	800a55e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a51c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a51e:	2300      	movs	r3, #0
 800a520:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a522:	f107 030c 	add.w	r3, r7, #12
 800a526:	4618      	mov	r0, r3
 800a528:	f7fa f8de 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a532:	f7f7 f84d 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a536:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <HAL_PCD_MspInit+0x74>)
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	4a0c      	ldr	r2, [pc, #48]	; (800a56c <HAL_PCD_MspInit+0x74>)
 800a53c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a540:	6593      	str	r3, [r2, #88]	; 0x58
 800a542:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <HAL_PCD_MspInit+0x74>)
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a54e:	2200      	movs	r2, #0
 800a550:	2100      	movs	r1, #0
 800a552:	2014      	movs	r0, #20
 800a554:	f7f7 fc0d 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a558:	2014      	movs	r0, #20
 800a55a:	f7f7 fc24 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a55e:	bf00      	nop
 800a560:	3750      	adds	r7, #80	; 0x50
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	40005c00 	.word	0x40005c00
 800a56c:	40021000 	.word	0x40021000

0800a570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f7fe fd2e 	bl	8008fe8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f7fe fd68 	bl	8009092 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	440b      	add	r3, r1
 800a5ea:	333c      	adds	r3, #60	; 0x3c
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f7fe fdb1 	bl	8009158 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe fec5 	bl	800939c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d001      	beq.n	800a632 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a62e:	f7f6 ffcf 	bl	80015d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a638:	7bfa      	ldrb	r2, [r7, #15]
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe6f 	bl	8009320 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fe1b 	bl	8009284 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fe6a 	bl	8009340 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a674:	4b04      	ldr	r3, [pc, #16]	; (800a688 <HAL_PCD_SuspendCallback+0x30>)
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	4a03      	ldr	r2, [pc, #12]	; (800a688 <HAL_PCD_SuspendCallback+0x30>)
 800a67a:	f043 0306 	orr.w	r3, r3, #6
 800a67e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	e000ed00 	.word	0xe000ed00

0800a68c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a69c:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <HAL_PCD_ResumeCallback+0x34>)
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	4a07      	ldr	r2, [pc, #28]	; (800a6c0 <HAL_PCD_ResumeCallback+0x34>)
 800a6a2:	f023 0306 	bic.w	r3, r3, #6
 800a6a6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6a8:	f000 f9fa 	bl	800aaa0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fe5a 	bl	800936c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	e000ed00 	.word	0xe000ed00

0800a6c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a6cc:	4a2b      	ldr	r2, [pc, #172]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a29      	ldr	r2, [pc, #164]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a6dc:	4b27      	ldr	r3, [pc, #156]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6de:	4a28      	ldr	r2, [pc, #160]	; (800a780 <USBD_LL_Init+0xbc>)
 800a6e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6e2:	4b26      	ldr	r3, [pc, #152]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6e8:	4b24      	ldr	r3, [pc, #144]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6ee:	4b23      	ldr	r3, [pc, #140]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a6f4:	4b21      	ldr	r3, [pc, #132]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6fa:	4b20      	ldr	r3, [pc, #128]	; (800a77c <USBD_LL_Init+0xb8>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a700:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <USBD_LL_Init+0xb8>)
 800a702:	2200      	movs	r2, #0
 800a704:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a706:	4b1d      	ldr	r3, [pc, #116]	; (800a77c <USBD_LL_Init+0xb8>)
 800a708:	2200      	movs	r2, #0
 800a70a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a70c:	481b      	ldr	r0, [pc, #108]	; (800a77c <USBD_LL_Init+0xb8>)
 800a70e:	f7f7 fd17 	bl	8002140 <HAL_PCD_Init>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a718:	f7f6 ff5a 	bl	80015d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a722:	2318      	movs	r3, #24
 800a724:	2200      	movs	r2, #0
 800a726:	2100      	movs	r1, #0
 800a728:	f7f9 f9d0 	bl	8003acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a732:	2358      	movs	r3, #88	; 0x58
 800a734:	2200      	movs	r2, #0
 800a736:	2180      	movs	r1, #128	; 0x80
 800a738:	f7f9 f9c8 	bl	8003acc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a742:	23c0      	movs	r3, #192	; 0xc0
 800a744:	2200      	movs	r2, #0
 800a746:	2181      	movs	r1, #129	; 0x81
 800a748:	f7f9 f9c0 	bl	8003acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a752:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a756:	2200      	movs	r2, #0
 800a758:	2101      	movs	r1, #1
 800a75a:	f7f9 f9b7 	bl	8003acc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a764:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a768:	2200      	movs	r2, #0
 800a76a:	2182      	movs	r1, #130	; 0x82
 800a76c:	f7f9 f9ae 	bl	8003acc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	200010b8 	.word	0x200010b8
 800a780:	40005c00 	.word	0x40005c00

0800a784 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f7 fdb5 	bl	800230a <HAL_PCD_Start>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f980 	bl	800aaac <USBD_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b084      	sub	sp, #16
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	70fb      	strb	r3, [r7, #3]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70bb      	strb	r3, [r7, #2]
 800a7d0:	4613      	mov	r3, r2
 800a7d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7e2:	78bb      	ldrb	r3, [r7, #2]
 800a7e4:	883a      	ldrh	r2, [r7, #0]
 800a7e6:	78f9      	ldrb	r1, [r7, #3]
 800a7e8:	f7f7 fefd 	bl	80025e6 <HAL_PCD_EP_Open>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f95a 	bl	800aaac <USBD_Get_USB_Status>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7f7 ff44 	bl	80026b2 <HAL_PCD_EP_Close>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 f93b 	bl	800aaac <USBD_Get_USB_Status>
 800a836:	4603      	mov	r3, r0
 800a838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a85e:	78fa      	ldrb	r2, [r7, #3]
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7f8 f805 	bl	8002872 <HAL_PCD_EP_SetStall>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f91c 	bl	800aaac <USBD_Get_USB_Status>
 800a874:	4603      	mov	r3, r0
 800a876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a878:	7bbb      	ldrb	r3, [r7, #14]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a89c:	78fa      	ldrb	r2, [r7, #3]
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7f8 f838 	bl	8002916 <HAL_PCD_EP_ClrStall>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 f8fd 	bl	800aaac <USBD_Get_USB_Status>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	da0c      	bge.n	800a8f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e2:	68f9      	ldr	r1, [r7, #12]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	e00b      	b.n	800a90e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	440b      	add	r3, r1
 800a908:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a90c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	4611      	mov	r1, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f7 fe2f 	bl	800259c <HAL_PCD_SetAddress>
 800a93e:	4603      	mov	r3, r0
 800a940:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 f8b1 	bl	800aaac <USBD_Get_USB_Status>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	607a      	str	r2, [r7, #4]
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	460b      	mov	r3, r1
 800a966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a976:	7af9      	ldrb	r1, [r7, #11]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	f7f7 ff36 	bl	80027ec <HAL_PCD_EP_Transmit>
 800a980:	4603      	mov	r3, r0
 800a982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a984:	7dfb      	ldrb	r3, [r7, #23]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f890 	bl	800aaac <USBD_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a990:	7dbb      	ldrb	r3, [r7, #22]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9b8:	7af9      	ldrb	r1, [r7, #11]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	f7f7 fec0 	bl	8002742 <HAL_PCD_EP_Receive>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f86f 	bl	800aaac <USBD_Get_USB_Status>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9ee:	78fa      	ldrb	r2, [r7, #3]
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7f7 fee2 	bl	80027bc <HAL_PCD_EP_GetRxCount>
 800a9f8:	4603      	mov	r3, r0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aa10:	78fb      	ldrb	r3, [r7, #3]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <HAL_PCDEx_LPM_Callback+0x18>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d013      	beq.n	800aa42 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa1a:	e023      	b.n	800aa64 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d007      	beq.n	800aa34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa24:	f000 f83c 	bl	800aaa0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa28:	4b10      	ldr	r3, [pc, #64]	; (800aa6c <HAL_PCDEx_LPM_Callback+0x68>)
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	4a0f      	ldr	r2, [pc, #60]	; (800aa6c <HAL_PCDEx_LPM_Callback+0x68>)
 800aa2e:	f023 0306 	bic.w	r3, r3, #6
 800aa32:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fc96 	bl	800936c <USBD_LL_Resume>
    break;
 800aa40:	e010      	b.n	800aa64 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fc79 	bl	8009340 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d005      	beq.n	800aa62 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa56:	4b05      	ldr	r3, [pc, #20]	; (800aa6c <HAL_PCDEx_LPM_Callback+0x68>)
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	4a04      	ldr	r2, [pc, #16]	; (800aa6c <HAL_PCDEx_LPM_Callback+0x68>)
 800aa5c:	f043 0306 	orr.w	r3, r3, #6
 800aa60:	6113      	str	r3, [r2, #16]
    break;
 800aa62:	bf00      	nop
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	e000ed00 	.word	0xe000ed00

0800aa70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa78:	4b03      	ldr	r3, [pc, #12]	; (800aa88 <USBD_static_malloc+0x18>)
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	200013ac 	.word	0x200013ac

0800aa8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]

}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aaa4:	f7f6 f9f2 	bl	8000e8c <SystemClock_Config>
}
 800aaa8:	bf00      	nop
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	4603      	mov	r3, r0
 800aab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaba:	79fb      	ldrb	r3, [r7, #7]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d817      	bhi.n	800aaf0 <USBD_Get_USB_Status+0x44>
 800aac0:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <USBD_Get_USB_Status+0x1c>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800aadf 	.word	0x0800aadf
 800aad0:	0800aae5 	.word	0x0800aae5
 800aad4:	0800aaeb 	.word	0x0800aaeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	73fb      	strb	r3, [r7, #15]
    break;
 800aadc:	e00b      	b.n	800aaf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aade:	2303      	movs	r3, #3
 800aae0:	73fb      	strb	r3, [r7, #15]
    break;
 800aae2:	e008      	b.n	800aaf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aae4:	2301      	movs	r3, #1
 800aae6:	73fb      	strb	r3, [r7, #15]
    break;
 800aae8:	e005      	b.n	800aaf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaea:	2303      	movs	r3, #3
 800aaec:	73fb      	strb	r3, [r7, #15]
    break;
 800aaee:	e002      	b.n	800aaf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf4:	bf00      	nop
  }
  return usb_status;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <__libc_init_array>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4d0d      	ldr	r5, [pc, #52]	; (800ab3c <__libc_init_array+0x38>)
 800ab08:	4c0d      	ldr	r4, [pc, #52]	; (800ab40 <__libc_init_array+0x3c>)
 800ab0a:	1b64      	subs	r4, r4, r5
 800ab0c:	10a4      	asrs	r4, r4, #2
 800ab0e:	2600      	movs	r6, #0
 800ab10:	42a6      	cmp	r6, r4
 800ab12:	d109      	bne.n	800ab28 <__libc_init_array+0x24>
 800ab14:	4d0b      	ldr	r5, [pc, #44]	; (800ab44 <__libc_init_array+0x40>)
 800ab16:	4c0c      	ldr	r4, [pc, #48]	; (800ab48 <__libc_init_array+0x44>)
 800ab18:	f000 f82e 	bl	800ab78 <_init>
 800ab1c:	1b64      	subs	r4, r4, r5
 800ab1e:	10a4      	asrs	r4, r4, #2
 800ab20:	2600      	movs	r6, #0
 800ab22:	42a6      	cmp	r6, r4
 800ab24:	d105      	bne.n	800ab32 <__libc_init_array+0x2e>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab2c:	4798      	blx	r3
 800ab2e:	3601      	adds	r6, #1
 800ab30:	e7ee      	b.n	800ab10 <__libc_init_array+0xc>
 800ab32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab36:	4798      	blx	r3
 800ab38:	3601      	adds	r6, #1
 800ab3a:	e7f2      	b.n	800ab22 <__libc_init_array+0x1e>
 800ab3c:	0800abe8 	.word	0x0800abe8
 800ab40:	0800abe8 	.word	0x0800abe8
 800ab44:	0800abe8 	.word	0x0800abe8
 800ab48:	0800abec 	.word	0x0800abec

0800ab4c <memcpy>:
 800ab4c:	440a      	add	r2, r1
 800ab4e:	4291      	cmp	r1, r2
 800ab50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab54:	d100      	bne.n	800ab58 <memcpy+0xc>
 800ab56:	4770      	bx	lr
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab62:	4291      	cmp	r1, r2
 800ab64:	d1f9      	bne.n	800ab5a <memcpy+0xe>
 800ab66:	bd10      	pop	{r4, pc}

0800ab68 <memset>:
 800ab68:	4402      	add	r2, r0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d100      	bne.n	800ab72 <memset+0xa>
 800ab70:	4770      	bx	lr
 800ab72:	f803 1b01 	strb.w	r1, [r3], #1
 800ab76:	e7f9      	b.n	800ab6c <memset+0x4>

0800ab78 <_init>:
 800ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7a:	bf00      	nop
 800ab7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7e:	bc08      	pop	{r3}
 800ab80:	469e      	mov	lr, r3
 800ab82:	4770      	bx	lr

0800ab84 <_fini>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr
