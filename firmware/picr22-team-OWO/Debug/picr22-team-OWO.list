
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc4  08009cc4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009cc4  08009cc4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cc4  08009cc4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  20000184  08009e50  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08009e50  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b0d  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350c  00000000  00000000  00035cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000391d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003a500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016438  00000000  00000000  0005c30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c649d  00000000  00000000  00072747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138be4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  00138c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009c54 	.word	0x08009c54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009c54 	.word	0x08009c54

08000218 <CDC_On_Receive>:
} Feedback;

Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fcfa 	bl	8009c28 <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003c8 	.word	0x200003c8
 8000254:	200003d2 	.word	0x200003d2

08000258 <enc_init>:

void enc_init() { //CHANNEL ORDER MAY BE REVERSED, PLEASE CHECK BEFORE DEBUGGING OTHER POSSIBLE SOURCES
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1
 800025c:	2104      	movs	r1, #4
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <enc_init+0x20>)
 8000260:	f004 f94e 	bl	8004500 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 8000264:	2104      	movs	r1, #4
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <enc_init+0x24>)
 8000268:	f004 f94a 	bl	8004500 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3
 800026c:	2104      	movs	r1, #4
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <enc_init+0x28>)
 8000270:	f004 f946 	bl	8004500 <HAL_TIM_Encoder_Start>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000284 	.word	0x20000284
 800027c:	200001a0 	.word	0x200001a0
 8000280:	20000238 	.word	0x20000238

08000284 <motor_status_update>:

void motor_status_update() {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	e02b      	b.n	80002e8 <motor_status_update+0x64>
		if (command.speed[i] >= 0) {
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <motor_status_update+0x78>)
 8000294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000298:	2b00      	cmp	r3, #0
 800029a:	db0a      	blt.n	80002b2 <motor_status_update+0x2e>
			motor_status[i].direction = 1;
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	4918      	ldr	r1, [pc, #96]	; (8000300 <motor_status_update+0x7c>)
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	3301      	adds	r3, #1
 80002ac:	2201      	movs	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e009      	b.n	80002c6 <motor_status_update+0x42>
		} else {
			motor_status[i].direction = 0;
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	4912      	ldr	r1, [pc, #72]	; (8000300 <motor_status_update+0x7c>)
 80002b6:	4613      	mov	r3, r2
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	4413      	add	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	3301      	adds	r3, #1
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
		}
		motor_status[i].target_speed = command.speed[i];
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <motor_status_update+0x78>)
 80002ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	b2d8      	uxtb	r0, r3
 80002d2:	490b      	ldr	r1, [pc, #44]	; (8000300 <motor_status_update+0x7c>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	440b      	add	r3, r1
 80002de:	4602      	mov	r2, r0
 80002e0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	3301      	adds	r3, #1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d9d0      	bls.n	8000290 <motor_status_update+0xc>
	}

}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	200003c8 	.word	0x200003c8
 8000300:	200003b4 	.word	0x200003b4

08000304 <wake_drivers_up>:
// Borrowed from last years Kurgimopeed team, temporary
void wake_drivers_up() {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2108      	movs	r1, #8
 800030e:	4810      	ldr	r0, [pc, #64]	; (8000350 <wake_drivers_up+0x4c>)
 8000310:	f001 f9ac 	bl	800166c <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 100; i++) __asm("nop");
 8000314:	2300      	movs	r3, #0
 8000316:	80fb      	strh	r3, [r7, #6]
 8000318:	e003      	b.n	8000322 <wake_drivers_up+0x1e>
 800031a:	bf00      	nop
 800031c:	88fb      	ldrh	r3, [r7, #6]
 800031e:	3301      	adds	r3, #1
 8000320:	80fb      	strh	r3, [r7, #6]
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	2b63      	cmp	r3, #99	; 0x63
 8000326:	d9f8      	bls.n	800031a <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	4808      	ldr	r0, [pc, #32]	; (8000350 <wake_drivers_up+0x4c>)
 800032e:	f001 f99d 	bl	800166c <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 10; i++) __asm("nop");
 8000332:	2300      	movs	r3, #0
 8000334:	80bb      	strh	r3, [r7, #4]
 8000336:	e003      	b.n	8000340 <wake_drivers_up+0x3c>
 8000338:	bf00      	nop
 800033a:	88bb      	ldrh	r3, [r7, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	80bb      	strh	r3, [r7, #4]
 8000340:	88bb      	ldrh	r3, [r7, #4]
 8000342:	2b09      	cmp	r3, #9
 8000344:	d9f8      	bls.n	8000338 <wake_drivers_up+0x34>
}
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	48000400 	.word	0x48000400

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fe62 	bl	8001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f86d 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 fb8b 	bl	8000a7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000366:	f000 f90f 	bl	8000588 <MX_TIM2_Init>
  MX_TIM3_Init();
 800036a:	f000 f967 	bl	800063c <MX_TIM3_Init>
  MX_TIM1_Init();
 800036e:	f000 f8b1 	bl	80004d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000372:	f000 f9b9 	bl	80006e8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000376:	f000 fa43 	bl	8000800 <MX_TIM8_Init>
  MX_TIM15_Init();
 800037a:	f000 faed 	bl	8000958 <MX_TIM15_Init>
  MX_TIM6_Init();
 800037e:	f000 fa09 	bl	8000794 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000382:	f008 ff1d 	bl	80091c0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  enc_init();
 8000386:	f7ff ff67 	bl	8000258 <enc_init>

  Feedback feedback = {
 800038a:	2300      	movs	r3, #0
 800038c:	803b      	strh	r3, [r7, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	807b      	strh	r3, [r7, #2]
 8000392:	2300      	movs	r3, #0
 8000394:	80bb      	strh	r3, [r7, #4]
 8000396:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800039a:	80fb      	strh	r3, [r7, #6]
	    .speed[1] = 0,
	    .speed[2] = 0,
        .delimiter = 0xAAAA
  };
  //HAL_GPIO_TogglePin(MSLEEP_GPIO_Port, MSLEEP_Pin); // MSLEEP -> HIGH, activates motor drivers
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2108      	movs	r1, #8
 80003a0:	4820      	ldr	r0, [pc, #128]	; (8000424 <main+0xd0>)
 80003a2:	f001 f963 	bl	800166c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80003a6:	2064      	movs	r0, #100	; 0x64
 80003a8:	f000 feac 	bl	8001104 <HAL_Delay>
  wake_drivers_up();
 80003ac:	f7ff ffaa 	bl	8000304 <wake_drivers_up>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80003b0:	2100      	movs	r1, #0
 80003b2:	481d      	ldr	r0, [pc, #116]	; (8000428 <main+0xd4>)
 80003b4:	f003 fefe 	bl	80041b4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80003b8:	2104      	movs	r1, #4
 80003ba:	481b      	ldr	r0, [pc, #108]	; (8000428 <main+0xd4>)
 80003bc:	f004 fdee 	bl	8004f9c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80003c0:	2108      	movs	r1, #8
 80003c2:	4819      	ldr	r0, [pc, #100]	; (8000428 <main+0xd4>)
 80003c4:	f004 fdea 	bl	8004f9c <HAL_TIMEx_PWMN_Start>
  TIM8->CCR1 = 13107;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <main+0xd8>)
 80003ca:	f243 3233 	movw	r2, #13107	; 0x3333
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  TIM8->CCR2 = 13107;
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <main+0xd8>)
 80003d2:	f243 3233 	movw	r2, #13107	; 0x3333
 80003d6:	639a      	str	r2, [r3, #56]	; 0x38
  TIM8->CCR3 = 13107;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <main+0xd8>)
 80003da:	f243 3233 	movw	r2, #13107	; 0x3333
 80003de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <main+0xdc>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0fa      	beq.n	80003e0 <main+0x8c>
    	isCommandReceived = 0;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <main+0xdc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
    	motor_status_update();
 80003f0:	f7ff ff48 	bl	8000284 <motor_status_update>
    	wake_drivers_up();
 80003f4:	f7ff ff86 	bl	8000304 <wake_drivers_up>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80003f8:	2101      	movs	r1, #1
 80003fa:	480e      	ldr	r0, [pc, #56]	; (8000434 <main+0xe0>)
 80003fc:	f001 f94e 	bl	800169c <HAL_GPIO_TogglePin>

		feedback.speed[0] = motor_status[0].target_speed; // In the current state it retuns the uint8 version without direction, whoops!
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <main+0xe4>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b21b      	sxth	r3, r3
 8000406:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <main+0xe4>)
 800040a:	799b      	ldrb	r3, [r3, #6]
 800040c:	b21b      	sxth	r3, r3
 800040e:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <main+0xe4>)
 8000412:	7b1b      	ldrb	r3, [r3, #12]
 8000414:	b21b      	sxth	r3, r3
 8000416:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000418:	463b      	mov	r3, r7
 800041a:	2108      	movs	r1, #8
 800041c:	4618      	mov	r0, r3
 800041e:	f008 ff91 	bl	8009344 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000422:	e7dd      	b.n	80003e0 <main+0x8c>
 8000424:	48000400 	.word	0x48000400
 8000428:	2000031c 	.word	0x2000031c
 800042c:	40013400 	.word	0x40013400
 8000430:	200003d2 	.word	0x200003d2
 8000434:	48001400 	.word	0x48001400
 8000438:	200003b4 	.word	0x200003b4

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	; 0x50
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0318 	add.w	r3, r7, #24
 8000446:	2238      	movs	r2, #56	; 0x38
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f009 fbfa 	bl	8009c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800045e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000462:	f002 fe69 	bl	8003138 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000466:	2302      	movs	r3, #2
 8000468:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	2340      	movs	r3, #64	; 0x40
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000474:	2302      	movs	r3, #2
 8000476:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800047c:	2301      	movs	r3, #1
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000480:	230c      	movs	r3, #12
 8000482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000484:	2302      	movs	r3, #2
 8000486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000488:	2304      	movs	r3, #4
 800048a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048c:	2302      	movs	r3, #2
 800048e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4618      	mov	r0, r3
 8000496:	f002 fef3 	bl	8003280 <HAL_RCC_OscConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80004a0:	f000 fb6c 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	230f      	movs	r3, #15
 80004a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f003 f9f7 	bl	80038b0 <HAL_RCC_ClockConfig>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004c8:	f000 fb58 	bl	8000b7c <Error_Handler>
  }
}
 80004cc:	bf00      	nop
 80004ce:	3750      	adds	r7, #80	; 0x50
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2224      	movs	r2, #36	; 0x24
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f009 fbae 	bl	8009c44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_TIM1_Init+0xac>)
 80004f4:	4a23      	ldr	r2, [pc, #140]	; (8000584 <MX_TIM1_Init+0xb0>)
 80004f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_TIM1_Init+0xac>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_TIM1_Init+0xac>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_TIM1_Init+0xac>)
 8000506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_TIM1_Init+0xac>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_TIM1_Init+0xac>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_TIM1_Init+0xac>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800051e:	2301      	movs	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000526:	2301      	movs	r3, #1
 8000528:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000536:	2301      	movs	r3, #1
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_TIM1_Init+0xac>)
 800054a:	f003 ff33 	bl	80043b4 <HAL_TIM_Encoder_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000554:	f000 fb12 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000558:	2300      	movs	r3, #0
 800055a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000564:	463b      	mov	r3, r7
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_TIM1_Init+0xac>)
 800056a:	f004 fdcb 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000574:	f000 fb02 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000578:	bf00      	nop
 800057a:	3730      	adds	r7, #48	; 0x30
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200001a0 	.word	0x200001a0
 8000584:	40012c00 	.word	0x40012c00

08000588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059a:	463b      	mov	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005c2:	f04f 32ff 	mov.w	r2, #4294967295
 80005c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005d4:	4818      	ldr	r0, [pc, #96]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005d6:	f003 fd96 	bl	8004106 <HAL_TIM_PWM_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005e0:	f000 facc 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	4811      	ldr	r0, [pc, #68]	; (8000638 <MX_TIM2_Init+0xb0>)
 80005f4:	f004 fd86 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005fe:	f000 fabd 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000602:	2360      	movs	r3, #96	; 0x60
 8000604:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <MX_TIM2_Init+0xb0>)
 800061a:	f003 ffff 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000624:	f000 faaa 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <MX_TIM2_Init+0xb0>)
 800062a:	f000 fbdd 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001ec 	.word	0x200001ec

0800063c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2224      	movs	r2, #36	; 0x24
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fafa 	bl	8009c44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_TIM3_Init+0xa4>)
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <MX_TIM3_Init+0xa8>)
 800065e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <MX_TIM3_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_TIM3_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_TIM3_Init+0xa4>)
 800066e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000674:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_TIM3_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_TIM3_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000680:	2301      	movs	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_TIM3_Init+0xa4>)
 80006ac:	f003 fe82 	bl	80043b4 <HAL_TIM_Encoder_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80006b6:	f000 fa61 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_TIM3_Init+0xa4>)
 80006c8:	f004 fd1c 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80006d2:	f000 fa53 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3730      	adds	r7, #48	; 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000238 	.word	0x20000238
 80006e4:	40000400 	.word	0x40000400

080006e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2224      	movs	r2, #36	; 0x24
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f009 faa4 	bl	8009c44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_TIM4_Init+0xa4>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_TIM4_Init+0xa8>)
 800070a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_TIM4_Init+0xa4>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_TIM4_Init+0xa4>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_TIM4_Init+0xa4>)
 800071a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM4_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_TIM4_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800072c:	2301      	movs	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000744:	2301      	movs	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_TIM4_Init+0xa4>)
 8000758:	f003 fe2c 	bl	80043b4 <HAL_TIM_Encoder_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000762:	f000 fa0b 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_TIM4_Init+0xa4>)
 8000774:	f004 fcc6 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800077e:	f000 f9fd 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3730      	adds	r7, #48	; 0x30
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000284 	.word	0x20000284
 8000790:	40000800 	.word	0x40000800

08000794 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_TIM6_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007c6:	f003 fc47 	bl	8004058 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80007d0:	f000 f9d4 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_TIM6_Init+0x64>)
 80007e2:	f004 fc8f 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007ec:	f000 f9c6 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200002d0 	.word	0x200002d0
 80007fc:	40001000 	.word	0x40001000

08000800 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b098      	sub	sp, #96	; 0x60
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000806:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000812:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2234      	movs	r2, #52	; 0x34
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f009 fa09 	bl	8009c44 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_TIM8_Init+0x150>)
 8000834:	4a47      	ldr	r2, [pc, #284]	; (8000954 <MX_TIM8_Init+0x154>)
 8000836:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000838:	4b45      	ldr	r3, [pc, #276]	; (8000950 <MX_TIM8_Init+0x150>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_TIM8_Init+0x150>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000844:	4b42      	ldr	r3, [pc, #264]	; (8000950 <MX_TIM8_Init+0x150>)
 8000846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_TIM8_Init+0x150>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000852:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <MX_TIM8_Init+0x150>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_TIM8_Init+0x150>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800085e:	483c      	ldr	r0, [pc, #240]	; (8000950 <MX_TIM8_Init+0x150>)
 8000860:	f003 fc51 	bl	8004106 <HAL_TIM_PWM_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f987 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800087a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800087e:	4619      	mov	r1, r3
 8000880:	4833      	ldr	r0, [pc, #204]	; (8000950 <MX_TIM8_Init+0x150>)
 8000882:	f004 fc3f 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800088c:	f000 f976 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000890:	2360      	movs	r3, #96	; 0x60
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800089c:	2300      	movs	r3, #0
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	4826      	ldr	r0, [pc, #152]	; (8000950 <MX_TIM8_Init+0x150>)
 80008b6:	f003 feb1 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008c0:	f000 f95c 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c8:	2204      	movs	r2, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4820      	ldr	r0, [pc, #128]	; (8000950 <MX_TIM8_Init+0x150>)
 80008ce:	f003 fea5 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80008d8:	f000 f950 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e0:	2208      	movs	r2, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <MX_TIM8_Init+0x150>)
 80008e6:	f003 fe99 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80008f0:	f000 f944 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800091a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM8_Init+0x150>)
 8000932:	f004 fc69 	bl	8005208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800093c:	f000 f91e 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM8_Init+0x150>)
 8000942:	f000 fa51 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3760      	adds	r7, #96	; 0x60
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000031c 	.word	0x2000031c
 8000954:	40013400 	.word	0x40013400

08000958 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b098      	sub	sp, #96	; 0x60
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2234      	movs	r2, #52	; 0x34
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f009 f95d 	bl	8009c44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800098a:	4b3a      	ldr	r3, [pc, #232]	; (8000a74 <MX_TIM15_Init+0x11c>)
 800098c:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <MX_TIM15_Init+0x120>)
 800098e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <MX_TIM15_Init+0x11c>)
 800099e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b33      	ldr	r3, [pc, #204]	; (8000a74 <MX_TIM15_Init+0x11c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_TIM15_Init+0x11c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <MX_TIM15_Init+0x11c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80009b6:	482f      	ldr	r0, [pc, #188]	; (8000a74 <MX_TIM15_Init+0x11c>)
 80009b8:	f003 fba5 	bl	8004106 <HAL_TIM_PWM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 f8db 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009d2:	4619      	mov	r1, r3
 80009d4:	4827      	ldr	r0, [pc, #156]	; (8000a74 <MX_TIM15_Init+0x11c>)
 80009d6:	f004 fb95 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f8cc 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	481a      	ldr	r0, [pc, #104]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000a0a:	f003 fe07 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000a14:	f000 f8b2 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4814      	ldr	r0, [pc, #80]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000a22:	f003 fdfb 	bl	800461c <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000a2c:	f000 f8a6 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000a58:	f004 fbd6 	bl	8005208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000a62:	f000 f88b 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <MX_TIM15_Init+0x11c>)
 8000a68:	f000 f9be 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000a6c:	bf00      	nop
 8000a6e:	3760      	adds	r7, #96	; 0x60
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000368 	.word	0x20000368
 8000a78:	40014000 	.word	0x40014000

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b34      	ldr	r3, [pc, #208]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0320 	and.w	r3, r3, #32
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <MX_GPIO_Init+0xf4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	4825      	ldr	r0, [pc, #148]	; (8000b74 <MX_GPIO_Init+0xf8>)
 8000ae0:	f000 fdc4 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	21a2      	movs	r1, #162	; 0xa2
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fdbe 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2118      	movs	r1, #24
 8000af4:	4820      	ldr	r0, [pc, #128]	; (8000b78 <MX_GPIO_Init+0xfc>)
 8000af6:	f000 fdb9 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000afa:	2301      	movs	r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_GPIO_Init+0xf8>)
 8000b12:	f000 fc29 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000b16:	2302      	movs	r3, #2
 8000b18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xf8>)
 8000b2a:	f000 fc1d 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000b2e:	23a2      	movs	r3, #162	; 0xa2
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fc0e 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8000b4c:	2318      	movs	r3, #24
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_GPIO_Init+0xfc>)
 8000b64:	f000 fc00 	bl	8001368 <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48001400 	.word	0x48001400
 8000b78:	48000400 	.word	0x48000400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a46      	ldr	r2, [pc, #280]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x138>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12a      	bne.n	8000c48 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	4a45      	ldr	r2, [pc, #276]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfe:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 8000c22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c34:	2306      	movs	r3, #6
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f000 fb91 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c46:	e05b      	b.n	8000d00 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <HAL_TIM_Encoder_MspInit+0x140>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d129      	bne.n	8000ca6 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 8000c82:	2350      	movs	r3, #80	; 0x50
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c92:	2302      	movs	r3, #2
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f000 fb62 	bl	8001368 <HAL_GPIO_Init>
}
 8000ca4:	e02c      	b.n	8000d00 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <HAL_TIM_Encoder_MspInit+0x144>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d127      	bne.n	8000d00 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cce:	f043 0302 	orr.w	r3, r3, #2
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_TIM_Encoder_MspInit+0x148>)
 8000cfc:	f000 fb34 	bl	8001368 <HAL_GPIO_Init>
}
 8000d00:	bf00      	nop
 8000d02:	3738      	adds	r7, #56	; 0x38
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40012c00 	.word	0x40012c00
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40000400 	.word	0x40000400
 8000d14:	40000800 	.word	0x40000800
 8000d18:	48000400 	.word	0x48000400

08000d1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2c:	d10c      	bne.n	8000d48 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000d46:	e022      	b.n	8000d8e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <HAL_TIM_PWM_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10c      	bne.n	8000d6c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
}
 8000d6a:	e010      	b.n	8000d8e <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_TIM_PWM_MspInit+0x88>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10b      	bne.n	8000d8e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_TIM_PWM_MspInit+0x80>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40013400 	.word	0x40013400
 8000da4:	40014000 	.word	0x40014000

08000da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x38>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40001000 	.word	0x40001000
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f000 fa92 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000e44:	e071      	b.n	8000f2a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a3b      	ldr	r2, [pc, #236]	; (8000f38 <HAL_TIM_MspPostInit+0x150>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d14a      	bne.n	8000ee6 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	4a31      	ldr	r2, [pc, #196]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000e90:	2304      	movs	r3, #4
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4828      	ldr	r0, [pc, #160]	; (8000f3c <HAL_TIM_MspPostInit+0x154>)
 8000e9c:	f000 fa64 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8000ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f000 fa52 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <HAL_TIM_MspPostInit+0x154>)
 8000ee0:	f000 fa42 	bl	8001368 <HAL_GPIO_Init>
}
 8000ee4:	e021      	b.n	8000f2a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_TIM_MspPostInit+0x158>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d11c      	bne.n	8000f2a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_MspPostInit+0x14c>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000f18:	2309      	movs	r3, #9
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f000 fa1f 	bl	8001368 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3730      	adds	r7, #48	; 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40013400 	.word	0x40013400
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	40014000 	.word	0x40014000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f89a 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <USB_LP_IRQHandler+0x10>)
 8000f9e:	f000 fc9e 	bl	80018de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000107c 	.word	0x2000107c

08000fac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <LoopForever+0x2>)
 8000fd2:	4685      	mov	sp, r0
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x6>)
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopForever+0xa>)
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopForever+0xe>)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:
 8000fde:	58d4      	ldr	r4, [r2, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:
 8000fe4:	18c4      	adds	r4, r0, r3
 8000fe6:	428c      	cmp	r4, r1
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopForever+0x12>)
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopForever+0x16>)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:
 8000ff6:	42a2      	cmp	r2, r4
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
 8000ffa:	f7ff ffd7 	bl	8000fac <SystemInit>
 8000ffe:	f008 fdef 	bl	8009be0 <__libc_init_array>
 8001002:	f7ff f9a7 	bl	8000354 <main>

08001006 <LoopForever>:
 8001006:	e7fe      	b.n	8001006 <LoopForever>
 8001008:	20008000 	.word	0x20008000
 800100c:	20000000 	.word	0x20000000
 8001010:	20000184 	.word	0x20000184
 8001014:	08009ccc 	.word	0x08009ccc
 8001018:	20000184 	.word	0x20000184
 800101c:	20001590 	.word	0x20001590

08001020 <ADC1_2_IRQHandler>:
 8001020:	e7fe      	b.n	8001020 <ADC1_2_IRQHandler>

08001022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f95b 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f80e 	bl	8001054 <HAL_InitTick>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	e001      	b.n	8001048 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001044:	f7ff fda0 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001048:	79fb      	ldrb	r3, [r7, #7]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_InitTick+0x68>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d022      	beq.n	80010ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_InitTick+0x6c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_InitTick+0x68>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001074:	fbb1 f3f3 	udiv	r3, r1, r3
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f966 	bl	800134e <HAL_SYSTICK_Config>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10f      	bne.n	80010a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d809      	bhi.n	80010a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f000 f932 	bl	80012fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_InitTick+0x70>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e004      	b.n	80010b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x1c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x20>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x1c>)
 80010d8:	6013      	str	r3, [r2, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	200003d4 	.word	0x200003d4
 80010e8:	20000008 	.word	0x20000008

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200003d4 	.word	0x200003d4

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d004      	beq.n	8001128 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_Delay+0x40>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001128:	bf00      	nop
 800112a:	f7ff ffdf 	bl	80010ec <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	429a      	cmp	r2, r3
 8001138:	d8f7      	bhi.n	800112a <HAL_Delay+0x26>
  {
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff40 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff90 	bl	800123c <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5f 	bl	80011e8 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff33 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa4 	bl	80012a4 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001376:	e15a      	b.n	800162e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 814c 	beq.w	8001628 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a6 	beq.w	8001628 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	4a5a      	ldr	r2, [pc, #360]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	; 0x60
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_GPIO_Init+0x2e4>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f4:	4a56      	ldr	r2, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d01f      	beq.n	8001560 <HAL_GPIO_Init+0x1f8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d019      	beq.n	800155c <HAL_GPIO_Init+0x1f4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1f0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4a      	ldr	r2, [pc, #296]	; (800165c <HAL_GPIO_Init+0x2f4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1ec>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a49      	ldr	r2, [pc, #292]	; (8001660 <HAL_GPIO_Init+0x2f8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e4>
 8001548:	2305      	movs	r3, #5
 800154a:	e00a      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 800154c:	2306      	movs	r3, #6
 800154e:	e008      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001550:	2304      	movs	r3, #4
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001554:	2303      	movs	r3, #3
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001558:	2302      	movs	r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x1fa>
 8001560:	2300      	movs	r3, #0
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001572:	4937      	ldr	r1, [pc, #220]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_GPIO_Init+0x300>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_GPIO_Init+0x300>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa22 f303 	lsr.w	r3, r2, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	f47f ae9d 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 800163e:	bf00      	nop
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000
 8001654:	48000400 	.word	0x48000400
 8001658:	48000800 	.word	0x48000800
 800165c:	48000c00 	.word	0x48000c00
 8001660:	48001000 	.word	0x48001000
 8001664:	48001400 	.word	0x48001400
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43d9      	mvns	r1, r3
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	b08b      	sub	sp, #44	; 0x2c
 80016d4:	af06      	add	r7, sp, #24
 80016d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0d7      	b.n	8001892 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f007 ff6c 	bl	80095d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fe59 	bl	80053c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e04c      	b.n	80017ae <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3301      	adds	r3, #1
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	b298      	uxth	r0, r3
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3336      	adds	r3, #54	; 0x36
 8001752:	4602      	mov	r2, r0
 8001754:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	3303      	adds	r3, #3
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	3338      	adds	r3, #56	; 0x38
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	333c      	adds	r3, #60	; 0x3c
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	3340      	adds	r3, #64	; 0x40
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3301      	adds	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3ad      	bcc.n	8001714 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e044      	b.n	8001848 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	3301      	adds	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3b5      	bcc.n	80017be <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	687e      	ldr	r6, [r7, #4]
 800185a:	466d      	mov	r5, sp
 800185c:	f106 0410 	add.w	r4, r6, #16
 8001860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	1d33      	adds	r3, r6, #4
 800186a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186c:	6838      	ldr	r0, [r7, #0]
 800186e:	f003 fdc2 	bl	80053f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f001 fc29 	bl	80030e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_PCD_Start+0x16>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e012      	b.n	80018d6 <HAL_PCD_Start+0x3c>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fd68 	bl	8005392 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 ff80 	bl	80077cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f005 ff85 	bl	80077fa <USB_ReadInterrupts>
 80018f0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fb26 	bl	8001f4e <PCD_EP_ISR_Handler>

    return;
 8001902:	e110      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d013      	beq.n	8001936 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001920:	b292      	uxth	r2, r2
 8001922:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f007 fee5 	bl	80096f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800192c:	2100      	movs	r1, #0
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8fc 	bl	8001b2c <HAL_PCD_SetAddress>

    return;
 8001934:	e0f7      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001952:	b292      	uxth	r2, r2
 8001954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001958:	e0e5      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00c      	beq.n	800197e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800196c:	b29a      	uxth	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001976:	b292      	uxth	r2, r2
 8001978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800197c:	e0d3      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d034      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	b292      	uxth	r2, r2
 800199c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0208 	bic.w	r2, r2, #8
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019ca:	2100      	movs	r1, #0
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f008 f887 	bl	8009ae0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f007 fec8 	bl	8009768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019f0:	e099      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d027      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0208 	orr.w	r2, r2, #8
 8001a0e:	b292      	uxth	r2, r2
 8001a10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0204 	orr.w	r2, r2, #4
 8001a3e:	b292      	uxth	r2, r2
 8001a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f007 fe75 	bl	8009734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a4a:	e06c      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d040      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d12b      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0204 	orr.w	r2, r2, #4
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0208 	orr.w	r2, r2, #8
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f008 f809 	bl	8009ae0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001ace:	e02a      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f007 fe2f 	bl	8009734 <HAL_PCD_SuspendCallback>
    return;
 8001ad6:	e026      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00f      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f007 fded 	bl	80096da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b00:	e011      	b.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b1e:	b292      	uxth	r2, r2
 8001b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b24:	bf00      	nop
  }
}
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_PCD_SetAddress+0x1a>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e013      	b.n	8001b6e <HAL_PCD_SetAddress+0x42>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 fe20 	bl	80077a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	4608      	mov	r0, r1
 8001b80:	4611      	mov	r1, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	70fb      	strb	r3, [r7, #3]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	803b      	strh	r3, [r7, #0]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	da0e      	bge.n	8001bba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00e      	b.n	8001bd8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 0207 	and.w	r2, r3, #7
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001be4:	883a      	ldrh	r2, [r7, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	78ba      	ldrb	r2, [r7, #2]
 8001bee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	785b      	ldrb	r3, [r3, #1]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c02:	78bb      	ldrb	r3, [r7, #2]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d102      	bne.n	8001c0e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_PCD_EP_Open+0xa6>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e00e      	b.n	8001c3a <HAL_PCD_EP_Open+0xc4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fc04 	bl	8005438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c38:	7afb      	ldrb	r3, [r7, #11]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da0e      	bge.n	8001c74 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	705a      	strb	r2, [r3, #1]
 8001c72:	e00e      	b.n	8001c92 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 0207 	and.w	r2, r3, #7
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_PCD_EP_Close+0x6a>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e00e      	b.n	8001cca <HAL_PCD_EP_Close+0x88>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 ff50 	bl	8005b60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f003 0207 	and.w	r2, r3, #7
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d1e:	7afb      	ldrb	r3, [r7, #11]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6979      	ldr	r1, [r7, #20]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 f903 	bl	8005f3a <USB_EPStartXfer>
 8001d34:	e005      	b.n	8001d42 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6979      	ldr	r1, [r7, #20]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 f8fc 	bl	8005f3a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	f003 0207 	and.w	r2, r3, #7
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f8a8 	bl	8005f3a <USB_EPStartXfer>
 8001dea:	e005      	b.n	8001df8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 f8a1 	bl	8005f3a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d901      	bls.n	8001e20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e03e      	b.n	8001e9e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0e      	bge.n	8001e46 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
 8001e44:	e00c      	b.n	8001e60 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_SetStall+0x7e>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e00e      	b.n	8001e9e <HAL_PCD_EP_SetStall+0x9c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f005 fb89 	bl	80075a6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d901      	bls.n	8001ec4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e040      	b.n	8001f46 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da0e      	bge.n	8001eea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	705a      	strb	r2, [r3, #1]
 8001ee8:	e00e      	b.n	8001f08 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 0207 	and.w	r2, r3, #7
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_ClrStall+0x82>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e00e      	b.n	8001f46 <HAL_PCD_EP_ClrStall+0xa0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f005 fb86 	bl	8007648 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b096      	sub	sp, #88	; 0x58
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f56:	e39c      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001f72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 815e 	bne.w	8002238 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d150      	bne.n	800202a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f98:	81fb      	strh	r3, [r7, #14]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3328      	adds	r3, #40	; 0x28
 8001fb0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	441a      	add	r2, r3
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f007 fb5b 	bl	80096a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 834a 	beq.w	8002692 <PCD_EP_ISR_Handler+0x744>
 8001ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f040 8345 	bne.w	8002692 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b292      	uxth	r2, r2
 800201c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002028:	e333      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800203c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	2b00      	cmp	r3, #0
 8002046:	d032      	beq.n	80020ae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4413      	add	r3, r2
 8002062:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002080:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002082:	b29b      	uxth	r3, r3
 8002084:	f005 fc0b 	bl	800789e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002094:	4013      	ands	r3, r2
 8002096:	823b      	strh	r3, [r7, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	8a3a      	ldrh	r2, [r7, #16]
 800209e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020a2:	b292      	uxth	r2, r2
 80020a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f007 fad0 	bl	800964c <HAL_PCD_SetupStageCallback>
 80020ac:	e2f1      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020ae:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f280 82ed 	bge.w	8002692 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020c4:	4013      	ands	r3, r2
 80020c6:	83fb      	strh	r3, [r7, #30]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	8bfa      	ldrh	r2, [r7, #30]
 80020ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d2:	b292      	uxth	r2, r2
 80020d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <PCD_EP_ISR_Handler+0x1ec>
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002114:	6959      	ldr	r1, [r3, #20]
 8002116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002118:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800211a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800211e:	b29b      	uxth	r3, r3
 8002120:	f005 fbbd 	bl	800789e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	441a      	add	r2, r3
 800212e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002130:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f007 fa9b 	bl	8009670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 82a3 	bne.w	8002692 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4413      	add	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b3e      	cmp	r3, #62	; 0x3e
 8002172:	d918      	bls.n	80021a6 <PCD_EP_ISR_Handler+0x258>
 8002174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	647b      	str	r3, [r7, #68]	; 0x44
 800217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <PCD_EP_ISR_Handler+0x240>
 8002188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218a:	3b01      	subs	r3, #1
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
 800218e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002190:	b29b      	uxth	r3, r3
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	b29b      	uxth	r3, r3
 8002196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800219a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219e:	b29a      	uxth	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	e029      	b.n	80021fa <PCD_EP_ISR_Handler+0x2ac>
 80021a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <PCD_EP_ISR_Handler+0x286>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	801a      	strh	r2, [r3, #0]
 80021d2:	e012      	b.n	80021fa <PCD_EP_ISR_Handler+0x2ac>
 80021d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
 80021dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <PCD_EP_ISR_Handler+0x2a0>
 80021e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ea:	3301      	adds	r3, #1
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
 80021ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220a:	827b      	strh	r3, [r7, #18]
 800220c:	8a7b      	ldrh	r3, [r7, #18]
 800220e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002212:	827b      	strh	r3, [r7, #18]
 8002214:	8a7b      	ldrh	r3, [r7, #18]
 8002216:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800221a:	827b      	strh	r3, [r7, #18]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	8a7b      	ldrh	r3, [r7, #18]
 8002222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002232:	b29b      	uxth	r3, r3
 8002234:	8013      	strh	r3, [r2, #0]
 8002236:	e22c      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800224c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002250:	2b00      	cmp	r3, #0
 8002252:	f280 80f6 	bge.w	8002442 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29a      	uxth	r2, r3
 8002268:	f640 738f 	movw	r3, #3983	; 0xf8f
 800226c:	4013      	ands	r3, r2
 800226e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002288:	b292      	uxth	r2, r2
 800228a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800228c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a4:	7b1b      	ldrb	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d123      	bne.n	80022f2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80022d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 808e 	beq.w	80023f8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	6959      	ldr	r1, [r3, #20]
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	88da      	ldrh	r2, [r3, #6]
 80022e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022ec:	f005 fad7 	bl	800789e <USB_ReadPMA>
 80022f0:	e082      	b.n	80023f8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f4:	78db      	ldrb	r3, [r3, #3]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d10a      	bne.n	8002310 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80022fe:	461a      	mov	r2, r3
 8002300:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9d3 	bl	80026ae <HAL_PCD_EP_DB_Receive>
 8002308:	4603      	mov	r3, r0
 800230a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800230e:	e073      	b.n	80023f8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002350:	b29b      	uxth	r3, r3
 8002352:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d022      	beq.n	80023b4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	4413      	add	r3, r2
 8002388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002392:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002396:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02c      	beq.n	80023f8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a4:	6959      	ldr	r1, [r3, #20]
 80023a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a8:	891a      	ldrh	r2, [r3, #8]
 80023aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023ae:	f005 fa76 	bl	800789e <USB_ReadPMA>
 80023b2:	e021      	b.n	80023f8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80023dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ea:	6959      	ldr	r1, [r3, #20]
 80023ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ee:	895a      	ldrh	r2, [r3, #10]
 80023f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023f4:	f005 fa53 	bl	800789e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002400:	441a      	add	r2, r3
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800240e:	441a      	add	r2, r3
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <PCD_EP_ISR_Handler+0x4da>
 800241c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d206      	bcs.n	8002436 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f007 f91e 	bl	8009670 <HAL_PCD_DataOutStageCallback>
 8002434:	e005      	b.n	8002442 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fd7c 	bl	8005f3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002442:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8121 	beq.w	8002692 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002450:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249c:	b29b      	uxth	r3, r3
 800249e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80024a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a2:	78db      	ldrb	r3, [r3, #3]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	f000 80a2 	beq.w	80025ee <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80024aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	7b1b      	ldrb	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8093 	beq.w	80025e0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d046      	beq.n	8002554 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d126      	bne.n	800251c <PCD_EP_ISR_Handler+0x5ce>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024dc:	b29b      	uxth	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	4413      	add	r3, r2
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	00da      	lsls	r2, r3, #3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002500:	b29a      	uxth	r2, r3
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	801a      	strh	r2, [r3, #0]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002514:	b29a      	uxth	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	e061      	b.n	80025e0 <PCD_EP_ISR_Handler+0x692>
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d15d      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x692>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	4413      	add	r3, r2
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	00da      	lsls	r2, r3, #3
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	4413      	add	r3, r2
 8002546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2200      	movs	r2, #0
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	e045      	b.n	80025e0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800255a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d126      	bne.n	80025b0 <PCD_EP_ISR_Handler+0x662>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	4413      	add	r3, r2
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	00da      	lsls	r2, r3, #3
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	4413      	add	r3, r2
 8002584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002594:	b29a      	uxth	r2, r3
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e017      	b.n	80025e0 <PCD_EP_ISR_Handler+0x692>
 80025b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d113      	bne.n	80025e0 <PCD_EP_ISR_Handler+0x692>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c6:	4413      	add	r3, r2
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	00da      	lsls	r2, r3, #3
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	4413      	add	r3, r2
 80025d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2200      	movs	r2, #0
 80025de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f007 f85d 	bl	80096a6 <HAL_PCD_DataInStageCallback>
 80025ec:	e051      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d144      	bne.n	8002684 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	4413      	add	r3, r2
 8002614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800262a:	429a      	cmp	r2, r3
 800262c:	d907      	bls.n	800263e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800262e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002636:	1ad2      	subs	r2, r2, r3
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	e002      	b.n	8002644 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f007 f827 	bl	80096a6 <HAL_PCD_DataInStageCallback>
 8002658:	e01b      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800265a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002662:	441a      	add	r2, r3
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002670:	441a      	add	r2, r3
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fc5c 	bl	8005f3a <USB_EPStartXfer>
 8002682:	e006      	b.n	8002692 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002688:	461a      	mov	r2, r3
 800268a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f917 	bl	80028c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269a:	b29b      	uxth	r3, r3
 800269c:	b21b      	sxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f6ff ac5a 	blt.w	8001f58 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3758      	adds	r7, #88	; 0x58
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07c      	beq.n	80027c0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d306      	bcc.n	8002704 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	8b7b      	ldrh	r3, [r7, #26]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	e002      	b.n	800270a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d123      	bne.n	800275a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272c:	833b      	strh	r3, [r7, #24]
 800272e:	8b3b      	ldrh	r3, [r7, #24]
 8002730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002734:	833b      	strh	r3, [r7, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	441a      	add	r2, r3
 8002744:	8b3b      	ldrh	r3, [r7, #24]
 8002746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800274e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002756:	b29b      	uxth	r3, r3
 8002758:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01f      	beq.n	80027a4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	82fb      	strh	r3, [r7, #22]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	8afb      	ldrh	r3, [r7, #22]
 8002790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800279c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027a4:	8b7b      	ldrh	r3, [r7, #26]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8085 	beq.w	80028b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6959      	ldr	r1, [r3, #20]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	891a      	ldrh	r2, [r3, #8]
 80027b8:	8b7b      	ldrh	r3, [r7, #26]
 80027ba:	f005 f870 	bl	800789e <USB_ReadPMA>
 80027be:	e07a      	b.n	80028b6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	8b7b      	ldrh	r3, [r7, #26]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d306      	bcc.n	80027fe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	8b7b      	ldrh	r3, [r7, #26]
 80027f6:	1ad2      	subs	r2, r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	619a      	str	r2, [r3, #24]
 80027fc:	e002      	b.n	8002804 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d123      	bne.n	8002854 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	83fb      	strh	r3, [r7, #30]
 8002828:	8bfb      	ldrh	r3, [r7, #30]
 800282a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800282e:	83fb      	strh	r3, [r7, #30]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	8bfb      	ldrh	r3, [r7, #30]
 8002840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	b29b      	uxth	r3, r3
 8002852:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11f      	bne.n	800289e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002878:	83bb      	strh	r3, [r7, #28]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	441a      	add	r2, r3
 8002888:	8bbb      	ldrh	r3, [r7, #28]
 800288a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800289a:	b29b      	uxth	r3, r3
 800289c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800289e:	8b7b      	ldrh	r3, [r7, #26]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6959      	ldr	r1, [r3, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	895a      	ldrh	r2, [r3, #10]
 80028b0:	8b7b      	ldrh	r3, [r7, #26]
 80028b2:	f004 fff4 	bl	800789e <USB_ReadPMA>
    }
  }

  return count;
 80028b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0a2      	sub	sp, #136	; 0x88
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 81c5 	beq.w	8002c64 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290a:	429a      	cmp	r2, r3
 800290c:	d907      	bls.n	800291e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	1ad2      	subs	r2, r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	619a      	str	r2, [r3, #24]
 800291c:	e002      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 80b9 	bne.w	8002aa0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d126      	bne.n	8002984 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	4413      	add	r3, r2
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	4413      	add	r3, r2
 8002958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002968:	b29a      	uxth	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297c:	b29a      	uxth	r2, r3
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	e01a      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	785b      	ldrb	r3, [r3, #1]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d116      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	4413      	add	r3, r2
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00da      	lsls	r2, r3, #3
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	4413      	add	r3, r2
 80029ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d126      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x156>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	00da      	lsls	r2, r3, #3
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	801a      	strh	r2, [r3, #0]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e017      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d113      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	00da      	lsls	r2, r3, #3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f006 fe2a 	bl	80096a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 82d2 	beq.w	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	827b      	strh	r3, [r7, #18]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	441a      	add	r2, r3
 8002a88:	8a7b      	ldrh	r3, [r7, #18]
 8002a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	8013      	strh	r3, [r2, #0]
 8002a9e:	e2b0      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d021      	beq.n	8002aee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f040 8284 	bne.w	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b02:	441a      	add	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b10:	441a      	add	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6a1a      	ldr	r2, [r3, #32]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d309      	bcc.n	8002b36 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2e:	1ad2      	subs	r2, r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	621a      	str	r2, [r3, #32]
 8002b34:	e015      	b.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b4c:	e009      	b.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d155      	bne.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x356>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	4413      	add	r3, r2
 8002b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	00da      	lsls	r2, r3, #3
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
 8002b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b94:	2b3e      	cmp	r3, #62	; 0x3e
 8002b96:	d916      	bls.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x306>
 8002b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002baa:	3b01      	subs	r3, #1
 8002bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	e043      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d112      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	e02d      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x348>
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c04:	3301      	adds	r3, #1
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	e01b      	b.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d117      	bne.n	8002c4e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	643b      	str	r3, [r7, #64]	; 0x40
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c32:	4413      	add	r3, r2
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	00da      	lsls	r2, r3, #3
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	4413      	add	r3, r2
 8002c40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6959      	ldr	r1, [r3, #20]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	891a      	ldrh	r2, [r3, #8]
 8002c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f004 fddc 	bl	800781a <USB_WritePMA>
 8002c62:	e1ce      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d307      	bcc.n	8002ca8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	619a      	str	r2, [r3, #24]
 8002ca6:	e002      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80c4 	bne.w	8002e40 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d126      	bne.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x44e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd4:	4413      	add	r3, r2
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	00da      	lsls	r2, r3, #3
 8002cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e01a      	b.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x484>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d116      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x484>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2a:	4413      	add	r3, r2
 8002d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00da      	lsls	r2, r3, #3
 8002d34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d36:	4413      	add	r3, r2
 8002d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d12f      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	00da      	lsls	r2, r3, #3
 8002d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dae:	801a      	strh	r2, [r3, #0]
 8002db0:	e017      	b.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x522>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	785b      	ldrb	r3, [r3, #1]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d113      	bne.n	8002de2 <HAL_PCD_EP_DB_Transmit+0x522>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dc8:	4413      	add	r3, r2
 8002dca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00da      	lsls	r2, r3, #3
 8002dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dde:	2200      	movs	r2, #0
 8002de0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f006 fc5c 	bl	80096a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 8104 	bne.w	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]
 8002e3e:	e0e0      	b.n	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d121      	bne.n	8002e8e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	441a      	add	r2, r3
 8002e76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 80b4 	bne.w	8003002 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ea2:	441a      	add	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb0:	441a      	add	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d309      	bcc.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6a1a      	ldr	r2, [r3, #32]
 8002ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ece:	1ad2      	subs	r2, r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	621a      	str	r2, [r3, #32]
 8002ed4:	e015      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ee2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002eec:	e009      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	663b      	str	r3, [r7, #96]	; 0x60
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d155      	bne.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f24:	4413      	add	r3, r2
 8002f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	00da      	lsls	r2, r3, #3
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f30:	4413      	add	r3, r2
 8002f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f36:	657b      	str	r3, [r7, #84]	; 0x54
 8002f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f3c:	d916      	bls.n	8002f6c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	677b      	str	r3, [r7, #116]	; 0x74
 8002f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x694>
 8002f4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f50:	3b01      	subs	r3, #1
 8002f52:	677b      	str	r3, [r7, #116]	; 0x74
 8002f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	029b      	lsls	r3, r3, #10
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	e040      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d112      	bne.n	8002f98 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	e02a      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002faa:	3301      	adds	r3, #1
 8002fac:	677b      	str	r3, [r7, #116]	; 0x74
 8002fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	e018      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	785b      	ldrb	r3, [r3, #1]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d114      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd2:	4413      	add	r3, r2
 8002fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fde:	4413      	add	r3, r2
 8002fe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	895a      	ldrh	r2, [r3, #10]
 8002ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f004 fc0c 	bl	800781a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301c:	823b      	strh	r3, [r7, #16]
 800301e:	8a3b      	ldrh	r3, [r7, #16]
 8003020:	f083 0310 	eor.w	r3, r3, #16
 8003024:	823b      	strh	r3, [r7, #16]
 8003026:	8a3b      	ldrh	r3, [r7, #16]
 8003028:	f083 0320 	eor.w	r3, r3, #32
 800302c:	823b      	strh	r3, [r7, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	441a      	add	r2, r3
 800303c:	8a3b      	ldrh	r3, [r7, #16]
 800303e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3788      	adds	r7, #136	; 0x88
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	4613      	mov	r3, r2
 800306c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	e009      	b.n	80030a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003092:	897a      	ldrh	r2, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030a6:	893b      	ldrh	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2200      	movs	r2, #0
 80030b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	80da      	strh	r2, [r3, #6]
 80030ba:	e00b      	b.n	80030d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2201      	movs	r2, #1
 80030c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003106:	b29b      	uxth	r3, r3
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800311a:	b29b      	uxth	r3, r3
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d141      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003146:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d131      	bne.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315a:	4a46      	ldr	r2, [pc, #280]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003164:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800316c:	4a41      	ldr	r2, [pc, #260]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003174:	4b40      	ldr	r3, [pc, #256]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2232      	movs	r2, #50	; 0x32
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	4a3f      	ldr	r2, [pc, #252]	; (800327c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318a:	e002      	b.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b01      	subs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003192:	4b38      	ldr	r3, [pc, #224]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d102      	bne.n	80031a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f2      	bne.n	800318c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d158      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e057      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031be:	4a2d      	ldr	r2, [pc, #180]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031c8:	e04d      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d141      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d131      	bne.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2232      	movs	r2, #50	; 0x32
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	0c9b      	lsrs	r3, r3, #18
 8003212:	3301      	adds	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003216:	e002      	b.n	800321e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d102      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f2      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d112      	bne.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e011      	b.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003254:	e007      	b.n	8003266 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003264:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40007000 	.word	0x40007000
 8003278:	20000000 	.word	0x20000000
 800327c:	431bde83 	.word	0x431bde83

08003280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e306      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d075      	beq.n	800338a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b97      	ldr	r3, [pc, #604]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a8:	4b94      	ldr	r3, [pc, #592]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	d102      	bne.n	80032be <HAL_RCC_OscConfig+0x3e>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_OscConfig+0x44>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d10b      	bne.n	80032dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	4b8d      	ldr	r3, [pc, #564]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05b      	beq.n	8003388 <HAL_RCC_OscConfig+0x108>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d157      	bne.n	8003388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e2e1      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCC_OscConfig+0x74>
 80032e6:	4b85      	ldr	r3, [pc, #532]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a84      	ldr	r2, [pc, #528]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x98>
 80032fe:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7e      	ldr	r2, [pc, #504]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xb0>
 8003318:	4b78      	ldr	r3, [pc, #480]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a77      	ldr	r2, [pc, #476]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b75      	ldr	r3, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a74      	ldr	r2, [pc, #464]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fed8 	bl	80010ec <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fd fed4 	bl	80010ec <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e2a6      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xc0>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fd fec4 	bl	80010ec <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fd fec0 	bl	80010ec <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e292      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0xe8>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a0:	4b56      	ldr	r3, [pc, #344]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d102      	bne.n	80033b6 <HAL_RCC_OscConfig+0x136>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_OscConfig+0x13c>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d11f      	bne.n	80033fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033bc:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x154>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e265      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	4946      	ldr	r1, [pc, #280]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e8:	4b45      	ldr	r3, [pc, #276]	; (8003500 <HAL_RCC_OscConfig+0x280>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fe31 	bl	8001054 <HAL_InitTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d043      	beq.n	8003480 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e251      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d023      	beq.n	800344c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3c      	ldr	r2, [pc, #240]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fd fe6c 	bl	80010ec <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fd fe68 	bl	80010ec <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e23a      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342a:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	492d      	ldr	r1, [pc, #180]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
 800344a:	e01a      	b.n	8003482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fe48 	bl	80010ec <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fd fe44 	bl	80010ec <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e216      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1e0>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d041      	beq.n	8003512 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fd fe21 	bl	80010ec <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fd fe1d 	bl	80010ec <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e1ef      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCC_OscConfig+0x22e>
 80034ce:	e020      	b.n	8003512 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d0:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_OscConfig+0x27c>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fd fe04 	bl	80010ec <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e6:	e00d      	b.n	8003504 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fd fe00 	bl	80010ec <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d906      	bls.n	8003504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1d2      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003504:	4b8c      	ldr	r3, [pc, #560]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ea      	bne.n	80034e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a6 	beq.w	800366c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003524:	4b84      	ldr	r3, [pc, #528]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x2b4>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x2b6>
 8003534:	2300      	movs	r3, #0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	4a7e      	ldr	r2, [pc, #504]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6593      	str	r3, [r2, #88]	; 0x58
 8003546:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003552:	2301      	movs	r3, #1
 8003554:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003556:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCC_OscConfig+0x4bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d118      	bne.n	8003594 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x4bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x4bc>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fd fdbd 	bl	80010ec <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003576:	f7fd fdb9 	bl	80010ec <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e18b      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x4bc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d108      	bne.n	80035ae <HAL_RCC_OscConfig+0x32e>
 800359c:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ac:	e024      	b.n	80035f8 <HAL_RCC_OscConfig+0x378>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d110      	bne.n	80035d8 <HAL_RCC_OscConfig+0x358>
 80035b6:	4b60      	ldr	r3, [pc, #384]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a5e      	ldr	r2, [pc, #376]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	4a5a      	ldr	r2, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d6:	e00f      	b.n	80035f8 <HAL_RCC_OscConfig+0x378>
 80035d8:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a56      	ldr	r2, [pc, #344]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e8:	4b53      	ldr	r3, [pc, #332]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d016      	beq.n	800362e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fd fd74 	bl	80010ec <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fd fd70 	bl	80010ec <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e140      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ed      	beq.n	8003608 <HAL_RCC_OscConfig+0x388>
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fd fd5d 	bl	80010ec <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fd fd59 	bl	80010ec <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e129      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800364c:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ed      	bne.n	8003636 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800365a:	7ffb      	ldrb	r3, [r7, #31]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003660:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d03c      	beq.n	80036f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01c      	beq.n	80036ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fd fd2c 	bl	80010ec <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003698:	f7fd fd28 	bl	80010ec <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e0fa      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <HAL_RCC_OscConfig+0x418>
 80036b8:	e01b      	b.n	80036f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd fd0f 	bl	80010ec <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d2:	f7fd fd0b 	bl	80010ec <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0dd      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ef      	bne.n	80036d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80d1 	beq.w	800389e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b0c      	cmp	r3, #12
 8003706:	f000 808b 	beq.w	8003820 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d15e      	bne.n	80037d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <HAL_RCC_OscConfig+0x4b8>)
 8003718:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd fce5 	bl	80010ec <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	e00c      	b.n	8003740 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003726:	f7fd fce1 	bl	80010ec <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d905      	bls.n	8003740 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e0b3      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ec      	bne.n	8003726 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374c:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_RCC_OscConfig+0x62c>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6a11      	ldr	r1, [r2, #32]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800375c:	3a01      	subs	r2, #1
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	4311      	orrs	r1, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003766:	0212      	lsls	r2, r2, #8
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800376e:	0852      	lsrs	r2, r2, #1
 8003770:	3a01      	subs	r2, #1
 8003772:	0552      	lsls	r2, r2, #21
 8003774:	4311      	orrs	r1, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800377a:	0852      	lsrs	r2, r2, #1
 800377c:	3a01      	subs	r2, #1
 800377e:	0652      	lsls	r2, r2, #25
 8003780:	4311      	orrs	r1, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003786:	06d2      	lsls	r2, r2, #27
 8003788:	430a      	orrs	r2, r1
 800378a:	4947      	ldr	r1, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003790:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fca0 	bl	80010ec <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fc9c 	bl	80010ec <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e06e      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x530>
 80037ce:	e066      	b.n	800389e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a34      	ldr	r2, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a31      	ldr	r2, [pc, #196]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 80037ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fc78 	bl	80010ec <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd fc74 	bl	80010ec <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e046      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x580>
 800381e:	e03e      	b.n	800389e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e039      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x628>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d12c      	bne.n	800389a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	3b01      	subs	r3, #1
 800384c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d123      	bne.n	800389a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11b      	bne.n	800389a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d113      	bne.n	800389a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d109      	bne.n	800389a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000
 80038ac:	019f800c 	.word	0x019f800c

080038b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e11e      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b91      	ldr	r3, [pc, #580]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b8e      	ldr	r3, [pc, #568]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 020f 	bic.w	r2, r3, #15
 80038de:	498c      	ldr	r1, [pc, #560]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b8a      	ldr	r3, [pc, #552]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e106      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d073      	beq.n	80039ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d129      	bne.n	8003960 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0f4      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800391c:	f000 f966 	bl	8003bec <RCC_GetSysClockFreqFromPLLSource>
 8003920:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a7c      	ldr	r2, [pc, #496]	; (8003b18 <HAL_RCC_ClockConfig+0x268>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d93f      	bls.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d033      	beq.n	80039aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	d12f      	bne.n	80039aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003952:	4a70      	ldr	r2, [pc, #448]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003958:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e024      	b.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003968:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0c6      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003978:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0be      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003988:	f000 f8ce 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 800398c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4a61      	ldr	r2, [pc, #388]	; (8003b18 <HAL_RCC_ClockConfig+0x268>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d909      	bls.n	80039aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800399e:	4a5d      	ldr	r2, [pc, #372]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4957      	ldr	r1, [pc, #348]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fb96 	bl	80010ec <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd fb92 	bl	80010ec <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e095      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b4e      	ldr	r3, [pc, #312]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a42      	ldr	r2, [pc, #264]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a24:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a52:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d21d      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 020f 	bic.w	r2, r3, #15
 8003a68:	4929      	ldr	r1, [pc, #164]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fb3c 	bl	80010ec <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fd fb38 	bl	80010ec <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e03b      	b.n	8003b06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_RCC_ClockConfig+0x260>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1ed      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4917      	ldr	r1, [pc, #92]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	490f      	ldr	r1, [pc, #60]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ada:	f000 f825 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490c      	ldr	r1, [pc, #48]	; (8003b1c <HAL_RCC_ClockConfig+0x26c>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <HAL_RCC_ClockConfig+0x270>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x274>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd faa8 	bl	8001054 <HAL_InitTick>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40021000 	.word	0x40021000
 8003b18:	04c4b400 	.word	0x04c4b400
 8003b1c:	08009cb4 	.word	0x08009cb4
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e047      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b4c:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e03e      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d136      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3301      	adds	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b7c:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	0a12      	lsrs	r2, r2, #8
 8003b8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
      break;
 8003b94:	e00c      	b.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	0a12      	lsrs	r2, r2, #8
 8003ba4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0e5b      	lsrs	r3, r3, #25
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	e001      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bd0:	693b      	ldr	r3, [r7, #16]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d10c      	bne.n	8003c2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c10:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c1a:	68d2      	ldr	r2, [r2, #12]
 8003c1c:	0a12      	lsrs	r2, r2, #8
 8003c1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
    break;
 8003c28:	e00c      	b.n	8003c44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c2a:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	0a12      	lsrs	r2, r2, #8
 8003c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    break;
 8003c42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c5e:	687b      	ldr	r3, [r7, #4]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	007a1200 	.word	0x007a1200
 8003c74:	00f42400 	.word	0x00f42400

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8098 	beq.w	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4a3f      	ldr	r2, [pc, #252]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a39      	ldr	r2, [pc, #228]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cce:	f7fd fa0d 	bl	80010ec <HAL_GetTick>
 8003cd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd4:	e009      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7fd fa09 	bl	80010ec <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cea:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ef      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d159      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01e      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d019      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d18:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d24:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd f9c9 	bl	80010ec <HAL_GetTick>
 8003d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd f9c5 	bl	80010ec <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d902      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	74fb      	strb	r3, [r7, #19]
            break;
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ec      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	4903      	ldr	r1, [pc, #12]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	74bb      	strb	r3, [r7, #18]
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003db4:	7c7b      	ldrb	r3, [r7, #17]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dba:	4ba6      	ldr	r3, [pc, #664]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	4aa5      	ldr	r2, [pc, #660]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd2:	4ba0      	ldr	r3, [pc, #640]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f023 0203 	bic.w	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	499c      	ldr	r1, [pc, #624]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003df4:	4b97      	ldr	r3, [pc, #604]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f023 020c 	bic.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4994      	ldr	r1, [pc, #592]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e16:	4b8f      	ldr	r3, [pc, #572]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	498b      	ldr	r1, [pc, #556]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e38:	4b86      	ldr	r3, [pc, #536]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	4983      	ldr	r1, [pc, #524]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5a:	4b7e      	ldr	r3, [pc, #504]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	497a      	ldr	r1, [pc, #488]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e7c:	4b75      	ldr	r3, [pc, #468]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	4972      	ldr	r1, [pc, #456]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e9e:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4969      	ldr	r1, [pc, #420]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ec0:	4b64      	ldr	r3, [pc, #400]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	4961      	ldr	r1, [pc, #388]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	4958      	ldr	r1, [pc, #352]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	4950      	ldr	r1, [pc, #320]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f24:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f3c:	4b45      	ldr	r3, [pc, #276]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4942      	ldr	r1, [pc, #264]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4934      	ldr	r1, [pc, #208]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fac:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	4926      	ldr	r1, [pc, #152]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4918      	ldr	r1, [pc, #96]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004002:	d105      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4a12      	ldr	r2, [pc, #72]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800400e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403a:	d105      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004048:	7cbb      	ldrb	r3, [r7, #18]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e049      	b.n	80040fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fe92 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fbd4 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e049      	b.n	80041ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fc fdf5 	bl	8000d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 fb7d 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <HAL_TIM_PWM_Start+0x24>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	bf14      	ite	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	2300      	moveq	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	e03c      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d109      	bne.n	80041f2 <HAL_TIM_PWM_Start+0x3e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	e02f      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d109      	bne.n	800420c <HAL_TIM_PWM_Start+0x58>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	bf14      	ite	ne
 8004204:	2301      	movne	r3, #1
 8004206:	2300      	moveq	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e022      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b0c      	cmp	r3, #12
 8004210:	d109      	bne.n	8004226 <HAL_TIM_PWM_Start+0x72>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	bf14      	ite	ne
 800421e:	2301      	movne	r3, #1
 8004220:	2300      	moveq	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	e015      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d109      	bne.n	8004240 <HAL_TIM_PWM_Start+0x8c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	bf14      	ite	ne
 8004238:	2301      	movne	r3, #1
 800423a:	2300      	moveq	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e008      	b.n	8004252 <HAL_TIM_PWM_Start+0x9e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e097      	b.n	800438a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xb6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004268:	e023      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xc6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004278:	e01b      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d104      	bne.n	800428a <HAL_TIM_PWM_Start+0xd6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004288:	e013      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d104      	bne.n	800429a <HAL_TIM_PWM_Start+0xe6>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004298:	e00b      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d104      	bne.n	80042aa <HAL_TIM_PWM_Start+0xf6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a8:	e003      	b.n	80042b2 <HAL_TIM_PWM_Start+0xfe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe48 	bl	8004f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a33      	ldr	r2, [pc, #204]	; (8004394 <HAL_TIM_PWM_Start+0x1e0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a32      	ldr	r2, [pc, #200]	; (8004398 <HAL_TIM_PWM_Start+0x1e4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <HAL_TIM_PWM_Start+0x1e8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2f      	ldr	r2, [pc, #188]	; (80043a0 <HAL_TIM_PWM_Start+0x1ec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x13e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2d      	ldr	r2, [pc, #180]	; (80043a4 <HAL_TIM_PWM_Start+0x1f0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x142>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_TIM_PWM_Start+0x144>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <HAL_TIM_PWM_Start+0x1e0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d013      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <HAL_TIM_PWM_Start+0x1f4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <HAL_TIM_PWM_Start+0x1f8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a17      	ldr	r2, [pc, #92]	; (8004398 <HAL_TIM_PWM_Start+0x1e4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIM_PWM_Start+0x194>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a16      	ldr	r2, [pc, #88]	; (800439c <HAL_TIM_PWM_Start+0x1e8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d115      	bne.n	8004374 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d015      	beq.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d011      	beq.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	e008      	b.n	8004386 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e000      	b.n	8004388 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	00010007 	.word	0x00010007

080043b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e097      	b.n	80044f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fc fbf7 	bl	8000bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80043f8:	f023 0307 	bic.w	r3, r3, #7
 80043fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 fa1b 	bl	8004844 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	4313      	orrs	r3, r2
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004454:	f023 030c 	bic.w	r3, r3, #12
 8004458:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	4313      	orrs	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	011a      	lsls	r2, r3, #4
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	031b      	lsls	r3, r3, #12
 8004484:	4313      	orrs	r3, r2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4313      	orrs	r3, r2
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004510:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004518:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004520:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004528:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d110      	bne.n	8004552 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d102      	bne.n	800453c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e069      	b.n	8004614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004550:	e031      	b.n	80045b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d110      	bne.n	800457a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004558:	7bbb      	ldrb	r3, [r7, #14]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d102      	bne.n	8004564 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800455e:	7b3b      	ldrb	r3, [r7, #12]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d001      	beq.n	8004568 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e055      	b.n	8004614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004578:	e01d      	b.n	80045b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d108      	bne.n	8004592 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004586:	7b7b      	ldrb	r3, [r7, #13]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d102      	bne.n	8004592 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800458c:	7b3b      	ldrb	r3, [r7, #12]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e03e      	b.n	8004614 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_TIM_Encoder_Start+0xc4>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d008      	beq.n	80045d4 <HAL_TIM_Encoder_Start+0xd4>
 80045c2:	e00f      	b.n	80045e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fcbf 	bl	8004f50 <TIM_CCxChannelCmd>
      break;
 80045d2:	e016      	b.n	8004602 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	2104      	movs	r1, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fcb7 	bl	8004f50 <TIM_CCxChannelCmd>
      break;
 80045e2:	e00e      	b.n	8004602 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fcaf 	bl	8004f50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2201      	movs	r2, #1
 80045f8:	2104      	movs	r1, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fca8 	bl	8004f50 <TIM_CCxChannelCmd>
      break;
 8004600:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004636:	2302      	movs	r3, #2
 8004638:	e0ff      	b.n	800483a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b14      	cmp	r3, #20
 8004646:	f200 80f0 	bhi.w	800482a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	080046a5 	.word	0x080046a5
 8004654:	0800482b 	.word	0x0800482b
 8004658:	0800482b 	.word	0x0800482b
 800465c:	0800482b 	.word	0x0800482b
 8004660:	080046e5 	.word	0x080046e5
 8004664:	0800482b 	.word	0x0800482b
 8004668:	0800482b 	.word	0x0800482b
 800466c:	0800482b 	.word	0x0800482b
 8004670:	08004727 	.word	0x08004727
 8004674:	0800482b 	.word	0x0800482b
 8004678:	0800482b 	.word	0x0800482b
 800467c:	0800482b 	.word	0x0800482b
 8004680:	08004767 	.word	0x08004767
 8004684:	0800482b 	.word	0x0800482b
 8004688:	0800482b 	.word	0x0800482b
 800468c:	0800482b 	.word	0x0800482b
 8004690:	080047a9 	.word	0x080047a9
 8004694:	0800482b 	.word	0x0800482b
 8004698:	0800482b 	.word	0x0800482b
 800469c:	0800482b 	.word	0x0800482b
 80046a0:	080047e9 	.word	0x080047e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f95a 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6999      	ldr	r1, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	619a      	str	r2, [r3, #24]
      break;
 80046e2:	e0a5      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f9ca 	bl	8004a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6999      	ldr	r1, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	021a      	lsls	r2, r3, #8
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]
      break;
 8004724:	e084      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa33 	bl	8004b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0208 	orr.w	r2, r2, #8
 8004740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0204 	bic.w	r2, r2, #4
 8004750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
      break;
 8004764:	e064      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fa9b 	bl	8004ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69d9      	ldr	r1, [r3, #28]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	021a      	lsls	r2, r3, #8
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	61da      	str	r2, [r3, #28]
      break;
 80047a6:	e043      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fb04 	bl	8004dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0208 	orr.w	r2, r2, #8
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047e6:	e023      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb48 	bl	8004e84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004828:	e002      	b.n	8004830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
      break;
 800482e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3c      	ldr	r2, [pc, #240]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a39      	ldr	r2, [pc, #228]	; (800494c <TIM_Base_SetConfig+0x108>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a38      	ldr	r2, [pc, #224]	; (8004950 <TIM_Base_SetConfig+0x10c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <TIM_Base_SetConfig+0x110>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2a      	ldr	r2, [pc, #168]	; (800494c <TIM_Base_SetConfig+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a29      	ldr	r2, [pc, #164]	; (8004950 <TIM_Base_SetConfig+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a28      	ldr	r2, [pc, #160]	; (8004954 <TIM_Base_SetConfig+0x110>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <TIM_Base_SetConfig+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <TIM_Base_SetConfig+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a25      	ldr	r2, [pc, #148]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a11      	ldr	r2, [pc, #68]	; (8004954 <TIM_Base_SetConfig+0x110>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <TIM_Base_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <TIM_Base_SetConfig+0x118>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 0302 	bic.w	r3, r3, #2
 80049b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00f      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d111      	bne.n	8004a4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0210 	bic.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0320 	bic.w	r3, r3, #32
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC2_SetConfig+0x6c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10d      	bne.n	8004b0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <TIM_OC2_SetConfig+0x108>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC2_SetConfig+0x10c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC2_SetConfig+0x110>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d113      	bne.n	8004b5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_OC3_SetConfig+0x6a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10d      	bne.n	8004c1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <TIM_OC3_SetConfig+0x104>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <TIM_OC3_SetConfig+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <TIM_OC3_SetConfig+0x10c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d113      	bne.n	8004c6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a28      	ldr	r2, [pc, #160]	; (8004da8 <TIM_OC4_SetConfig+0x100>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC4_SetConfig+0x6c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a27      	ldr	r2, [pc, #156]	; (8004dac <TIM_OC4_SetConfig+0x104>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <TIM_OC4_SetConfig+0x100>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00f      	beq.n	8004d58 <TIM_OC4_SetConfig+0xb0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <TIM_OC4_SetConfig+0x104>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <TIM_OC4_SetConfig+0xb0>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <TIM_OC4_SetConfig+0x108>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d007      	beq.n	8004d58 <TIM_OC4_SetConfig+0xb0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <TIM_OC4_SetConfig+0x10c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC4_SetConfig+0xb0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <TIM_OC4_SetConfig+0x110>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d113      	bne.n	8004d80 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	019b      	lsls	r3, r3, #6
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40013400 	.word	0x40013400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800

08004dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <TIM_OC5_SetConfig+0xb4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00f      	beq.n	8004e36 <TIM_OC5_SetConfig+0x7a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <TIM_OC5_SetConfig+0xb8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <TIM_OC5_SetConfig+0x7a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC5_SetConfig+0xbc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <TIM_OC5_SetConfig+0x7a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <TIM_OC5_SetConfig+0xc0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d003      	beq.n	8004e36 <TIM_OC5_SetConfig+0x7a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <TIM_OC5_SetConfig+0xc4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d109      	bne.n	8004e4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	051b      	lsls	r3, r3, #20
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <TIM_OC6_SetConfig+0xb8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00f      	beq.n	8004f00 <TIM_OC6_SetConfig+0x7c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <TIM_OC6_SetConfig+0xbc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_OC6_SetConfig+0x7c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <TIM_OC6_SetConfig+0xc0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_OC6_SetConfig+0x7c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <TIM_OC6_SetConfig+0xc4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC6_SetConfig+0x7c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <TIM_OC6_SetConfig+0xc8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d109      	bne.n	8004f14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	029b      	lsls	r3, r3, #10
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40013400 	.word	0x40013400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2201      	movs	r2, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1a      	ldr	r2, [r3, #32]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	401a      	ands	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIMEx_PWMN_Start+0x24>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e022      	b.n	8005006 <HAL_TIMEx_PWMN_Start+0x6a>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d109      	bne.n	8004fda <HAL_TIMEx_PWMN_Start+0x3e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e015      	b.n	8005006 <HAL_TIMEx_PWMN_Start+0x6a>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIMEx_PWMN_Start+0x58>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e008      	b.n	8005006 <HAL_TIMEx_PWMN_Start+0x6a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e069      	b.n	80050e2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_TIMEx_PWMN_Start+0x82>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	e013      	b.n	8005046 <HAL_TIMEx_PWMN_Start+0xaa>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d104      	bne.n	800502e <HAL_TIMEx_PWMN_Start+0x92>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502c:	e00b      	b.n	8005046 <HAL_TIMEx_PWMN_Start+0xaa>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d104      	bne.n	800503e <HAL_TIMEx_PWMN_Start+0xa2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800503c:	e003      	b.n	8005046 <HAL_TIMEx_PWMN_Start+0xaa>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2204      	movs	r2, #4
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f97a 	bl	8005348 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005062:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <HAL_TIMEx_PWMN_Start+0x150>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIMEx_PWMN_Start+0x104>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d013      	beq.n	80050a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <HAL_TIMEx_PWMN_Start+0x154>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIMEx_PWMN_Start+0x104>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIMEx_PWMN_Start+0x160>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d115      	bne.n	80050cc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_TIMEx_PWMN_Start+0x164>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d015      	beq.n	80050de <HAL_TIMEx_PWMN_Start+0x142>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d011      	beq.n	80050de <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	e008      	b.n	80050de <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40014000 	.word	0x40014000
 8005100:	00010007 	.word	0x00010007

08005104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e065      	b.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d108      	bne.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005156:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d013      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a17      	ldr	r2, [pc, #92]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a13      	ldr	r2, [pc, #76]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d10c      	bne.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40013400 	.word	0x40013400
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40014000 	.word	0x40014000

08005208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005220:	2302      	movs	r3, #2
 8005222:	e087      	b.n	8005334 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a27      	ldr	r2, [pc, #156]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a25      	ldr	r2, [pc, #148]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d106      	bne.n	80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d126      	bne.n	8005322 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	051b      	lsls	r3, r3, #20
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0e      	ldr	r2, [pc, #56]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0d      	ldr	r2, [pc, #52]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d106      	bne.n	8005322 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400

08005348 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2204      	movs	r2, #4
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	43db      	mvns	r3, r3
 800536a:	401a      	ands	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	fa01 f303 	lsl.w	r3, r1, r3
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053a2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053c8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80053cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	b29b      	uxth	r3, r3
 80053de:	4013      	ands	r3, r2
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053f6:	b084      	sub	sp, #16
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	f107 0014 	add.w	r0, r7, #20
 8005404:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr

08005438 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005438:	b480      	push	{r7}
 800543a:	b09d      	sub	sp, #116	; 0x74
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	78db      	ldrb	r3, [r3, #3]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d81f      	bhi.n	80054aa <USB_ActivateEndpoint+0x72>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <USB_ActivateEndpoint+0x38>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005481 	.word	0x08005481
 8005474:	0800549d 	.word	0x0800549d
 8005478:	080054b3 	.word	0x080054b3
 800547c:	0800548f 	.word	0x0800548f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005480:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005488:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800548c:	e012      	b.n	80054b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800548e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005492:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005496:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800549a:	e00b      	b.n	80054b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800549c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80054a8:	e004      	b.n	80054b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80054b0:	e000      	b.n	80054b4 <USB_ActivateEndpoint+0x7c>
      break;
 80054b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80054c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	b21b      	sxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	b21a      	sxth	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	b21b      	sxth	r3, r3
 80054f6:	4313      	orrs	r3, r2
 80054f8:	b21b      	sxth	r3, r3
 80054fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800550c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551c:	b29b      	uxth	r3, r3
 800551e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 8149 	bne.w	80057bc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8084 	beq.w	800563c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4413      	add	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	00da      	lsls	r2, r3, #3
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	88db      	ldrh	r3, [r3, #6]
 800555c:	085b      	lsrs	r3, r3, #1
 800555e:	b29b      	uxth	r3, r3
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	827b      	strh	r3, [r7, #18]
 8005576:	8a7b      	ldrh	r3, [r7, #18]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <USB_ActivateEndpoint+0x180>
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	823b      	strh	r3, [r7, #16]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	8a3b      	ldrh	r3, [r7, #16]
 80055a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	78db      	ldrb	r3, [r3, #3]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d020      	beq.n	8005602 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d6:	81bb      	strh	r3, [r7, #12]
 80055d8:	89bb      	ldrh	r3, [r7, #12]
 80055da:	f083 0320 	eor.w	r3, r3, #32
 80055de:	81bb      	strh	r3, [r7, #12]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	89bb      	ldrh	r3, [r7, #12]
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
 8005600:	e2a6      	b.n	8005b50 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	81fb      	strh	r3, [r7, #14]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	89fb      	ldrh	r3, [r7, #14]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
 800563a:	e289      	b.n	8005b50 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	4413      	add	r3, r2
 800564e:	633b      	str	r3, [r7, #48]	; 0x30
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	00da      	lsls	r2, r3, #3
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	4413      	add	r3, r2
 800565a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800565e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800567a:	b29b      	uxth	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	4413      	add	r3, r2
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	00da      	lsls	r2, r3, #3
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	4413      	add	r3, r2
 800568e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b3e      	cmp	r3, #62	; 0x3e
 800569a:	d918      	bls.n	80056ce <USB_ActivateEndpoint+0x296>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <USB_ActivateEndpoint+0x27e>
 80056b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b2:	3b01      	subs	r3, #1
 80056b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e029      	b.n	8005722 <USB_ActivateEndpoint+0x2ea>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d112      	bne.n	80056fc <USB_ActivateEndpoint+0x2c4>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	e012      	b.n	8005722 <USB_ActivateEndpoint+0x2ea>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	66bb      	str	r3, [r7, #104]	; 0x68
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <USB_ActivateEndpoint+0x2de>
 8005710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005712:	3301      	adds	r3, #1
 8005714:	66bb      	str	r3, [r7, #104]	; 0x68
 8005716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005718:	b29b      	uxth	r3, r3
 800571a:	029b      	lsls	r3, r3, #10
 800571c:	b29a      	uxth	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01b      	beq.n	8005772 <USB_ActivateEndpoint+0x33a>
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	843b      	strh	r3, [r7, #32]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	8c3b      	ldrh	r3, [r7, #32]
 800575e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800576a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576e:	b29b      	uxth	r3, r3
 8005770:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005788:	83fb      	strh	r3, [r7, #30]
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005790:	83fb      	strh	r3, [r7, #30]
 8005792:	8bfb      	ldrh	r3, [r7, #30]
 8005794:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005798:	83fb      	strh	r3, [r7, #30]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	8bfb      	ldrh	r3, [r7, #30]
 80057a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8013      	strh	r3, [r2, #0]
 80057ba:	e1c9      	b.n	8005b50 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	78db      	ldrb	r3, [r3, #3]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d11e      	bne.n	8005802 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
 8005800:	e01d      	b.n	800583e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005818:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800582a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800582e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583a:	b29b      	uxth	r3, r3
 800583c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584e:	4413      	add	r3, r2
 8005850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	00da      	lsls	r2, r3, #3
 8005858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585a:	4413      	add	r3, r2
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	65bb      	str	r3, [r7, #88]	; 0x58
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	891b      	ldrh	r3, [r3, #8]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	657b      	str	r3, [r7, #84]	; 0x54
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005882:	4413      	add	r3, r2
 8005884:	657b      	str	r3, [r7, #84]	; 0x54
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00da      	lsls	r2, r3, #3
 800588c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588e:	4413      	add	r3, r2
 8005890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005894:	653b      	str	r3, [r7, #80]	; 0x50
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	895b      	ldrh	r3, [r3, #10]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	b29b      	uxth	r3, r3
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 8093 	bne.w	80059d6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80058c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80058c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <USB_ActivateEndpoint+0x4cc>
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005912:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <USB_ActivateEndpoint+0x51c>
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	873b      	strh	r3, [r7, #56]	; 0x38
 800596c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800596e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005972:	873b      	strh	r3, [r7, #56]	; 0x38
 8005974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800597a:	873b      	strh	r3, [r7, #56]	; 0x38
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]
 80059d4:	e0bc      	b.n	8005b50 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80059e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01d      	beq.n	8005a2e <USB_ActivateEndpoint+0x5f6>
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005a3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01d      	beq.n	8005a86 <USB_ActivateEndpoint+0x64e>
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a60:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	441a      	add	r2, r3
 8005a6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d024      	beq.n	8005ad8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005aa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005aac:	f083 0320 	eor.w	r3, r3, #32
 8005ab0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	8013      	strh	r3, [r2, #0]
 8005ad6:	e01d      	b.n	8005b14 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005b50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3774      	adds	r7, #116	; 0x74
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b08d      	sub	sp, #52	; 0x34
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	7b1b      	ldrb	r3, [r3, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 808e 	bne.w	8005c90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d044      	beq.n	8005c06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	81bb      	strh	r3, [r7, #12]
 8005b8a:	89bb      	ldrh	r3, [r7, #12]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01b      	beq.n	8005bcc <USB_DeactivateEndpoint+0x6c>
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	817b      	strh	r3, [r7, #10]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	441a      	add	r2, r3
 8005bb6:	897b      	ldrh	r3, [r7, #10]
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be2:	813b      	strh	r3, [r7, #8]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	893b      	ldrh	r3, [r7, #8]
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]
 8005c04:	e192      	b.n	8005f2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	827b      	strh	r3, [r7, #18]
 8005c14:	8a7b      	ldrh	r3, [r7, #18]
 8005c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01b      	beq.n	8005c56 <USB_DeactivateEndpoint+0xf6>
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c34:	823b      	strh	r3, [r7, #16]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	8a3b      	ldrh	r3, [r7, #16]
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6c:	81fb      	strh	r3, [r7, #14]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	441a      	add	r2, r3
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]
 8005c8e:	e14d      	b.n	8005f2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 80a5 	bne.w	8005de4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	843b      	strh	r3, [r7, #32]
 8005ca8:	8c3b      	ldrh	r3, [r7, #32]
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d01b      	beq.n	8005cea <USB_DeactivateEndpoint+0x18a>
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc8:	83fb      	strh	r3, [r7, #30]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	441a      	add	r2, r3
 8005cd4:	8bfb      	ldrh	r3, [r7, #30]
 8005cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	83bb      	strh	r3, [r7, #28]
 8005cf8:	8bbb      	ldrh	r3, [r7, #28]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01b      	beq.n	8005d3a <USB_DeactivateEndpoint+0x1da>
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d18:	837b      	strh	r3, [r7, #26]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	8b7b      	ldrh	r3, [r7, #26]
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	833b      	strh	r3, [r7, #24]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	8b3b      	ldrh	r3, [r7, #24]
 8005d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	82fb      	strh	r3, [r7, #22]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8afb      	ldrh	r3, [r7, #22]
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc0:	82bb      	strh	r3, [r7, #20]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	8abb      	ldrh	r3, [r7, #20]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
 8005de2:	e0a3      	b.n	8005f2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01b      	beq.n	8005e34 <USB_DeactivateEndpoint+0x2d4>
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <USB_DeactivateEndpoint+0x324>
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3734      	adds	r7, #52	; 0x34
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b0c2      	sub	sp, #264	; 0x108
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f48:	6018      	str	r0, [r3, #0]
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	f040 867b 	bne.w	8006c5c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d908      	bls.n	8005f94 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f92:	e007      	b.n	8005fa4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d13a      	bne.n	800602a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6959      	ldr	r1, [r3, #20]
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	88da      	ldrh	r2, [r3, #6]
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	f001 fc1d 	bl	800781a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4413      	add	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	00da      	lsls	r2, r3, #3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4413      	add	r3, r2
 8006016:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	f000 bde3 	b.w	8006bf0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	78db      	ldrb	r3, [r3, #3]
 8006036:	2b02      	cmp	r3, #2
 8006038:	f040 843a 	bne.w	80068b0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800603c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	f240 83b7 	bls.w	80067c8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800605a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80060b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 81b3 	beq.w	8006462 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d16d      	bne.n	80061f4 <USB_EPStartXfer+0x2ba>
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	4413      	add	r3, r2
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	00da      	lsls	r2, r3, #3
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	4413      	add	r3, r2
 800614e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
 8006154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006158:	2b3e      	cmp	r3, #62	; 0x3e
 800615a:	d91c      	bls.n	8006196 <USB_EPStartXfer+0x25c>
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d104      	bne.n	800617c <USB_EPStartXfer+0x242>
 8006172:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006176:	3b01      	subs	r3, #1
 8006178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800617c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e053      	b.n	800623e <USB_EPStartXfer+0x304>
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	2b00      	cmp	r3, #0
 800619c:	d112      	bne.n	80061c4 <USB_EPStartXfer+0x28a>
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e03c      	b.n	800623e <USB_EPStartXfer+0x304>
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d004      	beq.n	80061e4 <USB_EPStartXfer+0x2aa>
 80061da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061de:	3301      	adds	r3, #1
 80061e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	e024      	b.n	800623e <USB_EPStartXfer+0x304>
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d11c      	bne.n	800623e <USB_EPStartXfer+0x304>
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006212:	b29b      	uxth	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	4413      	add	r3, r2
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	00da      	lsls	r2, r3, #3
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	4413      	add	r3, r2
 800622e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	b29a      	uxth	r2, r3
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	895b      	ldrh	r3, [r3, #10]
 800624a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800624e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6959      	ldr	r1, [r3, #20]
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625e:	b29b      	uxth	r3, r3
 8006260:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006264:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006268:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800626c:	6800      	ldr	r0, [r0, #0]
 800626e:	f001 fad4 	bl	800781a <USB_WritePMA>
            ep->xfer_buff += len;
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006282:	441a      	add	r2, r3
 8006284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d90f      	bls.n	80062cc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	1ad2      	subs	r2, r2, r3
 80062be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	621a      	str	r2, [r3, #32]
 80062ca:	e00e      	b.n	80062ea <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d16d      	bne.n	80063d6 <USB_EPStartXfer+0x49c>
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006314:	b29b      	uxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	4413      	add	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00da      	lsls	r2, r3, #3
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	4413      	add	r3, r2
 8006330:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633a:	2b3e      	cmp	r3, #62	; 0x3e
 800633c:	d91c      	bls.n	8006378 <USB_EPStartXfer+0x43e>
 800633e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <USB_EPStartXfer+0x424>
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006358:	3b01      	subs	r3, #1
 800635a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	b29b      	uxth	r3, r3
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	b29b      	uxth	r3, r3
 8006368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006370:	b29a      	uxth	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e059      	b.n	800642c <USB_EPStartXfer+0x4f2>
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	2b00      	cmp	r3, #0
 800637e:	d112      	bne.n	80063a6 <USB_EPStartXfer+0x46c>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800638a:	b29a      	uxth	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29a      	uxth	r2, r3
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e042      	b.n	800642c <USB_EPStartXfer+0x4f2>
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0x48c>
 80063bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e02a      	b.n	800642c <USB_EPStartXfer+0x4f2>
 80063d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d122      	bne.n	800642c <USB_EPStartXfer+0x4f2>
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	4413      	add	r3, r2
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00da      	lsls	r2, r3, #3
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	b29a      	uxth	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	891b      	ldrh	r3, [r3, #8]
 8006438:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6959      	ldr	r1, [r3, #20]
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	b29b      	uxth	r3, r3
 800644e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006452:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006456:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	f001 f9dd 	bl	800781a <USB_WritePMA>
 8006460:	e3c6      	b.n	8006bf0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d16d      	bne.n	800654e <USB_EPStartXfer+0x614>
 8006472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	64bb      	str	r3, [r7, #72]	; 0x48
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006492:	4413      	add	r3, r2
 8006494:	64bb      	str	r3, [r7, #72]	; 0x48
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	00da      	lsls	r2, r3, #3
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	2b3e      	cmp	r3, #62	; 0x3e
 80064b4:	d91c      	bls.n	80064f0 <USB_EPStartXfer+0x5b6>
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d104      	bne.n	80064d6 <USB_EPStartXfer+0x59c>
 80064cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064d0:	3b01      	subs	r3, #1
 80064d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29b      	uxth	r3, r3
 80064e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e059      	b.n	80065a4 <USB_EPStartXfer+0x66a>
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d112      	bne.n	800651e <USB_EPStartXfer+0x5e4>
 80064f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006502:	b29a      	uxth	r2, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e042      	b.n	80065a4 <USB_EPStartXfer+0x66a>
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <USB_EPStartXfer+0x604>
 8006534:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006538:	3301      	adds	r3, #1
 800653a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800653e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006542:	b29b      	uxth	r3, r3
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	b29a      	uxth	r2, r3
 8006548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654a:	801a      	strh	r2, [r3, #0]
 800654c:	e02a      	b.n	80065a4 <USB_EPStartXfer+0x66a>
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d122      	bne.n	80065a4 <USB_EPStartXfer+0x66a>
 800655e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	653b      	str	r3, [r7, #80]	; 0x50
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006578:	b29b      	uxth	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800657e:	4413      	add	r3, r2
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	00da      	lsls	r2, r3, #3
 8006590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006592:	4413      	add	r3, r2
 8006594:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	891b      	ldrh	r3, [r3, #8]
 80065b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6959      	ldr	r1, [r3, #20]
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065d2:	6800      	ldr	r0, [r0, #0]
 80065d4:	f001 f921 	bl	800781a <USB_WritePMA>
            ep->xfer_buff += len;
 80065d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e8:	441a      	add	r2, r3
 80065ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d90f      	bls.n	8006632 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	621a      	str	r2, [r3, #32]
 8006630:	e00e      	b.n	8006650 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2200      	movs	r2, #0
 800664e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	643b      	str	r3, [r7, #64]	; 0x40
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d16d      	bne.n	8006748 <USB_EPStartXfer+0x80e>
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	4413      	add	r3, r2
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	00da      	lsls	r2, r3, #3
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	4413      	add	r3, r2
 80066a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	2b3e      	cmp	r3, #62	; 0x3e
 80066ae:	d91c      	bls.n	80066ea <USB_EPStartXfer+0x7b0>
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <USB_EPStartXfer+0x796>
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	3b01      	subs	r3, #1
 80066cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	e053      	b.n	8006792 <USB_EPStartXfer+0x858>
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d112      	bne.n	8006718 <USB_EPStartXfer+0x7de>
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	801a      	strh	r2, [r3, #0]
 8006716:	e03c      	b.n	8006792 <USB_EPStartXfer+0x858>
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USB_EPStartXfer+0x7fe>
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	3301      	adds	r3, #1
 8006734:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	b29b      	uxth	r3, r3
 800673e:	029b      	lsls	r3, r3, #10
 8006740:	b29a      	uxth	r2, r3
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e024      	b.n	8006792 <USB_EPStartXfer+0x858>
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d11c      	bne.n	8006792 <USB_EPStartXfer+0x858>
 8006758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676c:	4413      	add	r3, r2
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
 8006770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	00da      	lsls	r2, r3, #3
 800677e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006780:	4413      	add	r3, r2
 8006782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800678c:	b29a      	uxth	r2, r3
 800678e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006790:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6959      	ldr	r1, [r3, #20]
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80067b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80067bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f001 f82a 	bl	800781a <USB_WritePMA>
 80067c6:	e213      	b.n	8006bf0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80067fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	441a      	add	r2, r3
 800681c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	b29b      	uxth	r3, r3
 8006832:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006854:	4413      	add	r3, r2
 8006856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	00da      	lsls	r2, r3, #3
 8006866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006868:	4413      	add	r3, r2
 800686a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800686e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	b29a      	uxth	r2, r3
 8006876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006878:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800687a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	891b      	ldrh	r3, [r3, #8]
 8006886:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800688a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6959      	ldr	r1, [r3, #20]
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	b29b      	uxth	r3, r3
 800689c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068a8:	6800      	ldr	r0, [r0, #0]
 80068aa:	f000 ffb6 	bl	800781a <USB_WritePMA>
 80068ae:	e19f      	b.n	8006bf0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80bc 	beq.w	8006a6e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	673b      	str	r3, [r7, #112]	; 0x70
 8006902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d16d      	bne.n	80069ee <USB_EPStartXfer+0xab4>
 8006912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	66bb      	str	r3, [r7, #104]	; 0x68
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006932:	4413      	add	r3, r2
 8006934:	66bb      	str	r3, [r7, #104]	; 0x68
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	00da      	lsls	r2, r3, #3
 8006944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006946:	4413      	add	r3, r2
 8006948:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800694c:	667b      	str	r3, [r7, #100]	; 0x64
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	2b3e      	cmp	r3, #62	; 0x3e
 8006954:	d91c      	bls.n	8006990 <USB_EPStartXfer+0xa56>
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	f003 031f 	and.w	r3, r3, #31
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <USB_EPStartXfer+0xa3c>
 800696c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006970:	3b01      	subs	r3, #1
 8006972:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006976:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800697a:	b29b      	uxth	r3, r3
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e053      	b.n	8006a38 <USB_EPStartXfer+0xafe>
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	2b00      	cmp	r3, #0
 8006996:	d112      	bne.n	80069be <USB_EPStartXfer+0xa84>
 8006998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ba:	801a      	strh	r2, [r3, #0]
 80069bc:	e03c      	b.n	8006a38 <USB_EPStartXfer+0xafe>
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <USB_EPStartXfer+0xaa4>
 80069d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069d8:	3301      	adds	r3, #1
 80069da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e024      	b.n	8006a38 <USB_EPStartXfer+0xafe>
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d11c      	bne.n	8006a38 <USB_EPStartXfer+0xafe>
 80069fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a12:	4413      	add	r3, r2
 8006a14:	673b      	str	r3, [r7, #112]	; 0x70
 8006a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	00da      	lsls	r2, r3, #3
 8006a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a26:	4413      	add	r3, r2
 8006a28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	895b      	ldrh	r3, [r3, #10]
 8006a44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6959      	ldr	r1, [r3, #20]
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a66:	6800      	ldr	r0, [r0, #0]
 8006a68:	f000 fed7 	bl	800781a <USB_WritePMA>
 8006a6c:	e0c0      	b.n	8006bf0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d16d      	bne.n	8006b5a <USB_EPStartXfer+0xc20>
 8006a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a9e:	4413      	add	r3, r2
 8006aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	00da      	lsls	r2, r3, #3
 8006ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ab8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abe:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac0:	d91c      	bls.n	8006afc <USB_EPStartXfer+0xbc2>
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <USB_EPStartXfer+0xba8>
 8006ad8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006adc:	3b01      	subs	r3, #1
 8006ade:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ae2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	029b      	lsls	r3, r3, #10
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	e05f      	b.n	8006bbc <USB_EPStartXfer+0xc82>
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d112      	bne.n	8006b2a <USB_EPStartXfer+0xbf0>
 8006b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b12:	801a      	strh	r2, [r3, #0]
 8006b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e048      	b.n	8006bbc <USB_EPStartXfer+0xc82>
 8006b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <USB_EPStartXfer+0xc10>
 8006b40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b44:	3301      	adds	r3, #1
 8006b46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	029b      	lsls	r3, r3, #10
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	e030      	b.n	8006bbc <USB_EPStartXfer+0xc82>
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d128      	bne.n	8006bbc <USB_EPStartXfer+0xc82>
 8006b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	00da      	lsls	r2, r3, #3
 8006ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	891b      	ldrh	r3, [r3, #8]
 8006bc8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6959      	ldr	r1, [r3, #20]
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006be2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006be6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	f000 fe15 	bl	800781a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c16:	817b      	strh	r3, [r7, #10]
 8006c18:	897b      	ldrh	r3, [r7, #10]
 8006c1a:	f083 0310 	eor.w	r3, r3, #16
 8006c1e:	817b      	strh	r3, [r7, #10]
 8006c20:	897b      	ldrh	r3, [r7, #10]
 8006c22:	f083 0320 	eor.w	r3, r3, #32
 8006c26:	817b      	strh	r3, [r7, #10]
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	897b      	ldrh	r3, [r7, #10]
 8006c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	8013      	strh	r3, [r2, #0]
 8006c58:	f000 bc9f 	b.w	800759a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 80ae 	bne.w	8006dca <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d917      	bls.n	8006cba <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8006c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	1ad2      	subs	r2, r2, r3
 8006cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	619a      	str	r2, [r3, #24]
 8006cb8:	e00e      	b.n	8006cd8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8006cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	00da      	lsls	r2, r3, #3
 8006d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d22:	2b3e      	cmp	r3, #62	; 0x3e
 8006d24:	d91d      	bls.n	8006d62 <USB_EPStartXfer+0xe28>
 8006d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USB_EPStartXfer+0xe0c>
 8006d3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d40:	3b01      	subs	r3, #1
 8006d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e3e1      	b.n	8007526 <USB_EPStartXfer+0x15ec>
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <USB_EPStartXfer+0xe5e>
 8006d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	e3c6      	b.n	8007526 <USB_EPStartXfer+0x15ec>
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <USB_EPStartXfer+0xe7e>
 8006dae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006db2:	3301      	adds	r3, #1
 8006db4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006db8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e3ad      	b.n	8007526 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	f040 8200 	bne.w	80071dc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 8091 	bne.w	8006f10 <USB_EPStartXfer+0xfd6>
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e12:	4413      	add	r3, r2
 8006e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	00da      	lsls	r2, r3, #3
 8006e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b3e      	cmp	r3, #62	; 0x3e
 8006e42:	d925      	bls.n	8006e90 <USB_EPStartXfer+0xf56>
 8006e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <USB_EPStartXfer+0xf3a>
 8006e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e074      	b.n	8006f7a <USB_EPStartXfer+0x1040>
 8006e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d116      	bne.n	8006ece <USB_EPStartXfer+0xf94>
 8006ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e055      	b.n	8006f7a <USB_EPStartXfer+0x1040>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <USB_EPStartXfer+0xfc4>
 8006ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006f0c:	801a      	strh	r2, [r3, #0]
 8006f0e:	e034      	b.n	8006f7a <USB_EPStartXfer+0x1040>
 8006f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	785b      	ldrb	r3, [r3, #1]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d12c      	bne.n	8006f7a <USB_EPStartXfer+0x1040>
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f44:	4413      	add	r3, r2
 8006f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	00da      	lsls	r2, r3, #3
 8006f58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f040 8091 	bne.w	80070bc <USB_EPStartXfer+0x1182>
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	00da      	lsls	r2, r3, #3
 8006fd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b3e      	cmp	r3, #62	; 0x3e
 8006fee:	d925      	bls.n	800703c <USB_EPStartXfer+0x1102>
 8006ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <USB_EPStartXfer+0x10e6>
 8007016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701a:	3b01      	subs	r3, #1
 800701c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800702e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e06d      	b.n	8007118 <USB_EPStartXfer+0x11de>
 800703c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d116      	bne.n	800707a <USB_EPStartXfer+0x1140>
 800704c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29b      	uxth	r3, r3
 8007054:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29b      	uxth	r3, r3
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29a      	uxth	r2, r3
 8007072:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007076:	801a      	strh	r2, [r3, #0]
 8007078:	e04e      	b.n	8007118 <USB_EPStartXfer+0x11de>
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800708c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <USB_EPStartXfer+0x1170>
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a4:	3301      	adds	r3, #1
 80070a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	e02d      	b.n	8007118 <USB_EPStartXfer+0x11de>
 80070bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d125      	bne.n	8007118 <USB_EPStartXfer+0x11de>
 80070cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070e2:	4413      	add	r3, r2
 80070e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	00da      	lsls	r2, r3, #3
 80070f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80070fa:	4413      	add	r3, r2
 80070fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007116:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 81fe 	beq.w	8007526 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800712a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800712e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800714a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800714e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <USB_EPStartXfer+0x1228>
 8007156:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007162:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 81db 	bne.w	8007526 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007170:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 81d4 	bne.w	8007526 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80071a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
 80071da:	e1a4      	b.n	8007526 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	78db      	ldrb	r3, [r3, #3]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	f040 819a 	bne.w	8007522 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80071ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	d917      	bls.n	800723a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800720a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800721a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722a:	1ad2      	subs	r2, r2, r3
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	619a      	str	r2, [r3, #24]
 8007238:	e00e      	b.n	8007258 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800723a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2200      	movs	r2, #0
 8007256:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d178      	bne.n	800735a <USB_EPStartXfer+0x1420>
 8007268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800726c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007284:	b29b      	uxth	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800728c:	4413      	add	r3, r2
 800728e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	00da      	lsls	r2, r3, #3
 80072a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b2:	2b3e      	cmp	r3, #62	; 0x3e
 80072b4:	d91d      	bls.n	80072f2 <USB_EPStartXfer+0x13b8>
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d104      	bne.n	80072d6 <USB_EPStartXfer+0x139c>
 80072cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072d0:	3b01      	subs	r3, #1
 80072d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80072d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072da:	b29b      	uxth	r3, r3
 80072dc:	029b      	lsls	r3, r3, #10
 80072de:	b29b      	uxth	r3, r3
 80072e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e064      	b.n	80073bc <USB_EPStartXfer+0x1482>
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d116      	bne.n	8007328 <USB_EPStartXfer+0x13ee>
 80072fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29b      	uxth	r3, r3
 8007302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e049      	b.n	80073bc <USB_EPStartXfer+0x1482>
 8007328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <USB_EPStartXfer+0x140e>
 800733e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007342:	3301      	adds	r3, #1
 8007344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734c:	b29b      	uxth	r3, r3
 800734e:	029b      	lsls	r3, r3, #10
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e030      	b.n	80073bc <USB_EPStartXfer+0x1482>
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d128      	bne.n	80073bc <USB_EPStartXfer+0x1482>
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800738e:	4413      	add	r3, r2
 8007390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	00da      	lsls	r2, r3, #3
 80073a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d178      	bne.n	80074cc <USB_EPStartXfer+0x1592>
 80073da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073fe:	4413      	add	r3, r2
 8007400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	00da      	lsls	r2, r3, #3
 8007412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007416:	4413      	add	r3, r2
 8007418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800741c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007424:	2b3e      	cmp	r3, #62	; 0x3e
 8007426:	d91d      	bls.n	8007464 <USB_EPStartXfer+0x152a>
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <USB_EPStartXfer+0x150e>
 800743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007442:	3b01      	subs	r3, #1
 8007444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800744c:	b29b      	uxth	r3, r3
 800744e:	029b      	lsls	r3, r3, #10
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e060      	b.n	8007526 <USB_EPStartXfer+0x15ec>
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007468:	2b00      	cmp	r3, #0
 800746a:	d116      	bne.n	800749a <USB_EPStartXfer+0x1560>
 800746c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007478:	b29a      	uxth	r2, r3
 800747a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007490:	b29a      	uxth	r2, r3
 8007492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007496:	801a      	strh	r2, [r3, #0]
 8007498:	e045      	b.n	8007526 <USB_EPStartXfer+0x15ec>
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <USB_EPStartXfer+0x1580>
 80074b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074b4:	3301      	adds	r3, #1
 80074b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074be:	b29b      	uxth	r3, r3
 80074c0:	029b      	lsls	r3, r3, #10
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	e02c      	b.n	8007526 <USB_EPStartXfer+0x15ec>
 80074cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	785b      	ldrb	r3, [r3, #1]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d124      	bne.n	8007526 <USB_EPStartXfer+0x15ec>
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074f2:	4413      	add	r3, r2
 80074f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00da      	lsls	r2, r3, #3
 8007506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800750a:	4413      	add	r3, r2
 800750c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800751e:	801a      	strh	r2, [r3, #0]
 8007520:	e001      	b.n	8007526 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e03a      	b.n	800759c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007550:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007554:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007558:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800755c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007564:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	441a      	add	r2, r3
 8007582:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007596:	b29b      	uxth	r3, r3
 8007598:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ce:	81bb      	strh	r3, [r7, #12]
 80075d0:	89bb      	ldrh	r3, [r7, #12]
 80075d2:	f083 0310 	eor.w	r3, r3, #16
 80075d6:	81bb      	strh	r3, [r7, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	441a      	add	r2, r3
 80075e2:	89bb      	ldrh	r3, [r7, #12]
 80075e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8013      	strh	r3, [r2, #0]
 80075f8:	e01f      	b.n	800763a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800760c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007610:	81fb      	strh	r3, [r7, #14]
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007618:	81fb      	strh	r3, [r7, #14]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	441a      	add	r2, r3
 8007624:	89fb      	ldrh	r3, [r7, #14]
 8007626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800762a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007636:	b29b      	uxth	r3, r3
 8007638:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	7b1b      	ldrb	r3, [r3, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f040 809d 	bne.w	8007796 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d04c      	beq.n	80076fe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	823b      	strh	r3, [r7, #16]
 8007672:	8a3b      	ldrh	r3, [r7, #16]
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01b      	beq.n	80076b4 <USB_EPClearStall+0x6c>
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007692:	81fb      	strh	r3, [r7, #14]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	441a      	add	r2, r3
 800769e:	89fb      	ldrh	r3, [r7, #14]
 80076a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	78db      	ldrb	r3, [r3, #3]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d06c      	beq.n	8007796 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d2:	81bb      	strh	r3, [r7, #12]
 80076d4:	89bb      	ldrh	r3, [r7, #12]
 80076d6:	f083 0320 	eor.w	r3, r3, #32
 80076da:	81bb      	strh	r3, [r7, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	89bb      	ldrh	r3, [r7, #12]
 80076e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	8013      	strh	r3, [r2, #0]
 80076fc:	e04b      	b.n	8007796 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	82fb      	strh	r3, [r7, #22]
 800770c:	8afb      	ldrh	r3, [r7, #22]
 800770e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01b      	beq.n	800774e <USB_EPClearStall+0x106>
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772c:	82bb      	strh	r3, [r7, #20]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	441a      	add	r2, r3
 8007738:	8abb      	ldrh	r3, [r7, #20]
 800773a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	b29b      	uxth	r3, r3
 800774c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007764:	827b      	strh	r3, [r7, #18]
 8007766:	8a7b      	ldrh	r3, [r7, #18]
 8007768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800776c:	827b      	strh	r3, [r7, #18]
 800776e:	8a7b      	ldrh	r3, [r7, #18]
 8007770:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007774:	827b      	strh	r3, [r7, #18]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	8a7b      	ldrh	r3, [r7, #18]
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2280      	movs	r2, #128	; 0x80
 80077ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077da:	b29b      	uxth	r3, r3
 80077dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007808:	b29b      	uxth	r3, r3
 800780a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800781a:	b480      	push	{r7}
 800781c:	b08d      	sub	sp, #52	; 0x34
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	4611      	mov	r1, r2
 8007826:	461a      	mov	r2, r3
 8007828:	460b      	mov	r3, r1
 800782a:	80fb      	strh	r3, [r7, #6]
 800782c:	4613      	mov	r3, r2
 800782e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007830:	88bb      	ldrh	r3, [r7, #4]
 8007832:	3301      	adds	r3, #1
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007850:	e01b      	b.n	800788a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	3301      	adds	r3, #1
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	b29a      	uxth	r2, r3
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	3302      	adds	r3, #2
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	3301      	adds	r3, #1
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	3b01      	subs	r3, #1
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e0      	bne.n	8007852 <USB_WritePMA+0x38>
  }
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	3734      	adds	r7, #52	; 0x34
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800789e:	b480      	push	{r7}
 80078a0:	b08b      	sub	sp, #44	; 0x2c
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	4611      	mov	r1, r2
 80078aa:	461a      	mov	r2, r3
 80078ac:	460b      	mov	r3, r1
 80078ae:	80fb      	strh	r3, [r7, #6]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078b4:	88bb      	ldrh	r3, [r7, #4]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078ce:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
 80078d4:	e018      	b.n	8007908 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	3302      	adds	r3, #2
 80078e2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	3301      	adds	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	0a1b      	lsrs	r3, r3, #8
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	3b01      	subs	r3, #1
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e3      	bne.n	80078d6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800790e:	88bb      	ldrh	r3, [r7, #4]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	b2da      	uxtb	r2, r3
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	701a      	strb	r2, [r3, #0]
  }
}
 800792a:	bf00      	nop
 800792c:	372c      	adds	r7, #44	; 0x2c
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007942:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007946:	f002 f901 	bl	8009b4c <USBD_static_malloc>
 800794a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800795a:	2302      	movs	r3, #2
 800795c:	e066      	b.n	8007a2c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	7c1b      	ldrb	r3, [r3, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d119      	bne.n	80079a2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800796e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007972:	2202      	movs	r2, #2
 8007974:	2181      	movs	r1, #129	; 0x81
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 ff8d 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007986:	2202      	movs	r2, #2
 8007988:	2101      	movs	r1, #1
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 ff83 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2210      	movs	r2, #16
 800799c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80079a0:	e016      	b.n	80079d0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079a2:	2340      	movs	r3, #64	; 0x40
 80079a4:	2202      	movs	r2, #2
 80079a6:	2181      	movs	r1, #129	; 0x81
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ff74 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	2202      	movs	r2, #2
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 ff6b 	bl	8009896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2210      	movs	r2, #16
 80079cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079d0:	2308      	movs	r3, #8
 80079d2:	2203      	movs	r2, #3
 80079d4:	2182      	movs	r1, #130	; 0x82
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 ff5d 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7c1b      	ldrb	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f002 f82f 	bl	8009a76 <USBD_LL_PrepareReceive>
 8007a18:	e007      	b.n	8007a2a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a20:	2340      	movs	r3, #64	; 0x40
 8007a22:	2101      	movs	r1, #1
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f002 f826 	bl	8009a76 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a40:	2181      	movs	r1, #129	; 0x81
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 ff4d 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a4e:	2101      	movs	r1, #1
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 ff46 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a5e:	2182      	movs	r1, #130	; 0x82
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 ff3e 	bl	80098e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00e      	beq.n	8007a9e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a90:	4618      	mov	r0, r3
 8007a92:	f002 f869 	bl	8009b68 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e0af      	b.n	8007c30 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d03f      	beq.n	8007b5c <USBD_CDC_Setup+0xb4>
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	f040 809f 	bne.w	8007c20 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d02e      	beq.n	8007b48 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da16      	bge.n	8007b22 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007b00:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	88d2      	ldrh	r2, [r2, #6]
 8007b06:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	88db      	ldrh	r3, [r3, #6]
 8007b0c:	2b07      	cmp	r3, #7
 8007b0e:	bf28      	it	cs
 8007b10:	2307      	movcs	r3, #7
 8007b12:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	89fa      	ldrh	r2, [r7, #14]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 facf 	bl	80090be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007b20:	e085      	b.n	8007c2e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785a      	ldrb	r2, [r3, #1]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	88db      	ldrh	r3, [r3, #6]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b38:	6939      	ldr	r1, [r7, #16]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	88db      	ldrh	r3, [r3, #6]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fae8 	bl	8009116 <USBD_CtlPrepareRx>
      break;
 8007b46:	e072      	b.n	8007c2e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	7850      	ldrb	r0, [r2, #1]
 8007b54:	2200      	movs	r2, #0
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	4798      	blx	r3
      break;
 8007b5a:	e068      	b.n	8007c2e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b0b      	cmp	r3, #11
 8007b62:	d852      	bhi.n	8007c0a <USBD_CDC_Setup+0x162>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBD_CDC_Setup+0xc4>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b9d 	.word	0x08007b9d
 8007b70:	08007c19 	.word	0x08007c19
 8007b74:	08007c0b 	.word	0x08007c0b
 8007b78:	08007c0b 	.word	0x08007c0b
 8007b7c:	08007c0b 	.word	0x08007c0b
 8007b80:	08007c0b 	.word	0x08007c0b
 8007b84:	08007c0b 	.word	0x08007c0b
 8007b88:	08007c0b 	.word	0x08007c0b
 8007b8c:	08007c0b 	.word	0x08007c0b
 8007b90:	08007c0b 	.word	0x08007c0b
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bf1 	.word	0x08007bf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d107      	bne.n	8007bb8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ba8:	f107 030a 	add.w	r3, r7, #10
 8007bac:	2202      	movs	r2, #2
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fa84 	bl	80090be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb6:	e032      	b.n	8007c1e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fa0e 	bl	8008fdc <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc4:	e02b      	b.n	8007c1e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d107      	bne.n	8007be2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bd2:	f107 030d 	add.w	r3, r7, #13
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 fa6f 	bl	80090be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007be0:	e01d      	b.n	8007c1e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f9f9 	bl	8008fdc <USBD_CtlError>
            ret = USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	75fb      	strb	r3, [r7, #23]
          break;
 8007bee:	e016      	b.n	8007c1e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d00f      	beq.n	8007c1c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 f9ec 	bl	8008fdc <USBD_CtlError>
            ret = USBD_FAIL;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c08:	e008      	b.n	8007c1c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f9e5 	bl	8008fdc <USBD_CtlError>
          ret = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	75fb      	strb	r3, [r7, #23]
          break;
 8007c16:	e002      	b.n	8007c1e <USBD_CDC_Setup+0x176>
          break;
 8007c18:	bf00      	nop
 8007c1a:	e008      	b.n	8007c2e <USBD_CDC_Setup+0x186>
          break;
 8007c1c:	bf00      	nop
      }
      break;
 8007c1e:	e006      	b.n	8007c2e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 f9da 	bl	8008fdc <USBD_CtlError>
      ret = USBD_FAIL;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e04f      	b.n	8007cfa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	3318      	adds	r3, #24
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d029      	beq.n	8007ccc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	3318      	adds	r3, #24
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	78f9      	ldrb	r1, [r7, #3]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	4403      	add	r3, r0
 8007c98:	3338      	adds	r3, #56	; 0x38
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ca0:	fb01 f303 	mul.w	r3, r1, r3
 8007ca4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d110      	bne.n	8007ccc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3318      	adds	r3, #24
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cbe:	78f9      	ldrb	r1, [r7, #3]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 feb5 	bl	8009a34 <USBD_LL_Transmit>
 8007cca:	e015      	b.n	8007cf8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e015      	b.n	8007d50 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 fec5 	bl	8009ab8 <USBD_LL_GetRxDataSize>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e01b      	b.n	8007daa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d015      	beq.n	8007da8 <USBD_CDC_EP0_RxReady+0x50>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d82:	2bff      	cmp	r3, #255	; 0xff
 8007d84:	d010      	beq.n	8007da8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d94:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	22ff      	movs	r2, #255	; 0xff
 8007da4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2243      	movs	r2, #67	; 0x43
 8007dc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007dc2:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	20000094 	.word	0x20000094

08007dd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2243      	movs	r2, #67	; 0x43
 8007de0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000050 	.word	0x20000050

08007df4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2243      	movs	r2, #67	; 0x43
 8007e00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	200000d8 	.word	0x200000d8

08007e14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	220a      	movs	r2, #10
 8007e20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e22:	4b03      	ldr	r3, [pc, #12]	; (8007e30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	2000000c 	.word	0x2000000c

08007e34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e004      	b.n	8007e52 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b087      	sub	sp, #28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e70:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e008      	b.n	8007e8e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eaa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e004      	b.n	8007ec0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eda:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e01a      	b.n	8007f24 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d114      	bne.n	8007f22 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f16:	2181      	movs	r1, #129	; 0x81
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fd8b 	bl	8009a34 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e016      	b.n	8007f78 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7c1b      	ldrb	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fd89 	bl	8009a76 <USBD_LL_PrepareReceive>
 8007f64:	e007      	b.n	8007f76 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	2101      	movs	r1, #1
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 fd80 	bl	8009a76 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e01f      	b.n	8007fd8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	79fa      	ldrb	r2, [r7, #7]
 8007fca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f001 fbe7 	bl	80097a0 <USBD_LL_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e016      	b.n	8008026 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	f107 020e 	add.w	r2, r7, #14
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	4602      	mov	r2, r0
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fc12 	bl	8009860 <USBD_LL_Start>
 800803c:	4603      	mov	r3, r0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	78fa      	ldrb	r2, [r7, #3]
 8008080:	4611      	mov	r1, r2
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	4611      	mov	r1, r2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
  }

  return USBD_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 ff46 	bl	8008f68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d01a      	beq.n	8008136 <USBD_LL_SetupStage+0x72>
 8008100:	2b02      	cmp	r3, #2
 8008102:	d822      	bhi.n	800814a <USBD_LL_SetupStage+0x86>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <USBD_LL_SetupStage+0x4a>
 8008108:	2b01      	cmp	r3, #1
 800810a:	d00a      	beq.n	8008122 <USBD_LL_SetupStage+0x5e>
 800810c:	e01d      	b.n	800814a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f9ee 	bl	80084f8 <USBD_StdDevReq>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]
      break;
 8008120:	e020      	b.n	8008164 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa52 	bl	80085d4 <USBD_StdItfReq>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
      break;
 8008134:	e016      	b.n	8008164 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa91 	bl	8008666 <USBD_StdEPReq>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
      break;
 8008148:	e00c      	b.n	8008164 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008150:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008154:	b2db      	uxtb	r3, r3
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fbe1 	bl	8009920 <USBD_LL_StallEP>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
      break;
 8008162:	bf00      	nop
  }

  return ret;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	460b      	mov	r3, r1
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800817c:	7afb      	ldrb	r3, [r7, #11]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d138      	bne.n	80081f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008188:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008190:	2b03      	cmp	r3, #3
 8008192:	d14a      	bne.n	800822a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	429a      	cmp	r2, r3
 800819e:	d913      	bls.n	80081c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	1ad2      	subs	r2, r2, r3
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf28      	it	cs
 80081ba:	4613      	movcs	r3, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 ffc5 	bl	8009150 <USBD_CtlContinueRx>
 80081c6:	e030      	b.n	800822a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d10b      	bne.n	80081ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 ffc0 	bl	8009172 <USBD_CtlSendStatus>
 80081f2:	e01a      	b.n	800822a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d114      	bne.n	800822a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	7afa      	ldrb	r2, [r7, #11]
 8008216:	4611      	mov	r1, r2
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	4798      	blx	r3
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	e000      	b.n	800822c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	460b      	mov	r3, r1
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d16b      	bne.n	8008320 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3314      	adds	r3, #20
 800824c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008254:	2b02      	cmp	r3, #2
 8008256:	d156      	bne.n	8008306 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	429a      	cmp	r2, r3
 8008262:	d914      	bls.n	800828e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	1ad2      	subs	r2, r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	461a      	mov	r2, r3
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 ff3a 	bl	80090f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008280:	2300      	movs	r3, #0
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f001 fbf5 	bl	8009a76 <USBD_LL_PrepareReceive>
 800828c:	e03b      	b.n	8008306 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	429a      	cmp	r2, r3
 8008298:	d11c      	bne.n	80082d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d316      	bcc.n	80082d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d20f      	bcs.n	80082d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 ff1b 	bl	80090f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c6:	2300      	movs	r3, #0
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fbd2 	bl	8009a76 <USBD_LL_PrepareReceive>
 80082d2:	e018      	b.n	8008306 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d10b      	bne.n	80082f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082f8:	2180      	movs	r1, #128	; 0x80
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f001 fb10 	bl	8009920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f000 ff49 	bl	8009198 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800830c:	2b01      	cmp	r3, #1
 800830e:	d122      	bne.n	8008356 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fe98 	bl	8008046 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800831e:	e01a      	b.n	8008356 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b03      	cmp	r3, #3
 800832a:	d114      	bne.n	8008356 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00e      	beq.n	8008356 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	7afa      	ldrb	r2, [r7, #11]
 8008342:	4611      	mov	r1, r2
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	4798      	blx	r3
 8008348:	4603      	mov	r3, r0
 800834a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800834c:	7dfb      	ldrb	r3, [r7, #23]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	e000      	b.n	8008358 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008390:	2303      	movs	r3, #3
 8008392:	e02f      	b.n	80083f4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00f      	beq.n	80083be <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d009      	beq.n	80083be <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6852      	ldr	r2, [r2, #4]
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	4611      	mov	r1, r2
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	2200      	movs	r2, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fa66 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2240      	movs	r2, #64	; 0x40
 80083d6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	2200      	movs	r2, #0
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fa58 	bl	8009896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2240      	movs	r2, #64	; 0x40
 80083f0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842a:	b2da      	uxtb	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2204      	movs	r2, #4
 8008436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b04      	cmp	r3, #4
 800845a:	d106      	bne.n	800846a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800848a:	2303      	movs	r3, #3
 800848c:	e012      	b.n	80084b4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d10b      	bne.n	80084b2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3301      	adds	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084da:	8a3b      	ldrh	r3, [r7, #16]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	b21a      	sxth	r2, r3
 80084e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	b21b      	sxth	r3, r3
 80084e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084ea:	89fb      	ldrh	r3, [r7, #14]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800850e:	2b40      	cmp	r3, #64	; 0x40
 8008510:	d005      	beq.n	800851e <USBD_StdDevReq+0x26>
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d853      	bhi.n	80085be <USBD_StdDevReq+0xc6>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <USBD_StdDevReq+0x3a>
 800851a:	2b20      	cmp	r3, #32
 800851c:	d14f      	bne.n	80085be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
      break;
 8008530:	e04a      	b.n	80085c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b09      	cmp	r3, #9
 8008538:	d83b      	bhi.n	80085b2 <USBD_StdDevReq+0xba>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <USBD_StdDevReq+0x48>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008595 	.word	0x08008595
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080085b3 	.word	0x080085b3
 800854c:	0800859f 	.word	0x0800859f
 8008550:	080085b3 	.word	0x080085b3
 8008554:	08008573 	.word	0x08008573
 8008558:	08008569 	.word	0x08008569
 800855c:	080085b3 	.word	0x080085b3
 8008560:	0800858b 	.word	0x0800858b
 8008564:	0800857d 	.word	0x0800857d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9de 	bl	800892c <USBD_GetDescriptor>
          break;
 8008570:	e024      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fb6d 	bl	8008c54 <USBD_SetAddress>
          break;
 800857a:	e01f      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fbac 	bl	8008cdc <USBD_SetConfig>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
          break;
 8008588:	e018      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc4b 	bl	8008e28 <USBD_GetConfig>
          break;
 8008592:	e013      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fc7c 	bl	8008e94 <USBD_GetStatus>
          break;
 800859c:	e00e      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fcab 	bl	8008efc <USBD_SetFeature>
          break;
 80085a6:	e009      	b.n	80085bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fcba 	bl	8008f24 <USBD_ClrFeature>
          break;
 80085b0:	e004      	b.n	80085bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fd11 	bl	8008fdc <USBD_CtlError>
          break;
 80085ba:	bf00      	nop
      }
      break;
 80085bc:	e004      	b.n	80085c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fd0b 	bl	8008fdc <USBD_CtlError>
      break;
 80085c6:	bf00      	nop
  }

  return ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d005      	beq.n	80085fa <USBD_StdItfReq+0x26>
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d82f      	bhi.n	8008652 <USBD_StdItfReq+0x7e>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <USBD_StdItfReq+0x26>
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d12b      	bne.n	8008652 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008600:	b2db      	uxtb	r3, r3
 8008602:	3b01      	subs	r3, #1
 8008604:	2b02      	cmp	r3, #2
 8008606:	d81d      	bhi.n	8008644 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	889b      	ldrh	r3, [r3, #4]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b01      	cmp	r3, #1
 8008610:	d813      	bhi.n	800863a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
 8008620:	4603      	mov	r3, r0
 8008622:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	88db      	ldrh	r3, [r3, #6]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d110      	bne.n	800864e <USBD_StdItfReq+0x7a>
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10d      	bne.n	800864e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fd9d 	bl	8009172 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008638:	e009      	b.n	800864e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fccd 	bl	8008fdc <USBD_CtlError>
          break;
 8008642:	e004      	b.n	800864e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fcc8 	bl	8008fdc <USBD_CtlError>
          break;
 800864c:	e000      	b.n	8008650 <USBD_StdItfReq+0x7c>
          break;
 800864e:	bf00      	nop
      }
      break;
 8008650:	e004      	b.n	800865c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fcc1 	bl	8008fdc <USBD_CtlError>
      break;
 800865a:	bf00      	nop
  }

  return ret;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	889b      	ldrh	r3, [r3, #4]
 8008678:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d007      	beq.n	8008696 <USBD_StdEPReq+0x30>
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	f200 8145 	bhi.w	8008916 <USBD_StdEPReq+0x2b0>
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00c      	beq.n	80086aa <USBD_StdEPReq+0x44>
 8008690:	2b20      	cmp	r3, #32
 8008692:	f040 8140 	bne.w	8008916 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	73fb      	strb	r3, [r7, #15]
      break;
 80086a8:	e13a      	b.n	8008920 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d007      	beq.n	80086c2 <USBD_StdEPReq+0x5c>
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	f300 8129 	bgt.w	800890a <USBD_StdEPReq+0x2a4>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d07f      	beq.n	80087bc <USBD_StdEPReq+0x156>
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d03c      	beq.n	800873a <USBD_StdEPReq+0xd4>
 80086c0:	e123      	b.n	800890a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d002      	beq.n	80086d4 <USBD_StdEPReq+0x6e>
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d016      	beq.n	8008700 <USBD_StdEPReq+0x9a>
 80086d2:	e02c      	b.n	800872e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <USBD_StdEPReq+0x90>
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d00a      	beq.n	80086f6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f91b 	bl	8009920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ea:	2180      	movs	r1, #128	; 0x80
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f917 	bl	8009920 <USBD_LL_StallEP>
 80086f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086f4:	e020      	b.n	8008738 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc6f 	bl	8008fdc <USBD_CtlError>
              break;
 80086fe:	e01b      	b.n	8008738 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	885b      	ldrh	r3, [r3, #2]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10e      	bne.n	8008726 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <USBD_StdEPReq+0xc0>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b80      	cmp	r3, #128	; 0x80
 8008712:	d008      	beq.n	8008726 <USBD_StdEPReq+0xc0>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	88db      	ldrh	r3, [r3, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f8fd 	bl	8009920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fd23 	bl	8009172 <USBD_CtlSendStatus>

              break;
 800872c:	e004      	b.n	8008738 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fc53 	bl	8008fdc <USBD_CtlError>
              break;
 8008736:	bf00      	nop
          }
          break;
 8008738:	e0ec      	b.n	8008914 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d002      	beq.n	800874c <USBD_StdEPReq+0xe6>
 8008746:	2b03      	cmp	r3, #3
 8008748:	d016      	beq.n	8008778 <USBD_StdEPReq+0x112>
 800874a:	e030      	b.n	80087ae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00d      	beq.n	800876e <USBD_StdEPReq+0x108>
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b80      	cmp	r3, #128	; 0x80
 8008756:	d00a      	beq.n	800876e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 f8df 	bl	8009920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008762:	2180      	movs	r1, #128	; 0x80
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 f8db 	bl	8009920 <USBD_LL_StallEP>
 800876a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800876c:	e025      	b.n	80087ba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fc33 	bl	8008fdc <USBD_CtlError>
              break;
 8008776:	e020      	b.n	80087ba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	885b      	ldrh	r3, [r3, #2]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11b      	bne.n	80087b8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800878a:	7bbb      	ldrb	r3, [r7, #14]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f8e5 	bl	800995e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fcec 	bl	8009172 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80087ac:	e004      	b.n	80087b8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc13 	bl	8008fdc <USBD_CtlError>
              break;
 80087b6:	e000      	b.n	80087ba <USBD_StdEPReq+0x154>
              break;
 80087b8:	bf00      	nop
          }
          break;
 80087ba:	e0ab      	b.n	8008914 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d002      	beq.n	80087ce <USBD_StdEPReq+0x168>
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d032      	beq.n	8008832 <USBD_StdEPReq+0x1cc>
 80087cc:	e097      	b.n	80088fe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d007      	beq.n	80087e4 <USBD_StdEPReq+0x17e>
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b80      	cmp	r3, #128	; 0x80
 80087d8:	d004      	beq.n	80087e4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fbfd 	bl	8008fdc <USBD_CtlError>
                break;
 80087e2:	e091      	b.n	8008908 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da0b      	bge.n	8008804 <USBD_StdEPReq+0x19e>
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	3310      	adds	r3, #16
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	3304      	adds	r3, #4
 8008802:	e00b      	b.n	800881c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008804:	7bbb      	ldrb	r3, [r7, #14]
 8008806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	3304      	adds	r3, #4
 800881c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2202      	movs	r2, #2
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fc47 	bl	80090be <USBD_CtlSendData>
              break;
 8008830:	e06a      	b.n	8008908 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008836:	2b00      	cmp	r3, #0
 8008838:	da11      	bge.n	800885e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800883a:	7bbb      	ldrb	r3, [r7, #14]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d117      	bne.n	8008884 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fbc0 	bl	8008fdc <USBD_CtlError>
                  break;
 800885c:	e054      	b.n	8008908 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fbad 	bl	8008fdc <USBD_CtlError>
                  break;
 8008882:	e041      	b.n	8008908 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	da0b      	bge.n	80088a4 <USBD_StdEPReq+0x23e>
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	3310      	adds	r3, #16
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	4413      	add	r3, r2
 80088a0:	3304      	adds	r3, #4
 80088a2:	e00b      	b.n	80088bc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4413      	add	r3, r2
 80088ba:	3304      	adds	r3, #4
 80088bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <USBD_StdEPReq+0x264>
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d103      	bne.n	80088d2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e00e      	b.n	80088f0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f860 	bl	800999c <USBD_LL_IsStallEP>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2201      	movs	r2, #1
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	e002      	b.n	80088f0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2202      	movs	r2, #2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fbe1 	bl	80090be <USBD_CtlSendData>
              break;
 80088fc:	e004      	b.n	8008908 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb6b 	bl	8008fdc <USBD_CtlError>
              break;
 8008906:	bf00      	nop
          }
          break;
 8008908:	e004      	b.n	8008914 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb65 	bl	8008fdc <USBD_CtlError>
          break;
 8008912:	bf00      	nop
      }
      break;
 8008914:	e004      	b.n	8008920 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb5f 	bl	8008fdc <USBD_CtlError>
      break;
 800891e:	bf00      	nop
  }

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	2b0e      	cmp	r3, #14
 800894e:	f200 8152 	bhi.w	8008bf6 <USBD_GetDescriptor+0x2ca>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <USBD_GetDescriptor+0x2c>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	080089c9 	.word	0x080089c9
 800895c:	080089e1 	.word	0x080089e1
 8008960:	08008a21 	.word	0x08008a21
 8008964:	08008bf7 	.word	0x08008bf7
 8008968:	08008bf7 	.word	0x08008bf7
 800896c:	08008b97 	.word	0x08008b97
 8008970:	08008bc3 	.word	0x08008bc3
 8008974:	08008bf7 	.word	0x08008bf7
 8008978:	08008bf7 	.word	0x08008bf7
 800897c:	08008bf7 	.word	0x08008bf7
 8008980:	08008bf7 	.word	0x08008bf7
 8008984:	08008bf7 	.word	0x08008bf7
 8008988:	08008bf7 	.word	0x08008bf7
 800898c:	08008bf7 	.word	0x08008bf7
 8008990:	08008995 	.word	0x08008995
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	7c12      	ldrb	r2, [r2, #16]
 80089ac:	f107 0108 	add.w	r1, r7, #8
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b6:	e126      	b.n	8008c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fb0e 	bl	8008fdc <USBD_CtlError>
        err++;
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	3301      	adds	r3, #1
 80089c4:	72fb      	strb	r3, [r7, #11]
      break;
 80089c6:	e11e      	b.n	8008c06 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
      break;
 80089de:	e112      	b.n	8008c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7c1b      	ldrb	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10d      	bne.n	8008a04 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f107 0208 	add.w	r2, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	2202      	movs	r2, #2
 8008a00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a02:	e100      	b.n	8008c06 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	f107 0208 	add.w	r2, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	701a      	strb	r2, [r3, #0]
      break;
 8008a1e:	e0f2      	b.n	8008c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	885b      	ldrh	r3, [r3, #2]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	f200 80ac 	bhi.w	8008b84 <USBD_GetDescriptor+0x258>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0x108>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a4d 	.word	0x08008a4d
 8008a38:	08008a81 	.word	0x08008a81
 8008a3c:	08008ab5 	.word	0x08008ab5
 8008a40:	08008ae9 	.word	0x08008ae9
 8008a44:	08008b1d 	.word	0x08008b1d
 8008a48:	08008b51 	.word	0x08008b51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e091      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fab2 	bl	8008fdc <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e089      	b.n	8008b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e077      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa98 	bl	8008fdc <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e06f      	b.n	8008b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad6:	e05d      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa7e 	bl	8008fdc <USBD_CtlError>
            err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae6:	e055      	b.n	8008b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0a:	e043      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa64 	bl	8008fdc <USBD_CtlError>
            err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1a:	e03b      	b.n	8008b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	7c12      	ldrb	r2, [r2, #16]
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4798      	blx	r3
 8008b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b3e:	e029      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa4a 	bl	8008fdc <USBD_CtlError>
            err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b4e:	e021      	b.n	8008b94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	7c12      	ldrb	r2, [r2, #16]
 8008b68:	f107 0108 	add.w	r1, r7, #8
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	4798      	blx	r3
 8008b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b72:	e00f      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa30 	bl	8008fdc <USBD_CtlError>
            err++;
 8008b7c:	7afb      	ldrb	r3, [r7, #11]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	72fb      	strb	r3, [r7, #11]
          break;
 8008b82:	e007      	b.n	8008b94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa28 	bl	8008fdc <USBD_CtlError>
          err++;
 8008b8c:	7afb      	ldrb	r3, [r7, #11]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008b92:	bf00      	nop
      }
      break;
 8008b94:	e037      	b.n	8008c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7c1b      	ldrb	r3, [r3, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba6:	f107 0208 	add.w	r2, r7, #8
 8008baa:	4610      	mov	r0, r2
 8008bac:	4798      	blx	r3
 8008bae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bb0:	e029      	b.n	8008c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa11 	bl	8008fdc <USBD_CtlError>
        err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc0:	e021      	b.n	8008c06 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7c1b      	ldrb	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd2:	f107 0208 	add.w	r2, r7, #8
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	4798      	blx	r3
 8008bda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3301      	adds	r3, #1
 8008be0:	2207      	movs	r2, #7
 8008be2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008be4:	e00f      	b.n	8008c06 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f9f7 	bl	8008fdc <USBD_CtlError>
        err++;
 8008bee:	7afb      	ldrb	r3, [r7, #11]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bf4:	e007      	b.n	8008c06 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9ef 	bl	8008fdc <USBD_CtlError>
      err++;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
 8008c00:	3301      	adds	r3, #1
 8008c02:	72fb      	strb	r3, [r7, #11]
      break;
 8008c04:	bf00      	nop
  }

  if (err != 0U)
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11e      	bne.n	8008c4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	88db      	ldrh	r3, [r3, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d016      	beq.n	8008c42 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008c14:	893b      	ldrh	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00e      	beq.n	8008c38 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	88da      	ldrh	r2, [r3, #6]
 8008c1e:	893b      	ldrh	r3, [r7, #8]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf28      	it	cs
 8008c24:	4613      	movcs	r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa44 	bl	80090be <USBD_CtlSendData>
 8008c36:	e009      	b.n	8008c4c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9ce 	bl	8008fdc <USBD_CtlError>
 8008c40:	e004      	b.n	8008c4c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa95 	bl	8009172 <USBD_CtlSendStatus>
 8008c48:	e000      	b.n	8008c4c <USBD_GetDescriptor+0x320>
    return;
 8008c4a:	bf00      	nop
  }
}
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	889b      	ldrh	r3, [r3, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d131      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d12d      	bne.n	8008cca <USBD_SetAddress+0x76>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	885b      	ldrh	r3, [r3, #2]
 8008c72:	2b7f      	cmp	r3, #127	; 0x7f
 8008c74:	d829      	bhi.n	8008cca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	885b      	ldrh	r3, [r3, #2]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d104      	bne.n	8008c98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9a3 	bl	8008fdc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	e01d      	b.n	8008cd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7bfa      	ldrb	r2, [r7, #15]
 8008c9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fea6 	bl	80099f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa61 	bl	8009172 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbe:	e009      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cc8:	e004      	b.n	8008cd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f985 	bl	8008fdc <USBD_CtlError>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	885b      	ldrh	r3, [r3, #2]
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	4b4c      	ldr	r3, [pc, #304]	; (8008e24 <USBD_SetConfig+0x148>)
 8008cf2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cf4:	4b4b      	ldr	r3, [pc, #300]	; (8008e24 <USBD_SetConfig+0x148>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d905      	bls.n	8008d08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f96c 	bl	8008fdc <USBD_CtlError>
    return USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e088      	b.n	8008e1a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d002      	beq.n	8008d1a <USBD_SetConfig+0x3e>
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d025      	beq.n	8008d64 <USBD_SetConfig+0x88>
 8008d18:	e071      	b.n	8008dfe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008d1a:	4b42      	ldr	r3, [pc, #264]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d01c      	beq.n	8008d5c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008d22:	4b40      	ldr	r3, [pc, #256]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d2c:	4b3d      	ldr	r3, [pc, #244]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff f992 	bl	800805c <USBD_SetClassConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d004      	beq.n	8008d4c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f949 	bl	8008fdc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d4a:	e065      	b.n	8008e18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fa10 	bl	8009172 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2203      	movs	r2, #3
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d5a:	e05d      	b.n	8008e18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa08 	bl	8009172 <USBD_CtlSendStatus>
      break;
 8008d62:	e059      	b.n	8008e18 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d64:	4b2f      	ldr	r3, [pc, #188]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d112      	bne.n	8008d92 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d7e:	4b29      	ldr	r3, [pc, #164]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff f985 	bl	8008094 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f9f1 	bl	8009172 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d90:	e042      	b.n	8008e18 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008d92:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <USBD_SetConfig+0x148>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d02a      	beq.n	8008df6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff f973 	bl	8008094 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008dae:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <USBD_SetConfig+0x148>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <USBD_SetConfig+0x148>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7ff f94c 	bl	800805c <USBD_SetClassConfig>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00f      	beq.n	8008dee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f903 	bl	8008fdc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff f958 	bl	8008094 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008dec:	e014      	b.n	8008e18 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f9bf 	bl	8009172 <USBD_CtlSendStatus>
      break;
 8008df4:	e010      	b.n	8008e18 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f9bb 	bl	8009172 <USBD_CtlSendStatus>
      break;
 8008dfc:	e00c      	b.n	8008e18 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8eb 	bl	8008fdc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e06:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <USBD_SetConfig+0x148>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff f941 	bl	8008094 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008e12:	2303      	movs	r3, #3
 8008e14:	73fb      	strb	r3, [r7, #15]
      break;
 8008e16:	bf00      	nop
  }

  return ret;
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200003d8 	.word	0x200003d8

08008e28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	88db      	ldrh	r3, [r3, #6]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d004      	beq.n	8008e44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f8cd 	bl	8008fdc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e42:	e023      	b.n	8008e8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	dc02      	bgt.n	8008e56 <USBD_GetConfig+0x2e>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dc03      	bgt.n	8008e5c <USBD_GetConfig+0x34>
 8008e54:	e015      	b.n	8008e82 <USBD_GetConfig+0x5a>
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d00b      	beq.n	8008e72 <USBD_GetConfig+0x4a>
 8008e5a:	e012      	b.n	8008e82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3308      	adds	r3, #8
 8008e66:	2201      	movs	r2, #1
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f927 	bl	80090be <USBD_CtlSendData>
        break;
 8008e70:	e00c      	b.n	8008e8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	3304      	adds	r3, #4
 8008e76:	2201      	movs	r2, #1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f91f 	bl	80090be <USBD_CtlSendData>
        break;
 8008e80:	e004      	b.n	8008e8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f8a9 	bl	8008fdc <USBD_CtlError>
        break;
 8008e8a:	bf00      	nop
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d81e      	bhi.n	8008eea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	88db      	ldrh	r3, [r3, #6]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d004      	beq.n	8008ebe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f890 	bl	8008fdc <USBD_CtlError>
        break;
 8008ebc:	e01a      	b.n	8008ef4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f043 0202 	orr.w	r2, r3, #2
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	330c      	adds	r3, #12
 8008ede:	2202      	movs	r2, #2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f8eb 	bl	80090be <USBD_CtlSendData>
      break;
 8008ee8:	e004      	b.n	8008ef4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f875 	bl	8008fdc <USBD_CtlError>
      break;
 8008ef2:	bf00      	nop
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d106      	bne.n	8008f1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f92b 	bl	8009172 <USBD_CtlSendStatus>
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d80b      	bhi.n	8008f54 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10c      	bne.n	8008f5e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f910 	bl	8009172 <USBD_CtlSendStatus>
      }
      break;
 8008f52:	e004      	b.n	8008f5e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f840 	bl	8008fdc <USBD_CtlError>
      break;
 8008f5c:	e000      	b.n	8008f60 <USBD_ClrFeature+0x3c>
      break;
 8008f5e:	bf00      	nop
  }
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	781a      	ldrb	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	781a      	ldrb	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fa92 	bl	80084bc <SWAPBYTE>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff fa85 	bl	80084bc <SWAPBYTE>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff fa78 	bl	80084bc <SWAPBYTE>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	80da      	strh	r2, [r3, #6]
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe6:	2180      	movs	r1, #128	; 0x80
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fc99 	bl	8009920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fee:	2100      	movs	r1, #0
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc95 	bl	8009920 <USBD_LL_StallEP>
}
 8008ff6:	bf00      	nop
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b086      	sub	sp, #24
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d036      	beq.n	8009082 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009018:	6938      	ldr	r0, [r7, #16]
 800901a:	f000 f836 	bl	800908a <USBD_GetLen>
 800901e:	4603      	mov	r3, r0
 8009020:	3301      	adds	r3, #1
 8009022:	b29b      	uxth	r3, r3
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	7812      	ldrb	r2, [r2, #0]
 8009036:	701a      	strb	r2, [r3, #0]
  idx++;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	3301      	adds	r3, #1
 800903c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	4413      	add	r3, r2
 8009044:	2203      	movs	r2, #3
 8009046:	701a      	strb	r2, [r3, #0]
  idx++;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	3301      	adds	r3, #1
 800904c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800904e:	e013      	b.n	8009078 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4413      	add	r3, r2
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	7812      	ldrb	r2, [r2, #0]
 800905a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3301      	adds	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
    idx++;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	3301      	adds	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	2200      	movs	r2, #0
 8009070:	701a      	strb	r2, [r3, #0]
    idx++;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	3301      	adds	r3, #1
 8009076:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e7      	bne.n	8009050 <USBD_GetString+0x52>
 8009080:	e000      	b.n	8009084 <USBD_GetString+0x86>
    return;
 8009082:	bf00      	nop
  }
}
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800909a:	e005      	b.n	80090a8 <USBD_GetLen+0x1e>
  {
    len++;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	3301      	adds	r3, #1
 80090a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	3301      	adds	r3, #1
 80090a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1f5      	bne.n	800909c <USBD_GetLen+0x12>
  }

  return len;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	2100      	movs	r1, #0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fca5 	bl	8009a34 <USBD_LL_Transmit>

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fc94 	bl	8009a34 <USBD_LL_Transmit>

  return USBD_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2203      	movs	r2, #3
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 fc98 	bl	8009a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	2100      	movs	r1, #0
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fc87 	bl	8009a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2204      	movs	r2, #4
 800917e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009182:	2300      	movs	r3, #0
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc53 	bl	8009a34 <USBD_LL_Transmit>

  return USBD_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2205      	movs	r2, #5
 80091a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a8:	2300      	movs	r3, #0
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fc61 	bl	8009a76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80091c4:	2200      	movs	r2, #0
 80091c6:	4912      	ldr	r1, [pc, #72]	; (8009210 <MX_USB_Device_Init+0x50>)
 80091c8:	4812      	ldr	r0, [pc, #72]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091ca:	f7fe fed9 	bl	8007f80 <USBD_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80091d4:	f7f7 fcd2 	bl	8000b7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80091d8:	490f      	ldr	r1, [pc, #60]	; (8009218 <MX_USB_Device_Init+0x58>)
 80091da:	480e      	ldr	r0, [pc, #56]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091dc:	f7fe ff00 	bl	8007fe0 <USBD_RegisterClass>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80091e6:	f7f7 fcc9 	bl	8000b7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80091ea:	490c      	ldr	r1, [pc, #48]	; (800921c <MX_USB_Device_Init+0x5c>)
 80091ec:	4809      	ldr	r0, [pc, #36]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091ee:	f7fe fe21 	bl	8007e34 <USBD_CDC_RegisterInterface>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80091f8:	f7f7 fcc0 	bl	8000b7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80091fc:	4805      	ldr	r0, [pc, #20]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091fe:	f7fe ff16 	bl	800802e <USBD_Start>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009208:	f7f7 fcb8 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800920c:	bf00      	nop
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000130 	.word	0x20000130
 8009214:	200003dc 	.word	0x200003dc
 8009218:	20000018 	.word	0x20000018
 800921c:	2000011c 	.word	0x2000011c

08009220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009224:	2200      	movs	r2, #0
 8009226:	4905      	ldr	r1, [pc, #20]	; (800923c <CDC_Init_FS+0x1c>)
 8009228:	4805      	ldr	r0, [pc, #20]	; (8009240 <CDC_Init_FS+0x20>)
 800922a:	f7fe fe18 	bl	8007e5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800922e:	4905      	ldr	r1, [pc, #20]	; (8009244 <CDC_Init_FS+0x24>)
 8009230:	4803      	ldr	r0, [pc, #12]	; (8009240 <CDC_Init_FS+0x20>)
 8009232:	f7fe fe32 	bl	8007e9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20000a94 	.word	0x20000a94
 8009240:	200003dc 	.word	0x200003dc
 8009244:	200006ac 	.word	0x200006ac

08009248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800924c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800924e:	4618      	mov	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
 8009264:	4613      	mov	r3, r2
 8009266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b23      	cmp	r3, #35	; 0x23
 800926c:	d84a      	bhi.n	8009304 <CDC_Control_FS+0xac>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <CDC_Control_FS+0x1c>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009305 	.word	0x08009305
 8009278:	08009305 	.word	0x08009305
 800927c:	08009305 	.word	0x08009305
 8009280:	08009305 	.word	0x08009305
 8009284:	08009305 	.word	0x08009305
 8009288:	08009305 	.word	0x08009305
 800928c:	08009305 	.word	0x08009305
 8009290:	08009305 	.word	0x08009305
 8009294:	08009305 	.word	0x08009305
 8009298:	08009305 	.word	0x08009305
 800929c:	08009305 	.word	0x08009305
 80092a0:	08009305 	.word	0x08009305
 80092a4:	08009305 	.word	0x08009305
 80092a8:	08009305 	.word	0x08009305
 80092ac:	08009305 	.word	0x08009305
 80092b0:	08009305 	.word	0x08009305
 80092b4:	08009305 	.word	0x08009305
 80092b8:	08009305 	.word	0x08009305
 80092bc:	08009305 	.word	0x08009305
 80092c0:	08009305 	.word	0x08009305
 80092c4:	08009305 	.word	0x08009305
 80092c8:	08009305 	.word	0x08009305
 80092cc:	08009305 	.word	0x08009305
 80092d0:	08009305 	.word	0x08009305
 80092d4:	08009305 	.word	0x08009305
 80092d8:	08009305 	.word	0x08009305
 80092dc:	08009305 	.word	0x08009305
 80092e0:	08009305 	.word	0x08009305
 80092e4:	08009305 	.word	0x08009305
 80092e8:	08009305 	.word	0x08009305
 80092ec:	08009305 	.word	0x08009305
 80092f0:	08009305 	.word	0x08009305
 80092f4:	08009305 	.word	0x08009305
 80092f8:	08009305 	.word	0x08009305
 80092fc:	08009305 	.word	0x08009305
 8009300:	08009305 	.word	0x08009305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009304:	bf00      	nop
  }

  return (USBD_OK);
 8009306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7f6 ff79 	bl	8000218 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4805      	ldr	r0, [pc, #20]	; (8009340 <CDC_Receive_FS+0x2c>)
 800932a:	f7fe fdb6 	bl	8007e9a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800932e:	4804      	ldr	r0, [pc, #16]	; (8009340 <CDC_Receive_FS+0x2c>)
 8009330:	f7fe fdfc 	bl	8007f2c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009336:	4618      	mov	r0, r3
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200003dc 	.word	0x200003dc

08009344 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009354:	4b0d      	ldr	r3, [pc, #52]	; (800938c <CDC_Transmit_FS+0x48>)
 8009356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800935a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009366:	2301      	movs	r3, #1
 8009368:	e00b      	b.n	8009382 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	461a      	mov	r2, r3
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4806      	ldr	r0, [pc, #24]	; (800938c <CDC_Transmit_FS+0x48>)
 8009372:	f7fe fd74 	bl	8007e5e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009376:	4805      	ldr	r0, [pc, #20]	; (800938c <CDC_Transmit_FS+0x48>)
 8009378:	f7fe fda8 	bl	8007ecc <USBD_CDC_TransmitPacket>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	200003dc 	.word	0x200003dc

08009390 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80093a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	371c      	adds	r7, #28
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	6039      	str	r1, [r7, #0]
 80093be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2212      	movs	r2, #18
 80093c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000150 	.word	0x20000150

080093d8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2204      	movs	r2, #4
 80093e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093ea:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000164 	.word	0x20000164

080093fc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4907      	ldr	r1, [pc, #28]	; (8009430 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009414:	f7ff fdf3 	bl	8008ffe <USBD_GetString>
 8009418:	e004      	b.n	8009424 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4904      	ldr	r1, [pc, #16]	; (8009430 <USBD_CDC_ProductStrDescriptor+0x34>)
 800941e:	4805      	ldr	r0, [pc, #20]	; (8009434 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009420:	f7ff fded 	bl	8008ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009424:	4b02      	ldr	r3, [pc, #8]	; (8009430 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	20000e7c 	.word	0x20000e7c
 8009434:	08009c6c 	.word	0x08009c6c

08009438 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	4904      	ldr	r1, [pc, #16]	; (8009458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009448:	4804      	ldr	r0, [pc, #16]	; (800945c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800944a:	f7ff fdd8 	bl	8008ffe <USBD_GetString>
  return USBD_StrDesc;
 800944e:	4b02      	ldr	r3, [pc, #8]	; (8009458 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000e7c 	.word	0x20000e7c
 800945c:	08009c84 	.word	0x08009c84

08009460 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	221a      	movs	r2, #26
 8009470:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009472:	f000 f843 	bl	80094fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009476:	4b02      	ldr	r3, [pc, #8]	; (8009480 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000168 	.word	0x20000168

08009484 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	6039      	str	r1, [r7, #0]
 800948e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d105      	bne.n	80094a2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	4907      	ldr	r1, [pc, #28]	; (80094b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800949a:	4808      	ldr	r0, [pc, #32]	; (80094bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800949c:	f7ff fdaf 	bl	8008ffe <USBD_GetString>
 80094a0:	e004      	b.n	80094ac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	4904      	ldr	r1, [pc, #16]	; (80094b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80094a6:	4805      	ldr	r0, [pc, #20]	; (80094bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80094a8:	f7ff fda9 	bl	8008ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000e7c 	.word	0x20000e7c
 80094bc:	08009c98 	.word	0x08009c98

080094c0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	4907      	ldr	r1, [pc, #28]	; (80094f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80094d6:	4808      	ldr	r0, [pc, #32]	; (80094f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80094d8:	f7ff fd91 	bl	8008ffe <USBD_GetString>
 80094dc:	e004      	b.n	80094e8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4904      	ldr	r1, [pc, #16]	; (80094f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80094e2:	4805      	ldr	r0, [pc, #20]	; (80094f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80094e4:	f7ff fd8b 	bl	8008ffe <USBD_GetString>
  }
  return USBD_StrDesc;
 80094e8:	4b02      	ldr	r3, [pc, #8]	; (80094f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000e7c 	.word	0x20000e7c
 80094f8:	08009ca4 	.word	0x08009ca4

080094fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009502:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <Get_SerialNum+0x44>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009508:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <Get_SerialNum+0x48>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800950e:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <Get_SerialNum+0x4c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4413      	add	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d009      	beq.n	8009536 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009522:	2208      	movs	r2, #8
 8009524:	4909      	ldr	r1, [pc, #36]	; (800954c <Get_SerialNum+0x50>)
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f814 	bl	8009554 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800952c:	2204      	movs	r2, #4
 800952e:	4908      	ldr	r1, [pc, #32]	; (8009550 <Get_SerialNum+0x54>)
 8009530:	68b8      	ldr	r0, [r7, #8]
 8009532:	f000 f80f 	bl	8009554 <IntToUnicode>
  }
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	1fff7590 	.word	0x1fff7590
 8009544:	1fff7594 	.word	0x1fff7594
 8009548:	1fff7598 	.word	0x1fff7598
 800954c:	2000016a 	.word	0x2000016a
 8009550:	2000017a 	.word	0x2000017a

08009554 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4613      	mov	r3, r2
 8009560:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
 800956a:	e027      	b.n	80095bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	0f1b      	lsrs	r3, r3, #28
 8009570:	2b09      	cmp	r3, #9
 8009572:	d80b      	bhi.n	800958c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	0f1b      	lsrs	r3, r3, #28
 8009578:	b2da      	uxtb	r2, r3
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	4619      	mov	r1, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	440b      	add	r3, r1
 8009584:	3230      	adds	r2, #48	; 0x30
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e00a      	b.n	80095a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	0f1b      	lsrs	r3, r3, #28
 8009590:	b2da      	uxtb	r2, r3
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	4619      	mov	r1, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	440b      	add	r3, r1
 800959c:	3237      	adds	r2, #55	; 0x37
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	3301      	adds	r3, #1
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4413      	add	r3, r2
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	3301      	adds	r3, #1
 80095ba:	75fb      	strb	r3, [r7, #23]
 80095bc:	7dfa      	ldrb	r2, [r7, #23]
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d3d3      	bcc.n	800956c <IntToUnicode+0x18>
  }
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
	...

080095d4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b094      	sub	sp, #80	; 0x50
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	2244      	movs	r2, #68	; 0x44
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fb2d 	bl	8009c44 <memset>
  if(pcdHandle->Instance==USB)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a15      	ldr	r2, [pc, #84]	; (8009644 <HAL_PCD_MspInit+0x70>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d123      	bne.n	800963c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80095f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80095fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095fe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009600:	f107 030c 	add.w	r3, r7, #12
 8009604:	4618      	mov	r0, r3
 8009606:	f7fa fb37 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009610:	f7f7 fab4 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009614:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <HAL_PCD_MspInit+0x74>)
 8009616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009618:	4a0b      	ldr	r2, [pc, #44]	; (8009648 <HAL_PCD_MspInit+0x74>)
 800961a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800961e:	6593      	str	r3, [r2, #88]	; 0x58
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <HAL_PCD_MspInit+0x74>)
 8009622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	2014      	movs	r0, #20
 8009632:	f7f7 fe64 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009636:	2014      	movs	r0, #20
 8009638:	f7f7 fe7b 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800963c:	bf00      	nop
 800963e:	3750      	adds	r7, #80	; 0x50
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	40005c00 	.word	0x40005c00
 8009648:	40021000 	.word	0x40021000

0800964c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f7fe fd2e 	bl	80080c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	6879      	ldr	r1, [r7, #4]
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	440b      	add	r3, r1
 8009690:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	4619      	mov	r1, r3
 800969a:	f7fe fd68 	bl	800816e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	440b      	add	r3, r1
 80096c6:	333c      	adds	r3, #60	; 0x3c
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	4619      	mov	r1, r3
 80096ce:	f7fe fdb1 	bl	8008234 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe fec5 	bl	8008478 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096fe:	2301      	movs	r3, #1
 8009700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d001      	beq.n	800970e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800970a:	f7f7 fa37 	bl	8000b7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009714:	7bfa      	ldrb	r2, [r7, #15]
 8009716:	4611      	mov	r1, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fe6f 	bl	80083fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009724:	4618      	mov	r0, r3
 8009726:	f7fe fe1b 	bl	8008360 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fe6a 	bl	800841c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <HAL_PCD_SuspendCallback+0x30>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	4a03      	ldr	r2, [pc, #12]	; (8009764 <HAL_PCD_SuspendCallback+0x30>)
 8009756:	f043 0306 	orr.w	r3, r3, #6
 800975a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	e000ed00 	.word	0xe000ed00

08009768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d007      	beq.n	8009788 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009778:	4b08      	ldr	r3, [pc, #32]	; (800979c <HAL_PCD_ResumeCallback+0x34>)
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	4a07      	ldr	r2, [pc, #28]	; (800979c <HAL_PCD_ResumeCallback+0x34>)
 800977e:	f023 0306 	bic.w	r3, r3, #6
 8009782:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009784:	f000 f9fa 	bl	8009b7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fe5a 	bl	8008448 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	e000ed00 	.word	0xe000ed00

080097a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80097a8:	4a2b      	ldr	r2, [pc, #172]	; (8009858 <USBD_LL_Init+0xb8>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a29      	ldr	r2, [pc, #164]	; (8009858 <USBD_LL_Init+0xb8>)
 80097b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80097b8:	4b27      	ldr	r3, [pc, #156]	; (8009858 <USBD_LL_Init+0xb8>)
 80097ba:	4a28      	ldr	r2, [pc, #160]	; (800985c <USBD_LL_Init+0xbc>)
 80097bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80097be:	4b26      	ldr	r3, [pc, #152]	; (8009858 <USBD_LL_Init+0xb8>)
 80097c0:	2208      	movs	r2, #8
 80097c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80097c4:	4b24      	ldr	r3, [pc, #144]	; (8009858 <USBD_LL_Init+0xb8>)
 80097c6:	2202      	movs	r2, #2
 80097c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097ca:	4b23      	ldr	r3, [pc, #140]	; (8009858 <USBD_LL_Init+0xb8>)
 80097cc:	2202      	movs	r2, #2
 80097ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80097d0:	4b21      	ldr	r3, [pc, #132]	; (8009858 <USBD_LL_Init+0xb8>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097d6:	4b20      	ldr	r3, [pc, #128]	; (8009858 <USBD_LL_Init+0xb8>)
 80097d8:	2200      	movs	r2, #0
 80097da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097dc:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <USBD_LL_Init+0xb8>)
 80097de:	2200      	movs	r2, #0
 80097e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097e2:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <USBD_LL_Init+0xb8>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097e8:	481b      	ldr	r0, [pc, #108]	; (8009858 <USBD_LL_Init+0xb8>)
 80097ea:	f7f7 ff71 	bl	80016d0 <HAL_PCD_Init>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80097f4:	f7f7 f9c2 	bl	8000b7c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097fe:	2318      	movs	r3, #24
 8009800:	2200      	movs	r2, #0
 8009802:	2100      	movs	r1, #0
 8009804:	f7f9 fc2a 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800980e:	2358      	movs	r3, #88	; 0x58
 8009810:	2200      	movs	r2, #0
 8009812:	2180      	movs	r1, #128	; 0x80
 8009814:	f7f9 fc22 	bl	800305c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800981e:	23c0      	movs	r3, #192	; 0xc0
 8009820:	2200      	movs	r2, #0
 8009822:	2181      	movs	r1, #129	; 0x81
 8009824:	f7f9 fc1a 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800982e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009832:	2200      	movs	r2, #0
 8009834:	2101      	movs	r1, #1
 8009836:	f7f9 fc11 	bl	800305c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009844:	2200      	movs	r2, #0
 8009846:	2182      	movs	r1, #130	; 0x82
 8009848:	f7f9 fc08 	bl	800305c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	2000107c 	.word	0x2000107c
 800985c:	40005c00 	.word	0x40005c00

08009860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009876:	4618      	mov	r0, r3
 8009878:	f7f8 f80f 	bl	800189a <HAL_PCD_Start>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f980 	bl	8009b88 <USBD_Get_USB_Status>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988c:	7bbb      	ldrb	r3, [r7, #14]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	4608      	mov	r0, r1
 80098a0:	4611      	mov	r1, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	4603      	mov	r3, r0
 80098a6:	70fb      	strb	r3, [r7, #3]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70bb      	strb	r3, [r7, #2]
 80098ac:	4613      	mov	r3, r2
 80098ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098be:	78bb      	ldrb	r3, [r7, #2]
 80098c0:	883a      	ldrh	r2, [r7, #0]
 80098c2:	78f9      	ldrb	r1, [r7, #3]
 80098c4:	f7f8 f957 	bl	8001b76 <HAL_PCD_EP_Open>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f000 f95a 	bl	8009b88 <USBD_Get_USB_Status>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f7f8 f99e 	bl	8001c42 <HAL_PCD_EP_Close>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 f93b 	bl	8009b88 <USBD_Get_USB_Status>
 8009912:	4603      	mov	r3, r0
 8009914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009916:	7bbb      	ldrb	r3, [r7, #14]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800993a:	78fa      	ldrb	r2, [r7, #3]
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7f8 fa5f 	bl	8001e02 <HAL_PCD_EP_SetStall>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4618      	mov	r0, r3
 800994c:	f000 f91c 	bl	8009b88 <USBD_Get_USB_Status>
 8009950:	4603      	mov	r3, r0
 8009952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009954:	7bbb      	ldrb	r3, [r7, #14]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009978:	78fa      	ldrb	r2, [r7, #3]
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f7f8 fa92 	bl	8001ea6 <HAL_PCD_EP_ClrStall>
 8009982:	4603      	mov	r3, r0
 8009984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 f8fd 	bl	8009b88 <USBD_Get_USB_Status>
 800998e:	4603      	mov	r3, r0
 8009990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009992:	7bbb      	ldrb	r3, [r7, #14]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	da0c      	bge.n	80099d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	4613      	mov	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	440b      	add	r3, r1
 80099cc:	3302      	adds	r3, #2
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	e00b      	b.n	80099ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099d8:	68f9      	ldr	r1, [r7, #12]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	440b      	add	r3, r1
 80099e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f8 f889 	bl	8001b2c <HAL_PCD_SetAddress>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f8b1 	bl	8009b88 <USBD_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	460b      	mov	r3, r1
 8009a42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a52:	7af9      	ldrb	r1, [r7, #11]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	f7f8 f990 	bl	8001d7c <HAL_PCD_EP_Transmit>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f890 	bl	8009b88 <USBD_Get_USB_Status>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b086      	sub	sp, #24
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	460b      	mov	r3, r1
 8009a84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a94:	7af9      	ldrb	r1, [r7, #11]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	f7f8 f91a 	bl	8001cd2 <HAL_PCD_EP_Receive>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 f86f 	bl	8009b88 <USBD_Get_USB_Status>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009aca:	78fa      	ldrb	r2, [r7, #3]
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7f8 f93c 	bl	8001d4c <HAL_PCD_EP_GetRxCount>
 8009ad4:	4603      	mov	r3, r0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <HAL_PCDEx_LPM_Callback+0x18>
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d013      	beq.n	8009b1e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8009af6:	e023      	b.n	8009b40 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b00:	f000 f83c 	bl	8009b7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b04:	4b10      	ldr	r3, [pc, #64]	; (8009b48 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	4a0f      	ldr	r2, [pc, #60]	; (8009b48 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b0a:	f023 0306 	bic.w	r3, r3, #6
 8009b0e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fc96 	bl	8008448 <USBD_LL_Resume>
    break;
 8009b1c:	e010      	b.n	8009b40 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fc79 	bl	800841c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b32:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	4a04      	ldr	r2, [pc, #16]	; (8009b48 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b38:	f043 0306 	orr.w	r3, r3, #6
 8009b3c:	6113      	str	r3, [r2, #16]
    break;
 8009b3e:	bf00      	nop
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed00 	.word	0xe000ed00

08009b4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b54:	4b03      	ldr	r3, [pc, #12]	; (8009b64 <USBD_static_malloc+0x18>)
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20001370 	.word	0x20001370

08009b68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]

}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b80:	f7f6 fc5c 	bl	800043c <SystemClock_Config>
}
 8009b84:	bf00      	nop
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d817      	bhi.n	8009bcc <USBD_Get_USB_Status+0x44>
 8009b9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <USBD_Get_USB_Status+0x1c>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009bb5 	.word	0x08009bb5
 8009ba8:	08009bbb 	.word	0x08009bbb
 8009bac:	08009bc1 	.word	0x08009bc1
 8009bb0:	08009bc7 	.word	0x08009bc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb8:	e00b      	b.n	8009bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bbe:	e008      	b.n	8009bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc4:	e005      	b.n	8009bd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bca:	e002      	b.n	8009bd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd0:	bf00      	nop
  }
  return usb_status;
 8009bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <__libc_init_array>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4d0d      	ldr	r5, [pc, #52]	; (8009c18 <__libc_init_array+0x38>)
 8009be4:	4c0d      	ldr	r4, [pc, #52]	; (8009c1c <__libc_init_array+0x3c>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	2600      	movs	r6, #0
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	d109      	bne.n	8009c04 <__libc_init_array+0x24>
 8009bf0:	4d0b      	ldr	r5, [pc, #44]	; (8009c20 <__libc_init_array+0x40>)
 8009bf2:	4c0c      	ldr	r4, [pc, #48]	; (8009c24 <__libc_init_array+0x44>)
 8009bf4:	f000 f82e 	bl	8009c54 <_init>
 8009bf8:	1b64      	subs	r4, r4, r5
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	42a6      	cmp	r6, r4
 8009c00:	d105      	bne.n	8009c0e <__libc_init_array+0x2e>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c08:	4798      	blx	r3
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7ee      	b.n	8009bec <__libc_init_array+0xc>
 8009c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c12:	4798      	blx	r3
 8009c14:	3601      	adds	r6, #1
 8009c16:	e7f2      	b.n	8009bfe <__libc_init_array+0x1e>
 8009c18:	08009cc4 	.word	0x08009cc4
 8009c1c:	08009cc4 	.word	0x08009cc4
 8009c20:	08009cc4 	.word	0x08009cc4
 8009c24:	08009cc8 	.word	0x08009cc8

08009c28 <memcpy>:
 8009c28:	440a      	add	r2, r1
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c30:	d100      	bne.n	8009c34 <memcpy+0xc>
 8009c32:	4770      	bx	lr
 8009c34:	b510      	push	{r4, lr}
 8009c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	d1f9      	bne.n	8009c36 <memcpy+0xe>
 8009c42:	bd10      	pop	{r4, pc}

08009c44 <memset>:
 8009c44:	4402      	add	r2, r0
 8009c46:	4603      	mov	r3, r0
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d100      	bne.n	8009c4e <memset+0xa>
 8009c4c:	4770      	bx	lr
 8009c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c52:	e7f9      	b.n	8009c48 <memset+0x4>

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr
