
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009838  08009838  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009838  08009838  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009838  08009838  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  20000184  080099c4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  080099c4  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a76  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350c  00000000  00000000  00035c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00039138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163d3  00000000  00000000  0005c267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c642c  00000000  00000000  0007263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f70  00000000  00000000  00138ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080097c8 	.word	0x080097c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	080097c8 	.word	0x080097c8

08000218 <CDC_On_Receive>:
} Feedback;

Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 0, .delimiter = 0}; // (4)
volatile uint8_t isCommandReceived = 0; // (5)

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f009 fab4 	bl	800979c <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200003c8 	.word	0x200003c8
 8000254:	200003d2 	.word	0x200003d2

08000258 <enc_init>:

void enc_init() { //CHANNEL ORDER MAY BE REVERSED, PLEASE CHECK BEFORE DEBUGGING OTHER POSSIBLE SOURCES
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1
 800025c:	2104      	movs	r1, #4
 800025e:	4806      	ldr	r0, [pc, #24]	; (8000278 <enc_init+0x20>)
 8000260:	f003 ffe0 	bl	8004224 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 8000264:	2104      	movs	r1, #4
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <enc_init+0x24>)
 8000268:	f003 ffdc 	bl	8004224 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3
 800026c:	2104      	movs	r1, #4
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <enc_init+0x28>)
 8000270:	f003 ffd8 	bl	8004224 <HAL_TIM_Encoder_Start>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000284 	.word	0x20000284
 800027c:	200001a0 	.word	0x200001a0
 8000280:	20000238 	.word	0x20000238

08000284 <motor_status_update>:

void motor_status_update() {
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 800028a:	2300      	movs	r3, #0
 800028c:	71fb      	strb	r3, [r7, #7]
 800028e:	e02b      	b.n	80002e8 <motor_status_update+0x64>
		if (command.speed[i] >= 0) {
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <motor_status_update+0x78>)
 8000294:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000298:	2b00      	cmp	r3, #0
 800029a:	db0a      	blt.n	80002b2 <motor_status_update+0x2e>
			motor_status[i].direction = 1;
 800029c:	79fa      	ldrb	r2, [r7, #7]
 800029e:	4918      	ldr	r1, [pc, #96]	; (8000300 <motor_status_update+0x7c>)
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	3301      	adds	r3, #1
 80002ac:	2201      	movs	r2, #1
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e009      	b.n	80002c6 <motor_status_update+0x42>
		} else {
			motor_status[i].direction = 0;
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	4912      	ldr	r1, [pc, #72]	; (8000300 <motor_status_update+0x7c>)
 80002b6:	4613      	mov	r3, r2
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	4413      	add	r3, r2
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	440b      	add	r3, r1
 80002c0:	3301      	adds	r3, #1
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
		}
		motor_status[i].target_speed = command.speed[i];
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <motor_status_update+0x78>)
 80002ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	b2d8      	uxtb	r0, r3
 80002d2:	490b      	ldr	r1, [pc, #44]	; (8000300 <motor_status_update+0x7c>)
 80002d4:	4613      	mov	r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	440b      	add	r3, r1
 80002de:	4602      	mov	r2, r0
 80002e0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	3301      	adds	r3, #1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d9d0      	bls.n	8000290 <motor_status_update+0xc>
	}

}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	200003c8 	.word	0x200003c8
 8000300:	200003b4 	.word	0x200003b4

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fe3e 	bl	8000f8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f849 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 fb67 	bl	80009e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000316:	f000 f8eb 	bl	80004f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800031a:	f000 f943 	bl	80005a4 <MX_TIM3_Init>
  MX_TIM1_Init();
 800031e:	f000 f88d 	bl	800043c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000322:	f000 f995 	bl	8000650 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000326:	f000 fa1f 	bl	8000768 <MX_TIM8_Init>
  MX_TIM15_Init();
 800032a:	f000 fac9 	bl	80008c0 <MX_TIM15_Init>
  MX_TIM6_Init();
 800032e:	f000 f9e5 	bl	80006fc <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000332:	f008 fcff 	bl	8008d34 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  enc_init();
 8000336:	f7ff ff8f 	bl	8000258 <enc_init>

  Feedback feedback = {
 800033a:	2300      	movs	r3, #0
 800033c:	803b      	strh	r3, [r7, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	807b      	strh	r3, [r7, #2]
 8000342:	2300      	movs	r3, #0
 8000344:	80bb      	strh	r3, [r7, #4]
 8000346:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800034a:	80fb      	strh	r3, [r7, #6]
	    .speed[0] = 0,
	    .speed[1] = 0,
	    .speed[2] = 0,
        .delimiter = 0xAAAA
    };
  HAL_GPIO_TogglePin(MSLEEP_GPIO_Port, MSLEEP_Pin); // MSLEEP -> HIGH, activates motor drivers
 800034c:	2108      	movs	r1, #8
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <main+0x90>)
 8000350:	f001 f936 	bl	80015c0 <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    if (isCommandReceived) {
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <main+0x94>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fa      	beq.n	8000354 <main+0x50>
    	isCommandReceived = 0;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <main+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	701a      	strb	r2, [r3, #0]
    	motor_status_update();
 8000364:	f7ff ff8e 	bl	8000284 <motor_status_update>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000368:	2101      	movs	r1, #1
 800036a:	480c      	ldr	r0, [pc, #48]	; (800039c <main+0x98>)
 800036c:	f001 f928 	bl	80015c0 <HAL_GPIO_TogglePin>

		feedback.speed[0] = motor_status[0].target_speed; // In the current state it retuns the uint8 version without direction, whoops!
 8000370:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <main+0x9c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	b21b      	sxth	r3, r3
 8000376:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <main+0x9c>)
 800037a:	799b      	ldrb	r3, [r3, #6]
 800037c:	b21b      	sxth	r3, r3
 800037e:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <main+0x9c>)
 8000382:	7b1b      	ldrb	r3, [r3, #12]
 8000384:	b21b      	sxth	r3, r3
 8000386:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000388:	463b      	mov	r3, r7
 800038a:	2108      	movs	r1, #8
 800038c:	4618      	mov	r0, r3
 800038e:	f008 fd93 	bl	8008eb8 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000392:	e7df      	b.n	8000354 <main+0x50>
 8000394:	48000400 	.word	0x48000400
 8000398:	200003d2 	.word	0x200003d2
 800039c:	48001400 	.word	0x48001400
 80003a0:	200003b4 	.word	0x200003b4

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b094      	sub	sp, #80	; 0x50
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2238      	movs	r2, #56	; 0x38
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f009 fa00 	bl	80097b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ca:	f002 fe47 	bl	800305c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d8:	2340      	movs	r3, #64	; 0x40
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e0:	2302      	movs	r3, #2
 80003e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003e8:	230c      	movs	r3, #12
 80003ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003ec:	2302      	movs	r3, #2
 80003ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003f0:	2304      	movs	r3, #4
 80003f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003f4:	2302      	movs	r3, #2
 80003f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0318 	add.w	r3, r7, #24
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 fed1 	bl	80031a4 <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000408:	f000 fb6c 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	230f      	movs	r3, #15
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f003 f9d5 	bl	80037d4 <HAL_RCC_ClockConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000430:	f000 fb58 	bl	8000ae4 <Error_Handler>
  }
}
 8000434:	bf00      	nop
 8000436:	3750      	adds	r7, #80	; 0x50
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08c      	sub	sp, #48	; 0x30
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2224      	movs	r2, #36	; 0x24
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f009 f9b4 	bl	80097b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045a:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <MX_TIM1_Init+0xac>)
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <MX_TIM1_Init+0xb0>)
 800045e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <MX_TIM1_Init+0xac>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000466:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <MX_TIM1_Init+0xac>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_TIM1_Init+0xac>)
 800046e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MX_TIM1_Init+0xac>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_TIM1_Init+0xac>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_TIM1_Init+0xac>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000486:	2301      	movs	r3, #1
 8000488:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800048e:	2301      	movs	r3, #1
 8000490:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800049e:	2301      	movs	r3, #1
 80004a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80004aa:	f107 030c 	add.w	r3, r7, #12
 80004ae:	4619      	mov	r1, r3
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_TIM1_Init+0xac>)
 80004b2:	f003 fe11 	bl	80040d8 <HAL_TIM_Encoder_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80004bc:	f000 fb12 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	2300      	movs	r3, #0
 80004c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004cc:	463b      	mov	r3, r7
 80004ce:	4619      	mov	r1, r3
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_TIM1_Init+0xac>)
 80004d2:	f004 fbf5 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80004dc:	f000 fb02 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200001a0 	.word	0x200001a0
 80004ec:	40012c00 	.word	0x40012c00

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]
 8000512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_TIM2_Init+0xb0>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_TIM2_Init+0xb0>)
 800052a:	f04f 32ff 	mov.w	r2, #4294967295
 800052e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800053c:	4818      	ldr	r0, [pc, #96]	; (80005a0 <MX_TIM2_Init+0xb0>)
 800053e:	f003 fd74 	bl	800402a <HAL_TIM_PWM_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 facc 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	4619      	mov	r1, r3
 800055a:	4811      	ldr	r0, [pc, #68]	; (80005a0 <MX_TIM2_Init+0xb0>)
 800055c:	f004 fbb0 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000566:	f000 fabd 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056a:	2360      	movs	r3, #96	; 0x60
 800056c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	4619      	mov	r1, r3
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000582:	f003 fedd 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800058c:	f000 faaa 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MX_TIM2_Init+0xb0>)
 8000592:	f000 fbdd 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000596:	bf00      	nop
 8000598:	3728      	adds	r7, #40	; 0x28
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200001ec 	.word	0x200001ec

080005a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2224      	movs	r2, #36	; 0x24
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f009 f900 	bl	80097b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <MX_TIM3_Init+0xa8>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_TIM3_Init+0xa4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000600:	2301      	movs	r3, #1
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_TIM3_Init+0xa4>)
 8000614:	f003 fd60 	bl	80040d8 <HAL_TIM_Encoder_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800061e:	f000 fa61 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_TIM3_Init+0xa4>)
 8000630:	f004 fb46 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800063a:	f000 fa53 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3730      	adds	r7, #48	; 0x30
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000238 	.word	0x20000238
 800064c:	40000400 	.word	0x40000400

08000650 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2224      	movs	r2, #36	; 0x24
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 f8aa 	bl	80097b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_TIM4_Init+0xa4>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_TIM4_Init+0xa8>)
 8000672:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_TIM4_Init+0xa4>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM4_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM4_Init+0xa4>)
 8000682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000686:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_TIM4_Init+0xa4>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM4_Init+0xa4>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000694:	2301      	movs	r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_TIM4_Init+0xa4>)
 80006c0:	f003 fd0a 	bl	80040d8 <HAL_TIM_Encoder_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80006ca:	f000 fa0b 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_TIM4_Init+0xa4>)
 80006dc:	f004 faf0 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80006e6:	f000 f9fd 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000284 	.word	0x20000284
 80006f8:	40000800 	.word	0x40000800

080006fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_TIM6_Init+0x64>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_TIM6_Init+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_TIM6_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_TIM6_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_TIM6_Init+0x64>)
 8000720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000724:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_TIM6_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_TIM6_Init+0x64>)
 800072e:	f003 fc25 	bl	8003f7c <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000738:	f000 f9d4 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_TIM6_Init+0x64>)
 800074a:	f004 fab9 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f9c6 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200002d0 	.word	0x200002d0
 8000764:	40001000 	.word	0x40001000

08000768 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b098      	sub	sp, #96	; 0x60
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
 800078a:	615a      	str	r2, [r3, #20]
 800078c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2234      	movs	r2, #52	; 0x34
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f009 f80f 	bl	80097b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800079a:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <MX_TIM8_Init+0x150>)
 800079c:	4a47      	ldr	r2, [pc, #284]	; (80008bc <MX_TIM8_Init+0x154>)
 800079e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007a0:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007c6:	483c      	ldr	r0, [pc, #240]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007c8:	f003 fc2f 	bl	800402a <HAL_TIM_PWM_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f987 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007e6:	4619      	mov	r1, r3
 80007e8:	4833      	ldr	r0, [pc, #204]	; (80008b8 <MX_TIM8_Init+0x150>)
 80007ea:	f004 fa69 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f976 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f8:	2360      	movs	r3, #96	; 0x60
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000800:	2300      	movs	r3, #0
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000814:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4826      	ldr	r0, [pc, #152]	; (80008b8 <MX_TIM8_Init+0x150>)
 800081e:	f003 fd8f 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000828:	f000 f95c 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800082c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000830:	2204      	movs	r2, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4820      	ldr	r0, [pc, #128]	; (80008b8 <MX_TIM8_Init+0x150>)
 8000836:	f003 fd83 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000840:	f000 f950 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000848:	2208      	movs	r2, #8
 800084a:	4619      	mov	r1, r3
 800084c:	481a      	ldr	r0, [pc, #104]	; (80008b8 <MX_TIM8_Init+0x150>)
 800084e:	f003 fd77 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000858:	f000 f944 	bl	8000ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM8_Init+0x150>)
 800089a:	f004 fa93 	bl	8004dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80008a4:	f000 f91e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM8_Init+0x150>)
 80008aa:	f000 fa51 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 80008ae:	bf00      	nop
 80008b0:	3760      	adds	r7, #96	; 0x60
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000031c 	.word	0x2000031c
 80008bc:	40013400 	.word	0x40013400

080008c0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b098      	sub	sp, #96	; 0x60
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2234      	movs	r2, #52	; 0x34
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f008 ff63 	bl	80097b8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <MX_TIM15_Init+0x11c>)
 80008f4:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <MX_TIM15_Init+0x120>)
 80008f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80008f8:	4b38      	ldr	r3, [pc, #224]	; (80009dc <MX_TIM15_Init+0x11c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <MX_TIM15_Init+0x11c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000904:	4b35      	ldr	r3, [pc, #212]	; (80009dc <MX_TIM15_Init+0x11c>)
 8000906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b33      	ldr	r3, [pc, #204]	; (80009dc <MX_TIM15_Init+0x11c>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <MX_TIM15_Init+0x11c>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b30      	ldr	r3, [pc, #192]	; (80009dc <MX_TIM15_Init+0x11c>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800091e:	482f      	ldr	r0, [pc, #188]	; (80009dc <MX_TIM15_Init+0x11c>)
 8000920:	f003 fb83 	bl	800402a <HAL_TIM_PWM_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 f8db 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800093a:	4619      	mov	r1, r3
 800093c:	4827      	ldr	r0, [pc, #156]	; (80009dc <MX_TIM15_Init+0x11c>)
 800093e:	f004 f9bf 	bl	8004cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f8cc 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800094c:	2360      	movs	r3, #96	; 0x60
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000954:	2300      	movs	r3, #0
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000968:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096c:	2200      	movs	r2, #0
 800096e:	4619      	mov	r1, r3
 8000970:	481a      	ldr	r0, [pc, #104]	; (80009dc <MX_TIM15_Init+0x11c>)
 8000972:	f003 fce5 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800097c:	f000 f8b2 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000984:	2204      	movs	r2, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_TIM15_Init+0x11c>)
 800098a:	f003 fcd9 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000994:	f000 f8a6 	bl	8000ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <MX_TIM15_Init+0x11c>)
 80009c0:	f004 fa00 	bl	8004dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80009ca:	f000 f88b 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_TIM15_Init+0x11c>)
 80009d0:	f000 f9be 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3760      	adds	r7, #96	; 0x60
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000368 	.word	0x20000368
 80009e0:	40014000 	.word	0x40014000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fa:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0320 	and.w	r3, r3, #32
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a2a      	ldr	r2, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0xf4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a48:	f000 fda2 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	21a2      	movs	r1, #162	; 0xa2
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fd9c 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2118      	movs	r1, #24
 8000a5c:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000a5e:	f000 fd97 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4818      	ldr	r0, [pc, #96]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a7a:	f000 fc07 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xf8>)
 8000a92:	f000 fbfb 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000a96:	23a2      	movs	r3, #162	; 0xa2
 8000a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 fbec 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8000ab4:	2318      	movs	r3, #24
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_GPIO_Init+0xfc>)
 8000acc:	f000 fbde 	bl	800128c <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48001400 	.word	0x48001400
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <HAL_TIM_Encoder_MspInit+0x138>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12a      	bne.n	8000bb0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b43      	ldr	r3, [pc, #268]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b6e:	623b      	str	r3, [r7, #32]
 8000b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b40      	ldr	r3, [pc, #256]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fb6f 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bae:	e05b      	b.n	8000c68 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a30      	ldr	r2, [pc, #192]	; (8000c78 <HAL_TIM_Encoder_MspInit+0x140>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d129      	bne.n	8000c0e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 8000bea:	2350      	movs	r3, #80	; 0x50
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 fb40 	bl	800128c <HAL_GPIO_Init>
}
 8000c0c:	e02c      	b.n	8000c68 <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_TIM_Encoder_MspInit+0x144>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d127      	bne.n	8000c68 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6593      	str	r3, [r2, #88]	; 0x58
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c36:	f043 0302 	orr.w	r3, r3, #2
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 8000c48:	23c0      	movs	r3, #192	; 0xc0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <HAL_TIM_Encoder_MspInit+0x148>)
 8000c64:	f000 fb12 	bl	800128c <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	; 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40012c00 	.word	0x40012c00
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40000400 	.word	0x40000400
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	48000400 	.word	0x48000400

08000c84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d10c      	bne.n	8000cb0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000cae:	e022      	b.n	8000cf6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_TIM_PWM_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000cc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
}
 8000cd2:	e010      	b.n	8000cf6 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_TIM_PWM_MspInit+0x88>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_TIM_PWM_MspInit+0x80>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
}
 8000cf6:	bf00      	nop
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40013400 	.word	0x40013400
 8000d0c:	40014000 	.word	0x40014000

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_TIM_Base_MspInit+0x38>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10b      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d11d      	bne.n	8000dae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a49      	ldr	r2, [pc, #292]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f000 fa70 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000dac:	e071      	b.n	8000e92 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <HAL_TIM_MspPostInit+0x150>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d14a      	bne.n	8000e4e <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a37      	ldr	r2, [pc, #220]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	4a31      	ldr	r2, [pc, #196]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <HAL_TIM_MspPostInit+0x154>)
 8000e04:	f000 fa42 	bl	800128c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8000e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f000 fa30 	bl	800128c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_TIM_MspPostInit+0x154>)
 8000e48:	f000 fa20 	bl	800128c <HAL_GPIO_Init>
}
 8000e4c:	e021      	b.n	8000e92 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <HAL_TIM_MspPostInit+0x158>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d11c      	bne.n	8000e92 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_TIM_MspPostInit+0x14c>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 8000e70:	230c      	movs	r3, #12
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000e80:	2309      	movs	r3, #9
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 f9fd 	bl	800128c <HAL_GPIO_Init>
}
 8000e92:	bf00      	nop
 8000e94:	3730      	adds	r7, #48	; 0x30
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40013400 	.word	0x40013400
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	40014000 	.word	0x40014000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 f89a 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USB_LP_IRQHandler+0x10>)
 8000f06:	f000 fc7c 	bl	8001802 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000107c 	.word	0x2000107c

08000f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f008 fbf5 	bl	8009754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6a:	f7ff f9cb 	bl	8000304 <main>

08000f6e <LoopForever>:

LoopForever:
    b LoopForever
 8000f6e:	e7fe      	b.n	8000f6e <LoopForever>
  ldr   r0, =_estack
 8000f70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000f7c:	08009840 	.word	0x08009840
  ldr r2, =_sbss
 8000f80:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000f84:	20001590 	.word	0x20001590

08000f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC1_2_IRQHandler>

08000f8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 f939 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f80e 	bl	8000fbc <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	e001      	b.n	8000fb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fac:	f7ff fda0 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]

}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_InitTick+0x68>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d022      	beq.n	8001016 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_InitTick+0x6c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_InitTick+0x68>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f944 	bl	8001272 <HAL_SYSTICK_Config>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10f      	bne.n	8001010 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	d809      	bhi.n	800100a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffe:	f000 f910 	bl	8001222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_InitTick+0x70>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e007      	b.n	800101a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e004      	b.n	800101a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e001      	b.n	800101a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000008 	.word	0x20000008
 8001028:	20000000 	.word	0x20000000
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4413      	add	r3, r2
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <HAL_IncTick+0x1c>)
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	200003d4 	.word	0x200003d4
 8001050:	20000008 	.word	0x20000008

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200003d4 	.word	0x200003d4

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff40 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff90 	bl	8001160 <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5f 	bl	800110c <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff33 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa4 	bl	80011c8 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800129a:	e15a      	b.n	8001552 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 814c 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 80a6 	beq.w	800154c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6613      	str	r3, [r2, #96]	; 0x60
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_GPIO_Init+0x2e4>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001418:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001442:	d01f      	beq.n	8001484 <HAL_GPIO_Init+0x1f8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4c      	ldr	r2, [pc, #304]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d019      	beq.n	8001480 <HAL_GPIO_Init+0x1f4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4b      	ldr	r2, [pc, #300]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d013      	beq.n	800147c <HAL_GPIO_Init+0x1f0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a49      	ldr	r2, [pc, #292]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1e8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a48      	ldr	r2, [pc, #288]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146c:	2305      	movs	r3, #5
 800146e:	e00a      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001470:	2306      	movs	r3, #6
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001474:	2304      	movs	r3, #4
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001478:	2303      	movs	r3, #3
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1fa>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_GPIO_Init+0x300>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_GPIO_Init+0x300>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_GPIO_Init+0x300>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f2:	4a26      	ldr	r2, [pc, #152]	; (800158c <HAL_GPIO_Init+0x300>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_GPIO_Init+0x300>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_GPIO_Init+0x300>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_GPIO_Init+0x300>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_GPIO_Init+0x300>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f ae9d 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	48001000 	.word	0x48001000
 8001588:	48001400 	.word	0x48001400
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43d9      	mvns	r1, r3
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	400b      	ands	r3, r1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af06      	add	r7, sp, #24
 80015fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0d7      	b.n	80017b6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f007 fd94 	bl	8009148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fc80 	bl	8004f32 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e04c      	b.n	80016d2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3301      	adds	r3, #1
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	b298      	uxth	r0, r3
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	440b      	add	r3, r1
 8001674:	3336      	adds	r3, #54	; 0x36
 8001676:	4602      	mov	r2, r0
 8001678:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3303      	adds	r3, #3
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3338      	adds	r3, #56	; 0x38
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	333c      	adds	r3, #60	; 0x3c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3340      	adds	r3, #64	; 0x40
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3301      	adds	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3ad      	bcc.n	8001638 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e044      	b.n	800176c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3b5      	bcc.n	80016e2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	687e      	ldr	r6, [r7, #4]
 800177e:	466d      	mov	r5, sp
 8001780:	f106 0410 	add.w	r4, r6, #16
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	602b      	str	r3, [r5, #0]
 800178c:	1d33      	adds	r3, r6, #4
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f003 fbe9 	bl	8004f68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 fc29 	bl	8003006 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_Start+0x16>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e012      	b.n	80017fa <HAL_PCD_Start+0x3c>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fb8f 	bl	8004f04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 fda8 	bl	8007340 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fdad 	bl	800736e <USB_ReadInterrupts>
 8001814:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fb26 	bl	8001e72 <PCD_EP_ISR_Handler>

    return;
 8001826:	e110      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d013      	beq.n	800185a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183a:	b29a      	uxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001844:	b292      	uxth	r2, r2
 8001846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f007 fd0d 	bl	800926a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f8fc 	bl	8001a50 <HAL_PCD_SetAddress>

    return;
 8001858:	e0f7      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800186c:	b29a      	uxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001876:	b292      	uxth	r2, r2
 8001878:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800187c:	e0e5      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00c      	beq.n	80018a2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800189a:	b292      	uxth	r2, r2
 800189c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018a0:	e0d3      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d034      	beq.n	8001916 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0204 	bic.w	r2, r2, #4
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0208 	bic.w	r2, r2, #8
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f007 feaf 	bl	8009654 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f007 fcf0 	bl	80092dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800190e:	b292      	uxth	r2, r2
 8001910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001914:	e099      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191c:	2b00      	cmp	r3, #0
 800191e:	d027      	beq.n	8001970 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001928:	b29a      	uxth	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0208 	orr.w	r2, r2, #8
 8001932:	b292      	uxth	r2, r2
 8001934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001940:	b29a      	uxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194a:	b292      	uxth	r2, r2
 800194c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0204 	orr.w	r2, r2, #4
 8001962:	b292      	uxth	r2, r2
 8001964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f007 fc9d 	bl	80092a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800196e:	e06c      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d040      	beq.n	80019fc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198c:	b292      	uxth	r2, r2
 800198e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d12b      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0204 	orr.w	r2, r2, #4
 80019ae:	b292      	uxth	r2, r2
 80019b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0208 	orr.w	r2, r2, #8
 80019c6:	b292      	uxth	r2, r2
 80019c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019dc:	b29b      	uxth	r3, r3
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019ea:	2101      	movs	r1, #1
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f007 fe31 	bl	8009654 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80019f2:	e02a      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f007 fc57 	bl	80092a8 <HAL_PCD_SuspendCallback>
    return;
 80019fa:	e026      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00f      	beq.n	8001a26 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f007 fc15 	bl	800924e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a24:	e011      	b.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a48:	bf00      	nop
  }
}
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_PCD_SetAddress+0x1a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e013      	b.n	8001a92 <HAL_PCD_SetAddress+0x42>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 fc48 	bl	8007318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	4608      	mov	r0, r1
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	70fb      	strb	r3, [r7, #3]
 8001aac:	460b      	mov	r3, r1
 8001aae:	803b      	strh	r3, [r7, #0]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da0e      	bge.n	8001ade <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	705a      	strb	r2, [r3, #1]
 8001adc:	e00e      	b.n	8001afc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 0207 	and.w	r2, r3, #7
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b08:	883a      	ldrh	r2, [r7, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	78ba      	ldrb	r2, [r7, #2]
 8001b12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b26:	78bb      	ldrb	r3, [r7, #2]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d102      	bne.n	8001b32 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_PCD_EP_Open+0xa6>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e00e      	b.n	8001b5e <HAL_PCD_EP_Open+0xc4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fa2c 	bl	8004fac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0e      	bge.n	8001b98 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	705a      	strb	r2, [r3, #1]
 8001b96:	e00e      	b.n	8001bb6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_EP_Close+0x6a>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e00e      	b.n	8001bee <HAL_PCD_EP_Close+0x88>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fd78 	bl	80056d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	f003 0207 	and.w	r2, r3, #7
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2200      	movs	r2, #0
 8001c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 ff2b 	bl	8005aae <USB_EPStartXfer>
 8001c58:	e005      	b.n	8001c66 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 ff24 	bl	8005aae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 0207 	and.w	r2, r3, #7
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6979      	ldr	r1, [r7, #20]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fed0 	bl	8005aae <USB_EPStartXfer>
 8001d0e:	e005      	b.n	8001d1c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fec9 	bl	8005aae <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 0207 	and.w	r2, r3, #7
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d901      	bls.n	8001d44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e03e      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da0e      	bge.n	8001d6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
 8001d68:	e00c      	b.n	8001d84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_EP_SetStall+0x7e>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e00e      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0x9c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 f9b1 	bl	800711a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 020f 	and.w	r2, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d901      	bls.n	8001de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e040      	b.n	8001e6a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da0e      	bge.n	8001e0e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
 8001e0c:	e00e      	b.n	8001e2c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_PCD_EP_ClrStall+0x82>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e00e      	b.n	8001e6a <HAL_PCD_EP_ClrStall+0xa0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 f9ae 	bl	80071bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b096      	sub	sp, #88	; 0x58
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e7a:	e39c      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001e96:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 815e 	bne.w	800215c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d150      	bne.n	8001f4e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	81fb      	strh	r3, [r7, #14]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3328      	adds	r3, #40	; 0x28
 8001ed4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	441a      	add	r2, r3
 8001f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f007 f983 	bl	800921a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 834a 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x744>
 8001f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 8345 	bne.w	80025b6 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f4c:	e333      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d032      	beq.n	8001fd2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f92:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f005 fa33 	bl	8007412 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fb8:	4013      	ands	r3, r2
 8001fba:	823b      	strh	r3, [r7, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	8a3a      	ldrh	r2, [r7, #16]
 8001fc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f007 f8f8 	bl	80091c0 <HAL_PCD_SetupStageCallback>
 8001fd0:	e2f1      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fd2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f280 82ed 	bge.w	80025b6 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fe8:	4013      	ands	r3, r2
 8001fea:	83fb      	strh	r3, [r7, #30]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	8bfa      	ldrh	r2, [r7, #30]
 8001ff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	4413      	add	r3, r2
 8002014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800201e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002020:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <PCD_EP_ISR_Handler+0x1ec>
 800202a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002042:	b29b      	uxth	r3, r3
 8002044:	f005 f9e5 	bl	8007412 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	441a      	add	r2, r3
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002056:	2100      	movs	r1, #0
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f007 f8c3 	bl	80091e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 82a3 	bne.w	80025b6 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b3e      	cmp	r3, #62	; 0x3e
 8002096:	d918      	bls.n	80020ca <PCD_EP_ISR_Handler+0x258>
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	647b      	str	r3, [r7, #68]	; 0x44
 80020a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <PCD_EP_ISR_Handler+0x240>
 80020ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ae:	3b01      	subs	r3, #1
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	801a      	strh	r2, [r3, #0]
 80020c8:	e029      	b.n	800211e <PCD_EP_ISR_Handler+0x2ac>
 80020ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d112      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x286>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020dc:	b29a      	uxth	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e012      	b.n	800211e <PCD_EP_ISR_Handler+0x2ac>
 80020f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <PCD_EP_ISR_Handler+0x2a0>
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	3301      	adds	r3, #1
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
 8002112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002114:	b29b      	uxth	r3, r3
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	b29a      	uxth	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	827b      	strh	r3, [r7, #18]
 8002130:	8a7b      	ldrh	r3, [r7, #18]
 8002132:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002136:	827b      	strh	r3, [r7, #18]
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800213e:	827b      	strh	r3, [r7, #18]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	8a7b      	ldrh	r3, [r7, #18]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
 800215a:	e22c      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002170:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002174:	2b00      	cmp	r3, #0
 8002176:	f280 80f6 	bge.w	8002366 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002190:	4013      	ands	r3, r2
 8002192:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80021a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ac:	b292      	uxth	r2, r2
 80021ae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021b0:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c8:	7b1b      	ldrb	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d123      	bne.n	8002216 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80021f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 808e 	beq.w	800231c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220a:	88da      	ldrh	r2, [r3, #6]
 800220c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002210:	f005 f8ff 	bl	8007412 <USB_ReadPMA>
 8002214:	e082      	b.n	800231c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	78db      	ldrb	r3, [r3, #3]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d10a      	bne.n	8002234 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800221e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002222:	461a      	mov	r2, r3
 8002224:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9d3 	bl	80025d2 <HAL_PCD_EP_DB_Receive>
 800222c:	4603      	mov	r3, r0
 800222e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002232:	e073      	b.n	800231c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	441a      	add	r2, r3
 8002260:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800226c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d022      	beq.n	80022d8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80022ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d02c      	beq.n	800231c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c8:	6959      	ldr	r1, [r3, #20]
 80022ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022cc:	891a      	ldrh	r2, [r3, #8]
 80022ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022d2:	f005 f89e 	bl	8007412 <USB_ReadPMA>
 80022d6:	e021      	b.n	800231c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002300:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230e:	6959      	ldr	r1, [r3, #20]
 8002310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002312:	895a      	ldrh	r2, [r3, #10]
 8002314:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002318:	f005 f87b 	bl	8007412 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002324:	441a      	add	r2, r3
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800232a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002332:	441a      	add	r2, r3
 8002334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002336:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <PCD_EP_ISR_Handler+0x4da>
 8002340:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d206      	bcs.n	800235a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800234c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 ff46 	bl	80091e4 <HAL_PCD_DataOutStageCallback>
 8002358:	e005      	b.n	8002366 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fba4 	bl	8005aae <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002366:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8121 	beq.w	80025b6 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002374:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800239e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	441a      	add	r2, r3
 80023b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80023b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	78db      	ldrb	r3, [r3, #3]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	f000 80a2 	beq.w	8002512 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80023ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8093 	beq.w	8002504 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d046      	beq.n	8002478 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d126      	bne.n	8002440 <PCD_EP_ISR_Handler+0x5ce>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	4413      	add	r3, r2
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	4413      	add	r3, r2
 8002414:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002424:	b29a      	uxth	r2, r3
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002438:	b29a      	uxth	r2, r3
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e061      	b.n	8002504 <PCD_EP_ISR_Handler+0x692>
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d15d      	bne.n	8002504 <PCD_EP_ISR_Handler+0x692>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	4413      	add	r3, r2
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	00da      	lsls	r2, r3, #3
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	4413      	add	r3, r2
 800246a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	2200      	movs	r2, #0
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e045      	b.n	8002504 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d126      	bne.n	80024d4 <PCD_EP_ISR_Handler+0x662>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249a:	4413      	add	r3, r2
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
 800249e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	00da      	lsls	r2, r3, #3
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	4413      	add	r3, r2
 80024a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	801a      	strh	r2, [r3, #0]
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	e017      	b.n	8002504 <PCD_EP_ISR_Handler+0x692>
 80024d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d113      	bne.n	8002504 <PCD_EP_ISR_Handler+0x692>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ea:	4413      	add	r3, r2
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f6:	4413      	add	r3, r2
 80024f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	2200      	movs	r2, #0
 8002502:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f006 fe85 	bl	800921a <HAL_PCD_DataInStageCallback>
 8002510:	e051      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002512:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d144      	bne.n	80025a8 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4413      	add	r3, r2
 8002538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800254e:	429a      	cmp	r2, r3
 8002550:	d907      	bls.n	8002562 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800255a:	1ad2      	subs	r2, r2, r3
 800255c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800255e:	619a      	str	r2, [r3, #24]
 8002560:	e002      	b.n	8002568 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f006 fe4f 	bl	800921a <HAL_PCD_DataInStageCallback>
 800257c:	e01b      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002586:	441a      	add	r2, r3
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800258c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002594:	441a      	add	r2, r3
 8002596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002598:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fa84 	bl	8005aae <USB_EPStartXfer>
 80025a6:	e006      	b.n	80025b6 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025ac:	461a      	mov	r2, r3
 80025ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f917 	bl	80027e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f6ff ac5a 	blt.w	8001e7c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3758      	adds	r7, #88	; 0x58
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b088      	sub	sp, #32
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	4613      	mov	r3, r2
 80025de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d07c      	beq.n	80026e4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	8b7b      	ldrh	r3, [r7, #26]
 8002616:	429a      	cmp	r2, r3
 8002618:	d306      	bcc.n	8002628 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	8b7b      	ldrh	r3, [r7, #26]
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e002      	b.n	800262e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d123      	bne.n	800267e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002650:	833b      	strh	r3, [r7, #24]
 8002652:	8b3b      	ldrh	r3, [r7, #24]
 8002654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002658:	833b      	strh	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	8b3b      	ldrh	r3, [r7, #24]
 800266a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	b29b      	uxth	r3, r3
 800267c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01f      	beq.n	80026c8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	82fb      	strh	r3, [r7, #22]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	8afb      	ldrh	r3, [r7, #22]
 80026b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026c8:	8b7b      	ldrh	r3, [r7, #26]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8085 	beq.w	80027da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	891a      	ldrh	r2, [r3, #8]
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	f004 fe98 	bl	8007412 <USB_ReadPMA>
 80026e2:	e07a      	b.n	80027da <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002708:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	8b7b      	ldrh	r3, [r7, #26]
 8002710:	429a      	cmp	r2, r3
 8002712:	d306      	bcc.n	8002722 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	8b7b      	ldrh	r3, [r7, #26]
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e002      	b.n	8002728 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d123      	bne.n	8002778 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	83fb      	strh	r3, [r7, #30]
 800274c:	8bfb      	ldrh	r3, [r7, #30]
 800274e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002752:	83fb      	strh	r3, [r7, #30]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	8bfb      	ldrh	r3, [r7, #30]
 8002764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002774:	b29b      	uxth	r3, r3
 8002776:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11f      	bne.n	80027c2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	83bb      	strh	r3, [r7, #28]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8bbb      	ldrh	r3, [r7, #28]
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027c2:	8b7b      	ldrh	r3, [r7, #26]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6959      	ldr	r1, [r3, #20]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	895a      	ldrh	r2, [r3, #10]
 80027d4:	8b7b      	ldrh	r3, [r7, #26]
 80027d6:	f004 fe1c 	bl	8007412 <USB_ReadPMA>
    }
  }

  return count;
 80027da:	8b7b      	ldrh	r3, [r7, #26]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0a2      	sub	sp, #136	; 0x88
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 81c5 	beq.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800282e:	429a      	cmp	r2, r3
 8002830:	d907      	bls.n	8002842 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	e002      	b.n	8002848 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 80b9 	bne.w	80029c4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	785b      	ldrb	r3, [r3, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d126      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002868:	b29b      	uxth	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	4413      	add	r3, r2
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	00da      	lsls	r2, r3, #3
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	4413      	add	r3, r2
 800287c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800288c:	b29a      	uxth	r2, r3
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	801a      	strh	r2, [r3, #0]
 80028a6:	e01a      	b.n	80028de <HAL_PCD_EP_DB_Transmit+0xfa>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d116      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0xfa>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	4413      	add	r3, r2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d126      	bne.n	800293a <HAL_PCD_EP_DB_Transmit+0x156>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800291e:	b29a      	uxth	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	801a      	strh	r2, [r3, #0]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	801a      	strh	r2, [r3, #0]
 8002938:	e017      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x186>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d113      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x186>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	4413      	add	r3, r2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	00da      	lsls	r2, r3, #3
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	4413      	add	r3, r2
 800295e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2200      	movs	r2, #0
 8002968:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f006 fc52 	bl	800921a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 82d2 	beq.w	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	827b      	strh	r3, [r7, #18]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	441a      	add	r2, r3
 80029ac:	8a7b      	ldrh	r3, [r7, #18]
 80029ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029be:	b29b      	uxth	r3, r3
 80029c0:	8013      	strh	r3, [r2, #0]
 80029c2:	e2b0      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d021      	beq.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80029fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f040 8284 	bne.w	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a26:	441a      	add	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a34:	441a      	add	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d309      	bcc.n	8002a5a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	6a1a      	ldr	r2, [r3, #32]
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	1ad2      	subs	r2, r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	621a      	str	r2, [r3, #32]
 8002a58:	e015      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002a62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a70:	e009      	b.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d155      	bne.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x356>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	4413      	add	r3, r2
 8002aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	00da      	lsls	r2, r3, #3
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	4413      	add	r3, r2
 8002ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8002aba:	d916      	bls.n	8002aea <HAL_PCD_EP_DB_Transmit+0x306>
 8002abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	029b      	lsls	r3, r3, #10
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e043      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x332>
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	e02d      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x348>
 8002b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b28:	3301      	adds	r3, #1
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	029b      	lsls	r3, r3, #10
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	e01b      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d117      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	643b      	str	r3, [r7, #64]	; 0x40
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	4413      	add	r3, r2
 8002b58:	643b      	str	r3, [r7, #64]	; 0x40
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6959      	ldr	r1, [r3, #20]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	891a      	ldrh	r2, [r3, #8]
 8002b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f004 fc04 	bl	800738e <USB_WritePMA>
 8002b86:	e1ce      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d307      	bcc.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	619a      	str	r2, [r3, #24]
 8002bca:	e002      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 80c4 	bne.w	8002d64 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d126      	bne.n	8002c32 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bf8:	4413      	add	r3, r2
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	00da      	lsls	r2, r3, #3
 8002c02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c04:	4413      	add	r3, r2
 8002c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	e01a      	b.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d116      	bne.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x484>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c4e:	4413      	add	r3, r2
 8002c50:	673b      	str	r3, [r7, #112]	; 0x70
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	00da      	lsls	r2, r3, #3
 8002c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	2200      	movs	r2, #0
 8002c66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d12f      	bne.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c8e:	4413      	add	r3, r2
 8002c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	00da      	lsls	r2, r3, #3
 8002c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cba:	801a      	strh	r2, [r3, #0]
 8002cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e017      	b.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x522>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d113      	bne.n	8002d06 <HAL_PCD_EP_DB_Transmit+0x522>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cec:	4413      	add	r3, r2
 8002cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	00da      	lsls	r2, r3, #3
 8002cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	2200      	movs	r2, #0
 8002d04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f006 fa84 	bl	800921a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8104 	bne.w	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	8013      	strh	r3, [r2, #0]
 8002d62:	e0e0      	b.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 80b4 	bne.w	8002f26 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd4:	441a      	add	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6a1a      	ldr	r2, [r3, #32]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d309      	bcc.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df2:	1ad2      	subs	r2, r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	621a      	str	r2, [r3, #32]
 8002df8:	e015      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e06:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e10:	e009      	b.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d155      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e48:	4413      	add	r3, r2
 8002e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00da      	lsls	r2, r3, #3
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	4413      	add	r3, r2
 8002e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e60:	d916      	bls.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	677b      	str	r3, [r7, #116]	; 0x74
 8002e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x694>
 8002e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e74:	3b01      	subs	r3, #1
 8002e76:	677b      	str	r3, [r7, #116]	; 0x74
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	e040      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d112      	bne.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	e02a      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebe:	085b      	lsrs	r3, r3, #1
 8002ec0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	3301      	adds	r3, #1
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002edc:	801a      	strh	r2, [r3, #0]
 8002ede:	e018      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d114      	bne.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef6:	4413      	add	r3, r2
 8002ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00da      	lsls	r2, r3, #3
 8002f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f02:	4413      	add	r3, r2
 8002f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f10:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6959      	ldr	r1, [r3, #20]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	895a      	ldrh	r2, [r3, #10]
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f004 fa34 	bl	800738e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f40:	823b      	strh	r3, [r7, #16]
 8002f42:	8a3b      	ldrh	r3, [r7, #16]
 8002f44:	f083 0310 	eor.w	r3, r3, #16
 8002f48:	823b      	strh	r3, [r7, #16]
 8002f4a:	8a3b      	ldrh	r3, [r7, #16]
 8002f4c:	f083 0320 	eor.w	r3, r3, #32
 8002f50:	823b      	strh	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	8a3b      	ldrh	r3, [r7, #16]
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3788      	adds	r7, #136	; 0x88
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e009      	b.n	8002fca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fb6:	897a      	ldrh	r2, [r7, #10]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	80da      	strh	r2, [r3, #6]
 8002fde:	e00b      	b.n	8002ff8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800302a:	b29b      	uxth	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800303e:	b29b      	uxth	r3, r3
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d141      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800306a:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d131      	bne.n	80030dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307e:	4a46      	ldr	r2, [pc, #280]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003090:	4a41      	ldr	r2, [pc, #260]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003096:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003098:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2232      	movs	r2, #50	; 0x32
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	4a3f      	ldr	r2, [pc, #252]	; (80031a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	3301      	adds	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ae:	e002      	b.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d102      	bne.n	80030ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f2      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	d158      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e057      	b.n	800318c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e2:	4a2d      	ldr	r2, [pc, #180]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030ec:	e04d      	b.n	800318a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d141      	bne.n	800317a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003102:	d131      	bne.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310a:	4a23      	ldr	r2, [pc, #140]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2232      	movs	r2, #50	; 0x32
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313a:	e002      	b.n	8003142 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3b01      	subs	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d102      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f2      	bne.n	800313c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d112      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e011      	b.n	800318c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003178:	e007      	b.n	800318a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003188:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40007000 	.word	0x40007000
 800319c:	20000000 	.word	0x20000000
 80031a0:	431bde83 	.word	0x431bde83

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e306      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d075      	beq.n	80032ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4b97      	ldr	r3, [pc, #604]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031cc:	4b94      	ldr	r3, [pc, #592]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3e>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_OscConfig+0x44>
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d10b      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	4b8d      	ldr	r3, [pc, #564]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05b      	beq.n	80032ac <HAL_RCC_OscConfig+0x108>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d157      	bne.n	80032ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e2e1      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x74>
 800320a:	4b85      	ldr	r3, [pc, #532]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a84      	ldr	r2, [pc, #528]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01d      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x98>
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7b      	ldr	r2, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0xb0>
 800323c:	4b78      	ldr	r3, [pc, #480]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a77      	ldr	r2, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd fefa 	bl	8001054 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fd fef6 	bl	8001054 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e2a6      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0xc0>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fd fee6 	bl	8001054 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd fee2 	bl	8001054 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e292      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329e:	4b60      	ldr	r3, [pc, #384]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0xe8>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ba:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0x136>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_OscConfig+0x13c>
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d11f      	bne.n	8003320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e0:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x154>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e265      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	4946      	ldr	r1, [pc, #280]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800330c:	4b45      	ldr	r3, [pc, #276]	; (8003424 <HAL_RCC_OscConfig+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fe53 	bl	8000fbc <HAL_InitTick>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d043      	beq.n	80033a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e251      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d023      	beq.n	8003370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003328:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fe8e 	bl	8001054 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7fd fe8a 	bl	8001054 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e23a      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800334e:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	492d      	ldr	r1, [pc, #180]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
 800336e:	e01a      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fd fe6a 	bl	8001054 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fd fe66 	bl	8001054 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e216      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1e0>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d041      	beq.n	8003436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fd fe43 	bl	8001054 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fd fe3f 	bl	8001054 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1ef      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <HAL_RCC_OscConfig+0x22e>
 80033f2:	e020      	b.n	8003436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fd fe26 	bl	8001054 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340a:	e00d      	b.n	8003428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340c:	f7fd fe22 	bl	8001054 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d906      	bls.n	8003428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1d2      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000
 8003424:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003428:	4b8c      	ldr	r3, [pc, #560]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ea      	bne.n	800340c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80a6 	beq.w	8003590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_RCC_OscConfig+0x2b4>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x2b6>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b7f      	ldr	r3, [pc, #508]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	4a7e      	ldr	r2, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
 800346a:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	4b79      	ldr	r3, [pc, #484]	; (8003660 <HAL_RCC_OscConfig+0x4bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x4bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a75      	ldr	r2, [pc, #468]	; (8003660 <HAL_RCC_OscConfig+0x4bc>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fd fddf 	bl	8001054 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fd fddb 	bl	8001054 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e18b      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCC_OscConfig+0x4bc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d108      	bne.n	80034d2 <HAL_RCC_OscConfig+0x32e>
 80034c0:	4b66      	ldr	r3, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	4a65      	ldr	r2, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d0:	e024      	b.n	800351c <HAL_RCC_OscConfig+0x378>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d110      	bne.n	80034fc <HAL_RCC_OscConfig+0x358>
 80034da:	4b60      	ldr	r3, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e0:	4a5e      	ldr	r2, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ea:	4b5c      	ldr	r3, [pc, #368]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	4a5a      	ldr	r2, [pc, #360]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fa:	e00f      	b.n	800351c <HAL_RCC_OscConfig+0x378>
 80034fc:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350c:	4b53      	ldr	r3, [pc, #332]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a52      	ldr	r2, [pc, #328]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d016      	beq.n	8003552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fd96 	bl	8001054 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352a:	e00a      	b.n	8003542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352c:	f7fd fd92 	bl	8001054 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	f241 3288 	movw	r2, #5000	; 0x1388
 800353a:	4293      	cmp	r3, r2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e140      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	4b46      	ldr	r3, [pc, #280]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ed      	beq.n	800352c <HAL_RCC_OscConfig+0x388>
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fd fd7f 	bl	8001054 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd fd7b 	bl	8001054 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e129      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1ed      	bne.n	800355a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03c      	beq.n	8003616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01c      	beq.n	80035de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035aa:	4a2c      	ldr	r2, [pc, #176]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fd fd4e 	bl	8001054 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035bc:	f7fd fd4a 	bl	8001054 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0fa      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80035d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ef      	beq.n	80035bc <HAL_RCC_OscConfig+0x418>
 80035dc:	e01b      	b.n	8003616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035de:	4b1f      	ldr	r3, [pc, #124]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80035e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e4:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fd fd31 	bl	8001054 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f6:	f7fd fd2d 	bl	8001054 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0dd      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ef      	bne.n	80035f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80d1 	beq.w	80037c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b0c      	cmp	r3, #12
 800362a:	f000 808b 	beq.w	8003744 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d15e      	bne.n	80036f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_RCC_OscConfig+0x4b8>)
 800363c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fd fd07 	bl	8001054 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003648:	e00c      	b.n	8003664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd fd03 	bl	8001054 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d905      	bls.n	8003664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0b3      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ec      	bne.n	800364a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b56      	ldr	r3, [pc, #344]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x62c>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6a11      	ldr	r1, [r2, #32]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003680:	3a01      	subs	r2, #1
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800368a:	0212      	lsls	r2, r2, #8
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003692:	0852      	lsrs	r2, r2, #1
 8003694:	3a01      	subs	r2, #1
 8003696:	0552      	lsls	r2, r2, #21
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800369e:	0852      	lsrs	r2, r2, #1
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0652      	lsls	r2, r2, #25
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036aa:	06d2      	lsls	r2, r2, #27
 80036ac:	430a      	orrs	r2, r1
 80036ae:	4947      	ldr	r1, [pc, #284]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b45      	ldr	r3, [pc, #276]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a44      	ldr	r2, [pc, #272]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c0:	4b42      	ldr	r3, [pc, #264]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a41      	ldr	r2, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fd fcc2 	bl	8001054 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fcbe 	bl	8001054 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e06e      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x530>
 80036f2:	e066      	b.n	80037c2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a31      	ldr	r2, [pc, #196]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a2e      	ldr	r2, [pc, #184]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003712:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fc9a 	bl	8001054 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fd fc96 	bl	8001054 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e046      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x580>
 8003742:	e03e      	b.n	80037c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e039      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <HAL_RCC_OscConfig+0x628>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	429a      	cmp	r2, r3
 8003762:	d12c      	bne.n	80037be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	3b01      	subs	r3, #1
 8003770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d123      	bne.n	80037be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d11b      	bne.n	80037be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d113      	bne.n	80037be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d109      	bne.n	80037be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	3b01      	subs	r3, #1
 80037b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3720      	adds	r7, #32
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	019f800c 	.word	0x019f800c

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e11e      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b91      	ldr	r3, [pc, #580]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b8e      	ldr	r3, [pc, #568]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	498c      	ldr	r1, [pc, #560]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b8a      	ldr	r3, [pc, #552]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e106      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d073      	beq.n	8003910 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d129      	bne.n	8003884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003830:	4b81      	ldr	r3, [pc, #516]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0f4      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003840:	f000 f966 	bl	8003b10 <RCC_GetSysClockFreqFromPLLSource>
 8003844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a7c      	ldr	r2, [pc, #496]	; (8003a3c <HAL_RCC_ClockConfig+0x268>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d93f      	bls.n	80038ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800384e:	4b7a      	ldr	r3, [pc, #488]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	d033      	beq.n	80038ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800386a:	2b00      	cmp	r3, #0
 800386c:	d12f      	bne.n	80038ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800386e:	4b72      	ldr	r3, [pc, #456]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	4a70      	ldr	r2, [pc, #448]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e024      	b.n	80038ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d107      	bne.n	800389c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0c6      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0be      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038ac:	f000 f8ce 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4a61      	ldr	r2, [pc, #388]	; (8003a3c <HAL_RCC_ClockConfig+0x268>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d909      	bls.n	80038ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ba:	4b5f      	ldr	r3, [pc, #380]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c2:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ce:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4957      	ldr	r1, [pc, #348]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e0:	f7fd fbb8 	bl	8001054 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e8:	f7fd fbb4 	bl	8001054 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e095      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 020c 	and.w	r2, r3, #12
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	429a      	cmp	r2, r3
 800390e:	d1eb      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800392e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003932:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003948:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800394a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800394e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4936      	ldr	r1, [pc, #216]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
 8003962:	e008      	b.n	8003976 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d105      	bne.n	8003976 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003974:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003976:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d21d      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 020f 	bic.w	r2, r3, #15
 800398c:	4929      	ldr	r1, [pc, #164]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003994:	f7fd fb5e 	bl	8001054 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd fb5a 	bl	8001054 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e03b      	b.n	8003a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1ed      	bne.n	800399c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4917      	ldr	r1, [pc, #92]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	490f      	ldr	r1, [pc, #60]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039fe:	f000 f825 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	490c      	ldr	r1, [pc, #48]	; (8003a40 <HAL_RCC_ClockConfig+0x26c>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_RCC_ClockConfig+0x270>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd faca 	bl	8000fbc <HAL_InitTick>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	04c4b400 	.word	0x04c4b400
 8003a40:	08009828 	.word	0x08009828
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	e047      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d102      	bne.n	8003a76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	e03e      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b0c      	cmp	r3, #12
 8003a80:	d136      	bne.n	8003af0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	3301      	adds	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d10c      	bne.n	8003aba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	0a12      	lsrs	r2, r2, #8
 8003aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
      break;
 8003ab8:	e00c      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac4:	68d2      	ldr	r2, [r2, #12]
 8003ac6:	0a12      	lsrs	r2, r2, #8
 8003ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]
      break;
 8003ad2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	0e5b      	lsrs	r3, r3, #25
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e001      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003af4:	693b      	ldr	r3, [r7, #16]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d10c      	bne.n	8003b4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b3e:	68d2      	ldr	r2, [r2, #12]
 8003b40:	0a12      	lsrs	r2, r2, #8
 8003b42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	617b      	str	r3, [r7, #20]
    break;
 8003b4c:	e00c      	b.n	8003b68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	0a12      	lsrs	r2, r2, #8
 8003b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    break;
 8003b66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b82:	687b      	ldr	r3, [r7, #4]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40021000 	.word	0x40021000
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	00f42400 	.word	0x00f42400

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8098 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	4a3f      	ldr	r2, [pc, #252]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf2:	f7fd fa2f 	bl	8001054 <HAL_GetTick>
 8003bf6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fd fa2b 	bl	8001054 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d902      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ef      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d159      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d019      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3c:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f9eb 	bl	8001054 <HAL_GetTick>
 8003c7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c80:	e00b      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd f9e7 	bl	8001054 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	74fb      	strb	r3, [r7, #19]
            break;
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ec      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc6:	7cfb      	ldrb	r3, [r7, #19]
 8003cc8:	74bb      	strb	r3, [r7, #18]
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4ba6      	ldr	r3, [pc, #664]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4aa5      	ldr	r2, [pc, #660]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf6:	4ba0      	ldr	r3, [pc, #640]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 0203 	bic.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	499c      	ldr	r1, [pc, #624]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d18:	4b97      	ldr	r3, [pc, #604]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4994      	ldr	r1, [pc, #592]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	498b      	ldr	r1, [pc, #556]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d5c:	4b86      	ldr	r3, [pc, #536]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	4983      	ldr	r1, [pc, #524]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d7e:	4b7e      	ldr	r3, [pc, #504]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	497a      	ldr	r1, [pc, #488]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da0:	4b75      	ldr	r3, [pc, #468]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	4972      	ldr	r1, [pc, #456]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4969      	ldr	r1, [pc, #420]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003de4:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	4961      	ldr	r1, [pc, #388]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	4958      	ldr	r1, [pc, #352]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	4950      	ldr	r1, [pc, #320]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d105      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a4a      	ldr	r2, [pc, #296]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d015      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4942      	ldr	r1, [pc, #264]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e80:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4934      	ldr	r1, [pc, #208]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	4926      	ldr	r1, [pc, #152]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a20      	ldr	r2, [pc, #128]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4918      	ldr	r1, [pc, #96]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e049      	b.n	8004022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fc feb4 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fad4 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e049      	b.n	80040d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fc fe17 	bl	8000c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 fa7d 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e097      	b.n	800421c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fc fd19 	bl	8000b38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2202      	movs	r2, #2
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f000 fa1b 	bl	8004568 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	4313      	orrs	r3, r2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004178:	f023 030c 	bic.w	r3, r3, #12
 800417c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	4313      	orrs	r3, r2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	011a      	lsls	r2, r3, #4
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	031b      	lsls	r3, r3, #12
 80041a8:	4313      	orrs	r3, r2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	4313      	orrs	r3, r2
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004234:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800423c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004244:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d110      	bne.n	8004276 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800425a:	7b7b      	ldrb	r3, [r7, #13]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d001      	beq.n	8004264 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e069      	b.n	8004338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	e031      	b.n	80042da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d110      	bne.n	800429e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800427c:	7bbb      	ldrb	r3, [r7, #14]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004282:	7b3b      	ldrb	r3, [r7, #12]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e055      	b.n	8004338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800429c:	e01d      	b.n	80042da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d108      	bne.n	80042b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042a4:	7bbb      	ldrb	r3, [r7, #14]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042aa:	7b7b      	ldrb	r3, [r7, #13]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042b0:	7b3b      	ldrb	r3, [r7, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e03e      	b.n	8004338 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2202      	movs	r2, #2
 80042c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_TIM_Encoder_Start+0xc4>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d008      	beq.n	80042f8 <HAL_TIM_Encoder_Start+0xd4>
 80042e6:	e00f      	b.n	8004308 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fcbf 	bl	8004c74 <TIM_CCxChannelCmd>
      break;
 80042f6:	e016      	b.n	8004326 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	2104      	movs	r1, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fcb7 	bl	8004c74 <TIM_CCxChannelCmd>
      break;
 8004306:	e00e      	b.n	8004326 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fcaf 	bl	8004c74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	2104      	movs	r1, #4
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fca8 	bl	8004c74 <TIM_CCxChannelCmd>
      break;
 8004324:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0201 	orr.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ff      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b14      	cmp	r3, #20
 800436a:	f200 80f0 	bhi.w	800454e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043c9 	.word	0x080043c9
 8004378:	0800454f 	.word	0x0800454f
 800437c:	0800454f 	.word	0x0800454f
 8004380:	0800454f 	.word	0x0800454f
 8004384:	08004409 	.word	0x08004409
 8004388:	0800454f 	.word	0x0800454f
 800438c:	0800454f 	.word	0x0800454f
 8004390:	0800454f 	.word	0x0800454f
 8004394:	0800444b 	.word	0x0800444b
 8004398:	0800454f 	.word	0x0800454f
 800439c:	0800454f 	.word	0x0800454f
 80043a0:	0800454f 	.word	0x0800454f
 80043a4:	0800448b 	.word	0x0800448b
 80043a8:	0800454f 	.word	0x0800454f
 80043ac:	0800454f 	.word	0x0800454f
 80043b0:	0800454f 	.word	0x0800454f
 80043b4:	080044cd 	.word	0x080044cd
 80043b8:	0800454f 	.word	0x0800454f
 80043bc:	0800454f 	.word	0x0800454f
 80043c0:	0800454f 	.word	0x0800454f
 80043c4:	0800450d 	.word	0x0800450d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f95a 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	619a      	str	r2, [r3, #24]
      break;
 8004406:	e0a5      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f9ca 	bl	80047a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	619a      	str	r2, [r3, #24]
      break;
 8004448:	e084      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa33 	bl	80048bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0208 	orr.w	r2, r2, #8
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0204 	bic.w	r2, r2, #4
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	61da      	str	r2, [r3, #28]
      break;
 8004488:	e064      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa9b 	bl	80049cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	61da      	str	r2, [r3, #28]
      break;
 80044ca:	e043      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb04 	bl	8004ae0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0204 	bic.w	r2, r2, #4
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800450a:	e023      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fb48 	bl	8004ba8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004526:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800454c:	e002      	b.n	8004554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
      break;
 8004552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800455c:	7dfb      	ldrb	r3, [r7, #23]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a3c      	ldr	r2, [pc, #240]	; (800466c <TIM_Base_SetConfig+0x104>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a39      	ldr	r2, [pc, #228]	; (8004670 <TIM_Base_SetConfig+0x108>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a38      	ldr	r2, [pc, #224]	; (8004674 <TIM_Base_SetConfig+0x10c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a37      	ldr	r2, [pc, #220]	; (8004678 <TIM_Base_SetConfig+0x110>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2d      	ldr	r2, [pc, #180]	; (800466c <TIM_Base_SetConfig+0x104>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01b      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d017      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <TIM_Base_SetConfig+0x108>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a29      	ldr	r2, [pc, #164]	; (8004674 <TIM_Base_SetConfig+0x10c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00f      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a28      	ldr	r2, [pc, #160]	; (8004678 <TIM_Base_SetConfig+0x110>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a27      	ldr	r2, [pc, #156]	; (800467c <TIM_Base_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <TIM_Base_SetConfig+0x118>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <TIM_Base_SetConfig+0x11c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <TIM_Base_SetConfig+0x104>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00f      	beq.n	8004650 <TIM_Base_SetConfig+0xe8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a11      	ldr	r2, [pc, #68]	; (8004678 <TIM_Base_SetConfig+0x110>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0xe8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a10      	ldr	r2, [pc, #64]	; (800467c <TIM_Base_SetConfig+0x114>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0xe8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <TIM_Base_SetConfig+0x118>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0xe8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <TIM_Base_SetConfig+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	615a      	str	r2, [r3, #20]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 0302 	bic.w	r3, r3, #2
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <TIM_OC1_SetConfig+0x10c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_OC1_SetConfig+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <TIM_OC1_SetConfig+0x110>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_OC1_SetConfig+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2a      	ldr	r2, [pc, #168]	; (800479c <TIM_OC1_SetConfig+0x114>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_OC1_SetConfig+0x80>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <TIM_OC1_SetConfig+0x118>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC1_SetConfig+0x80>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <TIM_OC1_SetConfig+0x11c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10c      	bne.n	8004722 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0308 	bic.w	r3, r3, #8
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <TIM_OC1_SetConfig+0x10c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_OC1_SetConfig+0xc2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <TIM_OC1_SetConfig+0x110>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_OC1_SetConfig+0xc2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <TIM_OC1_SetConfig+0x114>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_OC1_SetConfig+0xc2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <TIM_OC1_SetConfig+0x118>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_OC1_SetConfig+0xc2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <TIM_OC1_SetConfig+0x11c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d111      	bne.n	800476e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f023 0210 	bic.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a28      	ldr	r2, [pc, #160]	; (80048a8 <TIM_OC2_SetConfig+0x100>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_OC2_SetConfig+0x6c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a27      	ldr	r2, [pc, #156]	; (80048ac <TIM_OC2_SetConfig+0x104>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10d      	bne.n	8004830 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800482e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <TIM_OC2_SetConfig+0x100>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00f      	beq.n	8004858 <TIM_OC2_SetConfig+0xb0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <TIM_OC2_SetConfig+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_OC2_SetConfig+0xb0>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <TIM_OC2_SetConfig+0x108>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_OC2_SetConfig+0xb0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <TIM_OC2_SetConfig+0x10c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_OC2_SetConfig+0xb0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <TIM_OC2_SetConfig+0x110>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d113      	bne.n	8004880 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40013400 	.word	0x40013400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <TIM_OC3_SetConfig+0xfc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_OC3_SetConfig+0x6a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a26      	ldr	r2, [pc, #152]	; (80049bc <TIM_OC3_SetConfig+0x100>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10d      	bne.n	8004942 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800492c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <TIM_OC3_SetConfig+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_OC3_SetConfig+0xae>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC3_SetConfig+0x100>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC3_SetConfig+0xae>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC3_SetConfig+0x104>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC3_SetConfig+0xae>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC3_SetConfig+0x108>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC3_SetConfig+0xae>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_OC3_SetConfig+0x10c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	031b      	lsls	r3, r3, #12
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a28      	ldr	r2, [pc, #160]	; (8004acc <TIM_OC4_SetConfig+0x100>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC4_SetConfig+0x6c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <TIM_OC4_SetConfig+0x104>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10d      	bne.n	8004a54 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <TIM_OC4_SetConfig+0x100>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00f      	beq.n	8004a7c <TIM_OC4_SetConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ad0 <TIM_OC4_SetConfig+0x104>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_OC4_SetConfig+0xb0>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <TIM_OC4_SetConfig+0x108>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <TIM_OC4_SetConfig+0xb0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ad8 <TIM_OC4_SetConfig+0x10c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_OC4_SetConfig+0xb0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a19      	ldr	r2, [pc, #100]	; (8004adc <TIM_OC4_SetConfig+0x110>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d113      	bne.n	8004aa4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	019b      	lsls	r3, r3, #6
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40013400 	.word	0x40013400
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40014400 	.word	0x40014400
 8004adc:	40014800 	.word	0x40014800

08004ae0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <TIM_OC5_SetConfig+0xb4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_OC5_SetConfig+0x7a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <TIM_OC5_SetConfig+0xb8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_OC5_SetConfig+0x7a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <TIM_OC5_SetConfig+0xbc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_OC5_SetConfig+0x7a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <TIM_OC5_SetConfig+0xc0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_OC5_SetConfig+0x7a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <TIM_OC5_SetConfig+0xc4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d109      	bne.n	8004b6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40013400 	.word	0x40013400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800

08004ba8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	051b      	lsls	r3, r3, #20
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <TIM_OC6_SetConfig+0xb8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00f      	beq.n	8004c24 <TIM_OC6_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <TIM_OC6_SetConfig+0xbc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <TIM_OC6_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <TIM_OC6_SetConfig+0xc0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <TIM_OC6_SetConfig+0x7c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <TIM_OC6_SetConfig+0xc4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_OC6_SetConfig+0x7c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <TIM_OC6_SetConfig+0xc8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d109      	bne.n	8004c38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40012c00 	.word	0x40012c00
 8004c64:	40013400 	.word	0x40013400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2201      	movs	r2, #1
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6a1a      	ldr	r2, [r3, #32]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	401a      	ands	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e065      	b.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2c      	ldr	r2, [pc, #176]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1b      	ldr	r2, [pc, #108]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10c      	bne.n	8004d92 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40014000 	.word	0x40014000

08004dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e087      	b.n	8004ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a27      	ldr	r2, [pc, #156]	; (8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d106      	bne.n	8004e7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d126      	bne.n	8004ede <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	051b      	lsls	r3, r3, #20
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d106      	bne.n	8004ede <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40013400 	.word	0x40013400

08004f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f14:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004f18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f3a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004f3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f68:	b084      	sub	sp, #16
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	f107 0014 	add.w	r0, r7, #20
 8004f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	b004      	add	sp, #16
 8004fa8:	4770      	bx	lr
	...

08004fac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b09d      	sub	sp, #116	; 0x74
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d81f      	bhi.n	800501e <USB_ActivateEndpoint+0x72>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <USB_ActivateEndpoint+0x38>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005027 	.word	0x08005027
 8004ff0:	08005003 	.word	0x08005003
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ff4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005000:	e012      	b.n	8005028 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005002:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005006:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800500a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800500e:	e00b      	b.n	8005028 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005010:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005018:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800501c:	e004      	b.n	8005028 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005024:	e000      	b.n	8005028 <USB_ActivateEndpoint+0x7c>
      break;
 8005026:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	b21b      	sxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	b21a      	sxth	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b21b      	sxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b21b      	sxth	r3, r3
 800506e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	7b1b      	ldrb	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 8149 	bne.w	8005330 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8084 	beq.w	80051b0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4413      	add	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	00da      	lsls	r2, r3, #3
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	88db      	ldrh	r3, [r3, #6]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	827b      	strh	r3, [r7, #18]
 80050ea:	8a7b      	ldrh	r3, [r7, #18]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <USB_ActivateEndpoint+0x180>
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	823b      	strh	r3, [r7, #16]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	8a3b      	ldrh	r3, [r7, #16]
 8005118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	78db      	ldrb	r3, [r3, #3]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d020      	beq.n	8005176 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514a:	81bb      	strh	r3, [r7, #12]
 800514c:	89bb      	ldrh	r3, [r7, #12]
 800514e:	f083 0320 	eor.w	r3, r3, #32
 8005152:	81bb      	strh	r3, [r7, #12]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	89bb      	ldrh	r3, [r7, #12]
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
 8005174:	e2a6      	b.n	80056c4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518c:	81fb      	strh	r3, [r7, #14]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
 80051ae:	e289      	b.n	80056c4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	633b      	str	r3, [r7, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	4413      	add	r3, r2
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00da      	lsls	r2, r3, #3
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	88db      	ldrh	r3, [r3, #6]
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	4413      	add	r3, r2
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	00da      	lsls	r2, r3, #3
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	4413      	add	r3, r2
 8005202:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b3e      	cmp	r3, #62	; 0x3e
 800520e:	d918      	bls.n	8005242 <USB_ActivateEndpoint+0x296>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	66bb      	str	r3, [r7, #104]	; 0x68
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <USB_ActivateEndpoint+0x27e>
 8005224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005226:	3b01      	subs	r3, #1
 8005228:	66bb      	str	r3, [r7, #104]	; 0x68
 800522a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522c:	b29b      	uxth	r3, r3
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e029      	b.n	8005296 <USB_ActivateEndpoint+0x2ea>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d112      	bne.n	8005270 <USB_ActivateEndpoint+0x2c4>
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005254:	b29a      	uxth	r2, r3
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005268:	b29a      	uxth	r2, r3
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e012      	b.n	8005296 <USB_ActivateEndpoint+0x2ea>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	66bb      	str	r3, [r7, #104]	; 0x68
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <USB_ActivateEndpoint+0x2de>
 8005284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005286:	3301      	adds	r3, #1
 8005288:	66bb      	str	r3, [r7, #104]	; 0x68
 800528a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800528c:	b29b      	uxth	r3, r3
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	b29a      	uxth	r2, r3
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80052a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01b      	beq.n	80052e6 <USB_ActivateEndpoint+0x33a>
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	843b      	strh	r3, [r7, #32]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	8c3b      	ldrh	r3, [r7, #32]
 80052d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	83fb      	strh	r3, [r7, #30]
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005304:	83fb      	strh	r3, [r7, #30]
 8005306:	8bfb      	ldrh	r3, [r7, #30]
 8005308:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800530c:	83fb      	strh	r3, [r7, #30]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	441a      	add	r2, r3
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532a:	b29b      	uxth	r3, r3
 800532c:	8013      	strh	r3, [r2, #0]
 800532e:	e1c9      	b.n	80056c4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	78db      	ldrb	r3, [r3, #3]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11e      	bne.n	8005376 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005368:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800536c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005370:	b29b      	uxth	r3, r3
 8005372:	8013      	strh	r3, [r2, #0]
 8005374:	e01d      	b.n	80053b2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c2:	4413      	add	r3, r2
 80053c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	00da      	lsls	r2, r3, #3
 80053cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	891b      	ldrh	r3, [r3, #8]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	b29b      	uxth	r3, r3
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	657b      	str	r3, [r7, #84]	; 0x54
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053f6:	4413      	add	r3, r2
 80053f8:	657b      	str	r3, [r7, #84]	; 0x54
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	00da      	lsls	r2, r3, #3
 8005400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005402:	4413      	add	r3, r2
 8005404:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	895b      	ldrh	r3, [r3, #10]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005418:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 8093 	bne.w	800554a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <USB_ActivateEndpoint+0x4cc>
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <USB_ActivateEndpoint+0x51c>
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	873b      	strh	r3, [r7, #56]	; 0x38
 80054e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054e2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80054e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054ea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005526:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	441a      	add	r2, r3
 8005532:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005544:	b29b      	uxth	r3, r3
 8005546:	8013      	strh	r3, [r2, #0]
 8005548:	e0bc      	b.n	80056c4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800555a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800555e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01d      	beq.n	80055a2 <USB_ActivateEndpoint+0x5f6>
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01d      	beq.n	80055fa <USB_ActivateEndpoint+0x64e>
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	78db      	ldrb	r3, [r3, #3]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d024      	beq.n	800564c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800561c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005620:	f083 0320 	eor.w	r3, r3, #32
 8005624:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
 800564a:	e01d      	b.n	8005688 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005684:	b29b      	uxth	r3, r3
 8005686:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80056c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3774      	adds	r7, #116	; 0x74
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b08d      	sub	sp, #52	; 0x34
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808e 	bne.w	8005804 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d044      	beq.n	800577a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	81bb      	strh	r3, [r7, #12]
 80056fe:	89bb      	ldrh	r3, [r7, #12]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01b      	beq.n	8005740 <USB_DeactivateEndpoint+0x6c>
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	817b      	strh	r3, [r7, #10]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	441a      	add	r2, r3
 800572a:	897b      	ldrh	r3, [r7, #10]
 800572c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	813b      	strh	r3, [r7, #8]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005774:	b29b      	uxth	r3, r3
 8005776:	8013      	strh	r3, [r2, #0]
 8005778:	e192      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	827b      	strh	r3, [r7, #18]
 8005788:	8a7b      	ldrh	r3, [r7, #18]
 800578a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01b      	beq.n	80057ca <USB_DeactivateEndpoint+0xf6>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a8:	823b      	strh	r3, [r7, #16]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	8a3b      	ldrh	r3, [r7, #16]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	81fb      	strh	r3, [r7, #14]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	89fb      	ldrh	r3, [r7, #14]
 80057ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e14d      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 80a5 	bne.w	8005958 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	843b      	strh	r3, [r7, #32]
 800581c:	8c3b      	ldrh	r3, [r7, #32]
 800581e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01b      	beq.n	800585e <USB_DeactivateEndpoint+0x18a>
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583c:	83fb      	strh	r3, [r7, #30]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8bfb      	ldrh	r3, [r7, #30]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	83bb      	strh	r3, [r7, #28]
 800586c:	8bbb      	ldrh	r3, [r7, #28]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01b      	beq.n	80058ae <USB_DeactivateEndpoint+0x1da>
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	837b      	strh	r3, [r7, #26]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8b7b      	ldrh	r3, [r7, #26]
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c4:	833b      	strh	r3, [r7, #24]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8b3b      	ldrh	r3, [r7, #24]
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	82fb      	strh	r3, [r7, #22]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005934:	82bb      	strh	r3, [r7, #20]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	8abb      	ldrh	r3, [r7, #20]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e0a3      	b.n	8005aa0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <USB_DeactivateEndpoint+0x2d4>
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80059b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <USB_DeactivateEndpoint+0x324>
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3734      	adds	r7, #52	; 0x34
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b0c2      	sub	sp, #264	; 0x108
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abc:	6018      	str	r0, [r3, #0]
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 867b 	bne.w	80067d0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d908      	bls.n	8005b08 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b06:	e007      	b.n	8005b18 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	7b1b      	ldrb	r3, [r3, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d13a      	bne.n	8005b9e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6959      	ldr	r1, [r3, #20]
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	88da      	ldrh	r2, [r3, #6]
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	f001 fc1d 	bl	800738e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	00da      	lsls	r2, r3, #3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	f000 bde3 	b.w	8006764 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	f040 843a 	bne.w	8006424 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	f240 83b7 	bls.w	800633c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 81b3 	beq.w	8005fd6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d16d      	bne.n	8005d68 <USB_EPStartXfer+0x2ba>
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	4413      	add	r3, r2
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	00da      	lsls	r2, r3, #3
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cce:	d91c      	bls.n	8005d0a <USB_EPStartXfer+0x25c>
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <USB_EPStartXfer+0x242>
 8005ce6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cea:	3b01      	subs	r3, #1
 8005cec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005cf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	029b      	lsls	r3, r3, #10
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e053      	b.n	8005db2 <USB_EPStartXfer+0x304>
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d112      	bne.n	8005d38 <USB_EPStartXfer+0x28a>
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e03c      	b.n	8005db2 <USB_EPStartXfer+0x304>
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USB_EPStartXfer+0x2aa>
 8005d4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d52:	3301      	adds	r3, #1
 8005d54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	e024      	b.n	8005db2 <USB_EPStartXfer+0x304>
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d11c      	bne.n	8005db2 <USB_EPStartXfer+0x304>
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	4413      	add	r3, r2
 8005d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	00da      	lsls	r2, r3, #3
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	895b      	ldrh	r3, [r3, #10]
 8005dbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6959      	ldr	r1, [r3, #20]
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005dd8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ddc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005de0:	6800      	ldr	r0, [r0, #0]
 8005de2:	f001 fad4 	bl	800738e <USB_WritePMA>
            ep->xfer_buff += len;
 8005de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	441a      	add	r2, r3
 8005df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6a1a      	ldr	r2, [r3, #32]
 8005e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d90f      	bls.n	8005e40 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	621a      	str	r2, [r3, #32]
 8005e3e:	e00e      	b.n	8005e5e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d16d      	bne.n	8005f4a <USB_EPStartXfer+0x49c>
 8005e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	00da      	lsls	r2, r3, #3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eae:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb0:	d91c      	bls.n	8005eec <USB_EPStartXfer+0x43e>
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <USB_EPStartXfer+0x424>
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e059      	b.n	8005fa0 <USB_EPStartXfer+0x4f2>
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d112      	bne.n	8005f1a <USB_EPStartXfer+0x46c>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e042      	b.n	8005fa0 <USB_EPStartXfer+0x4f2>
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <USB_EPStartXfer+0x48c>
 8005f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f34:	3301      	adds	r3, #1
 8005f36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e02a      	b.n	8005fa0 <USB_EPStartXfer+0x4f2>
 8005f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d122      	bne.n	8005fa0 <USB_EPStartXfer+0x4f2>
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	623b      	str	r3, [r7, #32]
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	00da      	lsls	r2, r3, #3
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	891b      	ldrh	r3, [r3, #8]
 8005fac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fc6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fce:	6800      	ldr	r0, [r0, #0]
 8005fd0:	f001 f9dd 	bl	800738e <USB_WritePMA>
 8005fd4:	e3c6      	b.n	8006764 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d16d      	bne.n	80060c2 <USB_EPStartXfer+0x614>
 8005fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006006:	4413      	add	r3, r2
 8006008:	64bb      	str	r3, [r7, #72]	; 0x48
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00da      	lsls	r2, r3, #3
 8006018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601a:	4413      	add	r3, r2
 800601c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006020:	647b      	str	r3, [r7, #68]	; 0x44
 8006022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006026:	2b3e      	cmp	r3, #62	; 0x3e
 8006028:	d91c      	bls.n	8006064 <USB_EPStartXfer+0x5b6>
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <USB_EPStartXfer+0x59c>
 8006040:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006044:	3b01      	subs	r3, #1
 8006046:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800604a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800604e:	b29b      	uxth	r3, r3
 8006050:	029b      	lsls	r3, r3, #10
 8006052:	b29b      	uxth	r3, r3
 8006054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605c:	b29a      	uxth	r2, r3
 800605e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e059      	b.n	8006118 <USB_EPStartXfer+0x66a>
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	2b00      	cmp	r3, #0
 800606a:	d112      	bne.n	8006092 <USB_EPStartXfer+0x5e4>
 800606c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006076:	b29a      	uxth	r2, r3
 8006078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	e042      	b.n	8006118 <USB_EPStartXfer+0x66a>
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800609c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <USB_EPStartXfer+0x604>
 80060a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ac:	3301      	adds	r3, #1
 80060ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80060b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e02a      	b.n	8006118 <USB_EPStartXfer+0x66a>
 80060c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d122      	bne.n	8006118 <USB_EPStartXfer+0x66a>
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	653b      	str	r3, [r7, #80]	; 0x50
 80060de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	4413      	add	r3, r2
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
 80060f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	00da      	lsls	r2, r3, #3
 8006104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006106:	4413      	add	r3, r2
 8006108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800610c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006112:	b29a      	uxth	r2, r3
 8006114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006116:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	891b      	ldrh	r3, [r3, #8]
 8006124:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6959      	ldr	r1, [r3, #20]
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	b29b      	uxth	r3, r3
 800613a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800613e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006142:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006146:	6800      	ldr	r0, [r0, #0]
 8006148:	f001 f921 	bl	800738e <USB_WritePMA>
            ep->xfer_buff += len;
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695a      	ldr	r2, [r3, #20]
 8006158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615c:	441a      	add	r2, r3
 800615e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d90f      	bls.n	80061a6 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	621a      	str	r2, [r3, #32]
 80061a4:	e00e      	b.n	80061c4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 80061a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2200      	movs	r2, #0
 80061c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	643b      	str	r3, [r7, #64]	; 0x40
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d16d      	bne.n	80062bc <USB_EPStartXfer+0x80e>
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	4413      	add	r3, r2
 8006202:	63bb      	str	r3, [r7, #56]	; 0x38
 8006204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	00da      	lsls	r2, r3, #3
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	4413      	add	r3, r2
 8006216:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006220:	2b3e      	cmp	r3, #62	; 0x3e
 8006222:	d91c      	bls.n	800625e <USB_EPStartXfer+0x7b0>
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <USB_EPStartXfer+0x796>
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	3b01      	subs	r3, #1
 8006240:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	b29b      	uxth	r3, r3
 800624a:	029b      	lsls	r3, r3, #10
 800624c:	b29b      	uxth	r3, r3
 800624e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006256:	b29a      	uxth	r2, r3
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e053      	b.n	8006306 <USB_EPStartXfer+0x858>
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	2b00      	cmp	r3, #0
 8006264:	d112      	bne.n	800628c <USB_EPStartXfer+0x7de>
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006270:	b29a      	uxth	r2, r3
 8006272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006284:	b29a      	uxth	r2, r3
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e03c      	b.n	8006306 <USB_EPStartXfer+0x858>
 800628c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <USB_EPStartXfer+0x7fe>
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a6:	3301      	adds	r3, #1
 80062a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	029b      	lsls	r3, r3, #10
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e024      	b.n	8006306 <USB_EPStartXfer+0x858>
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d11c      	bne.n	8006306 <USB_EPStartXfer+0x858>
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e0:	4413      	add	r3, r2
 80062e2:	643b      	str	r3, [r7, #64]	; 0x40
 80062e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	00da      	lsls	r2, r3, #3
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	b29a      	uxth	r2, r3
 8006302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	895b      	ldrh	r3, [r3, #10]
 8006312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6959      	ldr	r1, [r3, #20]
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006326:	b29b      	uxth	r3, r3
 8006328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800632c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006334:	6800      	ldr	r0, [r0, #0]
 8006336:	f001 f82a 	bl	800738e <USB_WritePMA>
 800633a:	e213      	b.n	8006764 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c8:	4413      	add	r3, r2
 80063ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	00da      	lsls	r2, r3, #3
 80063da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063dc:	4413      	add	r3, r2
 80063de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	891b      	ldrh	r3, [r3, #8]
 80063fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	b29b      	uxth	r3, r3
 8006410:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006414:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006418:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f000 ffb6 	bl	800738e <USB_WritePMA>
 8006422:	e19f      	b.n	8006764 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80bc 	beq.w	80065e2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	673b      	str	r3, [r7, #112]	; 0x70
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d16d      	bne.n	8006562 <USB_EPStartXfer+0xab4>
 8006486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	66bb      	str	r3, [r7, #104]	; 0x68
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064a6:	4413      	add	r3, r2
 80064a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	00da      	lsls	r2, r3, #3
 80064b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c0:	667b      	str	r3, [r7, #100]	; 0x64
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c6:	2b3e      	cmp	r3, #62	; 0x3e
 80064c8:	d91c      	bls.n	8006504 <USB_EPStartXfer+0xa56>
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d8:	f003 031f 	and.w	r3, r3, #31
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <USB_EPStartXfer+0xa3c>
 80064e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064e4:	3b01      	subs	r3, #1
 80064e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	e053      	b.n	80065ac <USB_EPStartXfer+0xafe>
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006508:	2b00      	cmp	r3, #0
 800650a:	d112      	bne.n	8006532 <USB_EPStartXfer+0xa84>
 800650c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006516:	b29a      	uxth	r2, r3
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652a:	b29a      	uxth	r2, r3
 800652c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652e:	801a      	strh	r2, [r3, #0]
 8006530:	e03c      	b.n	80065ac <USB_EPStartXfer+0xafe>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <USB_EPStartXfer+0xaa4>
 8006548:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800654c:	3301      	adds	r3, #1
 800654e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006556:	b29b      	uxth	r3, r3
 8006558:	029b      	lsls	r3, r3, #10
 800655a:	b29a      	uxth	r2, r3
 800655c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	e024      	b.n	80065ac <USB_EPStartXfer+0xafe>
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d11c      	bne.n	80065ac <USB_EPStartXfer+0xafe>
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006580:	b29b      	uxth	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006586:	4413      	add	r3, r2
 8006588:	673b      	str	r3, [r7, #112]	; 0x70
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	00da      	lsls	r2, r3, #3
 8006598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800659a:	4413      	add	r3, r2
 800659c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80065ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	895b      	ldrh	r3, [r3, #10]
 80065b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6959      	ldr	r1, [r3, #20]
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80065d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80065d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80065da:	6800      	ldr	r0, [r0, #0]
 80065dc:	f000 fed7 	bl	800738e <USB_WritePMA>
 80065e0:	e0c0      	b.n	8006764 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d16d      	bne.n	80066ce <USB_EPStartXfer+0xc20>
 80065f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006612:	4413      	add	r3, r2
 8006614:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	00da      	lsls	r2, r3, #3
 8006624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006626:	4413      	add	r3, r2
 8006628:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800662c:	67bb      	str	r3, [r7, #120]	; 0x78
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006632:	2b3e      	cmp	r3, #62	; 0x3e
 8006634:	d91c      	bls.n	8006670 <USB_EPStartXfer+0xbc2>
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <USB_EPStartXfer+0xba8>
 800664c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006650:	3b01      	subs	r3, #1
 8006652:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800665a:	b29b      	uxth	r3, r3
 800665c:	029b      	lsls	r3, r3, #10
 800665e:	b29b      	uxth	r3, r3
 8006660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006668:	b29a      	uxth	r2, r3
 800666a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e05f      	b.n	8006730 <USB_EPStartXfer+0xc82>
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	2b00      	cmp	r3, #0
 8006676:	d112      	bne.n	800669e <USB_EPStartXfer+0xbf0>
 8006678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006682:	b29a      	uxth	r2, r3
 8006684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e048      	b.n	8006730 <USB_EPStartXfer+0xc82>
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <USB_EPStartXfer+0xc10>
 80066b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066b8:	3301      	adds	r3, #1
 80066ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e030      	b.n	8006730 <USB_EPStartXfer+0xc82>
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d128      	bne.n	8006730 <USB_EPStartXfer+0xc82>
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006702:	4413      	add	r3, r2
 8006704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	00da      	lsls	r2, r3, #3
 8006716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800671a:	4413      	add	r3, r2
 800671c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800672e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	891b      	ldrh	r3, [r3, #8]
 800673c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6959      	ldr	r1, [r3, #20]
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	b29b      	uxth	r3, r3
 8006752:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006756:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800675a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800675e:	6800      	ldr	r0, [r0, #0]
 8006760:	f000 fe15 	bl	800738e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678a:	817b      	strh	r3, [r7, #10]
 800678c:	897b      	ldrh	r3, [r7, #10]
 800678e:	f083 0310 	eor.w	r3, r3, #16
 8006792:	817b      	strh	r3, [r7, #10]
 8006794:	897b      	ldrh	r3, [r7, #10]
 8006796:	f083 0320 	eor.w	r3, r3, #32
 800679a:	817b      	strh	r3, [r7, #10]
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]
 80067cc:	f000 bc9f 	b.w	800710e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	7b1b      	ldrb	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 80ae 	bne.w	800693e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d917      	bls.n	800682e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80067fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800680e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	619a      	str	r2, [r3, #24]
 800682c:	e00e      	b.n	800684c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2200      	movs	r2, #0
 800684a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006870:	4413      	add	r3, r2
 8006872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006888:	4413      	add	r3, r2
 800688a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800688e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	2b3e      	cmp	r3, #62	; 0x3e
 8006898:	d91d      	bls.n	80068d6 <USB_EPStartXfer+0xe28>
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <USB_EPStartXfer+0xe0c>
 80068b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068b4:	3b01      	subs	r3, #1
 80068b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068be:	b29b      	uxth	r3, r3
 80068c0:	029b      	lsls	r3, r3, #10
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e3e1      	b.n	800709a <USB_EPStartXfer+0x15ec>
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d116      	bne.n	800690c <USB_EPStartXfer+0xe5e>
 80068de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e3c6      	b.n	800709a <USB_EPStartXfer+0x15ec>
 800690c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006910:	085b      	lsrs	r3, r3, #1
 8006912:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <USB_EPStartXfer+0xe7e>
 8006922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006926:	3301      	adds	r3, #1
 8006928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800692c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006930:	b29b      	uxth	r3, r3
 8006932:	029b      	lsls	r3, r3, #10
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e3ad      	b.n	800709a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	78db      	ldrb	r3, [r3, #3]
 800694a:	2b02      	cmp	r3, #2
 800694c:	f040 8200 	bne.w	8006d50 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8091 	bne.w	8006a84 <USB_EPStartXfer+0xfd6>
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006974:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006986:	4413      	add	r3, r2
 8006988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800698c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	00da      	lsls	r2, r3, #3
 800699a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800699e:	4413      	add	r3, r2
 80069a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b3e      	cmp	r3, #62	; 0x3e
 80069b6:	d925      	bls.n	8006a04 <USB_EPStartXfer+0xf56>
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <USB_EPStartXfer+0xf3a>
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	3b01      	subs	r3, #1
 80069e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	029b      	lsls	r3, r3, #10
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e074      	b.n	8006aee <USB_EPStartXfer+0x1040>
 8006a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d116      	bne.n	8006a42 <USB_EPStartXfer+0xf94>
 8006a14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3e:	801a      	strh	r2, [r3, #0]
 8006a40:	e055      	b.n	8006aee <USB_EPStartXfer+0x1040>
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <USB_EPStartXfer+0xfc4>
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e034      	b.n	8006aee <USB_EPStartXfer+0x1040>
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d12c      	bne.n	8006aee <USB_EPStartXfer+0x1040>
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ab8:	4413      	add	r3, r2
 8006aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	00da      	lsls	r2, r3, #3
 8006acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 8091 	bne.w	8006c30 <USB_EPStartXfer+0x1182>
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b32:	4413      	add	r3, r2
 8006b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	00da      	lsls	r2, r3, #3
 8006b46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b3e      	cmp	r3, #62	; 0x3e
 8006b62:	d925      	bls.n	8006bb0 <USB_EPStartXfer+0x1102>
 8006b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <USB_EPStartXfer+0x10e6>
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bac:	801a      	strh	r2, [r3, #0]
 8006bae:	e06d      	b.n	8006c8c <USB_EPStartXfer+0x11de>
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <USB_EPStartXfer+0x1140>
 8006bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e04e      	b.n	8006c8c <USB_EPStartXfer+0x11de>
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <USB_EPStartXfer+0x1170>
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	029b      	lsls	r3, r3, #10
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	e02d      	b.n	8006c8c <USB_EPStartXfer+0x11de>
 8006c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d125      	bne.n	8006c8c <USB_EPStartXfer+0x11de>
 8006c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c56:	4413      	add	r3, r2
 8006c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00da      	lsls	r2, r3, #3
 8006c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c8a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 81fe 	beq.w	800709a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <USB_EPStartXfer+0x1228>
 8006cca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10d      	bne.n	8006cf2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 81db 	bne.w	800709a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ce4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 81d4 	bne.w	800709a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	441a      	add	r2, r3
 8006d36:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
 8006d4e:	e1a4      	b.n	800709a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	78db      	ldrb	r3, [r3, #3]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	f040 819a 	bne.w	8007096 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d917      	bls.n	8006dae <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	619a      	str	r2, [r3, #24]
 8006dac:	e00e      	b.n	8006dcc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8006dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d178      	bne.n	8006ece <USB_EPStartXfer+0x1420>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e00:	4413      	add	r3, r2
 8006e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	00da      	lsls	r2, r3, #3
 8006e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e26:	2b3e      	cmp	r3, #62	; 0x3e
 8006e28:	d91d      	bls.n	8006e66 <USB_EPStartXfer+0x13b8>
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <USB_EPStartXfer+0x139c>
 8006e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e44:	3b01      	subs	r3, #1
 8006e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	e064      	b.n	8006f30 <USB_EPStartXfer+0x1482>
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d116      	bne.n	8006e9c <USB_EPStartXfer+0x13ee>
 8006e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e98:	801a      	strh	r2, [r3, #0]
 8006e9a:	e049      	b.n	8006f30 <USB_EPStartXfer+0x1482>
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <USB_EPStartXfer+0x140e>
 8006eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	029b      	lsls	r3, r3, #10
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	e030      	b.n	8006f30 <USB_EPStartXfer+0x1482>
 8006ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d128      	bne.n	8006f30 <USB_EPStartXfer+0x1482>
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f02:	4413      	add	r3, r2
 8006f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	00da      	lsls	r2, r3, #3
 8006f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f2e:	801a      	strh	r2, [r3, #0]
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d178      	bne.n	8007040 <USB_EPStartXfer+0x1592>
 8006f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f72:	4413      	add	r3, r2
 8006f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	00da      	lsls	r2, r3, #3
 8006f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	2b3e      	cmp	r3, #62	; 0x3e
 8006f9a:	d91d      	bls.n	8006fd8 <USB_EPStartXfer+0x152a>
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <USB_EPStartXfer+0x150e>
 8006fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e060      	b.n	800709a <USB_EPStartXfer+0x15ec>
 8006fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d116      	bne.n	800700e <USB_EPStartXfer+0x1560>
 8006fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	e045      	b.n	800709a <USB_EPStartXfer+0x15ec>
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <USB_EPStartXfer+0x1580>
 8007024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007028:	3301      	adds	r3, #1
 800702a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800702e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007032:	b29b      	uxth	r3, r3
 8007034:	029b      	lsls	r3, r3, #10
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e02c      	b.n	800709a <USB_EPStartXfer+0x15ec>
 8007040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d124      	bne.n	800709a <USB_EPStartXfer+0x15ec>
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007066:	4413      	add	r3, r2
 8007068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	00da      	lsls	r2, r3, #3
 800707a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800707e:	4413      	add	r3, r2
 8007080:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e001      	b.n	800709a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e03a      	b.n	8007110 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d020      	beq.n	800716e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007142:	81bb      	strh	r3, [r7, #12]
 8007144:	89bb      	ldrh	r3, [r7, #12]
 8007146:	f083 0310 	eor.w	r3, r3, #16
 800714a:	81bb      	strh	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	89bb      	ldrh	r3, [r7, #12]
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]
 800716c:	e01f      	b.n	80071ae <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007184:	81fb      	strh	r3, [r7, #14]
 8007186:	89fb      	ldrh	r3, [r7, #14]
 8007188:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800718c:	81fb      	strh	r3, [r7, #14]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800719e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	7b1b      	ldrb	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 809d 	bne.w	800730a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d04c      	beq.n	8007272 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	823b      	strh	r3, [r7, #16]
 80071e6:	8a3b      	ldrh	r3, [r7, #16]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <USB_EPClearStall+0x6c>
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007206:	81fb      	strh	r3, [r7, #14]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	78db      	ldrb	r3, [r3, #3]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d06c      	beq.n	800730a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	81bb      	strh	r3, [r7, #12]
 8007248:	89bb      	ldrh	r3, [r7, #12]
 800724a:	f083 0320 	eor.w	r3, r3, #32
 800724e:	81bb      	strh	r3, [r7, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	89bb      	ldrh	r3, [r7, #12]
 800725c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	b29b      	uxth	r3, r3
 800726e:	8013      	strh	r3, [r2, #0]
 8007270:	e04b      	b.n	800730a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	82fb      	strh	r3, [r7, #22]
 8007280:	8afb      	ldrh	r3, [r7, #22]
 8007282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d01b      	beq.n	80072c2 <USB_EPClearStall+0x106>
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	82bb      	strh	r3, [r7, #20]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	441a      	add	r2, r3
 80072ac:	8abb      	ldrh	r3, [r7, #20]
 80072ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072be:	b29b      	uxth	r3, r3
 80072c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d8:	827b      	strh	r3, [r7, #18]
 80072da:	8a7b      	ldrh	r3, [r7, #18]
 80072dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072e0:	827b      	strh	r3, [r7, #18]
 80072e2:	8a7b      	ldrh	r3, [r7, #18]
 80072e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072e8:	827b      	strh	r3, [r7, #18]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	441a      	add	r2, r3
 80072f4:	8a7b      	ldrh	r3, [r7, #18]
 80072f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007306:	b29b      	uxth	r3, r3
 8007308:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2280      	movs	r2, #128	; 0x80
 800732e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800734e:	b29b      	uxth	r3, r3
 8007350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007358:	b29a      	uxth	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800737c:	b29b      	uxth	r3, r3
 800737e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007380:	68fb      	ldr	r3, [r7, #12]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800738e:	b480      	push	{r7}
 8007390:	b08d      	sub	sp, #52	; 0x34
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	4611      	mov	r1, r2
 800739a:	461a      	mov	r2, r3
 800739c:	460b      	mov	r3, r1
 800739e:	80fb      	strh	r3, [r7, #6]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073a4:	88bb      	ldrh	r3, [r7, #4]
 80073a6:	3301      	adds	r3, #1
 80073a8:	085b      	lsrs	r3, r3, #1
 80073aa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c4:	e01b      	b.n	80073fe <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	3301      	adds	r3, #1
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	3302      	adds	r3, #2
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	3301      	adds	r3, #1
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	3b01      	subs	r3, #1
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e0      	bne.n	80073c6 <USB_WritePMA+0x38>
  }
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3734      	adds	r7, #52	; 0x34
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007412:	b480      	push	{r7}
 8007414:	b08b      	sub	sp, #44	; 0x2c
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	4611      	mov	r1, r2
 800741e:	461a      	mov	r2, r3
 8007420:	460b      	mov	r3, r1
 8007422:	80fb      	strh	r3, [r7, #6]
 8007424:	4613      	mov	r3, r2
 8007426:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007428:	88bb      	ldrh	r3, [r7, #4]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	b29b      	uxth	r3, r3
 800742e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007442:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
 8007448:	e018      	b.n	800747c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	3302      	adds	r3, #2
 8007456:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	3301      	adds	r3, #1
 8007464:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	b2da      	uxtb	r2, r3
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	3301      	adds	r3, #1
 8007474:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	3b01      	subs	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007482:	88bb      	ldrh	r3, [r7, #4]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800748e:	6a3b      	ldr	r3, [r7, #32]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	b2da      	uxtb	r2, r3
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	701a      	strb	r2, [r3, #0]
  }
}
 800749e:	bf00      	nop
 80074a0:	372c      	adds	r7, #44	; 0x2c
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074b6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074ba:	f002 f901 	bl	80096c0 <USBD_static_malloc>
 80074be:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d105      	bne.n	80074d2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80074ce:	2302      	movs	r3, #2
 80074d0:	e066      	b.n	80075a0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d119      	bne.n	8007516 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e6:	2202      	movs	r2, #2
 80074e8:	2181      	movs	r1, #129	; 0x81
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f001 ff8d 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074fa:	2202      	movs	r2, #2
 80074fc:	2101      	movs	r1, #1
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f001 ff83 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2210      	movs	r2, #16
 8007510:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007514:	e016      	b.n	8007544 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007516:	2340      	movs	r3, #64	; 0x40
 8007518:	2202      	movs	r2, #2
 800751a:	2181      	movs	r1, #129	; 0x81
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 ff74 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	2202      	movs	r2, #2
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 ff6b 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2210      	movs	r2, #16
 8007540:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007544:	2308      	movs	r3, #8
 8007546:	2203      	movs	r2, #3
 8007548:	2182      	movs	r1, #130	; 0x82
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 ff5d 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	7c1b      	ldrb	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f002 f82f 	bl	80095ea <USBD_LL_PrepareReceive>
 800758c:	e007      	b.n	800759e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	2101      	movs	r1, #1
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 f826 	bl	80095ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075b4:	2181      	movs	r1, #129	; 0x81
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 ff4d 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075c2:	2101      	movs	r1, #1
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 ff46 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075d2:	2182      	movs	r1, #130	; 0x82
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 ff3e 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007604:	4618      	mov	r0, r3
 8007606:	f002 f869 	bl	80096dc <USBD_static_free>
    pdev->pClassData = NULL;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800762c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	e0af      	b.n	80077a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800764c:	2b00      	cmp	r3, #0
 800764e:	d03f      	beq.n	80076d0 <USBD_CDC_Setup+0xb4>
 8007650:	2b20      	cmp	r3, #32
 8007652:	f040 809f 	bne.w	8007794 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	88db      	ldrh	r3, [r3, #6]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d02e      	beq.n	80076bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b25b      	sxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	da16      	bge.n	8007696 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007674:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	88d2      	ldrh	r2, [r2, #6]
 800767a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	2b07      	cmp	r3, #7
 8007682:	bf28      	it	cs
 8007684:	2307      	movcs	r3, #7
 8007686:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	89fa      	ldrh	r2, [r7, #14]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 facf 	bl	8008c32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007694:	e085      	b.n	80077a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	785a      	ldrb	r2, [r3, #1]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80076ac:	6939      	ldr	r1, [r7, #16]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88db      	ldrh	r3, [r3, #6]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fae8 	bl	8008c8a <USBD_CtlPrepareRx>
      break;
 80076ba:	e072      	b.n	80077a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	7850      	ldrb	r0, [r2, #1]
 80076c8:	2200      	movs	r2, #0
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	4798      	blx	r3
      break;
 80076ce:	e068      	b.n	80077a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b0b      	cmp	r3, #11
 80076d6:	d852      	bhi.n	800777e <USBD_CDC_Setup+0x162>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <USBD_CDC_Setup+0xc4>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	08007711 	.word	0x08007711
 80076e4:	0800778d 	.word	0x0800778d
 80076e8:	0800777f 	.word	0x0800777f
 80076ec:	0800777f 	.word	0x0800777f
 80076f0:	0800777f 	.word	0x0800777f
 80076f4:	0800777f 	.word	0x0800777f
 80076f8:	0800777f 	.word	0x0800777f
 80076fc:	0800777f 	.word	0x0800777f
 8007700:	0800777f 	.word	0x0800777f
 8007704:	0800777f 	.word	0x0800777f
 8007708:	0800773b 	.word	0x0800773b
 800770c:	08007765 	.word	0x08007765
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b03      	cmp	r3, #3
 800771a:	d107      	bne.n	800772c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800771c:	f107 030a 	add.w	r3, r7, #10
 8007720:	2202      	movs	r2, #2
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 fa84 	bl	8008c32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800772a:	e032      	b.n	8007792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa0e 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	75fb      	strb	r3, [r7, #23]
          break;
 8007738:	e02b      	b.n	8007792 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b03      	cmp	r3, #3
 8007744:	d107      	bne.n	8007756 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007746:	f107 030d 	add.w	r3, r7, #13
 800774a:	2201      	movs	r2, #1
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fa6f 	bl	8008c32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007754:	e01d      	b.n	8007792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f9f9 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	75fb      	strb	r3, [r7, #23]
          break;
 8007762:	e016      	b.n	8007792 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b03      	cmp	r3, #3
 800776e:	d00f      	beq.n	8007790 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 f9ec 	bl	8008b50 <USBD_CtlError>
            ret = USBD_FAIL;
 8007778:	2303      	movs	r3, #3
 800777a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800777c:	e008      	b.n	8007790 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 f9e5 	bl	8008b50 <USBD_CtlError>
          ret = USBD_FAIL;
 8007786:	2303      	movs	r3, #3
 8007788:	75fb      	strb	r3, [r7, #23]
          break;
 800778a:	e002      	b.n	8007792 <USBD_CDC_Setup+0x176>
          break;
 800778c:	bf00      	nop
 800778e:	e008      	b.n	80077a2 <USBD_CDC_Setup+0x186>
          break;
 8007790:	bf00      	nop
      }
      break;
 8007792:	e006      	b.n	80077a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 f9da 	bl	8008b50 <USBD_CtlError>
      ret = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	75fb      	strb	r3, [r7, #23]
      break;
 80077a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e04f      	b.n	800786e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	3318      	adds	r3, #24
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d029      	beq.n	8007840 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077ec:	78fa      	ldrb	r2, [r7, #3]
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	3318      	adds	r3, #24
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	78f9      	ldrb	r1, [r7, #3]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	460b      	mov	r3, r1
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4403      	add	r3, r0
 800780c:	3338      	adds	r3, #56	; 0x38
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	fbb2 f1f3 	udiv	r1, r2, r3
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	3318      	adds	r3, #24
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007832:	78f9      	ldrb	r1, [r7, #3]
 8007834:	2300      	movs	r3, #0
 8007836:	2200      	movs	r2, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 feb5 	bl	80095a8 <USBD_LL_Transmit>
 800783e:	e015      	b.n	800786c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007888:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	e015      	b.n	80078c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fec5 	bl	800962c <USBD_LL_GetRxDataSize>
 80078a2:	4602      	mov	r2, r0
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078be:	4611      	mov	r1, r2
 80078c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e01b      	b.n	800791e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d015      	beq.n	800791c <USBD_CDC_EP0_RxReady+0x50>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078f6:	2bff      	cmp	r3, #255	; 0xff
 80078f8:	d010      	beq.n	800791c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007908:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007910:	b292      	uxth	r2, r2
 8007912:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	22ff      	movs	r2, #255	; 0xff
 8007918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2243      	movs	r2, #67	; 0x43
 8007934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007936:	4b03      	ldr	r3, [pc, #12]	; (8007944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	20000094 	.word	0x20000094

08007948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2243      	movs	r2, #67	; 0x43
 8007954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000050 	.word	0x20000050

08007968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2243      	movs	r2, #67	; 0x43
 8007974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007976:	4b03      	ldr	r3, [pc, #12]	; (8007984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	200000d8 	.word	0x200000d8

08007988 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	220a      	movs	r2, #10
 8007994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	2000000c 	.word	0x2000000c

080079a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e004      	b.n	80079c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b087      	sub	sp, #28
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	60f8      	str	r0, [r7, #12]
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e008      	b.n	8007a02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e004      	b.n	8007a34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a50:	2301      	movs	r3, #1
 8007a52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e01a      	b.n	8007a98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d114      	bne.n	8007a96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a8a:	2181      	movs	r1, #129	; 0x81
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 fd8b 	bl	80095a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e016      	b.n	8007aec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7c1b      	ldrb	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fd89 	bl	80095ea <USBD_LL_PrepareReceive>
 8007ad8:	e007      	b.n	8007aea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae0:	2340      	movs	r3, #64	; 0x40
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fd80 	bl	80095ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e01f      	b.n	8007b4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	79fa      	ldrb	r2, [r7, #7]
 8007b3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 fbe7 	bl	8009314 <USBD_LL_Init>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e016      	b.n	8007b9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00b      	beq.n	8007b98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f107 020e 	add.w	r2, r7, #14
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
 8007b90:	4602      	mov	r2, r0
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 fc12 	bl	80093d4 <USBD_LL_Start>
 8007bb0:	4603      	mov	r3, r0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	78fa      	ldrb	r2, [r7, #3]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
  }

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ff46 	bl	8008adc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d01a      	beq.n	8007caa <USBD_LL_SetupStage+0x72>
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d822      	bhi.n	8007cbe <USBD_LL_SetupStage+0x86>
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <USBD_LL_SetupStage+0x4a>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d00a      	beq.n	8007c96 <USBD_LL_SetupStage+0x5e>
 8007c80:	e01d      	b.n	8007cbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9ee 	bl	800806c <USBD_StdDevReq>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
      break;
 8007c94:	e020      	b.n	8007cd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa52 	bl	8008148 <USBD_StdItfReq>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca8:	e016      	b.n	8007cd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa91 	bl	80081da <USBD_StdEPReq>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	e00c      	b.n	8007cd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fbe1 	bl	8009494 <USBD_LL_StallEP>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd6:	bf00      	nop
  }

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	460b      	mov	r3, r1
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d138      	bne.n	8007d68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007cfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d14a      	bne.n	8007d9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d913      	bls.n	8007d3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	1ad2      	subs	r2, r2, r3
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf28      	it	cs
 8007d2e:	4613      	movcs	r3, r2
 8007d30:	461a      	mov	r2, r3
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 ffc5 	bl	8008cc4 <USBD_CtlContinueRx>
 8007d3a:	e030      	b.n	8007d9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d10b      	bne.n	8007d60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 ffc0 	bl	8008ce6 <USBD_CtlSendStatus>
 8007d66:	e01a      	b.n	8007d9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d114      	bne.n	8007d9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	7afa      	ldrb	r2, [r7, #11]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	4798      	blx	r3
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	e000      	b.n	8007da0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	460b      	mov	r3, r1
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d16b      	bne.n	8007e94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d156      	bne.n	8007e7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d914      	bls.n	8007e02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	1ad2      	subs	r2, r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 ff3a 	bl	8008c68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007df4:	2300      	movs	r3, #0
 8007df6:	2200      	movs	r2, #0
 8007df8:	2100      	movs	r1, #0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f001 fbf5 	bl	80095ea <USBD_LL_PrepareReceive>
 8007e00:	e03b      	b.n	8007e7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d11c      	bne.n	8007e48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d316      	bcc.n	8007e48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d20f      	bcs.n	8007e48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 ff1b 	bl	8008c68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 fbd2 	bl	80095ea <USBD_LL_PrepareReceive>
 8007e46:	e018      	b.n	8007e7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d10b      	bne.n	8007e6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e6c:	2180      	movs	r1, #128	; 0x80
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f001 fb10 	bl	8009494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 ff49 	bl	8008d0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d122      	bne.n	8007eca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff fe98 	bl	8007bba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e92:	e01a      	b.n	8007eca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d114      	bne.n	8007eca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	7afa      	ldrb	r2, [r7, #11]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	4798      	blx	r3
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	e000      	b.n	8007ecc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e02f      	b.n	8007f68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00f      	beq.n	8007f32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d009      	beq.n	8007f32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6852      	ldr	r2, [r2, #4]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	2200      	movs	r2, #0
 8007f36:	2100      	movs	r1, #0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fa66 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	2200      	movs	r2, #0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fa58 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2240      	movs	r2, #64	; 0x40
 8007f64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d106      	bne.n	8007fde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e012      	b.n	8008028 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b03      	cmp	r3, #3
 800800c:	d10b      	bne.n	8008026 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	3301      	adds	r3, #1
 8008046:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800804e:	8a3b      	ldrh	r3, [r7, #16]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	b21a      	sxth	r2, r3
 8008054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008058:	4313      	orrs	r3, r2
 800805a:	b21b      	sxth	r3, r3
 800805c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800805e:	89fb      	ldrh	r3, [r7, #14]
}
 8008060:	4618      	mov	r0, r3
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d005      	beq.n	8008092 <USBD_StdDevReq+0x26>
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d853      	bhi.n	8008132 <USBD_StdDevReq+0xc6>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <USBD_StdDevReq+0x3a>
 800808e:	2b20      	cmp	r3, #32
 8008090:	d14f      	bne.n	8008132 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
      break;
 80080a4:	e04a      	b.n	800813c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b09      	cmp	r3, #9
 80080ac:	d83b      	bhi.n	8008126 <USBD_StdDevReq+0xba>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBD_StdDevReq+0x48>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	08008109 	.word	0x08008109
 80080b8:	0800811d 	.word	0x0800811d
 80080bc:	08008127 	.word	0x08008127
 80080c0:	08008113 	.word	0x08008113
 80080c4:	08008127 	.word	0x08008127
 80080c8:	080080e7 	.word	0x080080e7
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	08008127 	.word	0x08008127
 80080d4:	080080ff 	.word	0x080080ff
 80080d8:	080080f1 	.word	0x080080f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9de 	bl	80084a0 <USBD_GetDescriptor>
          break;
 80080e4:	e024      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fb6d 	bl	80087c8 <USBD_SetAddress>
          break;
 80080ee:	e01f      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fbac 	bl	8008850 <USBD_SetConfig>
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
          break;
 80080fc:	e018      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fc4b 	bl	800899c <USBD_GetConfig>
          break;
 8008106:	e013      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fc7c 	bl	8008a08 <USBD_GetStatus>
          break;
 8008110:	e00e      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fcab 	bl	8008a70 <USBD_SetFeature>
          break;
 800811a:	e009      	b.n	8008130 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fcba 	bl	8008a98 <USBD_ClrFeature>
          break;
 8008124:	e004      	b.n	8008130 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fd11 	bl	8008b50 <USBD_CtlError>
          break;
 800812e:	bf00      	nop
      }
      break;
 8008130:	e004      	b.n	800813c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fd0b 	bl	8008b50 <USBD_CtlError>
      break;
 800813a:	bf00      	nop
  }

  return ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop

08008148 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d005      	beq.n	800816e <USBD_StdItfReq+0x26>
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d82f      	bhi.n	80081c6 <USBD_StdItfReq+0x7e>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <USBD_StdItfReq+0x26>
 800816a:	2b20      	cmp	r3, #32
 800816c:	d12b      	bne.n	80081c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	2b02      	cmp	r3, #2
 800817a:	d81d      	bhi.n	80081b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	889b      	ldrh	r3, [r3, #4]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b01      	cmp	r3, #1
 8008184:	d813      	bhi.n	80081ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d110      	bne.n	80081c2 <USBD_StdItfReq+0x7a>
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10d      	bne.n	80081c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fd9d 	bl	8008ce6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ac:	e009      	b.n	80081c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fccd 	bl	8008b50 <USBD_CtlError>
          break;
 80081b6:	e004      	b.n	80081c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fcc8 	bl	8008b50 <USBD_CtlError>
          break;
 80081c0:	e000      	b.n	80081c4 <USBD_StdItfReq+0x7c>
          break;
 80081c2:	bf00      	nop
      }
      break;
 80081c4:	e004      	b.n	80081d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fcc1 	bl	8008b50 <USBD_CtlError>
      break;
 80081ce:	bf00      	nop
  }

  return ret;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	889b      	ldrh	r3, [r3, #4]
 80081ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d007      	beq.n	800820a <USBD_StdEPReq+0x30>
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	f200 8145 	bhi.w	800848a <USBD_StdEPReq+0x2b0>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00c      	beq.n	800821e <USBD_StdEPReq+0x44>
 8008204:	2b20      	cmp	r3, #32
 8008206:	f040 8140 	bne.w	800848a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
      break;
 800821c:	e13a      	b.n	8008494 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	785b      	ldrb	r3, [r3, #1]
 8008222:	2b03      	cmp	r3, #3
 8008224:	d007      	beq.n	8008236 <USBD_StdEPReq+0x5c>
 8008226:	2b03      	cmp	r3, #3
 8008228:	f300 8129 	bgt.w	800847e <USBD_StdEPReq+0x2a4>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d07f      	beq.n	8008330 <USBD_StdEPReq+0x156>
 8008230:	2b01      	cmp	r3, #1
 8008232:	d03c      	beq.n	80082ae <USBD_StdEPReq+0xd4>
 8008234:	e123      	b.n	800847e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d002      	beq.n	8008248 <USBD_StdEPReq+0x6e>
 8008242:	2b03      	cmp	r3, #3
 8008244:	d016      	beq.n	8008274 <USBD_StdEPReq+0x9a>
 8008246:	e02c      	b.n	80082a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <USBD_StdEPReq+0x90>
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	d00a      	beq.n	800826a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 f91b 	bl	8009494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 f917 	bl	8009494 <USBD_LL_StallEP>
 8008266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008268:	e020      	b.n	80082ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc6f 	bl	8008b50 <USBD_CtlError>
              break;
 8008272:	e01b      	b.n	80082ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	885b      	ldrh	r3, [r3, #2]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10e      	bne.n	800829a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <USBD_StdEPReq+0xc0>
 8008282:	7bbb      	ldrb	r3, [r7, #14]
 8008284:	2b80      	cmp	r3, #128	; 0x80
 8008286:	d008      	beq.n	800829a <USBD_StdEPReq+0xc0>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	88db      	ldrh	r3, [r3, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 f8fd 	bl	8009494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fd23 	bl	8008ce6 <USBD_CtlSendStatus>

              break;
 80082a0:	e004      	b.n	80082ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc53 	bl	8008b50 <USBD_CtlError>
              break;
 80082aa:	bf00      	nop
          }
          break;
 80082ac:	e0ec      	b.n	8008488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d002      	beq.n	80082c0 <USBD_StdEPReq+0xe6>
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d016      	beq.n	80082ec <USBD_StdEPReq+0x112>
 80082be:	e030      	b.n	8008322 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00d      	beq.n	80082e2 <USBD_StdEPReq+0x108>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d00a      	beq.n	80082e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f8df 	bl	8009494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f8db 	bl	8009494 <USBD_LL_StallEP>
 80082de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082e0:	e025      	b.n	800832e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fc33 	bl	8008b50 <USBD_CtlError>
              break;
 80082ea:	e020      	b.n	800832e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	885b      	ldrh	r3, [r3, #2]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d11b      	bne.n	800832c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f8e5 	bl	80094d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fcec 	bl	8008ce6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	4798      	blx	r3
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008320:	e004      	b.n	800832c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc13 	bl	8008b50 <USBD_CtlError>
              break;
 800832a:	e000      	b.n	800832e <USBD_StdEPReq+0x154>
              break;
 800832c:	bf00      	nop
          }
          break;
 800832e:	e0ab      	b.n	8008488 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d002      	beq.n	8008342 <USBD_StdEPReq+0x168>
 800833c:	2b03      	cmp	r3, #3
 800833e:	d032      	beq.n	80083a6 <USBD_StdEPReq+0x1cc>
 8008340:	e097      	b.n	8008472 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d007      	beq.n	8008358 <USBD_StdEPReq+0x17e>
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d004      	beq.n	8008358 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fbfd 	bl	8008b50 <USBD_CtlError>
                break;
 8008356:	e091      	b.n	800847c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	da0b      	bge.n	8008378 <USBD_StdEPReq+0x19e>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	3310      	adds	r3, #16
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	3304      	adds	r3, #4
 8008376:	e00b      	b.n	8008390 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837e:	4613      	mov	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	3304      	adds	r3, #4
 8008390:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2200      	movs	r2, #0
 8008396:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2202      	movs	r2, #2
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc47 	bl	8008c32 <USBD_CtlSendData>
              break;
 80083a4:	e06a      	b.n	800847c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da11      	bge.n	80083d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	f003 020f 	and.w	r2, r3, #15
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	440b      	add	r3, r1
 80083c0:	3324      	adds	r3, #36	; 0x24
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d117      	bne.n	80083f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbc0 	bl	8008b50 <USBD_CtlError>
                  break;
 80083d0:	e054      	b.n	800847c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fbad 	bl	8008b50 <USBD_CtlError>
                  break;
 80083f6:	e041      	b.n	800847c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	da0b      	bge.n	8008418 <USBD_StdEPReq+0x23e>
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	3310      	adds	r3, #16
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	3304      	adds	r3, #4
 8008416:	e00b      	b.n	8008430 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	3304      	adds	r3, #4
 8008430:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <USBD_StdEPReq+0x264>
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d103      	bne.n	8008446 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e00e      	b.n	8008464 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f860 	bl	8009510 <USBD_LL_IsStallEP>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2201      	movs	r2, #1
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e002      	b.n	8008464 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2200      	movs	r2, #0
 8008462:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fbe1 	bl	8008c32 <USBD_CtlSendData>
              break;
 8008470:	e004      	b.n	800847c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb6b 	bl	8008b50 <USBD_CtlError>
              break;
 800847a:	bf00      	nop
          }
          break;
 800847c:	e004      	b.n	8008488 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fb65 	bl	8008b50 <USBD_CtlError>
          break;
 8008486:	bf00      	nop
      }
      break;
 8008488:	e004      	b.n	8008494 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fb5f 	bl	8008b50 <USBD_CtlError>
      break;
 8008492:	bf00      	nop
  }

  return ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b0e      	cmp	r3, #14
 80084c2:	f200 8152 	bhi.w	800876a <USBD_GetDescriptor+0x2ca>
 80084c6:	a201      	add	r2, pc, #4	; (adr r2, 80084cc <USBD_GetDescriptor+0x2c>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	0800853d 	.word	0x0800853d
 80084d0:	08008555 	.word	0x08008555
 80084d4:	08008595 	.word	0x08008595
 80084d8:	0800876b 	.word	0x0800876b
 80084dc:	0800876b 	.word	0x0800876b
 80084e0:	0800870b 	.word	0x0800870b
 80084e4:	08008737 	.word	0x08008737
 80084e8:	0800876b 	.word	0x0800876b
 80084ec:	0800876b 	.word	0x0800876b
 80084f0:	0800876b 	.word	0x0800876b
 80084f4:	0800876b 	.word	0x0800876b
 80084f8:	0800876b 	.word	0x0800876b
 80084fc:	0800876b 	.word	0x0800876b
 8008500:	0800876b 	.word	0x0800876b
 8008504:	08008509 	.word	0x08008509
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800852a:	e126      	b.n	800877a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb0e 	bl	8008b50 <USBD_CtlError>
        err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
      break;
 800853a:	e11e      	b.n	800877a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
      break;
 8008552:	e112      	b.n	800877a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10d      	bne.n	8008578 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f107 0208 	add.w	r2, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008576:	e100      	b.n	800877a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f107 0208 	add.w	r2, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	2202      	movs	r2, #2
 8008590:	701a      	strb	r2, [r3, #0]
      break;
 8008592:	e0f2      	b.n	800877a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b05      	cmp	r3, #5
 800859c:	f200 80ac 	bhi.w	80086f8 <USBD_GetDescriptor+0x258>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBD_GetDescriptor+0x108>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085c1 	.word	0x080085c1
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	08008629 	.word	0x08008629
 80085b4:	0800865d 	.word	0x0800865d
 80085b8:	08008691 	.word	0x08008691
 80085bc:	080086c5 	.word	0x080086c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	7c12      	ldrb	r2, [r2, #16]
 80085d8:	f107 0108 	add.w	r1, r7, #8
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
 80085e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e2:	e091      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fab2 	bl	8008b50 <USBD_CtlError>
            err++;
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	3301      	adds	r3, #1
 80085f0:	72fb      	strb	r3, [r7, #11]
          break;
 80085f2:	e089      	b.n	8008708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00b      	beq.n	8008618 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	7c12      	ldrb	r2, [r2, #16]
 800860c:	f107 0108 	add.w	r1, r7, #8
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
 8008614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008616:	e077      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fa98 	bl	8008b50 <USBD_CtlError>
            err++;
 8008620:	7afb      	ldrb	r3, [r7, #11]
 8008622:	3301      	adds	r3, #1
 8008624:	72fb      	strb	r3, [r7, #11]
          break;
 8008626:	e06f      	b.n	8008708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864a:	e05d      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa7e 	bl	8008b50 <USBD_CtlError>
            err++;
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	3301      	adds	r3, #1
 8008658:	72fb      	strb	r3, [r7, #11]
          break;
 800865a:	e055      	b.n	8008708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867e:	e043      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa64 	bl	8008b50 <USBD_CtlError>
            err++;
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	3301      	adds	r3, #1
 800868c:	72fb      	strb	r3, [r7, #11]
          break;
 800868e:	e03b      	b.n	8008708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7c12      	ldrb	r2, [r2, #16]
 80086a8:	f107 0108 	add.w	r1, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b2:	e029      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa4a 	bl	8008b50 <USBD_CtlError>
            err++;
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	3301      	adds	r3, #1
 80086c0:	72fb      	strb	r3, [r7, #11]
          break;
 80086c2:	e021      	b.n	8008708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	7c12      	ldrb	r2, [r2, #16]
 80086dc:	f107 0108 	add.w	r1, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e6:	e00f      	b.n	8008708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa30 	bl	8008b50 <USBD_CtlError>
            err++;
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	3301      	adds	r3, #1
 80086f4:	72fb      	strb	r3, [r7, #11]
          break;
 80086f6:	e007      	b.n	8008708 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa28 	bl	8008b50 <USBD_CtlError>
          err++;
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	3301      	adds	r3, #1
 8008704:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008706:	bf00      	nop
      }
      break;
 8008708:	e037      	b.n	800877a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7c1b      	ldrb	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	f107 0208 	add.w	r2, r7, #8
 800871e:	4610      	mov	r0, r2
 8008720:	4798      	blx	r3
 8008722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008724:	e029      	b.n	800877a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa11 	bl	8008b50 <USBD_CtlError>
        err++;
 800872e:	7afb      	ldrb	r3, [r7, #11]
 8008730:	3301      	adds	r3, #1
 8008732:	72fb      	strb	r3, [r7, #11]
      break;
 8008734:	e021      	b.n	800877a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	7c1b      	ldrb	r3, [r3, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10d      	bne.n	800875a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008746:	f107 0208 	add.w	r2, r7, #8
 800874a:	4610      	mov	r0, r2
 800874c:	4798      	blx	r3
 800874e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	2207      	movs	r2, #7
 8008756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008758:	e00f      	b.n	800877a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f9f7 	bl	8008b50 <USBD_CtlError>
        err++;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	3301      	adds	r3, #1
 8008766:	72fb      	strb	r3, [r7, #11]
      break;
 8008768:	e007      	b.n	800877a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9ef 	bl	8008b50 <USBD_CtlError>
      err++;
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	3301      	adds	r3, #1
 8008776:	72fb      	strb	r3, [r7, #11]
      break;
 8008778:	bf00      	nop
  }

  if (err != 0U)
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d11e      	bne.n	80087be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	88db      	ldrh	r3, [r3, #6]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d016      	beq.n	80087b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008788:	893b      	ldrh	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00e      	beq.n	80087ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	88da      	ldrh	r2, [r3, #6]
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	4293      	cmp	r3, r2
 8008796:	bf28      	it	cs
 8008798:	4613      	movcs	r3, r2
 800879a:	b29b      	uxth	r3, r3
 800879c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800879e:	893b      	ldrh	r3, [r7, #8]
 80087a0:	461a      	mov	r2, r3
 80087a2:	68f9      	ldr	r1, [r7, #12]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fa44 	bl	8008c32 <USBD_CtlSendData>
 80087aa:	e009      	b.n	80087c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9ce 	bl	8008b50 <USBD_CtlError>
 80087b4:	e004      	b.n	80087c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa95 	bl	8008ce6 <USBD_CtlSendStatus>
 80087bc:	e000      	b.n	80087c0 <USBD_GetDescriptor+0x320>
    return;
 80087be:	bf00      	nop
  }
}
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop

080087c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	889b      	ldrh	r3, [r3, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d131      	bne.n	800883e <USBD_SetAddress+0x76>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d12d      	bne.n	800883e <USBD_SetAddress+0x76>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	2b7f      	cmp	r3, #127	; 0x7f
 80087e8:	d829      	bhi.n	800883e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	885b      	ldrh	r3, [r3, #2]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d104      	bne.n	800880c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f9a3 	bl	8008b50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880a:	e01d      	b.n	8008848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7bfa      	ldrb	r2, [r7, #15]
 8008810:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fea6 	bl	800956a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa61 	bl	8008ce6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d004      	beq.n	8008834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	e009      	b.n	8008848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883c:	e004      	b.n	8008848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f985 	bl	8008b50 <USBD_CtlError>
  }
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	885b      	ldrh	r3, [r3, #2]
 8008862:	b2da      	uxtb	r2, r3
 8008864:	4b4c      	ldr	r3, [pc, #304]	; (8008998 <USBD_SetConfig+0x148>)
 8008866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008868:	4b4b      	ldr	r3, [pc, #300]	; (8008998 <USBD_SetConfig+0x148>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d905      	bls.n	800887c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f96c 	bl	8008b50 <USBD_CtlError>
    return USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	e088      	b.n	800898e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d002      	beq.n	800888e <USBD_SetConfig+0x3e>
 8008888:	2b03      	cmp	r3, #3
 800888a:	d025      	beq.n	80088d8 <USBD_SetConfig+0x88>
 800888c:	e071      	b.n	8008972 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800888e:	4b42      	ldr	r3, [pc, #264]	; (8008998 <USBD_SetConfig+0x148>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01c      	beq.n	80088d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008896:	4b40      	ldr	r3, [pc, #256]	; (8008998 <USBD_SetConfig+0x148>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088a0:	4b3d      	ldr	r3, [pc, #244]	; (8008998 <USBD_SetConfig+0x148>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff f992 	bl	8007bd0 <USBD_SetClassConfig>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d004      	beq.n	80088c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f949 	bl	8008b50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088be:	e065      	b.n	800898c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa10 	bl	8008ce6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088ce:	e05d      	b.n	800898c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa08 	bl	8008ce6 <USBD_CtlSendStatus>
      break;
 80088d6:	e059      	b.n	800898c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d8:	4b2f      	ldr	r3, [pc, #188]	; (8008998 <USBD_SetConfig+0x148>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d112      	bne.n	8008906 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e8:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <USBD_SetConfig+0x148>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <USBD_SetConfig+0x148>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f985 	bl	8007c08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f9f1 	bl	8008ce6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008904:	e042      	b.n	800898c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008906:	4b24      	ldr	r3, [pc, #144]	; (8008998 <USBD_SetConfig+0x148>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d02a      	beq.n	800896a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff f973 	bl	8007c08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <USBD_SetConfig+0x148>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800892c:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <USBD_SetConfig+0x148>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff f94c 	bl	8007bd0 <USBD_SetClassConfig>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00f      	beq.n	8008962 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f903 	bl	8008b50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff f958 	bl	8007c08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008960:	e014      	b.n	800898c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9bf 	bl	8008ce6 <USBD_CtlSendStatus>
      break;
 8008968:	e010      	b.n	800898c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9bb 	bl	8008ce6 <USBD_CtlSendStatus>
      break;
 8008970:	e00c      	b.n	800898c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f8eb 	bl	8008b50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <USBD_SetConfig+0x148>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff f941 	bl	8007c08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	73fb      	strb	r3, [r7, #15]
      break;
 800898a:	bf00      	nop
  }

  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200003d8 	.word	0x200003d8

0800899c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d004      	beq.n	80089b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8cd 	bl	8008b50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089b6:	e023      	b.n	8008a00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	dc02      	bgt.n	80089ca <USBD_GetConfig+0x2e>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dc03      	bgt.n	80089d0 <USBD_GetConfig+0x34>
 80089c8:	e015      	b.n	80089f6 <USBD_GetConfig+0x5a>
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d00b      	beq.n	80089e6 <USBD_GetConfig+0x4a>
 80089ce:	e012      	b.n	80089f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3308      	adds	r3, #8
 80089da:	2201      	movs	r2, #1
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f927 	bl	8008c32 <USBD_CtlSendData>
        break;
 80089e4:	e00c      	b.n	8008a00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2201      	movs	r2, #1
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f91f 	bl	8008c32 <USBD_CtlSendData>
        break;
 80089f4:	e004      	b.n	8008a00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8a9 	bl	8008b50 <USBD_CtlError>
        break;
 80089fe:	bf00      	nop
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d81e      	bhi.n	8008a5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d004      	beq.n	8008a32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f890 	bl	8008b50 <USBD_CtlError>
        break;
 8008a30:	e01a      	b.n	8008a68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f043 0202 	orr.w	r2, r3, #2
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	330c      	adds	r3, #12
 8008a52:	2202      	movs	r2, #2
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8eb 	bl	8008c32 <USBD_CtlSendData>
      break;
 8008a5c:	e004      	b.n	8008a68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f875 	bl	8008b50 <USBD_CtlError>
      break;
 8008a66:	bf00      	nop
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d106      	bne.n	8008a90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f92b 	bl	8008ce6 <USBD_CtlSendStatus>
  }
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d80b      	bhi.n	8008ac8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	885b      	ldrh	r3, [r3, #2]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d10c      	bne.n	8008ad2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f910 	bl	8008ce6 <USBD_CtlSendStatus>
      }
      break;
 8008ac6:	e004      	b.n	8008ad2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f840 	bl	8008b50 <USBD_CtlError>
      break;
 8008ad0:	e000      	b.n	8008ad4 <USBD_ClrFeature+0x3c>
      break;
 8008ad2:	bf00      	nop
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fa92 	bl	8008030 <SWAPBYTE>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fa85 	bl	8008030 <SWAPBYTE>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	3301      	adds	r3, #1
 8008b38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f7ff fa78 	bl	8008030 <SWAPBYTE>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	80da      	strh	r2, [r3, #6]
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc99 	bl	8009494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b62:	2100      	movs	r1, #0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fc95 	bl	8009494 <USBD_LL_StallEP>
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d036      	beq.n	8008bf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b8c:	6938      	ldr	r0, [r7, #16]
 8008b8e:	f000 f836 	bl	8008bfe <USBD_GetLen>
 8008b92:	4603      	mov	r3, r0
 8008b94:	3301      	adds	r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	2203      	movs	r2, #3
 8008bba:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bc2:	e013      	b.n	8008bec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4413      	add	r3, r2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	613b      	str	r3, [r7, #16]
    idx++;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	3301      	adds	r3, #1
 8008bea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e7      	bne.n	8008bc4 <USBD_GetString+0x52>
 8008bf4:	e000      	b.n	8008bf8 <USBD_GetString+0x86>
    return;
 8008bf6:	bf00      	nop
  }
}
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b085      	sub	sp, #20
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c0e:	e005      	b.n	8008c1c <USBD_GetLen+0x1e>
  {
    len++;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	3301      	adds	r3, #1
 8008c14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1f5      	bne.n	8008c10 <USBD_GetLen+0x12>
  }

  return len;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	2100      	movs	r1, #0
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fca5 	bl	80095a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fc94 	bl	80095a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2203      	movs	r2, #3
 8008c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fc98 	bl	80095ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fc87 	bl	80095ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc53 	bl	80095a8 <USBD_LL_Transmit>

  return USBD_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2205      	movs	r2, #5
 8008d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc61 	bl	80095ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4912      	ldr	r1, [pc, #72]	; (8008d84 <MX_USB_Device_Init+0x50>)
 8008d3c:	4812      	ldr	r0, [pc, #72]	; (8008d88 <MX_USB_Device_Init+0x54>)
 8008d3e:	f7fe fed9 	bl	8007af4 <USBD_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008d48:	f7f7 fecc 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008d4c:	490f      	ldr	r1, [pc, #60]	; (8008d8c <MX_USB_Device_Init+0x58>)
 8008d4e:	480e      	ldr	r0, [pc, #56]	; (8008d88 <MX_USB_Device_Init+0x54>)
 8008d50:	f7fe ff00 	bl	8007b54 <USBD_RegisterClass>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008d5a:	f7f7 fec3 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008d5e:	490c      	ldr	r1, [pc, #48]	; (8008d90 <MX_USB_Device_Init+0x5c>)
 8008d60:	4809      	ldr	r0, [pc, #36]	; (8008d88 <MX_USB_Device_Init+0x54>)
 8008d62:	f7fe fe21 	bl	80079a8 <USBD_CDC_RegisterInterface>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8008d6c:	f7f7 feba 	bl	8000ae4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8008d70:	4805      	ldr	r0, [pc, #20]	; (8008d88 <MX_USB_Device_Init+0x54>)
 8008d72:	f7fe ff16 	bl	8007ba2 <USBD_Start>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8008d7c:	f7f7 feb2 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8008d80:	bf00      	nop
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20000130 	.word	0x20000130
 8008d88:	200003dc 	.word	0x200003dc
 8008d8c:	20000018 	.word	0x20000018
 8008d90:	2000011c 	.word	0x2000011c

08008d94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4905      	ldr	r1, [pc, #20]	; (8008db0 <CDC_Init_FS+0x1c>)
 8008d9c:	4805      	ldr	r0, [pc, #20]	; (8008db4 <CDC_Init_FS+0x20>)
 8008d9e:	f7fe fe18 	bl	80079d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008da2:	4905      	ldr	r1, [pc, #20]	; (8008db8 <CDC_Init_FS+0x24>)
 8008da4:	4803      	ldr	r0, [pc, #12]	; (8008db4 <CDC_Init_FS+0x20>)
 8008da6:	f7fe fe32 	bl	8007a0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008daa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000a94 	.word	0x20000a94
 8008db4:	200003dc 	.word	0x200003dc
 8008db8:	200006ac 	.word	0x200006ac

08008dbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	71fb      	strb	r3, [r7, #7]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	2b23      	cmp	r3, #35	; 0x23
 8008de0:	d84a      	bhi.n	8008e78 <CDC_Control_FS+0xac>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <CDC_Control_FS+0x1c>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e79 	.word	0x08008e79
 8008dec:	08008e79 	.word	0x08008e79
 8008df0:	08008e79 	.word	0x08008e79
 8008df4:	08008e79 	.word	0x08008e79
 8008df8:	08008e79 	.word	0x08008e79
 8008dfc:	08008e79 	.word	0x08008e79
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008e79 	.word	0x08008e79
 8008e08:	08008e79 	.word	0x08008e79
 8008e0c:	08008e79 	.word	0x08008e79
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008e79 	.word	0x08008e79
 8008e18:	08008e79 	.word	0x08008e79
 8008e1c:	08008e79 	.word	0x08008e79
 8008e20:	08008e79 	.word	0x08008e79
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008e79 	.word	0x08008e79
 8008e2c:	08008e79 	.word	0x08008e79
 8008e30:	08008e79 	.word	0x08008e79
 8008e34:	08008e79 	.word	0x08008e79
 8008e38:	08008e79 	.word	0x08008e79
 8008e3c:	08008e79 	.word	0x08008e79
 8008e40:	08008e79 	.word	0x08008e79
 8008e44:	08008e79 	.word	0x08008e79
 8008e48:	08008e79 	.word	0x08008e79
 8008e4c:	08008e79 	.word	0x08008e79
 8008e50:	08008e79 	.word	0x08008e79
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e79 	.word	0x08008e79
 8008e5c:	08008e79 	.word	0x08008e79
 8008e60:	08008e79 	.word	0x08008e79
 8008e64:	08008e79 	.word	0x08008e79
 8008e68:	08008e79 	.word	0x08008e79
 8008e6c:	08008e79 	.word	0x08008e79
 8008e70:	08008e79 	.word	0x08008e79
 8008e74:	08008e79 	.word	0x08008e79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e78:	bf00      	nop
  }

  return (USBD_OK);
 8008e7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7f7 f9bf 	bl	8000218 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <CDC_Receive_FS+0x2c>)
 8008e9e:	f7fe fdb6 	bl	8007a0e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ea2:	4804      	ldr	r0, [pc, #16]	; (8008eb4 <CDC_Receive_FS+0x2c>)
 8008ea4:	f7fe fdfc 	bl	8007aa0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008ea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200003dc 	.word	0x200003dc

08008eb8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ec8:	4b0d      	ldr	r3, [pc, #52]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e00b      	b.n	8008ef6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ede:	887b      	ldrh	r3, [r7, #2]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4806      	ldr	r0, [pc, #24]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008ee6:	f7fe fd74 	bl	80079d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eea:	4805      	ldr	r0, [pc, #20]	; (8008f00 <CDC_Transmit_FS+0x48>)
 8008eec:	f7fe fda8 	bl	8007a40 <USBD_CDC_TransmitPacket>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200003dc 	.word	0x200003dc

08008f04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
	...

08008f28 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6039      	str	r1, [r7, #0]
 8008f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2212      	movs	r2, #18
 8008f38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	20000150 	.word	0x20000150

08008f4c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	6039      	str	r1, [r7, #0]
 8008f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f5e:	4b03      	ldr	r3, [pc, #12]	; (8008f6c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20000164 	.word	0x20000164

08008f70 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4907      	ldr	r1, [pc, #28]	; (8008fa4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f86:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f88:	f7ff fdf3 	bl	8008b72 <USBD_GetString>
 8008f8c:	e004      	b.n	8008f98 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4904      	ldr	r1, [pc, #16]	; (8008fa4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008f92:	4805      	ldr	r0, [pc, #20]	; (8008fa8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008f94:	f7ff fded 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000e7c 	.word	0x20000e7c
 8008fa8:	080097e0 	.word	0x080097e0

08008fac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	4904      	ldr	r1, [pc, #16]	; (8008fcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8008fbc:	4804      	ldr	r0, [pc, #16]	; (8008fd0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8008fbe:	f7ff fdd8 	bl	8008b72 <USBD_GetString>
  return USBD_StrDesc;
 8008fc2:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000e7c 	.word	0x20000e7c
 8008fd0:	080097f8 	.word	0x080097f8

08008fd4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	221a      	movs	r2, #26
 8008fe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fe6:	f000 f843 	bl	8009070 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008fea:	4b02      	ldr	r3, [pc, #8]	; (8008ff4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000168 	.word	0x20000168

08008ff8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	4907      	ldr	r1, [pc, #28]	; (800902c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800900e:	4808      	ldr	r0, [pc, #32]	; (8009030 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009010:	f7ff fdaf 	bl	8008b72 <USBD_GetString>
 8009014:	e004      	b.n	8009020 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4904      	ldr	r1, [pc, #16]	; (800902c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800901a:	4805      	ldr	r0, [pc, #20]	; (8009030 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800901c:	f7ff fda9 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000e7c 	.word	0x20000e7c
 8009030:	0800980c 	.word	0x0800980c

08009034 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4907      	ldr	r1, [pc, #28]	; (8009068 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800904a:	4808      	ldr	r0, [pc, #32]	; (800906c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800904c:	f7ff fd91 	bl	8008b72 <USBD_GetString>
 8009050:	e004      	b.n	800905c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009056:	4805      	ldr	r0, [pc, #20]	; (800906c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009058:	f7ff fd8b 	bl	8008b72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000e7c 	.word	0x20000e7c
 800906c:	08009818 	.word	0x08009818

08009070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <Get_SerialNum+0x44>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800907c:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <Get_SerialNum+0x48>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009082:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <Get_SerialNum+0x4c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009096:	2208      	movs	r2, #8
 8009098:	4909      	ldr	r1, [pc, #36]	; (80090c0 <Get_SerialNum+0x50>)
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 f814 	bl	80090c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090a0:	2204      	movs	r2, #4
 80090a2:	4908      	ldr	r1, [pc, #32]	; (80090c4 <Get_SerialNum+0x54>)
 80090a4:	68b8      	ldr	r0, [r7, #8]
 80090a6:	f000 f80f 	bl	80090c8 <IntToUnicode>
  }
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	1fff7590 	.word	0x1fff7590
 80090b8:	1fff7594 	.word	0x1fff7594
 80090bc:	1fff7598 	.word	0x1fff7598
 80090c0:	2000016a 	.word	0x2000016a
 80090c4:	2000017a 	.word	0x2000017a

080090c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	4613      	mov	r3, r2
 80090d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
 80090de:	e027      	b.n	8009130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0f1b      	lsrs	r3, r3, #28
 80090e4:	2b09      	cmp	r3, #9
 80090e6:	d80b      	bhi.n	8009100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0f1b      	lsrs	r3, r3, #28
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	4619      	mov	r1, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	440b      	add	r3, r1
 80090f8:	3230      	adds	r2, #48	; 0x30
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	e00a      	b.n	8009116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	0f1b      	lsrs	r3, r3, #28
 8009104:	b2da      	uxtb	r2, r3
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	4619      	mov	r1, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	440b      	add	r3, r1
 8009110:	3237      	adds	r2, #55	; 0x37
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	3301      	adds	r3, #1
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	4413      	add	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	3301      	adds	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
 8009130:	7dfa      	ldrb	r2, [r7, #23]
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	429a      	cmp	r2, r3
 8009136:	d3d3      	bcc.n	80090e0 <IntToUnicode+0x18>
  }
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b094      	sub	sp, #80	; 0x50
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009150:	f107 030c 	add.w	r3, r7, #12
 8009154:	2244      	movs	r2, #68	; 0x44
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fb2d 	bl	80097b8 <memset>
  if(pcdHandle->Instance==USB)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <HAL_PCD_MspInit+0x70>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d123      	bne.n	80091b0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800916c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800916e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	4618      	mov	r0, r3
 800917a:	f7fa fd0f 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009184:	f7f7 fcae 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009188:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <HAL_PCD_MspInit+0x74>)
 800918a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918c:	4a0b      	ldr	r2, [pc, #44]	; (80091bc <HAL_PCD_MspInit+0x74>)
 800918e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009192:	6593      	str	r3, [r2, #88]	; 0x58
 8009194:	4b09      	ldr	r3, [pc, #36]	; (80091bc <HAL_PCD_MspInit+0x74>)
 8009196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800919c:	60bb      	str	r3, [r7, #8]
 800919e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	2014      	movs	r0, #20
 80091a6:	f7f8 f83c 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80091aa:	2014      	movs	r0, #20
 80091ac:	f7f8 f853 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091b0:	bf00      	nop
 80091b2:	3750      	adds	r7, #80	; 0x50
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	40005c00 	.word	0x40005c00
 80091bc:	40021000 	.word	0x40021000

080091c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7fe fd2e 	bl	8007c38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	440b      	add	r3, r1
 8009204:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	4619      	mov	r1, r3
 800920e:	f7fe fd68 	bl	8007ce2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	4613      	mov	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	440b      	add	r3, r1
 800923a:	333c      	adds	r3, #60	; 0x3c
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	4619      	mov	r1, r3
 8009242:	f7fe fdb1 	bl	8007da8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fec5 	bl	8007fec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d001      	beq.n	8009282 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800927e:	f7f7 fc31 	bl	8000ae4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009288:	7bfa      	ldrb	r2, [r7, #15]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7fe fe6f 	bl	8007f70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fe1b 	bl	8007ed4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fe6a 	bl	8007f90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <HAL_PCD_SuspendCallback+0x30>)
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	4a03      	ldr	r2, [pc, #12]	; (80092d8 <HAL_PCD_SuspendCallback+0x30>)
 80092ca:	f043 0306 	orr.w	r3, r3, #6
 80092ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80092d0:	bf00      	nop
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	e000ed00 	.word	0xe000ed00

080092dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d007      	beq.n	80092fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092ec:	4b08      	ldr	r3, [pc, #32]	; (8009310 <HAL_PCD_ResumeCallback+0x34>)
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	4a07      	ldr	r2, [pc, #28]	; (8009310 <HAL_PCD_ResumeCallback+0x34>)
 80092f2:	f023 0306 	bic.w	r3, r3, #6
 80092f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80092f8:	f000 f9fa 	bl	80096f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe fe5a 	bl	8007fbc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	e000ed00 	.word	0xe000ed00

08009314 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800931c:	4a2b      	ldr	r2, [pc, #172]	; (80093cc <USBD_LL_Init+0xb8>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a29      	ldr	r2, [pc, #164]	; (80093cc <USBD_LL_Init+0xb8>)
 8009328:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800932c:	4b27      	ldr	r3, [pc, #156]	; (80093cc <USBD_LL_Init+0xb8>)
 800932e:	4a28      	ldr	r2, [pc, #160]	; (80093d0 <USBD_LL_Init+0xbc>)
 8009330:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <USBD_LL_Init+0xb8>)
 8009334:	2208      	movs	r2, #8
 8009336:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009338:	4b24      	ldr	r3, [pc, #144]	; (80093cc <USBD_LL_Init+0xb8>)
 800933a:	2202      	movs	r2, #2
 800933c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800933e:	4b23      	ldr	r3, [pc, #140]	; (80093cc <USBD_LL_Init+0xb8>)
 8009340:	2202      	movs	r2, #2
 8009342:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009344:	4b21      	ldr	r3, [pc, #132]	; (80093cc <USBD_LL_Init+0xb8>)
 8009346:	2200      	movs	r2, #0
 8009348:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800934a:	4b20      	ldr	r3, [pc, #128]	; (80093cc <USBD_LL_Init+0xb8>)
 800934c:	2200      	movs	r2, #0
 800934e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009350:	4b1e      	ldr	r3, [pc, #120]	; (80093cc <USBD_LL_Init+0xb8>)
 8009352:	2200      	movs	r2, #0
 8009354:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <USBD_LL_Init+0xb8>)
 8009358:	2200      	movs	r2, #0
 800935a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800935c:	481b      	ldr	r0, [pc, #108]	; (80093cc <USBD_LL_Init+0xb8>)
 800935e:	f7f8 f949 	bl	80015f4 <HAL_PCD_Init>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009368:	f7f7 fbbc 	bl	8000ae4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009372:	2318      	movs	r3, #24
 8009374:	2200      	movs	r2, #0
 8009376:	2100      	movs	r1, #0
 8009378:	f7f9 fe02 	bl	8002f80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009382:	2358      	movs	r3, #88	; 0x58
 8009384:	2200      	movs	r2, #0
 8009386:	2180      	movs	r1, #128	; 0x80
 8009388:	f7f9 fdfa 	bl	8002f80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009392:	23c0      	movs	r3, #192	; 0xc0
 8009394:	2200      	movs	r2, #0
 8009396:	2181      	movs	r1, #129	; 0x81
 8009398:	f7f9 fdf2 	bl	8002f80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093a6:	2200      	movs	r2, #0
 80093a8:	2101      	movs	r1, #1
 80093aa:	f7f9 fde9 	bl	8002f80 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093b8:	2200      	movs	r2, #0
 80093ba:	2182      	movs	r1, #130	; 0x82
 80093bc:	f7f9 fde0 	bl	8002f80 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	2000107c 	.word	0x2000107c
 80093d0:	40005c00 	.word	0x40005c00

080093d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f8 f9e7 	bl	80017be <HAL_PCD_Start>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f980 	bl	80096fc <USBD_Get_USB_Status>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	461a      	mov	r2, r3
 8009418:	4603      	mov	r3, r0
 800941a:	70fb      	strb	r3, [r7, #3]
 800941c:	460b      	mov	r3, r1
 800941e:	70bb      	strb	r3, [r7, #2]
 8009420:	4613      	mov	r3, r2
 8009422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009432:	78bb      	ldrb	r3, [r7, #2]
 8009434:	883a      	ldrh	r2, [r7, #0]
 8009436:	78f9      	ldrb	r1, [r7, #3]
 8009438:	f7f8 fb2f 	bl	8001a9a <HAL_PCD_EP_Open>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f95a 	bl	80096fc <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7f8 fb76 	bl	8001b66 <HAL_PCD_EP_Close>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f93b 	bl	80096fc <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f8 fc37 	bl	8001d26 <HAL_PCD_EP_SetStall>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f91c 	bl	80096fc <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f8 fc6a 	bl	8001dca <HAL_PCD_EP_ClrStall>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f8fd 	bl	80096fc <USBD_Get_USB_Status>
 8009502:	4603      	mov	r3, r0
 8009504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009506:	7bbb      	ldrb	r3, [r7, #14]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	da0c      	bge.n	8009546 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	440b      	add	r3, r1
 8009540:	3302      	adds	r3, #2
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	e00b      	b.n	800955e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954c:	68f9      	ldr	r1, [r7, #12]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	440b      	add	r3, r1
 8009558:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800955c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009584:	78fa      	ldrb	r2, [r7, #3]
 8009586:	4611      	mov	r1, r2
 8009588:	4618      	mov	r0, r3
 800958a:	f7f8 fa61 	bl	8001a50 <HAL_PCD_SetAddress>
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 f8b1 	bl	80096fc <USBD_Get_USB_Status>
 800959a:	4603      	mov	r3, r0
 800959c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959e:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	607a      	str	r2, [r7, #4]
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	460b      	mov	r3, r1
 80095b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095c6:	7af9      	ldrb	r1, [r7, #11]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	f7f8 fb68 	bl	8001ca0 <HAL_PCD_EP_Transmit>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f890 	bl	80096fc <USBD_Get_USB_Status>
 80095dc:	4603      	mov	r3, r0
 80095de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
 80095f6:	460b      	mov	r3, r1
 80095f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009608:	7af9      	ldrb	r1, [r7, #11]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	f7f8 faf2 	bl	8001bf6 <HAL_PCD_EP_Receive>
 8009612:	4603      	mov	r3, r0
 8009614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f86f 	bl	80096fc <USBD_Get_USB_Status>
 800961e:	4603      	mov	r3, r0
 8009620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009622:	7dbb      	ldrb	r3, [r7, #22]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	4611      	mov	r1, r2
 8009642:	4618      	mov	r0, r3
 8009644:	f7f8 fb14 	bl	8001c70 <HAL_PCD_EP_GetRxCount>
 8009648:	4603      	mov	r3, r0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
	...

08009654 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <HAL_PCDEx_LPM_Callback+0x18>
 8009666:	2b01      	cmp	r3, #1
 8009668:	d013      	beq.n	8009692 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800966a:	e023      	b.n	80096b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009674:	f000 f83c 	bl	80096f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009678:	4b10      	ldr	r3, [pc, #64]	; (80096bc <HAL_PCDEx_LPM_Callback+0x68>)
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	4a0f      	ldr	r2, [pc, #60]	; (80096bc <HAL_PCDEx_LPM_Callback+0x68>)
 800967e:	f023 0306 	bic.w	r3, r3, #6
 8009682:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fc96 	bl	8007fbc <USBD_LL_Resume>
    break;
 8009690:	e010      	b.n	80096b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe fc79 	bl	8007f90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <HAL_PCDEx_LPM_Callback+0x68>)
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	4a04      	ldr	r2, [pc, #16]	; (80096bc <HAL_PCDEx_LPM_Callback+0x68>)
 80096ac:	f043 0306 	orr.w	r3, r3, #6
 80096b0:	6113      	str	r3, [r2, #16]
    break;
 80096b2:	bf00      	nop
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	e000ed00 	.word	0xe000ed00

080096c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096c8:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <USBD_static_malloc+0x18>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20001370 	.word	0x20001370

080096dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80096f4:	f7f6 fe56 	bl	80003a4 <SystemClock_Config>
}
 80096f8:	bf00      	nop
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d817      	bhi.n	8009740 <USBD_Get_USB_Status+0x44>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBD_Get_USB_Status+0x1c>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009729 	.word	0x08009729
 800971c:	0800972f 	.word	0x0800972f
 8009720:	08009735 	.word	0x08009735
 8009724:	0800973b 	.word	0x0800973b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
    break;
 800972c:	e00b      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800972e:	2303      	movs	r3, #3
 8009730:	73fb      	strb	r3, [r7, #15]
    break;
 8009732:	e008      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009734:	2301      	movs	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
    break;
 8009738:	e005      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800973a:	2303      	movs	r3, #3
 800973c:	73fb      	strb	r3, [r7, #15]
    break;
 800973e:	e002      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009740:	2303      	movs	r3, #3
 8009742:	73fb      	strb	r3, [r7, #15]
    break;
 8009744:	bf00      	nop
  }
  return usb_status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <__libc_init_array>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4d0d      	ldr	r5, [pc, #52]	; (800978c <__libc_init_array+0x38>)
 8009758:	4c0d      	ldr	r4, [pc, #52]	; (8009790 <__libc_init_array+0x3c>)
 800975a:	1b64      	subs	r4, r4, r5
 800975c:	10a4      	asrs	r4, r4, #2
 800975e:	2600      	movs	r6, #0
 8009760:	42a6      	cmp	r6, r4
 8009762:	d109      	bne.n	8009778 <__libc_init_array+0x24>
 8009764:	4d0b      	ldr	r5, [pc, #44]	; (8009794 <__libc_init_array+0x40>)
 8009766:	4c0c      	ldr	r4, [pc, #48]	; (8009798 <__libc_init_array+0x44>)
 8009768:	f000 f82e 	bl	80097c8 <_init>
 800976c:	1b64      	subs	r4, r4, r5
 800976e:	10a4      	asrs	r4, r4, #2
 8009770:	2600      	movs	r6, #0
 8009772:	42a6      	cmp	r6, r4
 8009774:	d105      	bne.n	8009782 <__libc_init_array+0x2e>
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	f855 3b04 	ldr.w	r3, [r5], #4
 800977c:	4798      	blx	r3
 800977e:	3601      	adds	r6, #1
 8009780:	e7ee      	b.n	8009760 <__libc_init_array+0xc>
 8009782:	f855 3b04 	ldr.w	r3, [r5], #4
 8009786:	4798      	blx	r3
 8009788:	3601      	adds	r6, #1
 800978a:	e7f2      	b.n	8009772 <__libc_init_array+0x1e>
 800978c:	08009838 	.word	0x08009838
 8009790:	08009838 	.word	0x08009838
 8009794:	08009838 	.word	0x08009838
 8009798:	0800983c 	.word	0x0800983c

0800979c <memcpy>:
 800979c:	440a      	add	r2, r1
 800979e:	4291      	cmp	r1, r2
 80097a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a4:	d100      	bne.n	80097a8 <memcpy+0xc>
 80097a6:	4770      	bx	lr
 80097a8:	b510      	push	{r4, lr}
 80097aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b2:	4291      	cmp	r1, r2
 80097b4:	d1f9      	bne.n	80097aa <memcpy+0xe>
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <memset>:
 80097b8:	4402      	add	r2, r0
 80097ba:	4603      	mov	r3, r0
 80097bc:	4293      	cmp	r3, r2
 80097be:	d100      	bne.n	80097c2 <memset+0xa>
 80097c0:	4770      	bx	lr
 80097c2:	f803 1b01 	strb.w	r1, [r3], #1
 80097c6:	e7f9      	b.n	80097bc <memset+0x4>

080097c8 <_init>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

080097d4 <_fini>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr
