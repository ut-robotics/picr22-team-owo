
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a410  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a5e8  0800a5e8  0001a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a640  0800a640  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800a640  0800a640  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a640  0800a640  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a640  0800a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800a648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000198  0800a7e0  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800a7e0  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166a2  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  0003686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b3  00000000  00000000  0005cfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c654c  00000000  00000000  0007367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  00139c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000198 	.word	0x20000198
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5d0 	.word	0x0800a5d0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000019c 	.word	0x2000019c
 8000214:	0800a5d0 	.word	0x0800a5d0

08000218 <clamp>:
Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 3277, .servo1 = 4875, .servo2 = 6150, .flat_const = 0, .int_const = 0, .delimiter = 0};

volatile uint8_t isCommandReceived = 0;
volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d901      	bls.n	8000236 <clamp+0x1e>
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	e006      	b.n	8000244 <clamp+0x2c>
	else if (value < min) {return min;}
 8000236:	88fa      	ldrh	r2, [r7, #6]
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	429a      	cmp	r2, r3
 800023c:	d201      	bcs.n	8000242 <clamp+0x2a>
 800023e:	88bb      	ldrh	r3, [r7, #4]
 8000240:	e000      	b.n	8000244 <clamp+0x2c>
	return value;
 8000242:	88fb      	ldrh	r3, [r7, #6]
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b14      	cmp	r3, #20
 8000260:	d110      	bne.n	8000284 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 8000262:	2214      	movs	r2, #20
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <CDC_On_Receive+0x3c>)
 8000268:	f00a f99c 	bl	800a5a4 <memcpy>
    if (command.delimiter == 0xAAAA) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <CDC_On_Receive+0x3c>)
 800026e:	8a5b      	ldrh	r3, [r3, #18]
 8000270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000274:	4293      	cmp	r3, r2
 8000276:	d105      	bne.n	8000284 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <CDC_On_Receive+0x40>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <CDC_On_Receive+0x44>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000000 	.word	0x20000000
 8000290:	20000410 	.word	0x20000410
 8000294:	20000412 	.word	0x20000412

08000298 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 800029c:	2104      	movs	r1, #4
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <enc_init+0x20>)
 80002a0:	f004 fbfe 	bl	8004aa0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80002a4:	2104      	movs	r1, #4
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <enc_init+0x24>)
 80002a8:	f004 fbfa 	bl	8004aa0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80002ac:	2104      	movs	r1, #4
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <enc_init+0x28>)
 80002b0:	f004 fbf6 	bl	8004aa0 <HAL_TIM_Encoder_Start>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000298 	.word	0x20000298
 80002bc:	200001b4 	.word	0x200001b4
 80002c0:	2000024c 	.word	0x2000024c

080002c4 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <pwm_init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <pwm_init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <pwm_init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	f241 3233 	movw	r2, #4915	; 0x1333
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <pwm_init+0x68>)
 80002e6:	f241 320b 	movw	r2, #4875	; 0x130b
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <pwm_init+0x68>)
 80002ee:	f641 0206 	movw	r2, #6150	; 0x1806
 80002f2:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002f4:	2100      	movs	r1, #0
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <pwm_init+0x6c>)
 80002f8:	f004 fa2c 	bl	8004754 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <pwm_init+0x6c>)
 8000300:	f005 fac4 	bl	800588c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <pwm_init+0x6c>)
 8000308:	f005 fac0 	bl	800588c <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <pwm_init+0x70>)
 8000310:	f004 fa20 	bl	8004754 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <pwm_init+0x74>)
 8000318:	f004 fa1c 	bl	8004754 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <pwm_init+0x74>)
 8000320:	f004 fa18 	bl	8004754 <HAL_TIM_PWM_Start>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013400 	.word	0x40013400
 800032c:	40014000 	.word	0x40014000
 8000330:	20000330 	.word	0x20000330
 8000334:	20000200 	.word	0x20000200
 8000338:	2000037c 	.word	0x2000037c

0800033c <motor_status_update>:

// Updates the motor's speed, direction and PI constants from the command struct
void motor_status_update() {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e06f      	b.n	8000428 <motor_status_update+0xec>
		if (command.speed[i] >= 0) {
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a3c      	ldr	r2, [pc, #240]	; (800043c <motor_status_update+0x100>)
 800034c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db23      	blt.n	800039c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	493a      	ldr	r1, [pc, #232]	; (8000440 <motor_status_update+0x104>)
 8000358:	4613      	mov	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	440b      	add	r3, r1
 8000362:	3302      	adds	r3, #2
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a34      	ldr	r2, [pc, #208]	; (800043c <motor_status_update+0x100>)
 800036c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d104      	bne.n	800037e <motor_status_update+0x42>
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a31      	ldr	r2, [pc, #196]	; (800043c <motor_status_update+0x100>)
 8000378:	2102      	movs	r1, #2
 800037a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <motor_status_update+0x100>)
 8000382:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	b298      	uxth	r0, r3
 800038a:	492d      	ldr	r1, [pc, #180]	; (8000440 <motor_status_update+0x104>)
 800038c:	4613      	mov	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	440b      	add	r3, r1
 8000396:	4602      	mov	r2, r0
 8000398:	801a      	strh	r2, [r3, #0]
 800039a:	e026      	b.n	80003ea <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4928      	ldr	r1, [pc, #160]	; (8000440 <motor_status_update+0x104>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	440b      	add	r3, r1
 80003aa:	3302      	adds	r3, #2
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a22      	ldr	r2, [pc, #136]	; (800043c <motor_status_update+0x100>)
 80003b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003bc:	d105      	bne.n	80003ca <motor_status_update+0x8e>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <motor_status_update+0x100>)
 80003c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <motor_status_update+0x100>)
 80003ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	79fa      	ldrb	r2, [r7, #7]
 80003d6:	425b      	negs	r3, r3
 80003d8:	b298      	uxth	r0, r3
 80003da:	4919      	ldr	r1, [pc, #100]	; (8000440 <motor_status_update+0x104>)
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	00db      	lsls	r3, r3, #3
 80003e4:	440b      	add	r3, r1
 80003e6:	4602      	mov	r2, r0
 80003e8:	801a      	strh	r2, [r3, #0]
		}
		motor_status[i].flat_const = command.flat_const;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <motor_status_update+0x100>)
 80003ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	ee07 3a90 	vmov	s15, r3
 80003f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fa:	4911      	ldr	r1, [pc, #68]	; (8000440 <motor_status_update+0x104>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	440b      	add	r3, r1
 8000406:	330c      	adds	r3, #12
 8000408:	edc3 7a00 	vstr	s15, [r3]
		motor_status[i].int_const = command.int_const;
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <motor_status_update+0x100>)
 8000410:	68d9      	ldr	r1, [r3, #12]
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <motor_status_update+0x104>)
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	4403      	add	r3, r0
 800041e:	3310      	adds	r3, #16
 8000420:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	3301      	adds	r3, #1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d98c      	bls.n	8000348 <motor_status_update+0xc>
	}
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	20000000 	.word	0x20000000
 8000440:	200003c8 	.word	0x200003c8

08000444 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	4976      	ldr	r1, [pc, #472]	; (800062c <motor_pwm+0x1e8>)
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	440b      	add	r3, r1
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d00e      	beq.n	800048c <motor_pwm+0x48>
 800046e:	2b02      	cmp	r3, #2
 8000470:	dc10      	bgt.n	8000494 <motor_pwm+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <motor_pwm+0x38>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d004      	beq.n	8000484 <motor_pwm+0x40>
 800047a:	e00b      	b.n	8000494 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 800047c:	4b6c      	ldr	r3, [pc, #432]	; (8000630 <motor_pwm+0x1ec>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	82bb      	strh	r3, [r7, #20]
			break;
 8000482:	e007      	b.n	8000494 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000484:	4b6b      	ldr	r3, [pc, #428]	; (8000634 <motor_pwm+0x1f0>)
 8000486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000488:	82bb      	strh	r3, [r7, #20]
			break;
 800048a:	e003      	b.n	8000494 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 800048c:	4b6a      	ldr	r3, [pc, #424]	; (8000638 <motor_pwm+0x1f4>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	82bb      	strh	r3, [r7, #20]
			break;
 8000492:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000494:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000498:	4618      	mov	r0, r3
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	4963      	ldr	r1, [pc, #396]	; (800062c <motor_pwm+0x1e8>)
 800049e:	4613      	mov	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4413      	add	r3, r2
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	440b      	add	r3, r1
 80004a8:	3304      	adds	r3, #4
 80004aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ae:	1ac3      	subs	r3, r0, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80004be:	495b      	ldr	r1, [pc, #364]	; (800062c <motor_pwm+0x1e8>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	3304      	adds	r3, #4
 80004cc:	4602      	mov	r2, r0
 80004ce:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	4956      	ldr	r1, [pc, #344]	; (800062c <motor_pwm+0x1e8>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	440b      	add	r3, r1
 80004de:	3306      	adds	r3, #6
 80004e0:	89fa      	ldrh	r2, [r7, #14]
 80004e2:	801a      	strh	r2, [r3, #0]

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 80004e4:	4b51      	ldr	r3, [pc, #324]	; (800062c <motor_pwm+0x1e8>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <motor_pwm+0xcc>
 80004ec:	4b4f      	ldr	r3, [pc, #316]	; (800062c <motor_pwm+0x1e8>)
 80004ee:	8b1b      	ldrh	r3, [r3, #24]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d10d      	bne.n	8000510 <motor_pwm+0xcc>
 80004f4:	4b4d      	ldr	r3, [pc, #308]	; (800062c <motor_pwm+0x1e8>)
 80004f6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d109      	bne.n	8000510 <motor_pwm+0xcc>
		motor_status[mot_id].integral = 0;
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	494b      	ldr	r1, [pc, #300]	; (800062c <motor_pwm+0x1e8>)
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3308      	adds	r3, #8
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
	}

	int16_t error = speed - motor_status[mot_id].enc_change;
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	4946      	ldr	r1, [pc, #280]	; (800062c <motor_pwm+0x1e8>)
 8000514:	4613      	mov	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4413      	add	r3, r2
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	440b      	add	r3, r1
 800051e:	3306      	adds	r3, #6
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	b29b      	uxth	r3, r3
 8000526:	8a3a      	ldrh	r2, [r7, #16]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	81bb      	strh	r3, [r7, #12]
	motor_status[mot_id].error = error;
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	493e      	ldr	r1, [pc, #248]	; (800062c <motor_pwm+0x1e8>)
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	3314      	adds	r3, #20
 800053e:	89ba      	ldrh	r2, [r7, #12]
 8000540:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].integral += error;
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	4939      	ldr	r1, [pc, #228]	; (800062c <motor_pwm+0x1e8>)
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	440b      	add	r3, r1
 8000550:	3308      	adds	r3, #8
 8000552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000556:	b29a      	uxth	r2, r3
 8000558:	89bb      	ldrh	r3, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	b218      	sxth	r0, r3
 8000562:	4932      	ldr	r1, [pc, #200]	; (800062c <motor_pwm+0x1e8>)
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	440b      	add	r3, r1
 800056e:	3308      	adds	r3, #8
 8000570:	4602      	mov	r2, r0
 8000572:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = (int16_t)(error * motor_status[mot_id].flat_const) + (int16_t)(motor_status[mot_id].integral * motor_status[mot_id].int_const);
 8000574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	492a      	ldr	r1, [pc, #168]	; (800062c <motor_pwm+0x1e8>)
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	440b      	add	r3, r1
 800058e:	330c      	adds	r3, #12
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800059c:	ee17 3a90 	vmov	r3, s15
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b299      	uxth	r1, r3
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <motor_pwm+0x1e8>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	4403      	add	r3, r0
 80005b2:	3308      	adds	r3, #8
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	481a      	ldr	r0, [pc, #104]	; (800062c <motor_pwm+0x1e8>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4403      	add	r3, r0
 80005ce:	3310      	adds	r3, #16
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 3a90 	vmov	r3, s15
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	440b      	add	r3, r1
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {pid_speed = 0;}
 80005ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da01      	bge.n	80005f6 <motor_pwm+0x1b2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	827b      	strh	r3, [r7, #18]

	if (speed > 0) {
 80005f6:	8a3b      	ldrh	r3, [r7, #16]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d010      	beq.n	800061e <motor_pwm+0x1da>
		pwm = 4500 + pid_speed * 375; // Effectively linear
 80005fc:	8a7b      	ldrh	r3, [r7, #18]
 80005fe:	461a      	mov	r2, r3
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	0091      	lsls	r1, r2, #2
 8000608:	461a      	mov	r2, r3
 800060a:	460b      	mov	r3, r1
 800060c:	4413      	add	r3, r2
 800060e:	461a      	mov	r2, r3
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800061a:	3314      	adds	r3, #20
 800061c:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 800061e:	8afb      	ldrh	r3, [r7, #22]
}
 8000620:	4618      	mov	r0, r3
 8000622:	371c      	adds	r7, #28
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	200003c8 	.word	0x200003c8
 8000630:	40000400 	.word	0x40000400
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40000800 	.word	0x40000800

0800063c <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d018      	beq.n	800067e <motor_direction+0x42>
 800064c:	2b02      	cmp	r3, #2
 800064e:	dc1f      	bgt.n	8000690 <motor_direction+0x54>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <motor_direction+0x1e>
 8000654:	2b01      	cmp	r3, #1
 8000656:	d009      	beq.n	800066c <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000658:	e01a      	b.n	8000690 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <motor_direction+0x5c>)
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	461a      	mov	r2, r3
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f001 fa7f 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 800066a:	e011      	b.n	8000690 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <motor_direction+0x5c>)
 800066e:	7e9b      	ldrb	r3, [r3, #26]
 8000670:	461a      	mov	r2, r3
 8000672:	2120      	movs	r1, #32
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f001 fa76 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 800067c:	e008      	b.n	8000690 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <motor_direction+0x5c>)
 8000680:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000684:	461a      	mov	r2, r3
 8000686:	2110      	movs	r1, #16
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <motor_direction+0x60>)
 800068a:	f001 fa6d 	bl	8001b68 <HAL_GPIO_WritePin>
			break;
 800068e:	bf00      	nop
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200003c8 	.word	0x200003c8
 800069c:	48000400 	.word	0x48000400

080006a0 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2108      	movs	r1, #8
 80006aa:	4813      	ldr	r0, [pc, #76]	; (80006f8 <wake_drivers_up+0x58>)
 80006ac:	f001 fa5c 	bl	8001b68 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006b0:	2300      	movs	r3, #0
 80006b2:	80fb      	strh	r3, [r7, #6]
 80006b4:	e003      	b.n	80006be <wake_drivers_up+0x1e>
 80006b6:	bf00      	nop
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	3301      	adds	r3, #1
 80006bc:	80fb      	strh	r3, [r7, #6]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006c4:	d3f7      	bcc.n	80006b6 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2108      	movs	r1, #8
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <wake_drivers_up+0x58>)
 80006cc:	f001 fa4c 	bl	8001b68 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006d0:	2300      	movs	r3, #0
 80006d2:	80bb      	strh	r3, [r7, #4]
 80006d4:	e003      	b.n	80006de <wake_drivers_up+0x3e>
 80006d6:	bf00      	nop
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	80bb      	strh	r3, [r7, #4]
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006e4:	d3f7      	bcc.n	80006d6 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2108      	movs	r1, #8
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <wake_drivers_up+0x58>)
 80006ec:	f001 fa3c 	bl	8001b68 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	48000400 	.word	0x48000400

080006fc <HAL_TIM_PeriodElapsedCallback>:
// Currently abandoned.

// 50 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b29b      	uxth	r3, r3
 800070a:	2b31      	cmp	r3, #49	; 0x31
 800070c:	d912      	bls.n	8000734 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000710:	2200      	movs	r2, #0
 8000712:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000716:	2200      	movs	r2, #0
 8000718:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000724:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800072c:	f241 320b 	movw	r2, #4875	; 0x130b
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8000732:	e04c      	b.n	80007ce <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe85 	bl	8000444 <motor_pwm>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff fe7e 	bl	8000444 <motor_pwm>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff fe77 	bl	8000444 <motor_pwm>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800075c:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ff6c 	bl	800063c <motor_direction>
	motor_direction(1); // Motor 2
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ff69 	bl	800063c <motor_direction>
	motor_direction(2); // Motor 3
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff ff66 	bl	800063c <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000772:	88db      	ldrh	r3, [r3, #6]
 8000774:	f641 129a 	movw	r2, #6554	; 0x199a
 8000778:	f640 41cd 	movw	r1, #3277	; 0xccd
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd4b 	bl	8000218 <clamp>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078a:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800078e:	891b      	ldrh	r3, [r3, #8]
 8000790:	f641 129a 	movw	r2, #6554	; 0x199a
 8000794:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd3d 	bl	8000218 <clamp>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007a8:	895b      	ldrh	r3, [r3, #10]
 80007aa:	f641 0206 	movw	r2, #6150	; 0x1806
 80007ae:	f241 215c 	movw	r1, #4700	; 0x125c
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fd30 	bl	8000218 <clamp>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007be:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007cc:	801a      	strh	r2, [r3, #0]
}
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000412 	.word	0x20000412
 80007d8:	40013400 	.word	0x40013400
 80007dc:	40014000 	.word	0x40014000
 80007e0:	20000000 	.word	0x20000000

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fe80 	bl	80014ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f879 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 fb99 	bl	8000f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007f6:	f000 f91d 	bl	8000a34 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007fa:	f000 f975 	bl	8000ae8 <MX_TIM3_Init>
  MX_TIM1_Init();
 80007fe:	f000 f8bf 	bl	8000980 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000802:	f000 f9c7 	bl	8000b94 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000806:	f000 fa51 	bl	8000cac <MX_TIM8_Init>
  MX_TIM15_Init();
 800080a:	f000 fafb 	bl	8000e04 <MX_TIM15_Init>
  MX_TIM6_Init();
 800080e:	f000 fa17 	bl	8000c40 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000812:	f009 f993 	bl	8009b3c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	831a      	strh	r2, [r3, #24]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000828:	482a      	ldr	r0, [pc, #168]	; (80008d4 <main+0xf0>)
 800082a:	f003 fed1 	bl	80045d0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f000 fece 	bl	80015d0 <HAL_Delay>
  enc_init();
 8000834:	f7ff fd30 	bl	8000298 <enc_init>
  pwm_init();
 8000838:	f7ff fd44 	bl	80002c4 <pwm_init>
  wake_drivers_up();
 800083c:	f7ff ff30 	bl	80006a0 <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <main+0xf4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0fa      	beq.n	8000840 <main+0x5c>
    	isCommandReceived = 0;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <main+0xf4>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000850:	f7ff ff26 	bl	80006a0 <wake_drivers_up>
    	motor_status_update();
 8000854:	f7ff fd72 	bl	800033c <motor_status_update>

		feedback.speed[0] = motor_status[0].target_speed;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <main+0xf8>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b21b      	sxth	r3, r3
 800085e:	80bb      	strh	r3, [r7, #4]
		feedback.speed[1] = motor_status[1].target_speed;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <main+0xf8>)
 8000862:	8b1b      	ldrh	r3, [r3, #24]
 8000864:	b21b      	sxth	r3, r3
 8000866:	80fb      	strh	r3, [r7, #6]
		feedback.speed[2] = motor_status[2].target_speed;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <main+0xf8>)
 800086a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800086c:	b21b      	sxth	r3, r3
 800086e:	813b      	strh	r3, [r7, #8]

		feedback.change[0] = motor_status[0].enc_change;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <main+0xf8>)
 8000872:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000876:	817b      	strh	r3, [r7, #10]
		feedback.change[1] = motor_status[1].enc_change;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <main+0xf8>)
 800087a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800087e:	81bb      	strh	r3, [r7, #12]
		feedback.change[2] = motor_status[2].enc_change;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <main+0xf8>)
 8000882:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000886:	81fb      	strh	r3, [r7, #14]

		feedback.error[0] = motor_status[0].error;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <main+0xf8>)
 800088a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800088e:	823b      	strh	r3, [r7, #16]
		feedback.error[1] = motor_status[1].error;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <main+0xf8>)
 8000892:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000896:	827b      	strh	r3, [r7, #18]
		feedback.error[2] = motor_status[2].error;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <main+0xf8>)
 800089a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800089e:	82bb      	strh	r3, [r7, #20]

		feedback.integral[0] = motor_status[0].integral;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <main+0xf8>)
 80008a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008a6:	82fb      	strh	r3, [r7, #22]
		feedback.integral[1] = motor_status[1].integral;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <main+0xf8>)
 80008aa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80008ae:	833b      	strh	r3, [r7, #24]
		feedback.integral[2] = motor_status[2].integral;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <main+0xf8>)
 80008b2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008b6:	837b      	strh	r3, [r7, #26]

		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 80008b8:	2102      	movs	r1, #2
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <main+0xfc>)
 80008bc:	f001 f93c 	bl	8001b38 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	83bb      	strh	r3, [r7, #28]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	211a      	movs	r1, #26
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 f9f8 	bl	8009cc0 <CDC_Transmit_FS>
    if (isCommandReceived) {
 80008d0:	e7b6      	b.n	8000840 <main+0x5c>
 80008d2:	bf00      	nop
 80008d4:	200002e4 	.word	0x200002e4
 80008d8:	20000410 	.word	0x20000410
 80008dc:	200003c8 	.word	0x200003c8
 80008e0:	48001400 	.word	0x48001400

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	2238      	movs	r2, #56	; 0x38
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f009 fe64 	bl	800a5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000906:	2000      	movs	r0, #0
 8000908:	f002 fe7a 	bl	8003600 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800090c:	2322      	movs	r3, #34	; 0x22
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000926:	2301      	movs	r3, #1
 8000928:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800092a:	2314      	movs	r3, #20
 800092c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	4618      	mov	r0, r3
 8000940:	f002 ff02 	bl	8003748 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800094a:	f000 fb6d 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2104      	movs	r1, #4
 8000966:	4618      	mov	r0, r3
 8000968:	f003 fa06 	bl	8003d78 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000972:	f000 fb59 	bl	8001028 <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2224      	movs	r2, #36	; 0x24
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f009 fe16 	bl	800a5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <MX_TIM1_Init+0xb0>)
 80009a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009ca:	2303      	movs	r3, #3
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009d2:	2301      	movs	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_TIM1_Init+0xac>)
 80009f6:	f003 ffad 	bl	8004954 <HAL_TIM_Encoder_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a00:	f000 fb12 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM1_Init+0xac>)
 8000a16:	f004 ffed 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a20:	f000 fb02 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001b4 	.word	0x200001b4
 8000a30:	40012c00 	.word	0x40012c00

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a80:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000a82:	f003 fe0f 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a8c:	f000 facc 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000aa0:	f004 ffa8 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aaa:	f000 fabd 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	2360      	movs	r3, #96	; 0x60
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000ac6:	f004 f9f9 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ad0:	f000 faaa 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM2_Init+0xb0>)
 8000ad6:	f000 fbe3 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000200 	.word	0x20000200

08000ae8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2224      	movs	r2, #36	; 0x24
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f009 fd62 	bl	800a5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <MX_TIM3_Init+0xa8>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b44:	2301      	movs	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b58:	f003 fefc 	bl	8004954 <HAL_TIM_Encoder_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b62:	f000 fa61 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_TIM3_Init+0xa4>)
 8000b74:	f004 ff3e 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b7e:	f000 fa53 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	; 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000024c 	.word	0x2000024c
 8000b90:	40000400 	.word	0x40000400

08000b94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2224      	movs	r2, #36	; 0x24
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 fd0c 	bl	800a5c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <MX_TIM4_Init+0xa8>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000c04:	f003 fea6 	bl	8004954 <HAL_TIM_Encoder_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c0e:	f000 fa0b 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM4_Init+0xa4>)
 8000c20:	f004 fee8 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c2a:	f000 f9fd 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000298 	.word	0x20000298
 8000c3c:	40000800 	.word	0x40000800

08000c40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_TIM6_Init+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c58:	222f      	movs	r2, #47	; 0x2f
 8000c5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c72:	f003 fc55 	bl	8004520 <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c7c:	f000 f9d4 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM6_Init+0x64>)
 8000c8e:	f004 feb1 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 f9c6 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200002e4 	.word	0x200002e4
 8000ca8:	40001000 	.word	0x40001000

08000cac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b098      	sub	sp, #96	; 0x60
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2234      	movs	r2, #52	; 0x34
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f009 fc71 	bl	800a5c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000ce0:	4a47      	ldr	r2, [pc, #284]	; (8000e00 <MX_TIM8_Init+0x154>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ce4:	4b45      	ldr	r3, [pc, #276]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cf0:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d0a:	483c      	ldr	r0, [pc, #240]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d0c:	f003 fcca 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f987 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4833      	ldr	r0, [pc, #204]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d2e:	f004 fe61 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d38:	f000 f976 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4826      	ldr	r0, [pc, #152]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d62:	f004 f8ab 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d6c:	f000 f95c 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d74:	2204      	movs	r2, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4820      	ldr	r0, [pc, #128]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d7a:	f004 f89f 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000d84:	f000 f950 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481a      	ldr	r0, [pc, #104]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000d92:	f004 f893 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000d9c:	f000 f944 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000dde:	f004 fe8b 	bl	8005af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000de8:	f000 f91e 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <MX_TIM8_Init+0x150>)
 8000dee:	f000 fa57 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8000df2:	bf00      	nop
 8000df4:	3760      	adds	r7, #96	; 0x60
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000330 	.word	0x20000330
 8000e00:	40013400 	.word	0x40013400

08000e04 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b098      	sub	sp, #96	; 0x60
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2234      	movs	r2, #52	; 0x34
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 fbc5 	bl	800a5c0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e38:	4a3a      	ldr	r2, [pc, #232]	; (8000f24 <MX_TIM15_Init+0x120>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e64:	f003 fc1e 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 f8db 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4827      	ldr	r0, [pc, #156]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000e82:	f004 fdb7 	bl	80059f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f000 f8cc 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000eb6:	f004 f801 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ec0:	f000 f8b2 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec8:	2204      	movs	r2, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000ece:	f003 fff5 	bl	8004ebc <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000ed8:	f000 f8a6 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000f04:	f004 fdf8 	bl	8005af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f0e:	f000 f88b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM15_Init+0x11c>)
 8000f14:	f000 f9c4 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3760      	adds	r7, #96	; 0x60
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000037c 	.word	0x2000037c
 8000f24:	40014000 	.word	0x40014000

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a36      	ldr	r2, [pc, #216]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b34      	ldr	r3, [pc, #208]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a30      	ldr	r2, [pc, #192]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a2a      	ldr	r2, [pc, #168]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_GPIO_Init+0xf4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4825      	ldr	r0, [pc, #148]	; (8001020 <MX_GPIO_Init+0xf8>)
 8000f8c:	f000 fdec 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	21a2      	movs	r1, #162	; 0xa2
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f000 fde6 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2118      	movs	r1, #24
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <MX_GPIO_Init+0xfc>)
 8000fa2:	f000 fde1 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <MX_GPIO_Init+0xf8>)
 8000fbe:	f000 fc39 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <MX_GPIO_Init+0xf8>)
 8000fd6:	f000 fc2d 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000fda:	23a2      	movs	r3, #162	; 0xa2
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f000 fc1e 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8000ff8:	2318      	movs	r3, #24
 8000ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_GPIO_Init+0xfc>)
 8001010:	f000 fc10 	bl	8001834 <HAL_GPIO_Init>

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	48001400 	.word	0x48001400
 8001024:	48000400 	.word	0x48000400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_MspInit+0x44>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x44>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x44>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x44>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <HAL_TIM_Encoder_MspInit+0x138>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12a      	bne.n	80010f4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a8:	6613      	str	r3, [r2, #96]	; 0x60
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80010ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010e0:	2306      	movs	r3, #6
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f000 fba1 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010f2:	e05b      	b.n	80011ac <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a30      	ldr	r2, [pc, #192]	; (80011bc <HAL_TIM_Encoder_MspInit+0x140>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d129      	bne.n	8001152 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800112e:	2350      	movs	r3, #80	; 0x50
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800113e:	2302      	movs	r3, #2
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f000 fb72 	bl	8001834 <HAL_GPIO_Init>
}
 8001150:	e02c      	b.n	80011ac <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d127      	bne.n	80011ac <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800117a:	f043 0302 	orr.w	r3, r3, #2
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 800118c:	23c0      	movs	r3, #192	; 0xc0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800119c:	2302      	movs	r3, #2
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	; (80011c4 <HAL_TIM_Encoder_MspInit+0x148>)
 80011a8:	f000 fb44 	bl	8001834 <HAL_GPIO_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40012c00 	.word	0x40012c00
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40000800 	.word	0x40000800
 80011c4:	48000400 	.word	0x48000400

080011c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d10c      	bne.n	80011f4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6593      	str	r3, [r2, #88]	; 0x58
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80011f2:	e022      	b.n	800123a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_TIM_PWM_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10c      	bne.n	8001218 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 8001204:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
}
 8001216:	e010      	b.n	800123a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_TIM_PWM_MspInit+0x88>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10b      	bne.n	800123a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6613      	str	r3, [r2, #96]	; 0x60
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_TIM_PWM_MspInit+0x80>)
 8001230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40013400 	.word	0x40013400
 8001250:	40014000 	.word	0x40014000

08001254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_TIM_Base_MspInit+0x44>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d113      	bne.n	800128e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_Base_MspInit+0x48>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2036      	movs	r0, #54	; 0x36
 8001284:	f000 faa1 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001288:	2036      	movs	r0, #54	; 0x36
 800128a:	f000 fab8 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40001000 	.word	0x40001000
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d11d      	bne.n	80012fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 80012da:	2301      	movs	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fa9c 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80012fc:	e071      	b.n	80013e2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <HAL_TIM_MspPostInit+0x150>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d14a      	bne.n	800139e <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 800130a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130c:	4a37      	ldr	r2, [pc, #220]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001314:	4b35      	ldr	r3, [pc, #212]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	4a31      	ldr	r2, [pc, #196]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001348:	2304      	movs	r3, #4
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4828      	ldr	r0, [pc, #160]	; (80013f4 <HAL_TIM_MspPostInit+0x154>)
 8001354:	f000 fa6e 	bl	8001834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800136a:	2302      	movs	r3, #2
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f000 fa5c 	bl	8001834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800137c:	2320      	movs	r3, #32
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800138c:	2303      	movs	r3, #3
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <HAL_TIM_MspPostInit+0x154>)
 8001398:	f000 fa4c 	bl	8001834 <HAL_GPIO_Init>
}
 800139c:	e021      	b.n	80013e2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_TIM_MspPostInit+0x158>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d11c      	bne.n	80013e2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_MspPostInit+0x14c>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 80013c0:	230c      	movs	r3, #12
 80013c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013d0:	2309      	movs	r3, #9
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f000 fa29 	bl	8001834 <HAL_GPIO_Init>
}
 80013e2:	bf00      	nop
 80013e4:	3730      	adds	r7, #48	; 0x30
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40013400 	.word	0x40013400
 80013f4:	48000400 	.word	0x48000400
 80013f8:	40014000 	.word	0x40014000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8a4 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USB_LP_IRQHandler+0x10>)
 8001456:	f000 fca6 	bl	8001da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200010bc 	.word	0x200010bc

08001464 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM6_DAC_IRQHandler+0x10>)
 800146a:	f003 fba7 	bl	8004bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200002e4 	.word	0x200002e4

08001478 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopForever+0x2>)
 800149e:	4685      	mov	sp, r0
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopForever+0x6>)
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopForever+0xa>)
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopForever+0xe>)
 80014a6:	2300      	movs	r3, #0
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:
 80014aa:	58d4      	ldr	r4, [r2, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:
 80014b0:	18c4      	adds	r4, r0, r3
 80014b2:	428c      	cmp	r4, r1
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopForever+0x12>)
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopForever+0x16>)
 80014ba:	2300      	movs	r3, #0
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>
 80014c6:	f7ff ffd7 	bl	8001478 <SystemInit>
 80014ca:	f009 f847 	bl	800a55c <__libc_init_array>
 80014ce:	f7ff f989 	bl	80007e4 <main>

080014d2 <LoopForever>:
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
 80014d4:	20008000 	.word	0x20008000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000198 	.word	0x20000198
 80014e0:	0800a648 	.word	0x0800a648
 80014e4:	20000198 	.word	0x20000198
 80014e8:	200015d0 	.word	0x200015d0

080014ec <ADC1_2_IRQHandler>:
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>

080014ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 f95b 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014fe:	200f      	movs	r0, #15
 8001500:	f000 f80e 	bl	8001520 <HAL_InitTick>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	e001      	b.n	8001514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001510:	f7ff fd90 	bl	8001034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001514:	79fb      	ldrb	r3, [r7, #7]

}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_InitTick+0x68>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d022      	beq.n	800157a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_InitTick+0x6c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_InitTick+0x68>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f966 	bl	800181a <HAL_SYSTICK_Config>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b0f      	cmp	r3, #15
 8001558:	d809      	bhi.n	800156e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155a:	2200      	movs	r2, #0
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	f000 f932 	bl	80017ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_InitTick+0x70>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e007      	b.n	800157e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e004      	b.n	800157e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000001c 	.word	0x2000001c
 800158c:	20000014 	.word	0x20000014
 8001590:	20000018 	.word	0x20000018

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x1c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x20>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <HAL_IncTick+0x1c>)
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20000414 	.word	0x20000414
 80015b4:	2000001c 	.word	0x2000001c

080015b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_GetTick+0x14>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000414 	.word	0x20000414

080015d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff ffee 	bl	80015b8 <HAL_GetTick>
 80015dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d004      	beq.n	80015f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_Delay+0x40>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f4:	bf00      	nop
 80015f6:	f7ff ffdf 	bl	80015b8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	429a      	cmp	r2, r3
 8001604:	d8f7      	bhi.n	80015f6 <HAL_Delay+0x26>
  {
  }
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000001c 	.word	0x2000001c

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	; (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff29 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff40 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff90 	bl	8001708 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5f 	bl	80016b4 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff33 	bl	8001678 <__NVIC_EnableIRQ>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ffa4 	bl	8001770 <SysTick_Config>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001842:	e15a      	b.n	8001afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 814c 	beq.w	8001af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d005      	beq.n	8001874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001870:	2b02      	cmp	r3, #2
 8001872:	d130      	bne.n	80018d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018aa:	2201      	movs	r2, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	f003 0201 	and.w	r2, r3, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d017      	beq.n	8001912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d123      	bne.n	8001966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	6939      	ldr	r1, [r7, #16]
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80a6 	beq.w	8001af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ac:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6613      	str	r3, [r2, #96]	; 0x60
 80019b4:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_GPIO_Init+0x2e4>)
 80019b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ea:	d01f      	beq.n	8001a2c <HAL_GPIO_Init+0x1f8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a4c      	ldr	r2, [pc, #304]	; (8001b20 <HAL_GPIO_Init+0x2ec>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d019      	beq.n	8001a28 <HAL_GPIO_Init+0x1f4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x2f0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1f0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1ec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2f8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1e8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2fc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1e4>
 8001a14:	2305      	movs	r3, #5
 8001a16:	e00a      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a18:	2306      	movs	r3, #6
 8001a1a:	e008      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a20:	2303      	movs	r3, #3
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1fa>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3e:	4937      	ldr	r1, [pc, #220]	; (8001b1c <HAL_GPIO_Init+0x2e8>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4c:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a70:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9a:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aee:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_GPIO_Init+0x300>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f ae9d 	bne.w	8001844 <HAL_GPIO_Init+0x10>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	48000400 	.word	0x48000400
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	48001000 	.word	0x48001000
 8001b30:	48001400 	.word	0x48001400
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b08b      	sub	sp, #44	; 0x2c
 8001b9c:	af06      	add	r7, sp, #24
 8001b9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0d7      	b.n	8001d5a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f008 f9c6 	bl	8009f50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f8b3 	bl	8005d3c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e04c      	b.n	8001c76 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3301      	adds	r3, #1
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	b298      	uxth	r0, r3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3336      	adds	r3, #54	; 0x36
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3303      	adds	r3, #3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	3338      	adds	r3, #56	; 0x38
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	333c      	adds	r3, #60	; 0x3c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3340      	adds	r3, #64	; 0x40
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3ad      	bcc.n	8001bdc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e044      	b.n	8001d10 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3b5      	bcc.n	8001c86 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	687e      	ldr	r6, [r7, #4]
 8001d22:	466d      	mov	r5, sp
 8001d24:	f106 0410 	add.w	r4, r6, #16
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	1d33      	adds	r3, r6, #4
 8001d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f004 f81c 	bl	8005d72 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 fc29 	bl	80035aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_PCD_Start+0x16>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e012      	b.n	8001d9e <HAL_PCD_Start+0x3c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 ffc2 	bl	8005d0e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f006 f9da 	bl	8008148 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 f9df 	bl	8008176 <USB_ReadInterrupts>
 8001db8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb26 	bl	8002416 <PCD_EP_ISR_Handler>

    return;
 8001dca:	e110      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d013      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f008 f93f 	bl	800a072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001df4:	2100      	movs	r1, #0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8fc 	bl	8001ff4 <HAL_PCD_SetAddress>

    return;
 8001dfc:	e0f7      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e20:	e0e5      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e44:	e0d3      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d034      	beq.n	8001eba <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0204 	bic.w	r2, r2, #4
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0208 	bic.w	r2, r2, #8
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f008 fae1 	bl	800a45c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f008 f922 	bl	800a0e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001eb8:	e099      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d027      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0208 	orr.w	r2, r2, #8
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0204 	orr.w	r2, r2, #4
 8001f06:	b292      	uxth	r2, r2
 8001f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f008 f8cf 	bl	800a0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f12:	e06c      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d040      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f30:	b292      	uxth	r2, r2
 8001f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d12b      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0204 	orr.w	r2, r2, #4
 8001f52:	b292      	uxth	r2, r2
 8001f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0208 	orr.w	r2, r2, #8
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f008 fa63 	bl	800a45c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001f96:	e02a      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f008 f889 	bl	800a0b0 <HAL_PCD_SuspendCallback>
    return;
 8001f9e:	e026      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00f      	beq.n	8001fca <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f008 f847 	bl	800a056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fc8:	e011      	b.n	8001fee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00c      	beq.n	8001fee <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001fec:	bf00      	nop
  }
}
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_PCD_SetAddress+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e013      	b.n	8002036 <HAL_PCD_SetAddress+0x42>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f006 f87a 	bl	8008120 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	4608      	mov	r0, r1
 8002048:	4611      	mov	r1, r2
 800204a:	461a      	mov	r2, r3
 800204c:	4603      	mov	r3, r0
 800204e:	70fb      	strb	r3, [r7, #3]
 8002050:	460b      	mov	r3, r1
 8002052:	803b      	strh	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0e      	bge.n	8002082 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0207 	and.w	r2, r3, #7
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ac:	883a      	ldrh	r2, [r7, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	78ba      	ldrb	r2, [r7, #2]
 80020b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ca:	78bb      	ldrb	r3, [r7, #2]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d102      	bne.n	80020d6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_Open+0xa6>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00e      	b.n	8002102 <HAL_PCD_EP_Open+0xc4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fe5e 	bl	8005db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002100:	7afb      	ldrb	r3, [r7, #11]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0e      	bge.n	800213c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	705a      	strb	r2, [r3, #1]
 800213a:	e00e      	b.n	800215a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_EP_Close+0x6a>
 8002170:	2302      	movs	r3, #2
 8002172:	e00e      	b.n	8002192 <HAL_PCD_EP_Close+0x88>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f9aa 	bl	80064dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 0207 	and.w	r2, r3, #7
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6979      	ldr	r1, [r7, #20]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fb5d 	bl	80068b6 <USB_EPStartXfer>
 80021fc:	e005      	b.n	800220a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fb56 	bl	80068b6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	b2da      	uxtb	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6979      	ldr	r1, [r7, #20]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fb02 	bl	80068b6 <USB_EPStartXfer>
 80022b2:	e005      	b.n	80022c0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6979      	ldr	r1, [r7, #20]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fafb 	bl	80068b6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0207 	and.w	r2, r3, #7
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d901      	bls.n	80022e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e03e      	b.n	8002366 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0e      	bge.n	800230e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	705a      	strb	r2, [r3, #1]
 800230c:	e00c      	b.n	8002328 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_PCD_EP_SetStall+0x7e>
 8002344:	2302      	movs	r3, #2
 8002346:	e00e      	b.n	8002366 <HAL_PCD_EP_SetStall+0x9c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	4618      	mov	r0, r3
 8002358:	f005 fde3 	bl	8007f22 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d901      	bls.n	800238c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e040      	b.n	800240e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800238c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002390:	2b00      	cmp	r3, #0
 8002392:	da0e      	bge.n	80023b2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	705a      	strb	r2, [r3, #1]
 80023b0:	e00e      	b.n	80023d0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0207 	and.w	r2, r3, #7
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_PCD_EP_ClrStall+0x82>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e00e      	b.n	800240e <HAL_PCD_EP_ClrStall+0xa0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68f9      	ldr	r1, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 fde0 	bl	8007fc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b096      	sub	sp, #88	; 0x58
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800241e:	e39c      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002428:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800242c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800243a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 815e 	bne.w	8002700 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002444:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d150      	bne.n	80024f2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002460:	81fb      	strh	r3, [r7, #14]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3328      	adds	r3, #40	; 0x28
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4413      	add	r3, r2
 8002494:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800249e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	441a      	add	r2, r3
 80024ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024b0:	2100      	movs	r1, #0
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f007 fdb5 	bl	800a022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 834a 	beq.w	8002b5a <PCD_EP_ISR_Handler+0x744>
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 8345 	bne.w	8002b5a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	b292      	uxth	r2, r2
 80024e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024f0:	e333      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002504:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002536:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002544:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800254a:	b29b      	uxth	r3, r3
 800254c:	f005 fe65 	bl	800821a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29a      	uxth	r2, r3
 8002558:	f640 738f 	movw	r3, #3983	; 0xf8f
 800255c:	4013      	ands	r3, r2
 800255e:	823b      	strh	r3, [r7, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	8a3a      	ldrh	r2, [r7, #16]
 8002566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800256a:	b292      	uxth	r2, r2
 800256c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f007 fd2a 	bl	8009fc8 <HAL_PCD_SetupStageCallback>
 8002574:	e2f1      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002576:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800257a:	2b00      	cmp	r3, #0
 800257c:	f280 82ed 	bge.w	8002b5a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	b29a      	uxth	r2, r3
 8002588:	f640 738f 	movw	r3, #3983	; 0xf8f
 800258c:	4013      	ands	r3, r2
 800258e:	83fb      	strh	r3, [r7, #30]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	8bfa      	ldrh	r2, [r7, #30]
 8002596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800259a:	b292      	uxth	r2, r2
 800259c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ec>
 80025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f005 fe17 	bl	800821a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	441a      	add	r2, r3
 80025f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025fa:	2100      	movs	r1, #0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f007 fcf5 	bl	8009fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 82a3 	bne.w	8002b5a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b3e      	cmp	r3, #62	; 0x3e
 800263a:	d918      	bls.n	800266e <PCD_EP_ISR_Handler+0x258>
 800263c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <PCD_EP_ISR_Handler+0x240>
 8002650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002652:	3b01      	subs	r3, #1
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
 8002656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002658:	b29b      	uxth	r3, r3
 800265a:	029b      	lsls	r3, r3, #10
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002666:	b29a      	uxth	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	e029      	b.n	80026c2 <PCD_EP_ISR_Handler+0x2ac>
 800266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d112      	bne.n	800269c <PCD_EP_ISR_Handler+0x286>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	801a      	strh	r2, [r3, #0]
 800269a:	e012      	b.n	80026c2 <PCD_EP_ISR_Handler+0x2ac>
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	647b      	str	r3, [r7, #68]	; 0x44
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x2a0>
 80026b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b2:	3301      	adds	r3, #1
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
 80026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	827b      	strh	r3, [r7, #18]
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026da:	827b      	strh	r3, [r7, #18]
 80026dc:	8a7b      	ldrh	r3, [r7, #18]
 80026de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026e2:	827b      	strh	r3, [r7, #18]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	8a7b      	ldrh	r3, [r7, #18]
 80026ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8013      	strh	r3, [r2, #0]
 80026fe:	e22c      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002714:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002718:	2b00      	cmp	r3, #0
 800271a:	f280 80f6 	bge.w	800290a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29a      	uxth	r2, r3
 8002730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002734:	4013      	ands	r3, r2
 8002736:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800274c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002750:	b292      	uxth	r2, r2
 8002752:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002754:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800276a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276c:	7b1b      	ldrb	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d123      	bne.n	80027ba <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800279a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 808e 	beq.w	80028c0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027aa:	6959      	ldr	r1, [r3, #20]
 80027ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ae:	88da      	ldrh	r2, [r3, #6]
 80027b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027b4:	f005 fd31 	bl	800821a <USB_ReadPMA>
 80027b8:	e082      	b.n	80028c0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	78db      	ldrb	r3, [r3, #3]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d10a      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027c6:	461a      	mov	r2, r3
 80027c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f9d3 	bl	8002b76 <HAL_PCD_EP_DB_Receive>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027d6:	e073      	b.n	80028c0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	441a      	add	r2, r3
 8002804:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800280c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002814:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002818:	b29b      	uxth	r3, r3
 800281a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d022      	beq.n	800287c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	4413      	add	r3, r2
 8002850:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800285e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d02c      	beq.n	80028c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	6959      	ldr	r1, [r3, #20]
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	891a      	ldrh	r2, [r3, #8]
 8002872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002876:	f005 fcd0 	bl	800821a <USB_ReadPMA>
 800287a:	e021      	b.n	80028c0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4413      	add	r3, r2
 8002896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b2:	6959      	ldr	r1, [r3, #20]
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b6:	895a      	ldrh	r2, [r3, #10]
 80028b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028bc:	f005 fcad 	bl	800821a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c2:	69da      	ldr	r2, [r3, #28]
 80028c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028c8:	441a      	add	r2, r3
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028d6:	441a      	add	r2, r3
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <PCD_EP_ISR_Handler+0x4da>
 80028e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d206      	bcs.n	80028fe <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f007 fb78 	bl	8009fec <HAL_PCD_DataOutStageCallback>
 80028fc:	e005      	b.n	800290a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ffd6 	bl	80068b6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800290a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8121 	beq.w	8002b5a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002918:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	441a      	add	r2, r3
 8002958:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800295c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002964:	b29b      	uxth	r3, r3
 8002966:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	2b02      	cmp	r3, #2
 800296e:	f000 80a2 	beq.w	8002ab6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	7b1b      	ldrb	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8093 	beq.w	8002aa8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002982:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d046      	beq.n	8002a1c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d126      	bne.n	80029e4 <PCD_EP_ISR_Handler+0x5ce>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	4413      	add	r3, r2
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	e061      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x692>
 80029e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d15d      	bne.n	8002aa8 <PCD_EP_ISR_Handler+0x692>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	4413      	add	r3, r2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00da      	lsls	r2, r3, #3
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	2200      	movs	r2, #0
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	e045      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d126      	bne.n	8002a78 <PCD_EP_ISR_Handler+0x662>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	4413      	add	r3, r2
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	00da      	lsls	r2, r3, #3
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	e017      	b.n	8002aa8 <PCD_EP_ISR_Handler+0x692>
 8002a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d113      	bne.n	8002aa8 <PCD_EP_ISR_Handler+0x692>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8e:	4413      	add	r3, r2
 8002a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	00da      	lsls	r2, r3, #3
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 fab7 	bl	800a022 <HAL_PCD_DataInStageCallback>
 8002ab4:	e051      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ab6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d144      	bne.n	8002b4c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d907      	bls.n	8002b06 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b02:	619a      	str	r2, [r3, #24]
 8002b04:	e002      	b.n	8002b0c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f007 fa81 	bl	800a022 <HAL_PCD_DataInStageCallback>
 8002b20:	e01b      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b2a:	441a      	add	r2, r3
 8002b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b38:	441a      	add	r2, r3
 8002b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 feb6 	bl	80068b6 <USB_EPStartXfer>
 8002b4a:	e006      	b.n	8002b5a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b50:	461a      	mov	r2, r3
 8002b52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f917 	bl	8002d88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f6ff ac5a 	blt.w	8002420 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3758      	adds	r7, #88	; 0x58
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	4613      	mov	r3, r2
 8002b82:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d07c      	beq.n	8002c88 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d306      	bcc.n	8002bcc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	619a      	str	r2, [r3, #24]
 8002bca:	e002      	b.n	8002bd2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d123      	bne.n	8002c22 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	833b      	strh	r3, [r7, #24]
 8002bf6:	8b3b      	ldrh	r3, [r7, #24]
 8002bf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bfc:	833b      	strh	r3, [r7, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	8b3b      	ldrh	r3, [r7, #24]
 8002c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01f      	beq.n	8002c6c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	82fb      	strh	r3, [r7, #22]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	8afb      	ldrh	r3, [r7, #22]
 8002c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8085 	beq.w	8002d7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6959      	ldr	r1, [r3, #20]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	891a      	ldrh	r2, [r3, #8]
 8002c80:	8b7b      	ldrh	r3, [r7, #26]
 8002c82:	f005 faca 	bl	800821a <USB_ReadPMA>
 8002c86:	e07a      	b.n	8002d7e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	8b7b      	ldrh	r3, [r7, #26]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d306      	bcc.n	8002cc6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	699a      	ldr	r2, [r3, #24]
 8002cbc:	8b7b      	ldrh	r3, [r7, #26]
 8002cbe:	1ad2      	subs	r2, r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	619a      	str	r2, [r3, #24]
 8002cc4:	e002      	b.n	8002ccc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d123      	bne.n	8002d1c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	83fb      	strh	r3, [r7, #30]
 8002cf0:	8bfb      	ldrh	r3, [r7, #30]
 8002cf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cf6:	83fb      	strh	r3, [r7, #30]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	8bfb      	ldrh	r3, [r7, #30]
 8002d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11f      	bne.n	8002d66 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d40:	83bb      	strh	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	8bbb      	ldrh	r3, [r7, #28]
 8002d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d66:	8b7b      	ldrh	r3, [r7, #26]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6959      	ldr	r1, [r3, #20]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	895a      	ldrh	r2, [r3, #10]
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	f005 fa4e 	bl	800821a <USB_ReadPMA>
    }
  }

  return count;
 8002d7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b0a2      	sub	sp, #136	; 0x88
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 81c5 	beq.w	800312c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d907      	bls.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	619a      	str	r2, [r3, #24]
 8002de4:	e002      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 80b9 	bne.w	8002f68 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	785b      	ldrb	r3, [r3, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d126      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	4413      	add	r3, r2
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	00da      	lsls	r2, r3, #3
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	4413      	add	r3, r2
 8002e20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	e01a      	b.n	8002e82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d116      	bne.n	8002e82 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	4413      	add	r3, r2
 8002e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00da      	lsls	r2, r3, #3
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	4413      	add	r3, r2
 8002e76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2200      	movs	r2, #0
 8002e80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d126      	bne.n	8002ede <HAL_PCD_EP_DB_Transmit+0x156>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	00da      	lsls	r2, r3, #3
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	e017      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x186>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d113      	bne.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x186>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	623b      	str	r3, [r7, #32]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	00da      	lsls	r2, r3, #3
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	4413      	add	r3, r2
 8002f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f007 f884 	bl	800a022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 82d2 	beq.w	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f40:	827b      	strh	r3, [r7, #18]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	441a      	add	r2, r3
 8002f50:	8a7b      	ldrh	r3, [r7, #18]
 8002f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8013      	strh	r3, [r2, #0]
 8002f66:	e2b0      	b.n	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d021      	beq.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 8284 	bne.w	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fca:	441a      	add	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd8:	441a      	add	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d309      	bcc.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	621a      	str	r2, [r3, #32]
 8002ffc:	e015      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003006:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003014:	e009      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d155      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x356>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	4413      	add	r3, r2
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	00da      	lsls	r2, r3, #3
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	4413      	add	r3, r2
 8003054:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	2b3e      	cmp	r3, #62	; 0x3e
 800305e:	d916      	bls.n	800308e <HAL_PCD_EP_DB_Transmit+0x306>
 8003060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
 8003066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003072:	3b01      	subs	r3, #1
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
 8003076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003078:	b29b      	uxth	r3, r3
 800307a:	029b      	lsls	r3, r3, #10
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29a      	uxth	r2, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e043      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x38e>
 800308e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003090:	2b00      	cmp	r3, #0
 8003092:	d112      	bne.n	80030ba <HAL_PCD_EP_DB_Transmit+0x332>
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e02d      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_PCD_EP_DB_Transmit+0x348>
 80030ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030cc:	3301      	adds	r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	029b      	lsls	r3, r3, #10
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e01b      	b.n	8003116 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d117      	bne.n	8003116 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	643b      	str	r3, [r7, #64]	; 0x40
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	4413      	add	r3, r2
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00da      	lsls	r2, r3, #3
 8003104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003106:	4413      	add	r3, r2
 8003108:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003110:	b29a      	uxth	r2, r3
 8003112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003114:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6959      	ldr	r1, [r3, #20]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	891a      	ldrh	r2, [r3, #8]
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	f005 f836 	bl	8008196 <USB_WritePMA>
 800312a:	e1ce      	b.n	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800315c:	429a      	cmp	r2, r3
 800315e:	d307      	bcc.n	8003170 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003168:	1ad2      	subs	r2, r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	619a      	str	r2, [r3, #24]
 800316e:	e002      	b.n	8003176 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80c4 	bne.w	8003308 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d126      	bne.n	80031d6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	66bb      	str	r3, [r7, #104]	; 0x68
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003196:	b29b      	uxth	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319c:	4413      	add	r3, r2
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00da      	lsls	r2, r3, #3
 80031a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a8:	4413      	add	r3, r2
 80031aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031ae:	667b      	str	r3, [r7, #100]	; 0x64
 80031b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	e01a      	b.n	800320c <HAL_PCD_EP_DB_Transmit+0x484>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d116      	bne.n	800320c <HAL_PCD_EP_DB_Transmit+0x484>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	673b      	str	r3, [r7, #112]	; 0x70
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f2:	4413      	add	r3, r2
 80031f4:	673b      	str	r3, [r7, #112]	; 0x70
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	00da      	lsls	r2, r3, #3
 80031fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fe:	4413      	add	r3, r2
 8003200:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	2200      	movs	r2, #0
 800320a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	785b      	ldrb	r3, [r3, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d12f      	bne.n	800327a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003232:	4413      	add	r3, r2
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00da      	lsls	r2, r3, #3
 800323e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003242:	4413      	add	r3, r2
 8003244:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800324c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003258:	b29a      	uxth	r2, r3
 800325a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800325e:	801a      	strh	r2, [r3, #0]
 8003260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003270:	b29a      	uxth	r2, r3
 8003272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e017      	b.n	80032aa <HAL_PCD_EP_DB_Transmit+0x522>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d113      	bne.n	80032aa <HAL_PCD_EP_DB_Transmit+0x522>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003290:	4413      	add	r3, r2
 8003292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	00da      	lsls	r2, r3, #3
 800329a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800329c:	4413      	add	r3, r2
 800329e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a6:	2200      	movs	r2, #0
 80032a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f006 feb6 	bl	800a022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8104 	bne.w	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]
 8003306:	e0e0      	b.n	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d121      	bne.n	8003356 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003352:	b29b      	uxth	r3, r3
 8003354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335c:	2b01      	cmp	r3, #1
 800335e:	f040 80b4 	bne.w	80034ca <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800336a:	441a      	add	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003378:	441a      	add	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	429a      	cmp	r2, r3
 8003388:	d309      	bcc.n	800339e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003396:	1ad2      	subs	r2, r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	621a      	str	r2, [r3, #32]
 800339c:	e015      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80033a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033b4:	e009      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	663b      	str	r3, [r7, #96]	; 0x60
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	785b      	ldrb	r3, [r3, #1]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d155      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ec:	4413      	add	r3, r2
 80033ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00da      	lsls	r2, r3, #3
 80033f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f8:	4413      	add	r3, r2
 80033fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	2b3e      	cmp	r3, #62	; 0x3e
 8003404:	d916      	bls.n	8003434 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	677b      	str	r3, [r7, #116]	; 0x74
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_PCD_EP_DB_Transmit+0x694>
 8003416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003418:	3b01      	subs	r3, #1
 800341a:	677b      	str	r3, [r7, #116]	; 0x74
 800341c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800341e:	b29b      	uxth	r3, r3
 8003420:	029b      	lsls	r3, r3, #10
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342c:	b29a      	uxth	r2, r3
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e040      	b.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003444:	b29a      	uxth	r2, r3
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003458:	b29a      	uxth	r2, r3
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e02a      	b.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
 8003466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003472:	3301      	adds	r3, #1
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	b29b      	uxth	r3, r3
 800347a:	029b      	lsls	r3, r3, #10
 800347c:	b29a      	uxth	r2, r3
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e018      	b.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d114      	bne.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800349a:	4413      	add	r3, r2
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	00da      	lsls	r2, r3, #3
 80034a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a6:	4413      	add	r3, r2
 80034a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6959      	ldr	r1, [r3, #20]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	895a      	ldrh	r2, [r3, #10]
 80034c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f004 fe66 	bl	8008196 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e4:	823b      	strh	r3, [r7, #16]
 80034e6:	8a3b      	ldrh	r3, [r7, #16]
 80034e8:	f083 0310 	eor.w	r3, r3, #16
 80034ec:	823b      	strh	r3, [r7, #16]
 80034ee:	8a3b      	ldrh	r3, [r7, #16]
 80034f0:	f083 0320 	eor.w	r3, r3, #32
 80034f4:	823b      	strh	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	441a      	add	r2, r3
 8003504:	8a3b      	ldrh	r3, [r7, #16]
 8003506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800350a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003516:	b29b      	uxth	r3, r3
 8003518:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3788      	adds	r7, #136	; 0x88
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	4613      	mov	r3, r2
 8003534:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e009      	b.n	800356e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800355a:	897a      	ldrh	r2, [r7, #10]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	b29a      	uxth	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	80da      	strh	r2, [r3, #6]
 8003582:	e00b      	b.n	800359c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2201      	movs	r2, #1
 8003588:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	b29a      	uxth	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b29a      	uxth	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d141      	bne.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800360e:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d131      	bne.n	8003680 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800361c:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003622:	4a46      	ldr	r2, [pc, #280]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003628:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800362c:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003634:	4a41      	ldr	r2, [pc, #260]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800363a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800363c:	4b40      	ldr	r3, [pc, #256]	; (8003740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2232      	movs	r2, #50	; 0x32
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	4a3f      	ldr	r2, [pc, #252]	; (8003744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	0c9b      	lsrs	r3, r3, #18
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003652:	e002      	b.n	800365a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d102      	bne.n	800366e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f2      	bne.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800366e:	4b33      	ldr	r3, [pc, #204]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367a:	d158      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e057      	b.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003686:	4a2d      	ldr	r2, [pc, #180]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003690:	e04d      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d141      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800369a:	4b28      	ldr	r3, [pc, #160]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d131      	bne.n	800370c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ae:	4a23      	ldr	r2, [pc, #140]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b8:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2232      	movs	r2, #50	; 0x32
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	0c9b      	lsrs	r3, r3, #18
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036de:	e002      	b.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d102      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f2      	bne.n	80036e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d112      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e011      	b.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800371c:	e007      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800372c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40007000 	.word	0x40007000
 8003740:	20000014 	.word	0x20000014
 8003744:	431bde83 	.word	0x431bde83

08003748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e306      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d075      	beq.n	8003852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4b97      	ldr	r3, [pc, #604]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003770:	4b94      	ldr	r3, [pc, #592]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b0c      	cmp	r3, #12
 800377e:	d102      	bne.n	8003786 <HAL_RCC_OscConfig+0x3e>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d002      	beq.n	800378c <HAL_RCC_OscConfig+0x44>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d10b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	4b8d      	ldr	r3, [pc, #564]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d05b      	beq.n	8003850 <HAL_RCC_OscConfig+0x108>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d157      	bne.n	8003850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e2e1      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d106      	bne.n	80037bc <HAL_RCC_OscConfig+0x74>
 80037ae:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a84      	ldr	r2, [pc, #528]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x98>
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b7c      	ldr	r3, [pc, #496]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7b      	ldr	r2, [pc, #492]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xb0>
 80037e0:	4b78      	ldr	r3, [pc, #480]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a77      	ldr	r2, [pc, #476]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b75      	ldr	r3, [pc, #468]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a74      	ldr	r2, [pc, #464]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd feda 	bl	80015b8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fd fed6 	bl	80015b8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e2a6      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xc0>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fec6 	bl	80015b8 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fd fec2 	bl	80015b8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e292      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	4b60      	ldr	r3, [pc, #384]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0xe8>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d075      	beq.n	800394a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003868:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d102      	bne.n	800387e <HAL_RCC_OscConfig+0x136>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d002      	beq.n	8003884 <HAL_RCC_OscConfig+0x13c>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11f      	bne.n	80038c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_OscConfig+0x154>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e265      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	4946      	ldr	r1, [pc, #280]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038b0:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fe33 	bl	8001520 <HAL_InitTick>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d043      	beq.n	8003948 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e251      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038cc:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fd fe6e 	bl	80015b8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fd fe6a 	bl	80015b8 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e23a      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f2:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	061b      	lsls	r3, r3, #24
 800390c:	492d      	ldr	r1, [pc, #180]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800390e:	4313      	orrs	r3, r2
 8003910:	604b      	str	r3, [r1, #4]
 8003912:	e01a      	b.n	800394a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003914:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800391a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fd fe4a 	bl	80015b8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fd fe46 	bl	80015b8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e216      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1e0>
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003948:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d041      	beq.n	80039da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01c      	beq.n	8003998 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fd fe23 	bl	80015b8 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003976:	f7fd fe1f 	bl	80015b8 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e1ef      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800398a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ef      	beq.n	8003976 <HAL_RCC_OscConfig+0x22e>
 8003996:	e020      	b.n	80039da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fe06 	bl	80015b8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ae:	e00d      	b.n	80039cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fd fe02 	bl	80015b8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d906      	bls.n	80039cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1d2      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039cc:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ea      	bne.n	80039b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80a6 	beq.w	8003b34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039ec:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x2b4>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x2b6>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b7f      	ldr	r3, [pc, #508]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	4a7e      	ldr	r2, [pc, #504]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0e:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a1e:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_OscConfig+0x4bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x4bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x4bc>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fd fdbf 	bl	80015b8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fd fdbb 	bl	80015b8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e18b      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a50:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x4bc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d108      	bne.n	8003a76 <HAL_RCC_OscConfig+0x32e>
 8003a64:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a74:	e024      	b.n	8003ac0 <HAL_RCC_OscConfig+0x378>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d110      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x358>
 8003a7e:	4b60      	ldr	r3, [pc, #384]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	4a5e      	ldr	r2, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9e:	e00f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x378>
 8003aa0:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a56      	ldr	r2, [pc, #344]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d016      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fd76 	bl	80015b8 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fd fd72 	bl	80015b8 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e140      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ed      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x388>
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fd fd5f 	bl	80015b8 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fd5b 	bl	80015b8 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e129      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ed      	bne.n	8003afe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d03c      	beq.n	8003bba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b48:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fd2e 	bl	80015b8 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b60:	f7fd fd2a 	bl	80015b8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0fa      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b72:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ef      	beq.n	8003b60 <HAL_RCC_OscConfig+0x418>
 8003b80:	e01b      	b.n	8003bba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b82:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b92:	f7fd fd11 	bl	80015b8 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b9a:	f7fd fd0d 	bl	80015b8 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0dd      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1ef      	bne.n	8003b9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80d1 	beq.w	8003d66 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f000 808b 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d15e      	bne.n	8003c98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fce7 	bl	80015b8 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bec:	e00c      	b.n	8003c08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fd fce3 	bl	80015b8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d905      	bls.n	8003c08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0b3      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ec      	bne.n	8003bee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c14:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	4b56      	ldr	r3, [pc, #344]	; (8003d74 <HAL_RCC_OscConfig+0x62c>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6a11      	ldr	r1, [r2, #32]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	4311      	orrs	r1, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c2e:	0212      	lsls	r2, r2, #8
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0552      	lsls	r2, r2, #21
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0652      	lsls	r2, r2, #25
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c4e:	06d2      	lsls	r2, r2, #27
 8003c50:	430a      	orrs	r2, r1
 8003c52:	4947      	ldr	r1, [pc, #284]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c58:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fd fca2 	bl	80015b8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fc9e 	bl	80015b8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e06e      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x530>
 8003c96:	e066      	b.n	8003d66 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a31      	ldr	r2, [pc, #196]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fc7a 	bl	80015b8 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd fc76 	bl	80015b8 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e046      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cda:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x580>
 8003ce6:	e03e      	b.n	8003d66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e039      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_RCC_OscConfig+0x628>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0203 	and.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d12c      	bne.n	8003d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	3b01      	subs	r3, #1
 8003d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d123      	bne.n	8003d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d11b      	bne.n	8003d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d113      	bne.n	8003d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d109      	bne.n	8003d62 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	019f800c 	.word	0x019f800c

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e11e      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 020f 	bic.w	r2, r3, #15
 8003da6:	498c      	ldr	r1, [pc, #560]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e106      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d073      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d129      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0f4      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003de4:	f000 f966 	bl	80040b4 <RCC_GetSysClockFreqFromPLLSource>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4a7c      	ldr	r2, [pc, #496]	; (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d93f      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003df2:	4b7a      	ldr	r3, [pc, #488]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d033      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d12f      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e12:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	4a70      	ldr	r2, [pc, #448]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e024      	b.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0c6      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0be      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e50:	f000 f8ce 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d909      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	4a5d      	ldr	r2, [pc, #372]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4957      	ldr	r1, [pc, #348]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fd fb98 	bl	80015b8 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fd fb94 	bl	80015b8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e095      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eec:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003eee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4936      	ldr	r1, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f0e:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d21d      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 020f 	bic.w	r2, r3, #15
 8003f30:	4929      	ldr	r1, [pc, #164]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f38:	f7fd fb3e 	bl	80015b8 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fd fb3a 	bl	80015b8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e03b      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1ed      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490f      	ldr	r1, [pc, #60]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa2:	f000 f825 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490c      	ldr	r1, [pc, #48]	; (8003fe4 <HAL_RCC_ClockConfig+0x26c>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x270>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd faaa 	bl	8001520 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	04c4b400 	.word	0x04c4b400
 8003fe4:	0800a630 	.word	0x0800a630
 8003fe8:	20000014 	.word	0x20000014
 8003fec:	20000018 	.word	0x20000018

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d102      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e047      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d102      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e03e      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d136      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d10c      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404e:	68d2      	ldr	r2, [r2, #12]
 8004050:	0a12      	lsrs	r2, r2, #8
 8004052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]
      break;
 800405c:	e00c      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	0a12      	lsrs	r2, r2, #8
 800406c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
      break;
 8004076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0e5b      	lsrs	r3, r3, #25
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e001      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004098:	693b      	ldr	r3, [r7, #16]
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	007a1200 	.word	0x007a1200

080040b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d10c      	bne.n	80040f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040d8:	4a17      	ldr	r2, [pc, #92]	; (8004138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040e2:	68d2      	ldr	r2, [r2, #12]
 80040e4:	0a12      	lsrs	r2, r2, #8
 80040e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
    break;
 80040f0:	e00c      	b.n	800410c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	0a12      	lsrs	r2, r2, #8
 8004100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004104:	fb02 f303 	mul.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
    break;
 800410a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	0e5b      	lsrs	r3, r3, #25
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	3301      	adds	r3, #1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	fbb2 f3f3 	udiv	r3, r2, r3
 8004124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004126:	687b      	ldr	r3, [r7, #4]
}
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40021000 	.word	0x40021000
 8004138:	007a1200 	.word	0x007a1200
 800413c:	00f42400 	.word	0x00f42400

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004148:	2300      	movs	r3, #0
 800414a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800414c:	2300      	movs	r3, #0
 800414e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8098 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415e:	2300      	movs	r3, #0
 8004160:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004162:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416e:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	4a3f      	ldr	r2, [pc, #252]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6593      	str	r3, [r2, #88]	; 0x58
 800417a:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004196:	f7fd fa0f 	bl	80015b8 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800419c:	e009      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419e:	f7fd fa0b 	bl	80015b8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d902      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	74fb      	strb	r3, [r7, #19]
        break;
 80041b0:	e005      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0ef      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041be:	7cfb      	ldrb	r3, [r7, #19]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d159      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d019      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd f9cb 	bl	80015b8 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004224:	e00b      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004226:	f7fd f9c7 	bl	80015b8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f241 3288 	movw	r2, #5000	; 0x1388
 8004234:	4293      	cmp	r3, r2
 8004236:	d902      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	74fb      	strb	r3, [r7, #19]
            break;
 800423c:	e006      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ec      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004268:	e008      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	74bb      	strb	r3, [r7, #18]
 800426e:	e005      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004270:	40021000 	.word	0x40021000
 8004274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427c:	7c7b      	ldrb	r3, [r7, #17]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004282:	4ba6      	ldr	r3, [pc, #664]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4aa5      	ldr	r2, [pc, #660]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800429a:	4ba0      	ldr	r3, [pc, #640]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f023 0203 	bic.w	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	499c      	ldr	r1, [pc, #624]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042bc:	4b97      	ldr	r3, [pc, #604]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 020c 	bic.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4994      	ldr	r1, [pc, #592]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042de:	4b8f      	ldr	r3, [pc, #572]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	498b      	ldr	r1, [pc, #556]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004300:	4b86      	ldr	r3, [pc, #536]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4983      	ldr	r1, [pc, #524]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004322:	4b7e      	ldr	r3, [pc, #504]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	497a      	ldr	r1, [pc, #488]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004344:	4b75      	ldr	r3, [pc, #468]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	4972      	ldr	r1, [pc, #456]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004366:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4969      	ldr	r1, [pc, #420]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004388:	4b64      	ldr	r3, [pc, #400]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	4961      	ldr	r1, [pc, #388]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	4958      	ldr	r1, [pc, #352]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	4950      	ldr	r1, [pc, #320]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a4a      	ldr	r2, [pc, #296]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	4942      	ldr	r1, [pc, #264]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a3c      	ldr	r2, [pc, #240]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800443c:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4934      	ldr	r1, [pc, #208]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a2e      	ldr	r2, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d015      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004474:	4b29      	ldr	r3, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	4926      	ldr	r1, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004492:	d105      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4918      	ldr	r1, [pc, #96]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ca:	d105      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	490a      	ldr	r1, [pc, #40]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004502:	d105      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004510:	7cbb      	ldrb	r3, [r7, #18]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000

08004520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e049      	b.n	80045c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fe84 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 fde8 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e04a      	b.n	800467e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_TIM_Base_Start_IT+0xbc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d013      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_TIM_Base_Start_IT+0xc0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <HAL_TIM_Base_Start_IT+0xc4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_TIM_Base_Start_IT+0xc8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_TIM_Base_Start_IT+0x6c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_TIM_Base_Start_IT+0xcc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d115      	bne.n	8004668 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004644:	4013      	ands	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b06      	cmp	r3, #6
 800464c:	d015      	beq.n	800467a <HAL_TIM_Base_Start_IT+0xaa>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d011      	beq.n	800467a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	e008      	b.n	800467a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e000      	b.n	800467c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40013400 	.word	0x40013400
 800469c:	40014000 	.word	0x40014000
 80046a0:	00010007 	.word	0x00010007

080046a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e049      	b.n	800474a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fd7c 	bl	80011c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 fd26 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e03c      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e02f      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x8c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e097      	b.n	800492a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xb6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	e023      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xc6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	e01b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xd6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xe6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xf6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fff0 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a33      	ldr	r2, [pc, #204]	; (8004934 <HAL_TIM_PWM_Start+0x1e0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a32      	ldr	r2, [pc, #200]	; (8004938 <HAL_TIM_PWM_Start+0x1e4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a30      	ldr	r2, [pc, #192]	; (800493c <HAL_TIM_PWM_Start+0x1e8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a2f      	ldr	r2, [pc, #188]	; (8004940 <HAL_TIM_PWM_Start+0x1ec>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <HAL_TIM_PWM_Start+0x1f0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_Start+0x142>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_TIM_PWM_Start+0x144>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a20      	ldr	r2, [pc, #128]	; (8004934 <HAL_TIM_PWM_Start+0x1e0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d018      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x194>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d013      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x194>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <HAL_TIM_PWM_Start+0x1f4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00e      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x194>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_TIM_PWM_Start+0x1f8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x194>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_TIM_PWM_Start+0x1e4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_TIM_PWM_Start+0x194>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a16      	ldr	r2, [pc, #88]	; (800493c <HAL_TIM_PWM_Start+0x1e8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d115      	bne.n	8004914 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_TIM_PWM_Start+0x1fc>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b06      	cmp	r3, #6
 80048f8:	d015      	beq.n	8004926 <HAL_TIM_PWM_Start+0x1d2>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d011      	beq.n	8004926 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	e008      	b.n	8004926 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e000      	b.n	8004928 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40013400 	.word	0x40013400
 800493c:	40014000 	.word	0x40014000
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	00010007 	.word	0x00010007

08004954 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e097      	b.n	8004a98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fc fb7d 	bl	800107c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004998:	f023 0307 	bic.w	r3, r3, #7
 800499c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 fbc3 	bl	8005134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049f4:	f023 030c 	bic.w	r3, r3, #12
 80049f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	4313      	orrs	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	011a      	lsls	r2, r3, #4
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	4313      	orrs	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4313      	orrs	r3, r2
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ab8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d110      	bne.n	8004af2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad6:	7b7b      	ldrb	r3, [r7, #13]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e069      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	e031      	b.n	8004b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d110      	bne.n	8004b1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af8:	7bbb      	ldrb	r3, [r7, #14]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004afe:	7b3b      	ldrb	r3, [r7, #12]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d001      	beq.n	8004b08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e055      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	e01d      	b.n	8004b56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d108      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b20:	7bbb      	ldrb	r3, [r7, #14]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b26:	7b7b      	ldrb	r3, [r7, #13]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d102      	bne.n	8004b32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b2c:	7b3b      	ldrb	r3, [r7, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e03e      	b.n	8004bb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_TIM_Encoder_Start+0xc4>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d008      	beq.n	8004b74 <HAL_TIM_Encoder_Start+0xd4>
 8004b62:	e00f      	b.n	8004b84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fe67 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 8004b72:	e016      	b.n	8004ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fe5f 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 8004b82:	e00e      	b.n	8004ba2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fe57 	bl	8005840 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	2104      	movs	r1, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 fe50 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 8004ba0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0202 	mvn.w	r2, #2
 8004be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa7a 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa6c 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa7d 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0204 	mvn.w	r2, #4
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa50 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa42 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa53 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0208 	mvn.w	r2, #8
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2204      	movs	r2, #4
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa26 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa18 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fa29 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b10      	cmp	r3, #16
 8004ccc:	d122      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d11b      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0210 	mvn.w	r2, #16
 8004ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9fc 	bl	80050f8 <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9ee 	bl	80050e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f9ff 	bl	800510c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0201 	mvn.w	r2, #1
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fb fcde 	bl	80006fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b80      	cmp	r3, #128	; 0x80
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 ff70 	bl	8005c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7a:	d10e      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d107      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 ff63 	bl	8005c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d10e      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f9ad 	bl	8005120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d10e      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d107      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0220 	mvn.w	r2, #32
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 ff23 	bl	8005c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e00:	d10f      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e10:	d107      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ff29 	bl	8005c74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e30:	d10f      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 ff1b 	bl	8005c88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e60:	d10f      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e70:	d107      	bne.n	8004e82 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 ff0d 	bl	8005c9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e90:	d10f      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 feff 	bl	8005cb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0ff      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b14      	cmp	r3, #20
 8004ee6:	f200 80f0 	bhi.w	80050ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	080050cb 	.word	0x080050cb
 8004ef8:	080050cb 	.word	0x080050cb
 8004efc:	080050cb 	.word	0x080050cb
 8004f00:	08004f85 	.word	0x08004f85
 8004f04:	080050cb 	.word	0x080050cb
 8004f08:	080050cb 	.word	0x080050cb
 8004f0c:	080050cb 	.word	0x080050cb
 8004f10:	08004fc7 	.word	0x08004fc7
 8004f14:	080050cb 	.word	0x080050cb
 8004f18:	080050cb 	.word	0x080050cb
 8004f1c:	080050cb 	.word	0x080050cb
 8004f20:	08005007 	.word	0x08005007
 8004f24:	080050cb 	.word	0x080050cb
 8004f28:	080050cb 	.word	0x080050cb
 8004f2c:	080050cb 	.word	0x080050cb
 8004f30:	08005049 	.word	0x08005049
 8004f34:	080050cb 	.word	0x080050cb
 8004f38:	080050cb 	.word	0x080050cb
 8004f3c:	080050cb 	.word	0x080050cb
 8004f40:	08005089 	.word	0x08005089
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f982 	bl	8005254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
      break;
 8004f82:	e0a5      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f9f2 	bl	8005374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	619a      	str	r2, [r3, #24]
      break;
 8004fc4:	e084      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fa5b 	bl	8005488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0208 	orr.w	r2, r2, #8
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
      break;
 8005004:	e064      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fac3 	bl	8005598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	61da      	str	r2, [r3, #28]
      break;
 8005046:	e043      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb2c 	bl	80056ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005086:	e023      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb70 	bl	8005774 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050c8:	e002      	b.n	80050d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
      break;
 80050ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3c      	ldr	r2, [pc, #240]	; (8005238 <TIM_Base_SetConfig+0x104>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a39      	ldr	r2, [pc, #228]	; (800523c <TIM_Base_SetConfig+0x108>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a38      	ldr	r2, [pc, #224]	; (8005240 <TIM_Base_SetConfig+0x10c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a37      	ldr	r2, [pc, #220]	; (8005244 <TIM_Base_SetConfig+0x110>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <TIM_Base_SetConfig+0x104>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2a      	ldr	r2, [pc, #168]	; (800523c <TIM_Base_SetConfig+0x108>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a29      	ldr	r2, [pc, #164]	; (8005240 <TIM_Base_SetConfig+0x10c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a28      	ldr	r2, [pc, #160]	; (8005244 <TIM_Base_SetConfig+0x110>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <TIM_Base_SetConfig+0x114>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a26      	ldr	r2, [pc, #152]	; (800524c <TIM_Base_SetConfig+0x118>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <TIM_Base_SetConfig+0x11c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_Base_SetConfig+0x104>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00f      	beq.n	800521c <TIM_Base_SetConfig+0xe8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <TIM_Base_SetConfig+0x110>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0xe8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <TIM_Base_SetConfig+0x114>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0xe8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0f      	ldr	r2, [pc, #60]	; (800524c <TIM_Base_SetConfig+0x118>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0xe8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <TIM_Base_SetConfig+0x11c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	615a      	str	r2, [r3, #20]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800

08005254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0302 	bic.w	r3, r3, #2
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_OC1_SetConfig+0x10c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <TIM_OC1_SetConfig+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_OC1_SetConfig+0x110>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_OC1_SetConfig+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_OC1_SetConfig+0x114>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_OC1_SetConfig+0x80>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_OC1_SetConfig+0x118>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_OC1_SetConfig+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a28      	ldr	r2, [pc, #160]	; (8005370 <TIM_OC1_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10c      	bne.n	80052ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0308 	bic.w	r3, r3, #8
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <TIM_OC1_SetConfig+0x10c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00f      	beq.n	8005316 <TIM_OC1_SetConfig+0xc2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <TIM_OC1_SetConfig+0x110>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00b      	beq.n	8005316 <TIM_OC1_SetConfig+0xc2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <TIM_OC1_SetConfig+0x114>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d007      	beq.n	8005316 <TIM_OC1_SetConfig+0xc2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <TIM_OC1_SetConfig+0x118>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC1_SetConfig+0xc2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a17      	ldr	r2, [pc, #92]	; (8005370 <TIM_OC1_SetConfig+0x11c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d111      	bne.n	800533a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40013400 	.word	0x40013400
 8005368:	40014000 	.word	0x40014000
 800536c:	40014400 	.word	0x40014400
 8005370:	40014800 	.word	0x40014800

08005374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f023 0210 	bic.w	r2, r3, #16
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0320 	bic.w	r3, r3, #32
 80053c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_OC2_SetConfig+0x100>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC2_SetConfig+0x6c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a27      	ldr	r2, [pc, #156]	; (8005478 <TIM_OC2_SetConfig+0x104>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10d      	bne.n	80053fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <TIM_OC2_SetConfig+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00f      	beq.n	8005424 <TIM_OC2_SetConfig+0xb0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <TIM_OC2_SetConfig+0x104>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_OC2_SetConfig+0xb0>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <TIM_OC2_SetConfig+0x108>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_OC2_SetConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <TIM_OC2_SetConfig+0x10c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC2_SetConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a19      	ldr	r2, [pc, #100]	; (8005484 <TIM_OC2_SetConfig+0x110>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d113      	bne.n	800544c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800542a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800

08005488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <TIM_OC3_SetConfig+0xfc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC3_SetConfig+0x6a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a26      	ldr	r2, [pc, #152]	; (8005588 <TIM_OC3_SetConfig+0x100>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10d      	bne.n	800550e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <TIM_OC3_SetConfig+0xfc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_OC3_SetConfig+0xae>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <TIM_OC3_SetConfig+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_OC3_SetConfig+0xae>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <TIM_OC3_SetConfig+0x104>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_OC3_SetConfig+0xae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <TIM_OC3_SetConfig+0x108>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC3_SetConfig+0xae>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <TIM_OC3_SetConfig+0x10c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d113      	bne.n	800555e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800553c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40014000 	.word	0x40014000
 8005590:	40014400 	.word	0x40014400
 8005594:	40014800 	.word	0x40014800

08005598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	031b      	lsls	r3, r3, #12
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_OC4_SetConfig+0x100>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC4_SetConfig+0x6c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_OC4_SetConfig+0x104>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10d      	bne.n	8005620 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800561e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <TIM_OC4_SetConfig+0x100>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_OC4_SetConfig+0xb0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1c      	ldr	r2, [pc, #112]	; (800569c <TIM_OC4_SetConfig+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_OC4_SetConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <TIM_OC4_SetConfig+0x108>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_OC4_SetConfig+0xb0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <TIM_OC4_SetConfig+0x10c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC4_SetConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_OC4_SetConfig+0x110>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d113      	bne.n	8005670 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005656:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	019b      	lsls	r3, r3, #6
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	621a      	str	r2, [r3, #32]
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <TIM_OC5_SetConfig+0xb4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_OC5_SetConfig+0x7a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <TIM_OC5_SetConfig+0xb8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_OC5_SetConfig+0x7a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a15      	ldr	r2, [pc, #84]	; (8005768 <TIM_OC5_SetConfig+0xbc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_OC5_SetConfig+0x7a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a14      	ldr	r2, [pc, #80]	; (800576c <TIM_OC5_SetConfig+0xc0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_OC5_SetConfig+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a13      	ldr	r2, [pc, #76]	; (8005770 <TIM_OC5_SetConfig+0xc4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d109      	bne.n	800573a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	051b      	lsls	r3, r3, #20
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <TIM_OC6_SetConfig+0xb8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00f      	beq.n	80057f0 <TIM_OC6_SetConfig+0x7c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a17      	ldr	r2, [pc, #92]	; (8005830 <TIM_OC6_SetConfig+0xbc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_OC6_SetConfig+0x7c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a16      	ldr	r2, [pc, #88]	; (8005834 <TIM_OC6_SetConfig+0xc0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_OC6_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <TIM_OC6_SetConfig+0xc4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_OC6_SetConfig+0x7c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a14      	ldr	r2, [pc, #80]	; (800583c <TIM_OC6_SetConfig+0xc8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d109      	bne.n	8005804 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	029b      	lsls	r3, r3, #10
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40013400 	.word	0x40013400
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_TIMEx_PWMN_Start+0x24>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e022      	b.n	80058f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d109      	bne.n	80058ca <HAL_TIMEx_PWMN_Start+0x3e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e015      	b.n	80058f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d109      	bne.n	80058e4 <HAL_TIMEx_PWMN_Start+0x58>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e008      	b.n	80058f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e069      	b.n	80059d2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <HAL_TIMEx_PWMN_Start+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	e013      	b.n	8005936 <HAL_TIMEx_PWMN_Start+0xaa>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d104      	bne.n	800591e <HAL_TIMEx_PWMN_Start+0x92>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	e00b      	b.n	8005936 <HAL_TIMEx_PWMN_Start+0xaa>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d104      	bne.n	800592e <HAL_TIMEx_PWMN_Start+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800592c:	e003      	b.n	8005936 <HAL_TIMEx_PWMN_Start+0xaa>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2204      	movs	r2, #4
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f9c0 	bl	8005cc4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005952:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <HAL_TIMEx_PWMN_Start+0x150>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_TIMEx_PWMN_Start+0x104>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005966:	d013      	beq.n	8005990 <HAL_TIMEx_PWMN_Start+0x104>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIMEx_PWMN_Start+0x154>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_TIMEx_PWMN_Start+0x104>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_TIMEx_PWMN_Start+0x104>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIMEx_PWMN_Start+0x104>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <HAL_TIMEx_PWMN_Start+0x160>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d115      	bne.n	80059bc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d015      	beq.n	80059ce <HAL_TIMEx_PWMN_Start+0x142>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d011      	beq.n	80059ce <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	e008      	b.n	80059ce <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	e000      	b.n	80059d0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	00010007 	.word	0x00010007

080059f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e065      	b.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d108      	bne.n	8005a52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d018      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d013      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a12      	ldr	r2, [pc, #72]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40014000 	.word	0x40014000

08005af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e087      	b.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d106      	bne.n	8005bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d126      	bne.n	8005c12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	051b      	lsls	r3, r3, #20
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a0e      	ldr	r2, [pc, #56]	; (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a0d      	ldr	r2, [pc, #52]	; (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d106      	bne.n	8005c12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40013400 	.word	0x40013400

08005c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d1e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d44:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	43db      	mvns	r3, r3
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d72:	b084      	sub	sp, #16
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	f107 0014 	add.w	r0, r7, #20
 8005d80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	b004      	add	sp, #16
 8005db2:	4770      	bx	lr

08005db4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b09d      	sub	sp, #116	; 0x74
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	78db      	ldrb	r3, [r3, #3]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d81f      	bhi.n	8005e26 <USB_ActivateEndpoint+0x72>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <USB_ActivateEndpoint+0x38>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e2f 	.word	0x08005e2f
 8005df8:	08005e0b 	.word	0x08005e0b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005dfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e08:	e012      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e0e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e12:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e16:	e00b      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e24:	e004      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e2c:	e000      	b.n	8005e30 <USB_ActivateEndpoint+0x7c>
      break;
 8005e2e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b21b      	sxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	b21a      	sxth	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	4313      	orrs	r3, r2
 8005e74:	b21b      	sxth	r3, r3
 8005e76:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 8149 	bne.w	8006138 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 8084 	beq.w	8005fb8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00da      	lsls	r2, r3, #3
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	88db      	ldrh	r3, [r3, #6]
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	827b      	strh	r3, [r7, #18]
 8005ef2:	8a7b      	ldrh	r3, [r7, #18]
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <USB_ActivateEndpoint+0x180>
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	823b      	strh	r3, [r7, #16]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	8a3b      	ldrh	r3, [r7, #16]
 8005f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	78db      	ldrb	r3, [r3, #3]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d020      	beq.n	8005f7e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f52:	81bb      	strh	r3, [r7, #12]
 8005f54:	89bb      	ldrh	r3, [r7, #12]
 8005f56:	f083 0320 	eor.w	r3, r3, #32
 8005f5a:	81bb      	strh	r3, [r7, #12]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	89bb      	ldrh	r3, [r7, #12]
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
 8005f7c:	e2a6      	b.n	80064cc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f94:	81fb      	strh	r3, [r7, #14]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	89fb      	ldrh	r3, [r7, #14]
 8005fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8013      	strh	r3, [r2, #0]
 8005fb6:	e289      	b.n	80064cc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	4413      	add	r3, r2
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	00da      	lsls	r2, r3, #3
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	88db      	ldrh	r3, [r3, #6]
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	4413      	add	r3, r2
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00da      	lsls	r2, r3, #3
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	4413      	add	r3, r2
 800600a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b3e      	cmp	r3, #62	; 0x3e
 8006016:	d918      	bls.n	800604a <USB_ActivateEndpoint+0x296>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <USB_ActivateEndpoint+0x27e>
 800602c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800602e:	3b01      	subs	r3, #1
 8006030:	66bb      	str	r3, [r7, #104]	; 0x68
 8006032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006034:	b29b      	uxth	r3, r3
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	b29b      	uxth	r3, r3
 800603a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006042:	b29a      	uxth	r2, r3
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e029      	b.n	800609e <USB_ActivateEndpoint+0x2ea>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d112      	bne.n	8006078 <USB_ActivateEndpoint+0x2c4>
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800605c:	b29a      	uxth	r2, r3
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006070:	b29a      	uxth	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e012      	b.n	800609e <USB_ActivateEndpoint+0x2ea>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <USB_ActivateEndpoint+0x2de>
 800608c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800608e:	3301      	adds	r3, #1
 8006090:	66bb      	str	r3, [r7, #104]	; 0x68
 8006092:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29a      	uxth	r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80060ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <USB_ActivateEndpoint+0x33a>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	843b      	strh	r3, [r7, #32]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8c3b      	ldrh	r3, [r7, #32]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	83fb      	strh	r3, [r7, #30]
 8006106:	8bfb      	ldrh	r3, [r7, #30]
 8006108:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800610c:	83fb      	strh	r3, [r7, #30]
 800610e:	8bfb      	ldrh	r3, [r7, #30]
 8006110:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006114:	83fb      	strh	r3, [r7, #30]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	441a      	add	r2, r3
 8006120:	8bfb      	ldrh	r3, [r7, #30]
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
 8006136:	e1c9      	b.n	80064cc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d11e      	bne.n	800617e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006170:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006178:	b29b      	uxth	r3, r3
 800617a:	8013      	strh	r3, [r2, #0]
 800617c:	e01d      	b.n	80061ba <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ca:	4413      	add	r3, r2
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	00da      	lsls	r2, r3, #3
 80061d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	891b      	ldrh	r3, [r3, #8]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	657b      	str	r3, [r7, #84]	; 0x54
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fe:	4413      	add	r3, r2
 8006200:	657b      	str	r3, [r7, #84]	; 0x54
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00da      	lsls	r2, r3, #3
 8006208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620a:	4413      	add	r3, r2
 800620c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	895b      	ldrh	r3, [r3, #10]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 8093 	bne.w	8006352 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800623c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01b      	beq.n	8006280 <USB_ActivateEndpoint+0x4cc>
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800626c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627c:	b29b      	uxth	r3, r3
 800627e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800628e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <USB_ActivateEndpoint+0x51c>
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	441a      	add	r2, r3
 80062ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80062f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
 8006350:	e0bc      	b.n	80064cc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01d      	beq.n	80063aa <USB_ActivateEndpoint+0x5f6>
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006384:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80063ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01d      	beq.n	8006402 <USB_ActivateEndpoint+0x64e>
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d024      	beq.n	8006454 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b29b      	uxth	r3, r3
 8006418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006420:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006424:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006428:	f083 0320 	eor.w	r3, r3, #32
 800642c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
 8006452:	e01d      	b.n	8006490 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3774      	adds	r7, #116	; 0x74
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b08d      	sub	sp, #52	; 0x34
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	7b1b      	ldrb	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 808e 	bne.w	800660c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d044      	beq.n	8006582 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	81bb      	strh	r3, [r7, #12]
 8006506:	89bb      	ldrh	r3, [r7, #12]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01b      	beq.n	8006548 <USB_DeactivateEndpoint+0x6c>
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	817b      	strh	r3, [r7, #10]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	813b      	strh	r3, [r7, #8]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	441a      	add	r2, r3
 800656a:	893b      	ldrh	r3, [r7, #8]
 800656c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800657c:	b29b      	uxth	r3, r3
 800657e:	8013      	strh	r3, [r2, #0]
 8006580:	e192      	b.n	80068a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	827b      	strh	r3, [r7, #18]
 8006590:	8a7b      	ldrh	r3, [r7, #18]
 8006592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01b      	beq.n	80065d2 <USB_DeactivateEndpoint+0xf6>
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b0:	823b      	strh	r3, [r7, #16]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	441a      	add	r2, r3
 80065bc:	8a3b      	ldrh	r3, [r7, #16]
 80065be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e8:	81fb      	strh	r3, [r7, #14]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	89fb      	ldrh	r3, [r7, #14]
 80065f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006606:	b29b      	uxth	r3, r3
 8006608:	8013      	strh	r3, [r2, #0]
 800660a:	e14d      	b.n	80068a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 80a5 	bne.w	8006760 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	843b      	strh	r3, [r7, #32]
 8006624:	8c3b      	ldrh	r3, [r7, #32]
 8006626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01b      	beq.n	8006666 <USB_DeactivateEndpoint+0x18a>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	83fb      	strh	r3, [r7, #30]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	8bfb      	ldrh	r3, [r7, #30]
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800665e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	83bb      	strh	r3, [r7, #28]
 8006674:	8bbb      	ldrh	r3, [r7, #28]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01b      	beq.n	80066b6 <USB_DeactivateEndpoint+0x1da>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006694:	837b      	strh	r3, [r7, #26]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	441a      	add	r2, r3
 80066a0:	8b7b      	ldrh	r3, [r7, #26]
 80066a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	833b      	strh	r3, [r7, #24]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8b3b      	ldrh	r3, [r7, #24]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	82fb      	strh	r3, [r7, #22]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	8afb      	ldrh	r3, [r7, #22]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	82bb      	strh	r3, [r7, #20]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	8abb      	ldrh	r3, [r7, #20]
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]
 800675e:	e0a3      	b.n	80068a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800676e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <USB_DeactivateEndpoint+0x2d4>
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	441a      	add	r2, r3
 800679a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800679c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01b      	beq.n	8006800 <USB_DeactivateEndpoint+0x324>
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	853b      	strh	r3, [r7, #40]	; 0x28
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	441a      	add	r2, r3
 8006822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006834:	b29b      	uxth	r3, r3
 8006836:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	b29b      	uxth	r3, r3
 8006846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800684e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	441a      	add	r2, r3
 800685a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800685c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686c:	b29b      	uxth	r3, r3
 800686e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	847b      	strh	r3, [r7, #34]	; 0x22
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	441a      	add	r2, r3
 8006892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800689c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3734      	adds	r7, #52	; 0x34
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b0c2      	sub	sp, #264	; 0x108
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c4:	6018      	str	r0, [r3, #0]
 80068c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ce:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 867b 	bne.w	80075d8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d908      	bls.n	8006910 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800690e:	e007      	b.n	8006920 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	7b1b      	ldrb	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d13a      	bne.n	80069a6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6959      	ldr	r1, [r3, #20]
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	88da      	ldrh	r2, [r3, #6]
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694c:	b29b      	uxth	r3, r3
 800694e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006952:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006956:	6800      	ldr	r0, [r0, #0]
 8006958:	f001 fc1d 	bl	8008196 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800695c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006976:	b29b      	uxth	r3, r3
 8006978:	461a      	mov	r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	00da      	lsls	r2, r3, #3
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	f000 bde3 	b.w	800756c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	78db      	ldrb	r3, [r3, #3]
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	f040 843a 	bne.w	800722c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	f240 83b7 	bls.w	8007144 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a26:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 81b3 	beq.w	8006dde <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	633b      	str	r3, [r7, #48]	; 0x30
 8006a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d16d      	bne.n	8006b70 <USB_EPStartXfer+0x2ba>
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	4413      	add	r3, r2
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	00da      	lsls	r2, r3, #3
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad6:	d91c      	bls.n	8006b12 <USB_EPStartXfer+0x25c>
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006adc:	095b      	lsrs	r3, r3, #5
 8006ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <USB_EPStartXfer+0x242>
 8006aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006af2:	3b01      	subs	r3, #1
 8006af4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006af8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	029b      	lsls	r3, r3, #10
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	e053      	b.n	8006bba <USB_EPStartXfer+0x304>
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d112      	bne.n	8006b40 <USB_EPStartXfer+0x28a>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e03c      	b.n	8006bba <USB_EPStartXfer+0x304>
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <USB_EPStartXfer+0x2aa>
 8006b56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	e024      	b.n	8006bba <USB_EPStartXfer+0x304>
 8006b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d11c      	bne.n	8006bba <USB_EPStartXfer+0x304>
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	4413      	add	r3, r2
 8006b96:	633b      	str	r3, [r7, #48]	; 0x30
 8006b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	00da      	lsls	r2, r3, #3
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	4413      	add	r3, r2
 8006baa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	895b      	ldrh	r3, [r3, #10]
 8006bc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6959      	ldr	r1, [r3, #20]
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006be0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006be4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006be8:	6800      	ldr	r0, [r0, #0]
 8006bea:	f001 fad4 	bl	8008196 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfe:	441a      	add	r2, r3
 8006c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d90f      	bls.n	8006c48 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	1ad2      	subs	r2, r2, r3
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	621a      	str	r2, [r3, #32]
 8006c46:	e00e      	b.n	8006c66 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d16d      	bne.n	8006d52 <USB_EPStartXfer+0x49c>
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	4413      	add	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00da      	lsls	r2, r3, #3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	4413      	add	r3, r2
 8006cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cb8:	d91c      	bls.n	8006cf4 <USB_EPStartXfer+0x43e>
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <USB_EPStartXfer+0x424>
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e059      	b.n	8006da8 <USB_EPStartXfer+0x4f2>
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d112      	bne.n	8006d22 <USB_EPStartXfer+0x46c>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	e042      	b.n	8006da8 <USB_EPStartXfer+0x4f2>
 8006d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <USB_EPStartXfer+0x48c>
 8006d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e02a      	b.n	8006da8 <USB_EPStartXfer+0x4f2>
 8006d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d122      	bne.n	8006da8 <USB_EPStartXfer+0x4f2>
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	4413      	add	r3, r2
 8006d84:	623b      	str	r3, [r7, #32]
 8006d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	00da      	lsls	r2, r3, #3
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	891b      	ldrh	r3, [r3, #8]
 8006db4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6959      	ldr	r1, [r3, #20]
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006dd2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006dd6:	6800      	ldr	r0, [r0, #0]
 8006dd8:	f001 f9dd 	bl	8008196 <USB_WritePMA>
 8006ddc:	e3c6      	b.n	800756c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d16d      	bne.n	8006eca <USB_EPStartXfer+0x614>
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	4413      	add	r3, r2
 8006e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	00da      	lsls	r2, r3, #3
 8006e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e22:	4413      	add	r3, r2
 8006e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e30:	d91c      	bls.n	8006e6c <USB_EPStartXfer+0x5b6>
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <USB_EPStartXfer+0x59c>
 8006e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e059      	b.n	8006f20 <USB_EPStartXfer+0x66a>
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d112      	bne.n	8006e9a <USB_EPStartXfer+0x5e4>
 8006e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e042      	b.n	8006f20 <USB_EPStartXfer+0x66a>
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <USB_EPStartXfer+0x604>
 8006eb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	e02a      	b.n	8006f20 <USB_EPStartXfer+0x66a>
 8006eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d122      	bne.n	8006f20 <USB_EPStartXfer+0x66a>
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efa:	4413      	add	r3, r2
 8006efc:	653b      	str	r3, [r7, #80]	; 0x50
 8006efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00da      	lsls	r2, r3, #3
 8006f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0e:	4413      	add	r3, r2
 8006f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	891b      	ldrh	r3, [r3, #8]
 8006f2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6959      	ldr	r1, [r3, #20]
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	f001 f921 	bl	8008196 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695a      	ldr	r2, [r3, #20]
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f64:	441a      	add	r2, r3
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d90f      	bls.n	8006fae <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	621a      	str	r2, [r3, #32]
 8006fac:	e00e      	b.n	8006fcc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d16d      	bne.n	80070c4 <USB_EPStartXfer+0x80e>
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	4413      	add	r3, r2
 800700a:	63bb      	str	r3, [r7, #56]	; 0x38
 800700c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	00da      	lsls	r2, r3, #3
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	4413      	add	r3, r2
 800701e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007028:	2b3e      	cmp	r3, #62	; 0x3e
 800702a:	d91c      	bls.n	8007066 <USB_EPStartXfer+0x7b0>
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <USB_EPStartXfer+0x796>
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007046:	3b01      	subs	r3, #1
 8007048:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007050:	b29b      	uxth	r3, r3
 8007052:	029b      	lsls	r3, r3, #10
 8007054:	b29b      	uxth	r3, r3
 8007056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800705e:	b29a      	uxth	r2, r3
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	e053      	b.n	800710e <USB_EPStartXfer+0x858>
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800706a:	2b00      	cmp	r3, #0
 800706c:	d112      	bne.n	8007094 <USB_EPStartXfer+0x7de>
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007078:	b29a      	uxth	r2, r3
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	801a      	strh	r2, [r3, #0]
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	e03c      	b.n	800710e <USB_EPStartXfer+0x858>
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800709e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <USB_EPStartXfer+0x7fe>
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ae:	3301      	adds	r3, #1
 80070b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	b29a      	uxth	r2, r3
 80070be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c0:	801a      	strh	r2, [r3, #0]
 80070c2:	e024      	b.n	800710e <USB_EPStartXfer+0x858>
 80070c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11c      	bne.n	800710e <USB_EPStartXfer+0x858>
 80070d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e8:	4413      	add	r3, r2
 80070ea:	643b      	str	r3, [r7, #64]	; 0x40
 80070ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00da      	lsls	r2, r3, #3
 80070fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	b29a      	uxth	r2, r3
 800710a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800710e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712e:	b29b      	uxth	r3, r3
 8007130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007134:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007138:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800713c:	6800      	ldr	r0, [r0, #0]
 800713e:	f001 f82a 	bl	8008196 <USB_WritePMA>
 8007142:	e213      	b.n	800756c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	441a      	add	r2, r3
 8007198:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800719c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071d0:	4413      	add	r3, r2
 80071d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	00da      	lsls	r2, r3, #3
 80071e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	891b      	ldrh	r3, [r3, #8]
 8007202:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6959      	ldr	r1, [r3, #20]
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007216:	b29b      	uxth	r3, r3
 8007218:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800721c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007220:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007224:	6800      	ldr	r0, [r0, #0]
 8007226:	f000 ffb6 	bl	8008196 <USB_WritePMA>
 800722a:	e19f      	b.n	800756c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800722c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	1ad2      	subs	r2, r2, r3
 800723e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80bc 	beq.w	80073ea <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	673b      	str	r3, [r7, #112]	; 0x70
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d16d      	bne.n	800736a <USB_EPStartXfer+0xab4>
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	66bb      	str	r3, [r7, #104]	; 0x68
 800729a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ae:	4413      	add	r3, r2
 80072b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	00da      	lsls	r2, r3, #3
 80072c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072c8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ce:	2b3e      	cmp	r3, #62	; 0x3e
 80072d0:	d91c      	bls.n	800730c <USB_EPStartXfer+0xa56>
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USB_EPStartXfer+0xa3c>
 80072e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072ec:	3b01      	subs	r3, #1
 80072ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	e053      	b.n	80073b4 <USB_EPStartXfer+0xafe>
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007310:	2b00      	cmp	r3, #0
 8007312:	d112      	bne.n	800733a <USB_EPStartXfer+0xa84>
 8007314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800731e:	b29a      	uxth	r2, r3
 8007320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800732e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007332:	b29a      	uxth	r2, r3
 8007334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	e03c      	b.n	80073b4 <USB_EPStartXfer+0xafe>
 800733a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <USB_EPStartXfer+0xaa4>
 8007350:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007354:	3301      	adds	r3, #1
 8007356:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800735a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800735e:	b29b      	uxth	r3, r3
 8007360:	029b      	lsls	r3, r3, #10
 8007362:	b29a      	uxth	r2, r3
 8007364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007366:	801a      	strh	r2, [r3, #0]
 8007368:	e024      	b.n	80073b4 <USB_EPStartXfer+0xafe>
 800736a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	785b      	ldrb	r3, [r3, #1]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d11c      	bne.n	80073b4 <USB_EPStartXfer+0xafe>
 800737a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007388:	b29b      	uxth	r3, r3
 800738a:	461a      	mov	r2, r3
 800738c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738e:	4413      	add	r3, r2
 8007390:	673b      	str	r3, [r7, #112]	; 0x70
 8007392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	895b      	ldrh	r3, [r3, #10]
 80073c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6959      	ldr	r1, [r3, #20]
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	f000 fed7 	bl	8008196 <USB_WritePMA>
 80073e8:	e0c0      	b.n	800756c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d16d      	bne.n	80074d6 <USB_EPStartXfer+0xc20>
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800741a:	4413      	add	r3, r2
 800741c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800741e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	00da      	lsls	r2, r3, #3
 800742c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800742e:	4413      	add	r3, r2
 8007430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007434:	67bb      	str	r3, [r7, #120]	; 0x78
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743a:	2b3e      	cmp	r3, #62	; 0x3e
 800743c:	d91c      	bls.n	8007478 <USB_EPStartXfer+0xbc2>
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <USB_EPStartXfer+0xba8>
 8007454:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007458:	3b01      	subs	r3, #1
 800745a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800745e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007462:	b29b      	uxth	r3, r3
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e05f      	b.n	8007538 <USB_EPStartXfer+0xc82>
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747c:	2b00      	cmp	r3, #0
 800747e:	d112      	bne.n	80074a6 <USB_EPStartXfer+0xbf0>
 8007480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800748a:	b29a      	uxth	r2, r3
 800748c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800748e:	801a      	strh	r2, [r3, #0]
 8007490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749e:	b29a      	uxth	r2, r3
 80074a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e048      	b.n	8007538 <USB_EPStartXfer+0xc82>
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <USB_EPStartXfer+0xc10>
 80074bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074c0:	3301      	adds	r3, #1
 80074c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	e030      	b.n	8007538 <USB_EPStartXfer+0xc82>
 80074d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d128      	bne.n	8007538 <USB_EPStartXfer+0xc82>
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800750a:	4413      	add	r3, r2
 800750c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	00da      	lsls	r2, r3, #3
 800751e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007522:	4413      	add	r3, r2
 8007524:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007530:	b29a      	uxth	r2, r3
 8007532:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007536:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	891b      	ldrh	r3, [r3, #8]
 8007544:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6959      	ldr	r1, [r3, #20]
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007558:	b29b      	uxth	r3, r3
 800755a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800755e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007562:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007566:	6800      	ldr	r0, [r0, #0]
 8007568:	f000 fe15 	bl	8008196 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800756c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800758e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007592:	817b      	strh	r3, [r7, #10]
 8007594:	897b      	ldrh	r3, [r7, #10]
 8007596:	f083 0310 	eor.w	r3, r3, #16
 800759a:	817b      	strh	r3, [r7, #10]
 800759c:	897b      	ldrh	r3, [r7, #10]
 800759e:	f083 0320 	eor.w	r3, r3, #32
 80075a2:	817b      	strh	r3, [r7, #10]
 80075a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	441a      	add	r2, r3
 80075be:	897b      	ldrh	r3, [r7, #10]
 80075c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	8013      	strh	r3, [r2, #0]
 80075d4:	f000 bc9f 	b.w	8007f16 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	7b1b      	ldrb	r3, [r3, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 80ae 	bne.w	8007746 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d917      	bls.n	8007636 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	619a      	str	r2, [r3, #24]
 8007634:	e00e      	b.n	8007654 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007678:	4413      	add	r3, r2
 800767a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800767e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	00da      	lsls	r2, r3, #3
 800768c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007690:	4413      	add	r3, r2
 8007692:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769e:	2b3e      	cmp	r3, #62	; 0x3e
 80076a0:	d91d      	bls.n	80076de <USB_EPStartXfer+0xe28>
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0xe0c>
 80076b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e3e1      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d116      	bne.n	8007714 <USB_EPStartXfer+0xe5e>
 80076e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800770a:	b29a      	uxth	r2, r3
 800770c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	e3c6      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800771e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USB_EPStartXfer+0xe7e>
 800772a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800772e:	3301      	adds	r3, #1
 8007730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007738:	b29b      	uxth	r3, r3
 800773a:	029b      	lsls	r3, r3, #10
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e3ad      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	2b02      	cmp	r3, #2
 8007754:	f040 8200 	bne.w	8007b58 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	785b      	ldrb	r3, [r3, #1]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 8091 	bne.w	800788c <USB_EPStartXfer+0xfd6>
 800776a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	00da      	lsls	r2, r3, #3
 80077a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b3e      	cmp	r3, #62	; 0x3e
 80077be:	d925      	bls.n	800780c <USB_EPStartXfer+0xf56>
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d104      	bne.n	80077f0 <USB_EPStartXfer+0xf3a>
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	3b01      	subs	r3, #1
 80077ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	029b      	lsls	r3, r3, #10
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e074      	b.n	80078f6 <USB_EPStartXfer+0x1040>
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d116      	bne.n	800784a <USB_EPStartXfer+0xf94>
 800781c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	b29b      	uxth	r3, r3
 8007824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007828:	b29a      	uxth	r2, r3
 800782a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007840:	b29a      	uxth	r2, r3
 8007842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	e055      	b.n	80078f6 <USB_EPStartXfer+0x1040>
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800785c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <USB_EPStartXfer+0xfc4>
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	3301      	adds	r3, #1
 8007876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	b29b      	uxth	r3, r3
 8007880:	029b      	lsls	r3, r3, #10
 8007882:	b29a      	uxth	r2, r3
 8007884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	e034      	b.n	80078f6 <USB_EPStartXfer+0x1040>
 800788c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d12c      	bne.n	80078f6 <USB_EPStartXfer+0x1040>
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	00da      	lsls	r2, r3, #3
 80078d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078d8:	4413      	add	r3, r2
 80078da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f040 8091 	bne.w	8007a38 <USB_EPStartXfer+0x1182>
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800793a:	4413      	add	r3, r2
 800793c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00da      	lsls	r2, r3, #3
 800794e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007952:	4413      	add	r3, r2
 8007954:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800795c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b3e      	cmp	r3, #62	; 0x3e
 800796a:	d925      	bls.n	80079b8 <USB_EPStartXfer+0x1102>
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800797e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <USB_EPStartXfer+0x10e6>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	3b01      	subs	r3, #1
 8007998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	029b      	lsls	r3, r3, #10
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	e06d      	b.n	8007a94 <USB_EPStartXfer+0x11de>
 80079b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d116      	bne.n	80079f6 <USB_EPStartXfer+0x1140>
 80079c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	e04e      	b.n	8007a94 <USB_EPStartXfer+0x11de>
 80079f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <USB_EPStartXfer+0x1170>
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	3301      	adds	r3, #1
 8007a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	029b      	lsls	r3, r3, #10
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e02d      	b.n	8007a94 <USB_EPStartXfer+0x11de>
 8007a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d125      	bne.n	8007a94 <USB_EPStartXfer+0x11de>
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a5e:	4413      	add	r3, r2
 8007a60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	00da      	lsls	r2, r3, #3
 8007a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a76:	4413      	add	r3, r2
 8007a78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 81fe 	beq.w	8007ea2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ac6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <USB_EPStartXfer+0x1228>
 8007ad2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10d      	bne.n	8007afa <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ade:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 81db 	bne.w	8007ea2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f040 81d4 	bne.w	8007ea2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	8013      	strh	r3, [r2, #0]
 8007b56:	e1a4      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	f040 819a 	bne.w	8007e9e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d917      	bls.n	8007bb6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba6:	1ad2      	subs	r2, r2, r3
 8007ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	619a      	str	r2, [r3, #24]
 8007bb4:	e00e      	b.n	8007bd4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d178      	bne.n	8007cd6 <USB_EPStartXfer+0x1420>
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c08:	4413      	add	r3, r2
 8007c0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	00da      	lsls	r2, r3, #3
 8007c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c20:	4413      	add	r3, r2
 8007c22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c30:	d91d      	bls.n	8007c6e <USB_EPStartXfer+0x13b8>
 8007c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USB_EPStartXfer+0x139c>
 8007c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c6a:	801a      	strh	r2, [r3, #0]
 8007c6c:	e064      	b.n	8007d38 <USB_EPStartXfer+0x1482>
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d116      	bne.n	8007ca4 <USB_EPStartXfer+0x13ee>
 8007c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e049      	b.n	8007d38 <USB_EPStartXfer+0x1482>
 8007ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d004      	beq.n	8007cc4 <USB_EPStartXfer+0x140e>
 8007cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	e030      	b.n	8007d38 <USB_EPStartXfer+0x1482>
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d128      	bne.n	8007d38 <USB_EPStartXfer+0x1482>
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	00da      	lsls	r2, r3, #3
 8007d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d36:	801a      	strh	r2, [r3, #0]
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	785b      	ldrb	r3, [r3, #1]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d178      	bne.n	8007e48 <USB_EPStartXfer+0x1592>
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	00da      	lsls	r2, r3, #3
 8007d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d92:	4413      	add	r3, r2
 8007d94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da0:	2b3e      	cmp	r3, #62	; 0x3e
 8007da2:	d91d      	bls.n	8007de0 <USB_EPStartXfer+0x152a>
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <USB_EPStartXfer+0x150e>
 8007dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	029b      	lsls	r3, r3, #10
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e060      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
 8007de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d116      	bne.n	8007e16 <USB_EPStartXfer+0x1560>
 8007de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dfa:	801a      	strh	r2, [r3, #0]
 8007dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e045      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
 8007e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d004      	beq.n	8007e36 <USB_EPStartXfer+0x1580>
 8007e2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e30:	3301      	adds	r3, #1
 8007e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	e02c      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
 8007e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	785b      	ldrb	r3, [r3, #1]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d124      	bne.n	8007ea2 <USB_EPStartXfer+0x15ec>
 8007e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e6e:	4413      	add	r3, r2
 8007e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	00da      	lsls	r2, r3, #3
 8007e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e86:	4413      	add	r3, r2
 8007e88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e001      	b.n	8007ea2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e03a      	b.n	8007f18 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ecc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ed4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ed8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ee0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	441a      	add	r2, r3
 8007efe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d020      	beq.n	8007f76 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f4a:	81bb      	strh	r3, [r7, #12]
 8007f4c:	89bb      	ldrh	r3, [r7, #12]
 8007f4e:	f083 0310 	eor.w	r3, r3, #16
 8007f52:	81bb      	strh	r3, [r7, #12]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	441a      	add	r2, r3
 8007f5e:	89bb      	ldrh	r3, [r7, #12]
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]
 8007f74:	e01f      	b.n	8007fb6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8c:	81fb      	strh	r3, [r7, #14]
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f94:	81fb      	strh	r3, [r7, #14]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
 8007fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	7b1b      	ldrb	r3, [r3, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 809d 	bne.w	8008112 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	785b      	ldrb	r3, [r3, #1]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d04c      	beq.n	800807a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	823b      	strh	r3, [r7, #16]
 8007fee:	8a3b      	ldrh	r3, [r7, #16]
 8007ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <USB_EPClearStall+0x6c>
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	81fb      	strh	r3, [r7, #14]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	441a      	add	r2, r3
 800801a:	89fb      	ldrh	r3, [r7, #14]
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008028:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d06c      	beq.n	8008112 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800804a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800804e:	81bb      	strh	r3, [r7, #12]
 8008050:	89bb      	ldrh	r3, [r7, #12]
 8008052:	f083 0320 	eor.w	r3, r3, #32
 8008056:	81bb      	strh	r3, [r7, #12]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	441a      	add	r2, r3
 8008062:	89bb      	ldrh	r3, [r7, #12]
 8008064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008074:	b29b      	uxth	r3, r3
 8008076:	8013      	strh	r3, [r2, #0]
 8008078:	e04b      	b.n	8008112 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	82fb      	strh	r3, [r7, #22]
 8008088:	8afb      	ldrh	r3, [r7, #22]
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01b      	beq.n	80080ca <USB_EPClearStall+0x106>
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a8:	82bb      	strh	r3, [r7, #20]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	441a      	add	r2, r3
 80080b4:	8abb      	ldrh	r3, [r7, #20]
 80080b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e0:	827b      	strh	r3, [r7, #18]
 80080e2:	8a7b      	ldrh	r3, [r7, #18]
 80080e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080e8:	827b      	strh	r3, [r7, #18]
 80080ea:	8a7b      	ldrh	r3, [r7, #18]
 80080ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080f0:	827b      	strh	r3, [r7, #18]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	441a      	add	r2, r3
 80080fc:	8a7b      	ldrh	r3, [r7, #18]
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d103      	bne.n	800813a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2280      	movs	r2, #128	; 0x80
 8008136:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008184:	b29b      	uxth	r3, r3
 8008186:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008188:	68fb      	ldr	r3, [r7, #12]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008196:	b480      	push	{r7}
 8008198:	b08d      	sub	sp, #52	; 0x34
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	4611      	mov	r1, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	460b      	mov	r3, r1
 80081a6:	80fb      	strh	r3, [r7, #6]
 80081a8:	4613      	mov	r3, r2
 80081aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081ac:	88bb      	ldrh	r3, [r7, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081bc:	88fa      	ldrh	r2, [r7, #6]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081cc:	e01b      	b.n	8008206 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	3301      	adds	r3, #1
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	3302      	adds	r3, #2
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	3301      	adds	r3, #1
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	3b01      	subs	r3, #1
 8008204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e0      	bne.n	80081ce <USB_WritePMA+0x38>
  }
}
 800820c:	bf00      	nop
 800820e:	bf00      	nop
 8008210:	3734      	adds	r7, #52	; 0x34
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800821a:	b480      	push	{r7}
 800821c:	b08b      	sub	sp, #44	; 0x2c
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	4611      	mov	r1, r2
 8008226:	461a      	mov	r2, r3
 8008228:	460b      	mov	r3, r1
 800822a:	80fb      	strh	r3, [r7, #6]
 800822c:	4613      	mov	r3, r2
 800822e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008230:	88bb      	ldrh	r3, [r7, #4]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008240:	88fa      	ldrh	r2, [r7, #6]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800824a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
 8008250:	e018      	b.n	8008284 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	3302      	adds	r3, #2
 800825e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	3301      	adds	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	b2da      	uxtb	r2, r3
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	3301      	adds	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	3b01      	subs	r3, #1
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e3      	bne.n	8008252 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800828a:	88bb      	ldrh	r3, [r7, #4]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d007      	beq.n	80082a6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	701a      	strb	r2, [r3, #0]
  }
}
 80082a6:	bf00      	nop
 80082a8:	372c      	adds	r7, #44	; 0x2c
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082be:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082c2:	f002 f901 	bl	800a4c8 <USBD_static_malloc>
 80082c6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80082d6:	2302      	movs	r3, #2
 80082d8:	e066      	b.n	80083a8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7c1b      	ldrb	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d119      	bne.n	800831e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ee:	2202      	movs	r2, #2
 80082f0:	2181      	movs	r1, #129	; 0x81
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 ff8d 	bl	800a212 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008302:	2202      	movs	r2, #2
 8008304:	2101      	movs	r1, #1
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 ff83 	bl	800a212 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2210      	movs	r2, #16
 8008318:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800831c:	e016      	b.n	800834c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	2202      	movs	r2, #2
 8008322:	2181      	movs	r1, #129	; 0x81
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 ff74 	bl	800a212 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008330:	2340      	movs	r3, #64	; 0x40
 8008332:	2202      	movs	r2, #2
 8008334:	2101      	movs	r1, #1
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 ff6b 	bl	800a212 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2210      	movs	r2, #16
 8008348:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800834c:	2308      	movs	r3, #8
 800834e:	2203      	movs	r2, #3
 8008350:	2182      	movs	r1, #130	; 0x82
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 ff5d 	bl	800a212 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1b      	ldrb	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800838c:	2101      	movs	r1, #1
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f002 f82f 	bl	800a3f2 <USBD_LL_PrepareReceive>
 8008394:	e007      	b.n	80083a6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	2101      	movs	r1, #1
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f002 f826 	bl	800a3f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083bc:	2181      	movs	r1, #129	; 0x81
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 ff4d 	bl	800a25e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 ff46 	bl	800a25e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083da:	2182      	movs	r1, #130	; 0x82
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 ff3e 	bl	800a25e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800840c:	4618      	mov	r0, r3
 800840e:	f002 f869 	bl	800a4e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008434:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	e0af      	b.n	80085ac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03f      	beq.n	80084d8 <USBD_CDC_Setup+0xb4>
 8008458:	2b20      	cmp	r3, #32
 800845a:	f040 809f 	bne.w	800859c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	88db      	ldrh	r3, [r3, #6]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02e      	beq.n	80084c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	b25b      	sxtb	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	da16      	bge.n	800849e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800847c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	88d2      	ldrh	r2, [r2, #6]
 8008482:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	88db      	ldrh	r3, [r3, #6]
 8008488:	2b07      	cmp	r3, #7
 800848a:	bf28      	it	cs
 800848c:	2307      	movcs	r3, #7
 800848e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	89fa      	ldrh	r2, [r7, #14]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 facf 	bl	8009a3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800849c:	e085      	b.n	80085aa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	785a      	ldrb	r2, [r3, #1]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	88db      	ldrh	r3, [r3, #6]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084b4:	6939      	ldr	r1, [r7, #16]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fae8 	bl	8009a92 <USBD_CtlPrepareRx>
      break;
 80084c2:	e072      	b.n	80085aa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	7850      	ldrb	r0, [r2, #1]
 80084d0:	2200      	movs	r2, #0
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	4798      	blx	r3
      break;
 80084d6:	e068      	b.n	80085aa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	2b0b      	cmp	r3, #11
 80084de:	d852      	bhi.n	8008586 <USBD_CDC_Setup+0x162>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_CDC_Setup+0xc4>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008595 	.word	0x08008595
 80084f0:	08008587 	.word	0x08008587
 80084f4:	08008587 	.word	0x08008587
 80084f8:	08008587 	.word	0x08008587
 80084fc:	08008587 	.word	0x08008587
 8008500:	08008587 	.word	0x08008587
 8008504:	08008587 	.word	0x08008587
 8008508:	08008587 	.word	0x08008587
 800850c:	08008587 	.word	0x08008587
 8008510:	08008543 	.word	0x08008543
 8008514:	0800856d 	.word	0x0800856d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b03      	cmp	r3, #3
 8008522:	d107      	bne.n	8008534 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008524:	f107 030a 	add.w	r3, r7, #10
 8008528:	2202      	movs	r2, #2
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fa84 	bl	8009a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008532:	e032      	b.n	800859a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fa0e 	bl	8009958 <USBD_CtlError>
            ret = USBD_FAIL;
 800853c:	2303      	movs	r3, #3
 800853e:	75fb      	strb	r3, [r7, #23]
          break;
 8008540:	e02b      	b.n	800859a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b03      	cmp	r3, #3
 800854c:	d107      	bne.n	800855e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800854e:	f107 030d 	add.w	r3, r7, #13
 8008552:	2201      	movs	r2, #1
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fa6f 	bl	8009a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800855c:	e01d      	b.n	800859a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f9f9 	bl	8009958 <USBD_CtlError>
            ret = USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	75fb      	strb	r3, [r7, #23]
          break;
 800856a:	e016      	b.n	800859a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b03      	cmp	r3, #3
 8008576:	d00f      	beq.n	8008598 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f9ec 	bl	8009958 <USBD_CtlError>
            ret = USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008584:	e008      	b.n	8008598 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 f9e5 	bl	8009958 <USBD_CtlError>
          ret = USBD_FAIL;
 800858e:	2303      	movs	r3, #3
 8008590:	75fb      	strb	r3, [r7, #23]
          break;
 8008592:	e002      	b.n	800859a <USBD_CDC_Setup+0x176>
          break;
 8008594:	bf00      	nop
 8008596:	e008      	b.n	80085aa <USBD_CDC_Setup+0x186>
          break;
 8008598:	bf00      	nop
      }
      break;
 800859a:	e006      	b.n	80085aa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 f9da 	bl	8009958 <USBD_CtlError>
      ret = USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e04f      	b.n	8008676 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4613      	mov	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	3318      	adds	r3, #24
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d029      	beq.n	8008648 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	3318      	adds	r3, #24
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	78f9      	ldrb	r1, [r7, #3]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	460b      	mov	r3, r1
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	440b      	add	r3, r1
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	4403      	add	r3, r0
 8008614:	3338      	adds	r3, #56	; 0x38
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	fbb2 f1f3 	udiv	r1, r2, r3
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008622:	2b00      	cmp	r3, #0
 8008624:	d110      	bne.n	8008648 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	3318      	adds	r3, #24
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800863a:	78f9      	ldrb	r1, [r7, #3]
 800863c:	2300      	movs	r3, #0
 800863e:	2200      	movs	r2, #0
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 feb5 	bl	800a3b0 <USBD_LL_Transmit>
 8008646:	e015      	b.n	8008674 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008690:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e015      	b.n	80086cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fec5 	bl	800a434 <USBD_LL_GetRxDataSize>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086c6:	4611      	mov	r1, r2
 80086c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e01b      	b.n	8008726 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d015      	beq.n	8008724 <USBD_CDC_EP0_RxReady+0x50>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80086fe:	2bff      	cmp	r3, #255	; 0xff
 8008700:	d010      	beq.n	8008724 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008710:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008718:	b292      	uxth	r2, r2
 800871a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	22ff      	movs	r2, #255	; 0xff
 8008720:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2243      	movs	r2, #67	; 0x43
 800873c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800873e:	4b03      	ldr	r3, [pc, #12]	; (800874c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	200000a8 	.word	0x200000a8

08008750 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2243      	movs	r2, #67	; 0x43
 800875c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	; (800876c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000064 	.word	0x20000064

08008770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2243      	movs	r2, #67	; 0x43
 800877c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	; (800878c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	200000ec 	.word	0x200000ec

08008790 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	220a      	movs	r2, #10
 800879c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800879e:	4b03      	ldr	r3, [pc, #12]	; (80087ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000020 	.word	0x20000020

080087b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e004      	b.n	80087ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e008      	b.n	800880a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008826:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800882e:	2303      	movs	r3, #3
 8008830:	e004      	b.n	800883c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008856:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008866:	2303      	movs	r3, #3
 8008868:	e01a      	b.n	80088a0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008870:	2b00      	cmp	r3, #0
 8008872:	d114      	bne.n	800889e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2201      	movs	r2, #1
 8008878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008892:	2181      	movs	r1, #129	; 0x81
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 fd8b 	bl	800a3b0 <USBD_LL_Transmit>

    ret = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e016      	b.n	80088f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7c1b      	ldrb	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d8:	2101      	movs	r1, #1
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fd89 	bl	800a3f2 <USBD_LL_PrepareReceive>
 80088e0:	e007      	b.n	80088f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	2101      	movs	r1, #1
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f001 fd80 	bl	800a3f2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008910:	2303      	movs	r3, #3
 8008912:	e01f      	b.n	8008954 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	79fa      	ldrb	r2, [r7, #7]
 8008946:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f001 fbe7 	bl	800a11c <USBD_LL_Init>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	e016      	b.n	80089a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	f107 020e 	add.w	r2, r7, #14
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	4602      	mov	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fc12 	bl	800a1dc <USBD_LL_Start>
 80089b8:	4603      	mov	r3, r0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	4611      	mov	r1, r2
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
  }

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 ff46 	bl	80098e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a66:	461a      	mov	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d01a      	beq.n	8008ab2 <USBD_LL_SetupStage+0x72>
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d822      	bhi.n	8008ac6 <USBD_LL_SetupStage+0x86>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <USBD_LL_SetupStage+0x4a>
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d00a      	beq.n	8008a9e <USBD_LL_SetupStage+0x5e>
 8008a88:	e01d      	b.n	8008ac6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9ee 	bl	8008e74 <USBD_StdDevReq>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e020      	b.n	8008ae0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa52 	bl	8008f50 <USBD_StdItfReq>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab0:	e016      	b.n	8008ae0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa91 	bl	8008fe2 <USBD_StdEPReq>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac4:	e00c      	b.n	8008ae0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008acc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fbe1 	bl	800a29c <USBD_LL_StallEP>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	bf00      	nop
  }

  return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b086      	sub	sp, #24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	460b      	mov	r3, r1
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d138      	bne.n	8008b70 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d14a      	bne.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d913      	bls.n	8008b44 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	4293      	cmp	r3, r2
 8008b34:	bf28      	it	cs
 8008b36:	4613      	movcs	r3, r2
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 ffc5 	bl	8009acc <USBD_CtlContinueRx>
 8008b42:	e030      	b.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d10b      	bne.n	8008b68 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 ffc0 	bl	8009aee <USBD_CtlSendStatus>
 8008b6e:	e01a      	b.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d114      	bne.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	7afa      	ldrb	r2, [r7, #11]
 8008b92:	4611      	mov	r1, r2
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	4798      	blx	r3
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	e000      	b.n	8008ba8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bbe:	7afb      	ldrb	r3, [r7, #11]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d16b      	bne.n	8008c9c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3314      	adds	r3, #20
 8008bc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d156      	bne.n	8008c82 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d914      	bls.n	8008c0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 ff3a 	bl	8009a70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2100      	movs	r1, #0
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f001 fbf5 	bl	800a3f2 <USBD_LL_PrepareReceive>
 8008c08:	e03b      	b.n	8008c82 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d11c      	bne.n	8008c50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d316      	bcc.n	8008c50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d20f      	bcs.n	8008c50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c30:	2200      	movs	r2, #0
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 ff1b 	bl	8009a70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c42:	2300      	movs	r3, #0
 8008c44:	2200      	movs	r2, #0
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 fbd2 	bl	800a3f2 <USBD_LL_PrepareReceive>
 8008c4e:	e018      	b.n	8008c82 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d10b      	bne.n	8008c74 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c74:	2180      	movs	r1, #128	; 0x80
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f001 fb10 	bl	800a29c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 ff49 	bl	8009b14 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d122      	bne.n	8008cd2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f7ff fe98 	bl	80089c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c9a:	e01a      	b.n	8008cd2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d114      	bne.n	8008cd2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00e      	beq.n	8008cd2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	7afa      	ldrb	r2, [r7, #11]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	4798      	blx	r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	e000      	b.n	8008cd4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	e02f      	b.n	8008d70 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00f      	beq.n	8008d3a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d009      	beq.n	8008d3a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	6852      	ldr	r2, [r2, #4]
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	4611      	mov	r1, r2
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d3a:	2340      	movs	r3, #64	; 0x40
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2100      	movs	r1, #0
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fa66 	bl	800a212 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2240      	movs	r2, #64	; 0x40
 8008d52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d56:	2340      	movs	r3, #64	; 0x40
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2180      	movs	r1, #128	; 0x80
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f001 fa58 	bl	800a212 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2240      	movs	r2, #64	; 0x40
 8008d6c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2204      	movs	r2, #4
 8008db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d106      	bne.n	8008de6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e012      	b.n	8008e30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d10b      	bne.n	8008e2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e56:	8a3b      	ldrh	r3, [r7, #16]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	b21a      	sxth	r2, r3
 8008e5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	b21b      	sxth	r3, r3
 8008e64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e66:	89fb      	ldrh	r3, [r7, #14]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d005      	beq.n	8008e9a <USBD_StdDevReq+0x26>
 8008e8e:	2b40      	cmp	r3, #64	; 0x40
 8008e90:	d853      	bhi.n	8008f3a <USBD_StdDevReq+0xc6>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00b      	beq.n	8008eae <USBD_StdDevReq+0x3a>
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d14f      	bne.n	8008f3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008eac:	e04a      	b.n	8008f44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	785b      	ldrb	r3, [r3, #1]
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	d83b      	bhi.n	8008f2e <USBD_StdDevReq+0xba>
 8008eb6:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_StdDevReq+0x48>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008f11 	.word	0x08008f11
 8008ec0:	08008f25 	.word	0x08008f25
 8008ec4:	08008f2f 	.word	0x08008f2f
 8008ec8:	08008f1b 	.word	0x08008f1b
 8008ecc:	08008f2f 	.word	0x08008f2f
 8008ed0:	08008eef 	.word	0x08008eef
 8008ed4:	08008ee5 	.word	0x08008ee5
 8008ed8:	08008f2f 	.word	0x08008f2f
 8008edc:	08008f07 	.word	0x08008f07
 8008ee0:	08008ef9 	.word	0x08008ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9de 	bl	80092a8 <USBD_GetDescriptor>
          break;
 8008eec:	e024      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fb6d 	bl	80095d0 <USBD_SetAddress>
          break;
 8008ef6:	e01f      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fbac 	bl	8009658 <USBD_SetConfig>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
          break;
 8008f04:	e018      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fc4b 	bl	80097a4 <USBD_GetConfig>
          break;
 8008f0e:	e013      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fc7c 	bl	8009810 <USBD_GetStatus>
          break;
 8008f18:	e00e      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fcab 	bl	8009878 <USBD_SetFeature>
          break;
 8008f22:	e009      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fcba 	bl	80098a0 <USBD_ClrFeature>
          break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fd11 	bl	8009958 <USBD_CtlError>
          break;
 8008f36:	bf00      	nop
      }
      break;
 8008f38:	e004      	b.n	8008f44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fd0b 	bl	8009958 <USBD_CtlError>
      break;
 8008f42:	bf00      	nop
  }

  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop

08008f50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d005      	beq.n	8008f76 <USBD_StdItfReq+0x26>
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d82f      	bhi.n	8008fce <USBD_StdItfReq+0x7e>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <USBD_StdItfReq+0x26>
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	d12b      	bne.n	8008fce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d81d      	bhi.n	8008fc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	889b      	ldrh	r3, [r3, #4]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d813      	bhi.n	8008fb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	88db      	ldrh	r3, [r3, #6]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d110      	bne.n	8008fca <USBD_StdItfReq+0x7a>
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10d      	bne.n	8008fca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fd9d 	bl	8009aee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fb4:	e009      	b.n	8008fca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fccd 	bl	8009958 <USBD_CtlError>
          break;
 8008fbe:	e004      	b.n	8008fca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fcc8 	bl	8009958 <USBD_CtlError>
          break;
 8008fc8:	e000      	b.n	8008fcc <USBD_StdItfReq+0x7c>
          break;
 8008fca:	bf00      	nop
      }
      break;
 8008fcc:	e004      	b.n	8008fd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fcc1 	bl	8009958 <USBD_CtlError>
      break;
 8008fd6:	bf00      	nop
  }

  return ret;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	889b      	ldrh	r3, [r3, #4]
 8008ff4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d007      	beq.n	8009012 <USBD_StdEPReq+0x30>
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	f200 8145 	bhi.w	8009292 <USBD_StdEPReq+0x2b0>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00c      	beq.n	8009026 <USBD_StdEPReq+0x44>
 800900c:	2b20      	cmp	r3, #32
 800900e:	f040 8140 	bne.w	8009292 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e13a      	b.n	800929c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d007      	beq.n	800903e <USBD_StdEPReq+0x5c>
 800902e:	2b03      	cmp	r3, #3
 8009030:	f300 8129 	bgt.w	8009286 <USBD_StdEPReq+0x2a4>
 8009034:	2b00      	cmp	r3, #0
 8009036:	d07f      	beq.n	8009138 <USBD_StdEPReq+0x156>
 8009038:	2b01      	cmp	r3, #1
 800903a:	d03c      	beq.n	80090b6 <USBD_StdEPReq+0xd4>
 800903c:	e123      	b.n	8009286 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d002      	beq.n	8009050 <USBD_StdEPReq+0x6e>
 800904a:	2b03      	cmp	r3, #3
 800904c:	d016      	beq.n	800907c <USBD_StdEPReq+0x9a>
 800904e:	e02c      	b.n	80090aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00d      	beq.n	8009072 <USBD_StdEPReq+0x90>
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b80      	cmp	r3, #128	; 0x80
 800905a:	d00a      	beq.n	8009072 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 f91b 	bl	800a29c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009066:	2180      	movs	r1, #128	; 0x80
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 f917 	bl	800a29c <USBD_LL_StallEP>
 800906e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009070:	e020      	b.n	80090b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc6f 	bl	8009958 <USBD_CtlError>
              break;
 800907a:	e01b      	b.n	80090b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10e      	bne.n	80090a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <USBD_StdEPReq+0xc0>
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b80      	cmp	r3, #128	; 0x80
 800908e:	d008      	beq.n	80090a2 <USBD_StdEPReq+0xc0>
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d104      	bne.n	80090a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f8fd 	bl	800a29c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fd23 	bl	8009aee <USBD_CtlSendStatus>

              break;
 80090a8:	e004      	b.n	80090b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc53 	bl	8009958 <USBD_CtlError>
              break;
 80090b2:	bf00      	nop
          }
          break;
 80090b4:	e0ec      	b.n	8009290 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d002      	beq.n	80090c8 <USBD_StdEPReq+0xe6>
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d016      	beq.n	80090f4 <USBD_StdEPReq+0x112>
 80090c6:	e030      	b.n	800912a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00d      	beq.n	80090ea <USBD_StdEPReq+0x108>
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b80      	cmp	r3, #128	; 0x80
 80090d2:	d00a      	beq.n	80090ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f8df 	bl	800a29c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 f8db 	bl	800a29c <USBD_LL_StallEP>
 80090e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090e8:	e025      	b.n	8009136 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fc33 	bl	8009958 <USBD_CtlError>
              break;
 80090f2:	e020      	b.n	8009136 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	885b      	ldrh	r3, [r3, #2]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11b      	bne.n	8009134 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f8e5 	bl	800a2da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fcec 	bl	8009aee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009128:	e004      	b.n	8009134 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fc13 	bl	8009958 <USBD_CtlError>
              break;
 8009132:	e000      	b.n	8009136 <USBD_StdEPReq+0x154>
              break;
 8009134:	bf00      	nop
          }
          break;
 8009136:	e0ab      	b.n	8009290 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d002      	beq.n	800914a <USBD_StdEPReq+0x168>
 8009144:	2b03      	cmp	r3, #3
 8009146:	d032      	beq.n	80091ae <USBD_StdEPReq+0x1cc>
 8009148:	e097      	b.n	800927a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <USBD_StdEPReq+0x17e>
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b80      	cmp	r3, #128	; 0x80
 8009154:	d004      	beq.n	8009160 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fbfd 	bl	8009958 <USBD_CtlError>
                break;
 800915e:	e091      	b.n	8009284 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	da0b      	bge.n	8009180 <USBD_StdEPReq+0x19e>
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	3310      	adds	r3, #16
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	e00b      	b.n	8009198 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	4413      	add	r3, r2
 8009196:	3304      	adds	r3, #4
 8009198:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2202      	movs	r2, #2
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc47 	bl	8009a3a <USBD_CtlSendData>
              break;
 80091ac:	e06a      	b.n	8009284 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	da11      	bge.n	80091da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	f003 020f 	and.w	r2, r3, #15
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	3324      	adds	r3, #36	; 0x24
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d117      	bne.n	8009200 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fbc0 	bl	8009958 <USBD_CtlError>
                  break;
 80091d8:	e054      	b.n	8009284 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	f003 020f 	and.w	r2, r3, #15
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fbad 	bl	8009958 <USBD_CtlError>
                  break;
 80091fe:	e041      	b.n	8009284 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da0b      	bge.n	8009220 <USBD_StdEPReq+0x23e>
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	3310      	adds	r3, #16
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	3304      	adds	r3, #4
 800921e:	e00b      	b.n	8009238 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	3304      	adds	r3, #4
 8009238:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <USBD_StdEPReq+0x264>
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2b80      	cmp	r3, #128	; 0x80
 8009244:	d103      	bne.n	800924e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
 800924c:	e00e      	b.n	800926c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 f860 	bl	800a318 <USBD_LL_IsStallEP>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2201      	movs	r2, #1
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e002      	b.n	800926c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2202      	movs	r2, #2
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fbe1 	bl	8009a3a <USBD_CtlSendData>
              break;
 8009278:	e004      	b.n	8009284 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fb6b 	bl	8009958 <USBD_CtlError>
              break;
 8009282:	bf00      	nop
          }
          break;
 8009284:	e004      	b.n	8009290 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fb65 	bl	8009958 <USBD_CtlError>
          break;
 800928e:	bf00      	nop
      }
      break;
 8009290:	e004      	b.n	800929c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb5f 	bl	8009958 <USBD_CtlError>
      break;
 800929a:	bf00      	nop
  }

  return ret;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	0a1b      	lsrs	r3, r3, #8
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	2b0e      	cmp	r3, #14
 80092ca:	f200 8152 	bhi.w	8009572 <USBD_GetDescriptor+0x2ca>
 80092ce:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <USBD_GetDescriptor+0x2c>)
 80092d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d4:	08009345 	.word	0x08009345
 80092d8:	0800935d 	.word	0x0800935d
 80092dc:	0800939d 	.word	0x0800939d
 80092e0:	08009573 	.word	0x08009573
 80092e4:	08009573 	.word	0x08009573
 80092e8:	08009513 	.word	0x08009513
 80092ec:	0800953f 	.word	0x0800953f
 80092f0:	08009573 	.word	0x08009573
 80092f4:	08009573 	.word	0x08009573
 80092f8:	08009573 	.word	0x08009573
 80092fc:	08009573 	.word	0x08009573
 8009300:	08009573 	.word	0x08009573
 8009304:	08009573 	.word	0x08009573
 8009308:	08009573 	.word	0x08009573
 800930c:	08009311 	.word	0x08009311
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7c12      	ldrb	r2, [r2, #16]
 8009328:	f107 0108 	add.w	r1, r7, #8
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009332:	e126      	b.n	8009582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fb0e 	bl	8009958 <USBD_CtlError>
        err++;
 800933c:	7afb      	ldrb	r3, [r7, #11]
 800933e:	3301      	adds	r3, #1
 8009340:	72fb      	strb	r3, [r7, #11]
      break;
 8009342:	e11e      	b.n	8009582 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
      break;
 800935a:	e112      	b.n	8009582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7c1b      	ldrb	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10d      	bne.n	8009380 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	f107 0208 	add.w	r2, r7, #8
 8009370:	4610      	mov	r0, r2
 8009372:	4798      	blx	r3
 8009374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800937e:	e100      	b.n	8009582 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	f107 0208 	add.w	r2, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	2202      	movs	r2, #2
 8009398:	701a      	strb	r2, [r3, #0]
      break;
 800939a:	e0f2      	b.n	8009582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b05      	cmp	r3, #5
 80093a4:	f200 80ac 	bhi.w	8009500 <USBD_GetDescriptor+0x258>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBD_GetDescriptor+0x108>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c9 	.word	0x080093c9
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	08009431 	.word	0x08009431
 80093bc:	08009465 	.word	0x08009465
 80093c0:	08009499 	.word	0x08009499
 80093c4:	080094cd 	.word	0x080094cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e091      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fab2 	bl	8009958 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e089      	b.n	8009510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7c12      	ldrb	r2, [r2, #16]
 8009414:	f107 0108 	add.w	r1, r7, #8
 8009418:	4610      	mov	r0, r2
 800941a:	4798      	blx	r3
 800941c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800941e:	e077      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa98 	bl	8009958 <USBD_CtlError>
            err++;
 8009428:	7afb      	ldrb	r3, [r7, #11]
 800942a:	3301      	adds	r3, #1
 800942c:	72fb      	strb	r3, [r7, #11]
          break;
 800942e:	e06f      	b.n	8009510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7c12      	ldrb	r2, [r2, #16]
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	4610      	mov	r0, r2
 800944e:	4798      	blx	r3
 8009450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009452:	e05d      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa7e 	bl	8009958 <USBD_CtlError>
            err++;
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	3301      	adds	r3, #1
 8009460:	72fb      	strb	r3, [r7, #11]
          break;
 8009462:	e055      	b.n	8009510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	7c12      	ldrb	r2, [r2, #16]
 800947c:	f107 0108 	add.w	r1, r7, #8
 8009480:	4610      	mov	r0, r2
 8009482:	4798      	blx	r3
 8009484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009486:	e043      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa64 	bl	8009958 <USBD_CtlError>
            err++;
 8009490:	7afb      	ldrb	r3, [r7, #11]
 8009492:	3301      	adds	r3, #1
 8009494:	72fb      	strb	r3, [r7, #11]
          break;
 8009496:	e03b      	b.n	8009510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00b      	beq.n	80094bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	7c12      	ldrb	r2, [r2, #16]
 80094b0:	f107 0108 	add.w	r1, r7, #8
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
 80094b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ba:	e029      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa4a 	bl	8009958 <USBD_CtlError>
            err++;
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	3301      	adds	r3, #1
 80094c8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ca:	e021      	b.n	8009510 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00b      	beq.n	80094f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	7c12      	ldrb	r2, [r2, #16]
 80094e4:	f107 0108 	add.w	r1, r7, #8
 80094e8:	4610      	mov	r0, r2
 80094ea:	4798      	blx	r3
 80094ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ee:	e00f      	b.n	8009510 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fa30 	bl	8009958 <USBD_CtlError>
            err++;
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	3301      	adds	r3, #1
 80094fc:	72fb      	strb	r3, [r7, #11]
          break;
 80094fe:	e007      	b.n	8009510 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa28 	bl	8009958 <USBD_CtlError>
          err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800950e:	bf00      	nop
      }
      break;
 8009510:	e037      	b.n	8009582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7c1b      	ldrb	r3, [r3, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f107 0208 	add.w	r2, r7, #8
 8009526:	4610      	mov	r0, r2
 8009528:	4798      	blx	r3
 800952a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800952c:	e029      	b.n	8009582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fa11 	bl	8009958 <USBD_CtlError>
        err++;
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	3301      	adds	r3, #1
 800953a:	72fb      	strb	r3, [r7, #11]
      break;
 800953c:	e021      	b.n	8009582 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10d      	bne.n	8009562 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3301      	adds	r3, #1
 800955c:	2207      	movs	r2, #7
 800955e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009560:	e00f      	b.n	8009582 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f9f7 	bl	8009958 <USBD_CtlError>
        err++;
 800956a:	7afb      	ldrb	r3, [r7, #11]
 800956c:	3301      	adds	r3, #1
 800956e:	72fb      	strb	r3, [r7, #11]
      break;
 8009570:	e007      	b.n	8009582 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9ef 	bl	8009958 <USBD_CtlError>
      err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	bf00      	nop
  }

  if (err != 0U)
 8009582:	7afb      	ldrb	r3, [r7, #11]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11e      	bne.n	80095c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	88db      	ldrh	r3, [r3, #6]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d016      	beq.n	80095be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009590:	893b      	ldrh	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00e      	beq.n	80095b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	88da      	ldrh	r2, [r3, #6]
 800959a:	893b      	ldrh	r3, [r7, #8]
 800959c:	4293      	cmp	r3, r2
 800959e:	bf28      	it	cs
 80095a0:	4613      	movcs	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095a6:	893b      	ldrh	r3, [r7, #8]
 80095a8:	461a      	mov	r2, r3
 80095aa:	68f9      	ldr	r1, [r7, #12]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa44 	bl	8009a3a <USBD_CtlSendData>
 80095b2:	e009      	b.n	80095c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9ce 	bl	8009958 <USBD_CtlError>
 80095bc:	e004      	b.n	80095c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa95 	bl	8009aee <USBD_CtlSendStatus>
 80095c4:	e000      	b.n	80095c8 <USBD_GetDescriptor+0x320>
    return;
 80095c6:	bf00      	nop
  }
}
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop

080095d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d131      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	88db      	ldrh	r3, [r3, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d12d      	bne.n	8009646 <USBD_SetAddress+0x76>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	885b      	ldrh	r3, [r3, #2]
 80095ee:	2b7f      	cmp	r3, #127	; 0x7f
 80095f0:	d829      	bhi.n	8009646 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	885b      	ldrh	r3, [r3, #2]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d104      	bne.n	8009614 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9a3 	bl	8009958 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	e01d      	b.n	8009650 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	7bfa      	ldrb	r2, [r7, #15]
 8009618:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fea6 	bl	800a372 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa61 	bl	8009aee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	e009      	b.n	8009650 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009644:	e004      	b.n	8009650 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f985 	bl	8009958 <USBD_CtlError>
  }
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	885b      	ldrh	r3, [r3, #2]
 800966a:	b2da      	uxtb	r2, r3
 800966c:	4b4c      	ldr	r3, [pc, #304]	; (80097a0 <USBD_SetConfig+0x148>)
 800966e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009670:	4b4b      	ldr	r3, [pc, #300]	; (80097a0 <USBD_SetConfig+0x148>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d905      	bls.n	8009684 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f96c 	bl	8009958 <USBD_CtlError>
    return USBD_FAIL;
 8009680:	2303      	movs	r3, #3
 8009682:	e088      	b.n	8009796 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d002      	beq.n	8009696 <USBD_SetConfig+0x3e>
 8009690:	2b03      	cmp	r3, #3
 8009692:	d025      	beq.n	80096e0 <USBD_SetConfig+0x88>
 8009694:	e071      	b.n	800977a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009696:	4b42      	ldr	r3, [pc, #264]	; (80097a0 <USBD_SetConfig+0x148>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01c      	beq.n	80096d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800969e:	4b40      	ldr	r3, [pc, #256]	; (80097a0 <USBD_SetConfig+0x148>)
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096a8:	4b3d      	ldr	r3, [pc, #244]	; (80097a0 <USBD_SetConfig+0x148>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7ff f992 	bl	80089d8 <USBD_SetClassConfig>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d004      	beq.n	80096c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f949 	bl	8009958 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096c6:	e065      	b.n	8009794 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fa10 	bl	8009aee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2203      	movs	r2, #3
 80096d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096d6:	e05d      	b.n	8009794 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fa08 	bl	8009aee <USBD_CtlSendStatus>
      break;
 80096de:	e059      	b.n	8009794 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <USBD_SetConfig+0x148>)
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d112      	bne.n	800970e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80096f0:	4b2b      	ldr	r3, [pc, #172]	; (80097a0 <USBD_SetConfig+0x148>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096fa:	4b29      	ldr	r3, [pc, #164]	; (80097a0 <USBD_SetConfig+0x148>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff f985 	bl	8008a10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9f1 	bl	8009aee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800970c:	e042      	b.n	8009794 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800970e:	4b24      	ldr	r3, [pc, #144]	; (80097a0 <USBD_SetConfig+0x148>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	429a      	cmp	r2, r3
 800971a:	d02a      	beq.n	8009772 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff f973 	bl	8008a10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800972a:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <USBD_SetConfig+0x148>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009734:	4b1a      	ldr	r3, [pc, #104]	; (80097a0 <USBD_SetConfig+0x148>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff f94c 	bl	80089d8 <USBD_SetClassConfig>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00f      	beq.n	800976a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f903 	bl	8009958 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	b2db      	uxtb	r3, r3
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff f958 	bl	8008a10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009768:	e014      	b.n	8009794 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f9bf 	bl	8009aee <USBD_CtlSendStatus>
      break;
 8009770:	e010      	b.n	8009794 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9bb 	bl	8009aee <USBD_CtlSendStatus>
      break;
 8009778:	e00c      	b.n	8009794 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f8eb 	bl	8009958 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <USBD_SetConfig+0x148>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff f941 	bl	8008a10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800978e:	2303      	movs	r3, #3
 8009790:	73fb      	strb	r3, [r7, #15]
      break;
 8009792:	bf00      	nop
  }

  return ret;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	20000418 	.word	0x20000418

080097a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	88db      	ldrh	r3, [r3, #6]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d004      	beq.n	80097c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f8cd 	bl	8009958 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097be:	e023      	b.n	8009808 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	dc02      	bgt.n	80097d2 <USBD_GetConfig+0x2e>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dc03      	bgt.n	80097d8 <USBD_GetConfig+0x34>
 80097d0:	e015      	b.n	80097fe <USBD_GetConfig+0x5a>
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d00b      	beq.n	80097ee <USBD_GetConfig+0x4a>
 80097d6:	e012      	b.n	80097fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3308      	adds	r3, #8
 80097e2:	2201      	movs	r2, #1
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f927 	bl	8009a3a <USBD_CtlSendData>
        break;
 80097ec:	e00c      	b.n	8009808 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3304      	adds	r3, #4
 80097f2:	2201      	movs	r2, #1
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f91f 	bl	8009a3a <USBD_CtlSendData>
        break;
 80097fc:	e004      	b.n	8009808 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f8a9 	bl	8009958 <USBD_CtlError>
        break;
 8009806:	bf00      	nop
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	3b01      	subs	r3, #1
 8009824:	2b02      	cmp	r3, #2
 8009826:	d81e      	bhi.n	8009866 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	88db      	ldrh	r3, [r3, #6]
 800982c:	2b02      	cmp	r3, #2
 800982e:	d004      	beq.n	800983a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f890 	bl	8009958 <USBD_CtlError>
        break;
 8009838:	e01a      	b.n	8009870 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f043 0202 	orr.w	r2, r3, #2
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	330c      	adds	r3, #12
 800985a:	2202      	movs	r2, #2
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8eb 	bl	8009a3a <USBD_CtlSendData>
      break;
 8009864:	e004      	b.n	8009870 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f875 	bl	8009958 <USBD_CtlError>
      break;
 800986e:	bf00      	nop
  }
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	885b      	ldrh	r3, [r3, #2]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d106      	bne.n	8009898 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f92b 	bl	8009aee <USBD_CtlSendStatus>
  }
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d80b      	bhi.n	80098d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	885b      	ldrh	r3, [r3, #2]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d10c      	bne.n	80098da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f910 	bl	8009aee <USBD_CtlSendStatus>
      }
      break;
 80098ce:	e004      	b.n	80098da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f840 	bl	8009958 <USBD_CtlError>
      break;
 80098d8:	e000      	b.n	80098dc <USBD_ClrFeature+0x3c>
      break;
 80098da:	bf00      	nop
  }
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	781a      	ldrb	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	781a      	ldrb	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff fa92 	bl	8008e38 <SWAPBYTE>
 8009914:	4603      	mov	r3, r0
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3301      	adds	r3, #1
 8009926:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f7ff fa85 	bl	8008e38 <SWAPBYTE>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff fa78 	bl	8008e38 <SWAPBYTE>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	80da      	strh	r2, [r3, #6]
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009962:	2180      	movs	r1, #128	; 0x80
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc99 	bl	800a29c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800996a:	2100      	movs	r1, #0
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fc95 	bl	800a29c <USBD_LL_StallEP>
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d036      	beq.n	80099fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	f000 f836 	bl	8009a06 <USBD_GetLen>
 800999a:	4603      	mov	r3, r0
 800999c:	3301      	adds	r3, #1
 800999e:	b29b      	uxth	r3, r3
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	7812      	ldrb	r2, [r2, #0]
 80099b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	3301      	adds	r3, #1
 80099b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	4413      	add	r3, r2
 80099c0:	2203      	movs	r2, #3
 80099c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	3301      	adds	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099ca:	e013      	b.n	80099f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	4413      	add	r3, r2
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
    idx++;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	3301      	adds	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	4413      	add	r3, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	3301      	adds	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e7      	bne.n	80099cc <USBD_GetString+0x52>
 80099fc:	e000      	b.n	8009a00 <USBD_GetString+0x86>
    return;
 80099fe:	bf00      	nop
  }
}
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a16:	e005      	b.n	8009a24 <USBD_GetLen+0x1e>
  {
    len++;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f5      	bne.n	8009a18 <USBD_GetLen+0x12>
  }

  return len;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fca5 	bl	800a3b0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a66:	2300      	movs	r3, #0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	2100      	movs	r1, #0
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fc94 	bl	800a3b0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2203      	movs	r2, #3
 8009aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	2100      	movs	r1, #0
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 fc98 	bl	800a3f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	2100      	movs	r1, #0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fc87 	bl	800a3f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2204      	movs	r2, #4
 8009afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009afe:	2300      	movs	r3, #0
 8009b00:	2200      	movs	r2, #0
 8009b02:	2100      	movs	r1, #0
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fc53 	bl	800a3b0 <USBD_LL_Transmit>

  return USBD_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2205      	movs	r2, #5
 8009b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b24:	2300      	movs	r3, #0
 8009b26:	2200      	movs	r2, #0
 8009b28:	2100      	movs	r1, #0
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fc61 	bl	800a3f2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b40:	2200      	movs	r2, #0
 8009b42:	4912      	ldr	r1, [pc, #72]	; (8009b8c <MX_USB_Device_Init+0x50>)
 8009b44:	4812      	ldr	r0, [pc, #72]	; (8009b90 <MX_USB_Device_Init+0x54>)
 8009b46:	f7fe fed9 	bl	80088fc <USBD_Init>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b50:	f7f7 fa6a 	bl	8001028 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b54:	490f      	ldr	r1, [pc, #60]	; (8009b94 <MX_USB_Device_Init+0x58>)
 8009b56:	480e      	ldr	r0, [pc, #56]	; (8009b90 <MX_USB_Device_Init+0x54>)
 8009b58:	f7fe ff00 	bl	800895c <USBD_RegisterClass>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b62:	f7f7 fa61 	bl	8001028 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b66:	490c      	ldr	r1, [pc, #48]	; (8009b98 <MX_USB_Device_Init+0x5c>)
 8009b68:	4809      	ldr	r0, [pc, #36]	; (8009b90 <MX_USB_Device_Init+0x54>)
 8009b6a:	f7fe fe21 	bl	80087b0 <USBD_CDC_RegisterInterface>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009b74:	f7f7 fa58 	bl	8001028 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009b78:	4805      	ldr	r0, [pc, #20]	; (8009b90 <MX_USB_Device_Init+0x54>)
 8009b7a:	f7fe ff16 	bl	80089aa <USBD_Start>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009b84:	f7f7 fa50 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009b88:	bf00      	nop
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000144 	.word	0x20000144
 8009b90:	2000041c 	.word	0x2000041c
 8009b94:	2000002c 	.word	0x2000002c
 8009b98:	20000130 	.word	0x20000130

08009b9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4905      	ldr	r1, [pc, #20]	; (8009bb8 <CDC_Init_FS+0x1c>)
 8009ba4:	4805      	ldr	r0, [pc, #20]	; (8009bbc <CDC_Init_FS+0x20>)
 8009ba6:	f7fe fe18 	bl	80087da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009baa:	4905      	ldr	r1, [pc, #20]	; (8009bc0 <CDC_Init_FS+0x24>)
 8009bac:	4803      	ldr	r0, [pc, #12]	; (8009bbc <CDC_Init_FS+0x20>)
 8009bae:	f7fe fe32 	bl	8008816 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20000ad4 	.word	0x20000ad4
 8009bbc:	2000041c 	.word	0x2000041c
 8009bc0:	200006ec 	.word	0x200006ec

08009bc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
 8009be0:	4613      	mov	r3, r2
 8009be2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b23      	cmp	r3, #35	; 0x23
 8009be8:	d84a      	bhi.n	8009c80 <CDC_Control_FS+0xac>
 8009bea:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <CDC_Control_FS+0x1c>)
 8009bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf0:	08009c81 	.word	0x08009c81
 8009bf4:	08009c81 	.word	0x08009c81
 8009bf8:	08009c81 	.word	0x08009c81
 8009bfc:	08009c81 	.word	0x08009c81
 8009c00:	08009c81 	.word	0x08009c81
 8009c04:	08009c81 	.word	0x08009c81
 8009c08:	08009c81 	.word	0x08009c81
 8009c0c:	08009c81 	.word	0x08009c81
 8009c10:	08009c81 	.word	0x08009c81
 8009c14:	08009c81 	.word	0x08009c81
 8009c18:	08009c81 	.word	0x08009c81
 8009c1c:	08009c81 	.word	0x08009c81
 8009c20:	08009c81 	.word	0x08009c81
 8009c24:	08009c81 	.word	0x08009c81
 8009c28:	08009c81 	.word	0x08009c81
 8009c2c:	08009c81 	.word	0x08009c81
 8009c30:	08009c81 	.word	0x08009c81
 8009c34:	08009c81 	.word	0x08009c81
 8009c38:	08009c81 	.word	0x08009c81
 8009c3c:	08009c81 	.word	0x08009c81
 8009c40:	08009c81 	.word	0x08009c81
 8009c44:	08009c81 	.word	0x08009c81
 8009c48:	08009c81 	.word	0x08009c81
 8009c4c:	08009c81 	.word	0x08009c81
 8009c50:	08009c81 	.word	0x08009c81
 8009c54:	08009c81 	.word	0x08009c81
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c81 	.word	0x08009c81
 8009c60:	08009c81 	.word	0x08009c81
 8009c64:	08009c81 	.word	0x08009c81
 8009c68:	08009c81 	.word	0x08009c81
 8009c6c:	08009c81 	.word	0x08009c81
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c81 	.word	0x08009c81
 8009c78:	08009c81 	.word	0x08009c81
 8009c7c:	08009c81 	.word	0x08009c81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c80:	bf00      	nop
  }

  return (USBD_OK);
 8009c82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7f6 fad7 	bl	8000250 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	4805      	ldr	r0, [pc, #20]	; (8009cbc <CDC_Receive_FS+0x2c>)
 8009ca6:	f7fe fdb6 	bl	8008816 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009caa:	4804      	ldr	r0, [pc, #16]	; (8009cbc <CDC_Receive_FS+0x2c>)
 8009cac:	f7fe fdfc 	bl	80088a8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009cb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000041c 	.word	0x2000041c

08009cc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cd0:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <CDC_Transmit_FS+0x48>)
 8009cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e00b      	b.n	8009cfe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	4806      	ldr	r0, [pc, #24]	; (8009d08 <CDC_Transmit_FS+0x48>)
 8009cee:	f7fe fd74 	bl	80087da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <CDC_Transmit_FS+0x48>)
 8009cf4:	f7fe fda8 	bl	8008848 <USBD_CDC_TransmitPacket>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000041c 	.word	0x2000041c

08009d0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	371c      	adds	r7, #28
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2212      	movs	r2, #18
 8009d40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d42:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20000164 	.word	0x20000164

08009d54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	2204      	movs	r2, #4
 8009d64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d66:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20000178 	.word	0x20000178

08009d78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6039      	str	r1, [r7, #0]
 8009d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	4907      	ldr	r1, [pc, #28]	; (8009dac <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d8e:	4808      	ldr	r0, [pc, #32]	; (8009db0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d90:	f7ff fdf3 	bl	800997a <USBD_GetString>
 8009d94:	e004      	b.n	8009da0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	4904      	ldr	r1, [pc, #16]	; (8009dac <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d9a:	4805      	ldr	r0, [pc, #20]	; (8009db0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009d9c:	f7ff fded 	bl	800997a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000ebc 	.word	0x20000ebc
 8009db0:	0800a5e8 	.word	0x0800a5e8

08009db4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	6039      	str	r1, [r7, #0]
 8009dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	4904      	ldr	r1, [pc, #16]	; (8009dd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009dc4:	4804      	ldr	r0, [pc, #16]	; (8009dd8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009dc6:	f7ff fdd8 	bl	800997a <USBD_GetString>
  return USBD_StrDesc;
 8009dca:	4b02      	ldr	r3, [pc, #8]	; (8009dd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000ebc 	.word	0x20000ebc
 8009dd8:	0800a600 	.word	0x0800a600

08009ddc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	6039      	str	r1, [r7, #0]
 8009de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	221a      	movs	r2, #26
 8009dec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dee:	f000 f843 	bl	8009e78 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009df2:	4b02      	ldr	r3, [pc, #8]	; (8009dfc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	2000017c 	.word	0x2000017c

08009e00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	4907      	ldr	r1, [pc, #28]	; (8009e34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e16:	4808      	ldr	r0, [pc, #32]	; (8009e38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e18:	f7ff fdaf 	bl	800997a <USBD_GetString>
 8009e1c:	e004      	b.n	8009e28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	4904      	ldr	r1, [pc, #16]	; (8009e34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e22:	4805      	ldr	r0, [pc, #20]	; (8009e38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e24:	f7ff fda9 	bl	800997a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e28:	4b02      	ldr	r3, [pc, #8]	; (8009e34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000ebc 	.word	0x20000ebc
 8009e38:	0800a614 	.word	0x0800a614

08009e3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	6039      	str	r1, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	4907      	ldr	r1, [pc, #28]	; (8009e70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e52:	4808      	ldr	r0, [pc, #32]	; (8009e74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e54:	f7ff fd91 	bl	800997a <USBD_GetString>
 8009e58:	e004      	b.n	8009e64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	4904      	ldr	r1, [pc, #16]	; (8009e70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e60:	f7ff fd8b 	bl	800997a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e64:	4b02      	ldr	r3, [pc, #8]	; (8009e70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000ebc 	.word	0x20000ebc
 8009e74:	0800a620 	.word	0x0800a620

08009e78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <Get_SerialNum+0x44>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e84:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <Get_SerialNum+0x48>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e8a:	4b0e      	ldr	r3, [pc, #56]	; (8009ec4 <Get_SerialNum+0x4c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4413      	add	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e9e:	2208      	movs	r2, #8
 8009ea0:	4909      	ldr	r1, [pc, #36]	; (8009ec8 <Get_SerialNum+0x50>)
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 f814 	bl	8009ed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	4908      	ldr	r1, [pc, #32]	; (8009ecc <Get_SerialNum+0x54>)
 8009eac:	68b8      	ldr	r0, [r7, #8]
 8009eae:	f000 f80f 	bl	8009ed0 <IntToUnicode>
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	1fff7590 	.word	0x1fff7590
 8009ec0:	1fff7594 	.word	0x1fff7594
 8009ec4:	1fff7598 	.word	0x1fff7598
 8009ec8:	2000017e 	.word	0x2000017e
 8009ecc:	2000018e 	.word	0x2000018e

08009ed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75fb      	strb	r3, [r7, #23]
 8009ee6:	e027      	b.n	8009f38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	0f1b      	lsrs	r3, r3, #28
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d80b      	bhi.n	8009f08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	0f1b      	lsrs	r3, r3, #28
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	4619      	mov	r1, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	440b      	add	r3, r1
 8009f00:	3230      	adds	r2, #48	; 0x30
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	e00a      	b.n	8009f1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	0f1b      	lsrs	r3, r3, #28
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	4619      	mov	r1, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	440b      	add	r3, r1
 8009f18:	3237      	adds	r2, #55	; 0x37
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	3301      	adds	r3, #1
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	3301      	adds	r3, #1
 8009f36:	75fb      	strb	r3, [r7, #23]
 8009f38:	7dfa      	ldrb	r2, [r7, #23]
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d3d3      	bcc.n	8009ee8 <IntToUnicode+0x18>
  }
}
 8009f40:	bf00      	nop
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b094      	sub	sp, #80	; 0x50
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f58:	f107 030c 	add.w	r3, r7, #12
 8009f5c:	2244      	movs	r2, #68	; 0x44
 8009f5e:	2100      	movs	r1, #0
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 fb2d 	bl	800a5c0 <memset>
  if(pcdHandle->Instance==USB)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a15      	ldr	r2, [pc, #84]	; (8009fc0 <HAL_PCD_MspInit+0x70>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d122      	bne.n	8009fb6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f76:	2300      	movs	r3, #0
 8009f78:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fa f8de 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009f8a:	f7f7 f84d 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f8e:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <HAL_PCD_MspInit+0x74>)
 8009f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <HAL_PCD_MspInit+0x74>)
 8009f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f98:	6593      	str	r3, [r2, #88]	; 0x58
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <HAL_PCD_MspInit+0x74>)
 8009f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fa2:	60bb      	str	r3, [r7, #8]
 8009fa4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	2100      	movs	r1, #0
 8009faa:	2014      	movs	r0, #20
 8009fac:	f7f7 fc0d 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fb0:	2014      	movs	r0, #20
 8009fb2:	f7f7 fc24 	bl	80017fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fb6:	bf00      	nop
 8009fb8:	3750      	adds	r7, #80	; 0x50
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	40005c00 	.word	0x40005c00
 8009fc4:	40021000 	.word	0x40021000

08009fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7fe fd2e 	bl	8008a40 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fe4:	bf00      	nop
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ffe:	78fa      	ldrb	r2, [r7, #3]
 800a000:	6879      	ldr	r1, [r7, #4]
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	440b      	add	r3, r1
 800a00c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	4619      	mov	r1, r3
 800a016:	f7fe fd68 	bl	8008aea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	4613      	mov	r3, r2
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	440b      	add	r3, r1
 800a042:	333c      	adds	r3, #60	; 0x3c
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	4619      	mov	r1, r3
 800a04a:	f7fe fdb1 	bl	8008bb0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fec5 	bl	8008df4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a07a:	2301      	movs	r3, #1
 800a07c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d001      	beq.n	800a08a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a086:	f7f6 ffcf 	bl	8001028 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a090:	7bfa      	ldrb	r2, [r7, #15]
 800a092:	4611      	mov	r1, r2
 800a094:	4618      	mov	r0, r3
 800a096:	f7fe fe6f 	bl	8008d78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe fe1b 	bl	8008cdc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0a6:	bf00      	nop
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fe6a 	bl	8008d98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0cc:	4b04      	ldr	r3, [pc, #16]	; (800a0e0 <HAL_PCD_SuspendCallback+0x30>)
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	4a03      	ldr	r2, [pc, #12]	; (800a0e0 <HAL_PCD_SuspendCallback+0x30>)
 800a0d2:	f043 0306 	orr.w	r3, r3, #6
 800a0d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	e000ed00 	.word	0xe000ed00

0800a0e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <HAL_PCD_ResumeCallback+0x34>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4a07      	ldr	r2, [pc, #28]	; (800a118 <HAL_PCD_ResumeCallback+0x34>)
 800a0fa:	f023 0306 	bic.w	r3, r3, #6
 800a0fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a100:	f000 f9fa 	bl	800a4f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fe5a 	bl	8008dc4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed00 	.word	0xe000ed00

0800a11c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a124:	4a2b      	ldr	r2, [pc, #172]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a29      	ldr	r2, [pc, #164]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a130:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a134:	4b27      	ldr	r3, [pc, #156]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a136:	4a28      	ldr	r2, [pc, #160]	; (800a1d8 <USBD_LL_Init+0xbc>)
 800a138:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a13a:	4b26      	ldr	r3, [pc, #152]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a13c:	2208      	movs	r2, #8
 800a13e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a142:	2202      	movs	r2, #2
 800a144:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a146:	4b23      	ldr	r3, [pc, #140]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a148:	2202      	movs	r2, #2
 800a14a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a14c:	4b21      	ldr	r3, [pc, #132]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a14e:	2200      	movs	r2, #0
 800a150:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a152:	4b20      	ldr	r3, [pc, #128]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a154:	2200      	movs	r2, #0
 800a156:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a15e:	4b1d      	ldr	r3, [pc, #116]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a160:	2200      	movs	r2, #0
 800a162:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a164:	481b      	ldr	r0, [pc, #108]	; (800a1d4 <USBD_LL_Init+0xb8>)
 800a166:	f7f7 fd17 	bl	8001b98 <HAL_PCD_Init>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a170:	f7f6 ff5a 	bl	8001028 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a17a:	2318      	movs	r3, #24
 800a17c:	2200      	movs	r2, #0
 800a17e:	2100      	movs	r1, #0
 800a180:	f7f9 f9d0 	bl	8003524 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a18a:	2358      	movs	r3, #88	; 0x58
 800a18c:	2200      	movs	r2, #0
 800a18e:	2180      	movs	r1, #128	; 0x80
 800a190:	f7f9 f9c8 	bl	8003524 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a19a:	23c0      	movs	r3, #192	; 0xc0
 800a19c:	2200      	movs	r2, #0
 800a19e:	2181      	movs	r1, #129	; 0x81
 800a1a0:	f7f9 f9c0 	bl	8003524 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	f7f9 f9b7 	bl	8003524 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2182      	movs	r1, #130	; 0x82
 800a1c4:	f7f9 f9ae 	bl	8003524 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200010bc 	.word	0x200010bc
 800a1d8:	40005c00 	.word	0x40005c00

0800a1dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f7 fdb5 	bl	8001d62 <HAL_PCD_Start>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 f980 	bl	800a504 <USBD_Get_USB_Status>
 800a204:	4603      	mov	r3, r0
 800a206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a208:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	461a      	mov	r2, r3
 800a220:	4603      	mov	r3, r0
 800a222:	70fb      	strb	r3, [r7, #3]
 800a224:	460b      	mov	r3, r1
 800a226:	70bb      	strb	r3, [r7, #2]
 800a228:	4613      	mov	r3, r2
 800a22a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a23a:	78bb      	ldrb	r3, [r7, #2]
 800a23c:	883a      	ldrh	r2, [r7, #0]
 800a23e:	78f9      	ldrb	r1, [r7, #3]
 800a240:	f7f7 fefd 	bl	800203e <HAL_PCD_EP_Open>
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 f95a 	bl	800a504 <USBD_Get_USB_Status>
 800a250:	4603      	mov	r3, r0
 800a252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a254:	7bbb      	ldrb	r3, [r7, #14]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b084      	sub	sp, #16
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a278:	78fa      	ldrb	r2, [r7, #3]
 800a27a:	4611      	mov	r1, r2
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7f7 ff44 	bl	800210a <HAL_PCD_EP_Close>
 800a282:	4603      	mov	r3, r0
 800a284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f93b 	bl	800a504 <USBD_Get_USB_Status>
 800a28e:	4603      	mov	r3, r0
 800a290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a292:	7bbb      	ldrb	r3, [r7, #14]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f8 f805 	bl	80022ca <HAL_PCD_EP_SetStall>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 f91c 	bl	800a504 <USBD_Get_USB_Status>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2f4:	78fa      	ldrb	r2, [r7, #3]
 800a2f6:	4611      	mov	r1, r2
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7f8 f838 	bl	800236e <HAL_PCD_EP_ClrStall>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	4618      	mov	r0, r3
 800a306:	f000 f8fd 	bl	800a504 <USBD_Get_USB_Status>
 800a30a:	4603      	mov	r3, r0
 800a30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a32a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a32c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a330:	2b00      	cmp	r3, #0
 800a332:	da0c      	bge.n	800a34e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	440b      	add	r3, r1
 800a348:	3302      	adds	r3, #2
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	e00b      	b.n	800a366 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a354:	68f9      	ldr	r1, [r7, #12]
 800a356:	4613      	mov	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4413      	add	r3, r2
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	440b      	add	r3, r1
 800a360:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a364:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7f7 fe2f 	bl	8001ff4 <HAL_PCD_SetAddress>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f8b1 	bl	800a504 <USBD_Get_USB_Status>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3ce:	7af9      	ldrb	r1, [r7, #11]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	f7f7 ff36 	bl	8002244 <HAL_PCD_EP_Transmit>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f890 	bl	800a504 <USBD_Get_USB_Status>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b086      	sub	sp, #24
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	603b      	str	r3, [r7, #0]
 800a3fe:	460b      	mov	r3, r1
 800a400:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a410:	7af9      	ldrb	r1, [r7, #11]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	f7f7 fec0 	bl	800219a <HAL_PCD_EP_Receive>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a41e:	7dfb      	ldrb	r3, [r7, #23]
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f86f 	bl	800a504 <USBD_Get_USB_Status>
 800a426:	4603      	mov	r3, r0
 800a428:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7f7 fee2 	bl	8002214 <HAL_PCD_EP_GetRxCount>
 800a450:	4603      	mov	r3, r0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a468:	78fb      	ldrb	r3, [r7, #3]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <HAL_PCDEx_LPM_Callback+0x18>
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d013      	beq.n	800a49a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a472:	e023      	b.n	800a4bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a47c:	f000 f83c 	bl	800a4f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a480:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	4a0f      	ldr	r2, [pc, #60]	; (800a4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a486:	f023 0306 	bic.w	r3, r3, #6
 800a48a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fc96 	bl	8008dc4 <USBD_LL_Resume>
    break;
 800a498:	e010      	b.n	800a4bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fc79 	bl	8008d98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d005      	beq.n	800a4ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	4a04      	ldr	r2, [pc, #16]	; (800a4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4b4:	f043 0306 	orr.w	r3, r3, #6
 800a4b8:	6113      	str	r3, [r2, #16]
    break;
 800a4ba:	bf00      	nop
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	e000ed00 	.word	0xe000ed00

0800a4c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <USBD_static_malloc+0x18>)
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	200013b0 	.word	0x200013b0

0800a4e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a4fc:	f7f6 f9f2 	bl	80008e4 <SystemClock_Config>
}
 800a500:	bf00      	nop
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	2b03      	cmp	r3, #3
 800a516:	d817      	bhi.n	800a548 <USBD_Get_USB_Status+0x44>
 800a518:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <USBD_Get_USB_Status+0x1c>)
 800a51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51e:	bf00      	nop
 800a520:	0800a531 	.word	0x0800a531
 800a524:	0800a537 	.word	0x0800a537
 800a528:	0800a53d 	.word	0x0800a53d
 800a52c:	0800a543 	.word	0x0800a543
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
    break;
 800a534:	e00b      	b.n	800a54e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a536:	2303      	movs	r3, #3
 800a538:	73fb      	strb	r3, [r7, #15]
    break;
 800a53a:	e008      	b.n	800a54e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a53c:	2301      	movs	r3, #1
 800a53e:	73fb      	strb	r3, [r7, #15]
    break;
 800a540:	e005      	b.n	800a54e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	73fb      	strb	r3, [r7, #15]
    break;
 800a546:	e002      	b.n	800a54e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	73fb      	strb	r3, [r7, #15]
    break;
 800a54c:	bf00      	nop
  }
  return usb_status;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <__libc_init_array>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	4d0d      	ldr	r5, [pc, #52]	; (800a594 <__libc_init_array+0x38>)
 800a560:	4c0d      	ldr	r4, [pc, #52]	; (800a598 <__libc_init_array+0x3c>)
 800a562:	1b64      	subs	r4, r4, r5
 800a564:	10a4      	asrs	r4, r4, #2
 800a566:	2600      	movs	r6, #0
 800a568:	42a6      	cmp	r6, r4
 800a56a:	d109      	bne.n	800a580 <__libc_init_array+0x24>
 800a56c:	4d0b      	ldr	r5, [pc, #44]	; (800a59c <__libc_init_array+0x40>)
 800a56e:	4c0c      	ldr	r4, [pc, #48]	; (800a5a0 <__libc_init_array+0x44>)
 800a570:	f000 f82e 	bl	800a5d0 <_init>
 800a574:	1b64      	subs	r4, r4, r5
 800a576:	10a4      	asrs	r4, r4, #2
 800a578:	2600      	movs	r6, #0
 800a57a:	42a6      	cmp	r6, r4
 800a57c:	d105      	bne.n	800a58a <__libc_init_array+0x2e>
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	f855 3b04 	ldr.w	r3, [r5], #4
 800a584:	4798      	blx	r3
 800a586:	3601      	adds	r6, #1
 800a588:	e7ee      	b.n	800a568 <__libc_init_array+0xc>
 800a58a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a58e:	4798      	blx	r3
 800a590:	3601      	adds	r6, #1
 800a592:	e7f2      	b.n	800a57a <__libc_init_array+0x1e>
 800a594:	0800a640 	.word	0x0800a640
 800a598:	0800a640 	.word	0x0800a640
 800a59c:	0800a640 	.word	0x0800a640
 800a5a0:	0800a644 	.word	0x0800a644

0800a5a4 <memcpy>:
 800a5a4:	440a      	add	r2, r1
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5ac:	d100      	bne.n	800a5b0 <memcpy+0xc>
 800a5ae:	4770      	bx	lr
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ba:	4291      	cmp	r1, r2
 800a5bc:	d1f9      	bne.n	800a5b2 <memcpy+0xe>
 800a5be:	bd10      	pop	{r4, pc}

0800a5c0 <memset>:
 800a5c0:	4402      	add	r2, r0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d100      	bne.n	800a5ca <memset+0xa>
 800a5c8:	4770      	bx	lr
 800a5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ce:	e7f9      	b.n	800a5c4 <memset+0x4>

0800a5d0 <_init>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr

0800a5dc <_fini>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr
