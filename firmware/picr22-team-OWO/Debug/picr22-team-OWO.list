
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b784  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b4  0800b9b4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800b9b4  0800b9b4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b9b4  0800b9b4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9b4  0800b9b4  0001b9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b9bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  20000184  0800bb40  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  0800bb40  00021650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172d2  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003774  00000000  00000000  00037486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e35  00000000  00000000  0003d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017482  00000000  00000000  0005e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6809  00000000  00000000  0007552f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bd38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  0013bd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b944 	.word	0x0800b944

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800b944 	.word	0x0800b944

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <CDC_On_Receive>:
uint16_t thrower_data[20] = {0};

volatile uint8_t isCommandReceived = 0;

// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b0a      	cmp	r3, #10
 8000844:	d10d      	bne.n	8000862 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 8000846:	220a      	movs	r2, #10
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <CDC_On_Receive+0x38>)
 800084c:	f00b f864 	bl	800b918 <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <CDC_On_Receive+0x38>)
 8000852:	891b      	ldrh	r3, [r3, #8]
 8000854:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000858:	4293      	cmp	r3, r2
 800085a:	d102      	bne.n	8000862 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <CDC_On_Receive+0x3c>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000045c 	.word	0x2000045c
 8000870:	20000490 	.word	0x20000490

08000874 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 8000878:	2104      	movs	r1, #4
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <enc_init+0x20>)
 800087c:	f005 f9e4 	bl	8005c48 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 8000880:	2104      	movs	r1, #4
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <enc_init+0x24>)
 8000884:	f005 f9e0 	bl	8005c48 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 8000888:	2104      	movs	r1, #4
 800088a:	4804      	ldr	r0, [pc, #16]	; (800089c <enc_init+0x28>)
 800088c:	f005 f9dc 	bl	8005c48 <HAL_TIM_Encoder_Start>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000284 	.word	0x20000284
 8000898:	200001a0 	.word	0x200001a0
 800089c:	20000238 	.word	0x20000238

080008a0 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <pwm_init+0x34>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <pwm_init+0x34>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <pwm_init+0x34>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <pwm_init+0x38>)
 80008ba:	f004 fd0f 	bl	80052dc <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80008be:	2104      	movs	r1, #4
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <pwm_init+0x38>)
 80008c2:	f006 f99d 	bl	8006c00 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 80008c6:	2108      	movs	r1, #8
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <pwm_init+0x38>)
 80008ca:	f006 f999 	bl	8006c00 <HAL_TIMEx_PWMN_Start>
    //TIM15->CCR1 = 32000;
    //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40013400 	.word	0x40013400
 80008d8:	2000031c 	.word	0x2000031c

080008dc <motor_status_update>:

// Updates the motor's speed and direction from the command struct
void motor_status_update() {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	e053      	b.n	8000990 <motor_status_update+0xb4>
		if (command.speed[i] >= 0) {
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <motor_status_update+0xc8>)
 80008ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db23      	blt.n	800093c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	492c      	ldr	r1, [pc, #176]	; (80009a8 <motor_status_update+0xcc>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	440b      	add	r3, r1
 8000902:	3302      	adds	r3, #2
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <motor_status_update+0xc8>)
 800090c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d104      	bne.n	800091e <motor_status_update+0x42>
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <motor_status_update+0xc8>)
 8000918:	2102      	movs	r1, #2
 800091a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <motor_status_update+0xc8>)
 8000922:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	b298      	uxth	r0, r3
 800092a:	491f      	ldr	r1, [pc, #124]	; (80009a8 <motor_status_update+0xcc>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	4602      	mov	r2, r0
 8000938:	801a      	strh	r2, [r3, #0]
 800093a:	e026      	b.n	800098a <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800093c:	79fa      	ldrb	r2, [r7, #7]
 800093e:	491a      	ldr	r1, [pc, #104]	; (80009a8 <motor_status_update+0xcc>)
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	440b      	add	r3, r1
 800094a:	3302      	adds	r3, #2
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <motor_status_update+0xc8>)
 8000954:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d105      	bne.n	800096a <motor_status_update+0x8e>
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <motor_status_update+0xc8>)
 8000962:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000966:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <motor_status_update+0xc8>)
 800096e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000972:	b29b      	uxth	r3, r3
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	425b      	negs	r3, r3
 8000978:	b298      	uxth	r0, r3
 800097a:	490b      	ldr	r1, [pc, #44]	; (80009a8 <motor_status_update+0xcc>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	4602      	mov	r2, r0
 8000988:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	3301      	adds	r3, #1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d9a8      	bls.n	80008e8 <motor_status_update+0xc>
		}
	}
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	2000045c 	.word	0x2000045c
 80009a8:	20000414 	.word	0x20000414
 80009ac:	00000000 	.word	0x00000000

080009b0 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	495e      	ldr	r1, [pc, #376]	; (8000b38 <motor_pwm+0x188>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d00e      	beq.n	80009f8 <motor_pwm+0x48>
 80009da:	2b02      	cmp	r3, #2
 80009dc:	dc10      	bgt.n	8000a00 <motor_pwm+0x50>
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <motor_pwm+0x38>
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d004      	beq.n	80009f0 <motor_pwm+0x40>
 80009e6:	e00b      	b.n	8000a00 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 80009e8:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <motor_pwm+0x18c>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ec:	82bb      	strh	r3, [r7, #20]
			break;
 80009ee:	e007      	b.n	8000a00 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 80009f0:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <motor_pwm+0x190>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	82bb      	strh	r3, [r7, #20]
			break;
 80009f6:	e003      	b.n	8000a00 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 80009f8:	4b52      	ldr	r3, [pc, #328]	; (8000b44 <motor_pwm+0x194>)
 80009fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fc:	82bb      	strh	r3, [r7, #20]
			break;
 80009fe:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000a00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a04:	4618      	mov	r0, r3
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	494b      	ldr	r1, [pc, #300]	; (8000b38 <motor_pwm+0x188>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	440b      	add	r3, r1
 8000a14:	3304      	adds	r3, #4
 8000a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1a:	1ac3      	subs	r3, r0, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bfb8      	it	lt
 8000a20:	425b      	neglt	r3, r3
 8000a22:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000a2a:	4943      	ldr	r1, [pc, #268]	; (8000b38 <motor_pwm+0x188>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	440b      	add	r3, r1
 8000a36:	3304      	adds	r3, #4
 8000a38:	4602      	mov	r2, r0
 8000a3a:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	493e      	ldr	r1, [pc, #248]	; (8000b38 <motor_pwm+0x188>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	89fa      	ldrh	r2, [r7, #14]
 8000a4e:	801a      	strh	r2, [r3, #0]

	int16_t error = motor_status[mot_id].target_speed - pos_change;
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	4939      	ldr	r1, [pc, #228]	; (8000b38 <motor_pwm+0x188>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	81bb      	strh	r3, [r7, #12]
	motor_status[mot_id].integral += error;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4933      	ldr	r1, [pc, #204]	; (8000b38 <motor_pwm+0x188>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3308      	adds	r3, #8
 8000a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89bb      	ldrh	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	b218      	sxth	r0, r3
 8000a88:	492b      	ldr	r1, [pc, #172]	; (8000b38 <motor_pwm+0x188>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3308      	adds	r3, #8
 8000a96:	4602      	mov	r2, r0
 8000a98:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = error * 5 + (int16_t)(motor_status[mot_id].integral * 0.1);
 8000a9a:	89bb      	ldrh	r3, [r7, #12]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b29c      	uxth	r4, r3
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	4924      	ldr	r1, [pc, #144]	; (8000b38 <motor_pwm+0x188>)
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	4413      	add	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	440b      	add	r3, r1
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe29 	bl	8000710 <__aeabi_i2d>
 8000abe:	a31c      	add	r3, pc, #112	; (adr r3, 8000b30 <motor_pwm+0x180>)
 8000ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac4:	f7ff fba8 	bl	8000218 <__aeabi_dmul>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fe88 	bl	80007e4 <__aeabi_d2iz>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	4423      	add	r3, r4
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {
 8000ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da01      	bge.n	8000aec <motor_pwm+0x13c>
		pid_speed = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	827b      	strh	r3, [r7, #18]
	}

	if (speed > 0) {
 8000aec:	8a3b      	ldrh	r3, [r7, #16]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <motor_pwm+0x166>
		pwm = 4500 + pid_speed * 700; // Effectively linear
 8000af2:	8a7b      	ldrh	r3, [r7, #18]
 8000af4:	461a      	mov	r2, r3
 8000af6:	0092      	lsls	r2, r2, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	461a      	mov	r2, r3
 8000afc:	0091      	lsls	r1, r2, #2
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	4413      	add	r3, r2
 8000b04:	461a      	mov	r2, r3
 8000b06:	00d2      	lsls	r2, r2, #3
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000b12:	3314      	adds	r3, #20
 8000b14:	82fb      	strh	r3, [r7, #22]
	}

	if (pwm > 49151) { // emergency limiter, set to 75% currently (49151)
 8000b16:	8afb      	ldrh	r3, [r7, #22]
 8000b18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000b1c:	d302      	bcc.n	8000b24 <motor_pwm+0x174>
		pwm = 49151;
 8000b1e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000b22:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 8000b24:	8afb      	ldrh	r3, [r7, #22]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	9999999a 	.word	0x9999999a
 8000b34:	3fb99999 	.word	0x3fb99999
 8000b38:	20000414 	.word	0x20000414
 8000b3c:	40000400 	.word	0x40000400
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	40000800 	.word	0x40000800

08000b48 <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d018      	beq.n	8000b8a <motor_direction+0x42>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	dc1f      	bgt.n	8000b9c <motor_direction+0x54>
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <motor_direction+0x1e>
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d009      	beq.n	8000b78 <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000b64:	e01a      	b.n	8000b9c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <motor_direction+0x5c>)
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f001 fda3 	bl	80026bc <HAL_GPIO_WritePin>
			break;
 8000b76:	e011      	b.n	8000b9c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <motor_direction+0x5c>)
 8000b7a:	7e9b      	ldrb	r3, [r3, #26]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2120      	movs	r1, #32
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f001 fd9a 	bl	80026bc <HAL_GPIO_WritePin>
			break;
 8000b88:	e008      	b.n	8000b9c <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <motor_direction+0x5c>)
 8000b8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000b90:	461a      	mov	r2, r3
 8000b92:	2110      	movs	r1, #16
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <motor_direction+0x60>)
 8000b96:	f001 fd91 	bl	80026bc <HAL_GPIO_WritePin>
			break;
 8000b9a:	bf00      	nop
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000414 	.word	0x20000414
 8000ba8:	48000400 	.word	0x48000400

08000bac <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4813      	ldr	r0, [pc, #76]	; (8000c04 <wake_drivers_up+0x58>)
 8000bb8:	f001 fd80 	bl	80026bc <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	e003      	b.n	8000bca <wake_drivers_up+0x1e>
 8000bc2:	bf00      	nop
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	80fb      	strh	r3, [r7, #6]
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bd0:	d3f7      	bcc.n	8000bc2 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <wake_drivers_up+0x58>)
 8000bd8:	f001 fd70 	bl	80026bc <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000bdc:	2300      	movs	r3, #0
 8000bde:	80bb      	strh	r3, [r7, #4]
 8000be0:	e003      	b.n	8000bea <wake_drivers_up+0x3e>
 8000be2:	bf00      	nop
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	80bb      	strh	r3, [r7, #4]
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bf0:	d3f7      	bcc.n	8000be2 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <wake_drivers_up+0x58>)
 8000bf8:	f001 fd60 	bl	80026bc <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	48000400 	.word	0x48000400

08000c08 <thrower_pwm>:
// Sends DSHOT150  PWM commands, commented throughly for the enjoyment of the reader :D
void thrower_pwm(uint16_t thrower_speed) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);					// Stop transmitting previous thrower value
 8000c12:	2100      	movs	r1, #0
 8000c14:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <thrower_pwm+0xa8>)
 8000c16:	f004 fe79 	bl	800590c <HAL_TIM_PWM_Stop_DMA>

	uint16_t packet = thrower_speed << 1; 							// Shift left to make room for telemetry bit (left as 0)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	817b      	strh	r3, [r7, #10]
	uint16_t crc = (packet ^ (packet >> 4) ^ (packet >> 8)) & 0x0F; // CRC calculation shenanigans
 8000c20:	897b      	ldrh	r3, [r7, #10]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	4053      	eors	r3, r2
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	897b      	ldrh	r3, [r7, #10]
 8000c2e:	0a1b      	lsrs	r3, r3, #8
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4053      	eors	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	813b      	strh	r3, [r7, #8]
	packet = (packet << 4) | crc; 									// Add CRC value to the packet
 8000c3c:	897b      	ldrh	r3, [r7, #10]
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	817b      	strh	r3, [r7, #10]

	for (int i=15; i>=0; i--){										// Loop through the entire packet, adds the most significant bit to the array first
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e01b      	b.n	8000c8a <thrower_pwm+0x82>
		if (packet & (1<<i)){										// i counts down, 15-i counts up
 8000c52:	897a      	ldrh	r2, [r7, #10]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	fa42 f303 	asr.w	r3, r2, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <thrower_pwm+0x6c>
			thrower_data[15-i] = 798;								// PWM values determined by timer speeds
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1c3 030f 	rsb	r3, r3, #15
 8000c68:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <thrower_pwm+0xac>)
 8000c6a:	f240 311e 	movw	r1, #798	; 0x31e
 8000c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c72:	e007      	b.n	8000c84 <thrower_pwm+0x7c>
		} else {
			thrower_data[15-i] = 399;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f1c3 030f 	rsb	r3, r3, #15
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <thrower_pwm+0xac>)
 8000c7c:	f240 118f 	movw	r1, #399	; 0x18f
 8000c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=15; i>=0; i--){										// Loop through the entire packet, adds the most significant bit to the array first
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dae0      	bge.n	8000c52 <thrower_pwm+0x4a>
		}
	}
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c90:	2102      	movs	r1, #2
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f001 fd29 	bl	80026ec <HAL_GPIO_TogglePin>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 20); // Each pulse draws takes its length from array
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <thrower_pwm+0xac>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <thrower_pwm+0xa8>)
 8000ca2:	f004 fc1b 	bl	80054dc <HAL_TIM_PWM_Start_DMA>
}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200001ec 	.word	0x200001ec
 8000cb4:	20000468 	.word	0x20000468

08000cb8 <HAL_TIM_PeriodElapsedCallback>:

// 100 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4812      	ldr	r0, [pc, #72]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cc4:	f001 fd12 	bl	80026ec <HAL_GPIO_TogglePin>

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fe71 	bl	80009b0 <motor_pwm>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f7ff fe6a 	bl	80009b0 <motor_pwm>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fe63 	bl	80009b0 <motor_pwm>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000cf0:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff28 	bl	8000b48 <motor_direction>
	motor_direction(1); // Motor 2
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ff25 	bl	8000b48 <motor_direction>
	motor_direction(2); // Motor 3
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff ff22 	bl	8000b48 <motor_direction>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	48001400 	.word	0x48001400
 8000d10:	40013400 	.word	0x40013400

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fed0 	bl	8001abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f867 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f000 fbb1 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d26:	f000 fb85 	bl	8001434 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d2a:	f000 f909 	bl	8000f40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d2e:	f000 f961 	bl	8000ff4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d32:	f000 f8ab 	bl	8000e8c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000d36:	f000 f9b3 	bl	80010a0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000d3a:	f000 fa3d 	bl	80011b8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000d3e:	f000 fae7 	bl	8001310 <MX_TIM15_Init>
  MX_TIM6_Init();
 8000d42:	f000 fa03 	bl	800114c <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000d46:	f00a f8b3 	bl	800aeb0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	803b      	strh	r3, [r7, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	807b      	strh	r3, [r7, #2]
 8000d52:	2300      	movs	r3, #0
 8000d54:	80bb      	strh	r3, [r7, #4]
 8000d56:	2300      	movs	r3, #0
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	813b      	strh	r3, [r7, #8]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	817b      	strh	r3, [r7, #10]
 8000d62:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000d66:	81bb      	strh	r3, [r7, #12]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000d68:	481d      	ldr	r0, [pc, #116]	; (8000de0 <main+0xcc>)
 8000d6a:	f004 f9f5 	bl	8005158 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000d6e:	2064      	movs	r0, #100	; 0x64
 8000d70:	f000 ff16 	bl	8001ba0 <HAL_Delay>
  enc_init();
 8000d74:	f7ff fd7e 	bl	8000874 <enc_init>
  pwm_init();
 8000d78:	f7ff fd92 	bl	80008a0 <pwm_init>
  wake_drivers_up();
 8000d7c:	f7ff ff16 	bl	8000bac <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <main+0xd0>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0fa      	beq.n	8000d80 <main+0x6c>
    	isCommandReceived = 0;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <main+0xd0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000d90:	f7ff ff0c 	bl	8000bac <wake_drivers_up>
    	motor_status_update();
 8000d94:	f7ff fda2 	bl	80008dc <motor_status_update>
    	thrower_pwm(command.thrower_speed);
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <main+0xd4>)
 8000d9a:	88db      	ldrh	r3, [r3, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff33 	bl	8000c08 <thrower_pwm>

		feedback.speed[0] = motor_status[0].target_speed; // In the current state it retuns the uint8 version without direction, whoops!
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <main+0xd8>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <main+0xd8>)
 8000dac:	8b1b      	ldrh	r3, [r3, #24]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <main+0xd8>)
 8000db4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <main+0xd8>)
 8000dbc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dc0:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <main+0xd8>)
 8000dc4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000dc8:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <main+0xd8>)
 8000dcc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000dd0:	817b      	strh	r3, [r7, #10]

		//feedback.thowerinf = throwtemp;
		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	210e      	movs	r1, #14
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00a f92c 	bl	800b034 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000ddc:	e7d0      	b.n	8000d80 <main+0x6c>
 8000dde:	bf00      	nop
 8000de0:	200002d0 	.word	0x200002d0
 8000de4:	20000490 	.word	0x20000490
 8000de8:	2000045c 	.word	0x2000045c
 8000dec:	20000414 	.word	0x20000414

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0318 	add.w	r3, r7, #24
 8000dfa:	2238      	movs	r2, #56	; 0x38
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a fd98 	bl	800b934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f003 f9b8 	bl	8004188 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000e18:	2322      	movs	r3, #34	; 0x22
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2340      	movs	r3, #64	; 0x40
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e26:	2301      	movs	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000e36:	2314      	movs	r3, #20
 8000e38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fa40 	bl	80042d0 <HAL_RCC_OscConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e56:	f000 fb97 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fd44 	bl	8004900 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7e:	f000 fb83 	bl	8001588 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2224      	movs	r2, #36	; 0x24
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fd4a 	bl	800b934 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000eac:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <MX_TIM1_Init+0xb0>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000f02:	f004 fdfb 	bl	8005afc <HAL_TIM_Encoder_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000f0c:	f000 fb3c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM1_Init+0xac>)
 8000f22:	f005 ff21 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f2c:	f000 fb2c 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3730      	adds	r7, #48	; 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001a0 	.word	0x200001a0
 8000f3c:	40012c00 	.word	0x40012c00

08000f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6c:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1066;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f7a:	f240 422a 	movw	r2, #1066	; 0x42a
 8000f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f8c:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000f8e:	f004 f94d 	bl	800522c <HAL_TIM_PWM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f000 faf6 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000fac:	f005 fedc 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000fb6:	f000 fae7 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fba:	2360      	movs	r3, #96	; 0x60
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000fd2:	f005 f847 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000fdc:	f000 fad4 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <MX_TIM2_Init+0xb0>)
 8000fe2:	f000 fc3b 	bl	800185c <HAL_TIM_MspPostInit>

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001ec 	.word	0x200001ec

08000ff4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fc96 	bl	800b934 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <MX_TIM3_Init+0xa8>)
 8001016:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_TIM3_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_TIM3_Init+0xa4>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001040:	2301      	movs	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001050:	2301      	movs	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001064:	f004 fd4a 	bl	8005afc <HAL_TIM_Encoder_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800106e:	f000 fa8b 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_TIM3_Init+0xa4>)
 8001080:	f005 fe72 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800108a:	f000 fa7d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000238 	.word	0x20000238
 800109c:	40000400 	.word	0x40000400

080010a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2224      	movs	r2, #36	; 0x24
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00a fc40 	bl	800b934 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <MX_TIM4_Init+0xa8>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_TIM4_Init+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_TIM4_Init+0xa4>)
 8001110:	f004 fcf4 	bl	8005afc <HAL_TIM_Encoder_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800111a:	f000 fa35 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_TIM4_Init+0xa4>)
 800112c:	f005 fe1c 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001136:	f000 fa27 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3730      	adds	r7, #48	; 0x30
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000284 	.word	0x20000284
 8001148:	40000800 	.word	0x40000800

0800114c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_TIM6_Init+0x64>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_TIM6_Init+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_TIM6_Init+0x64>)
 8001164:	2217      	movs	r2, #23
 8001166:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_TIM6_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_TIM6_Init+0x64>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM6_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM6_Init+0x64>)
 800117e:	f003 ff93 	bl	80050a8 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001188:	f000 f9fe 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_TIM6_Init+0x64>)
 800119a:	f005 fde5 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011a4:	f000 f9f0 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002d0 	.word	0x200002d0
 80011b4:	40001000 	.word	0x40001000

080011b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b098      	sub	sp, #96	; 0x60
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2234      	movs	r2, #52	; 0x34
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00a fba5 	bl	800b934 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <MX_TIM8_Init+0x150>)
 80011ec:	4a47      	ldr	r2, [pc, #284]	; (800130c <MX_TIM8_Init+0x154>)
 80011ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011f0:	4b45      	ldr	r3, [pc, #276]	; (8001308 <MX_TIM8_Init+0x150>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <MX_TIM8_Init+0x150>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <MX_TIM8_Init+0x150>)
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <MX_TIM8_Init+0x150>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <MX_TIM8_Init+0x150>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <MX_TIM8_Init+0x150>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001216:	483c      	ldr	r0, [pc, #240]	; (8001308 <MX_TIM8_Init+0x150>)
 8001218:	f004 f808 	bl	800522c <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f9b1 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001236:	4619      	mov	r1, r3
 8001238:	4833      	ldr	r0, [pc, #204]	; (8001308 <MX_TIM8_Init+0x150>)
 800123a:	f005 fd95 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 f9a0 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001248:	2360      	movs	r3, #96	; 0x60
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001250:	2300      	movs	r3, #0
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4826      	ldr	r0, [pc, #152]	; (8001308 <MX_TIM8_Init+0x150>)
 800126e:	f004 fef9 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001278:	f000 f986 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001280:	2204      	movs	r2, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4820      	ldr	r0, [pc, #128]	; (8001308 <MX_TIM8_Init+0x150>)
 8001286:	f004 feed 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001290:	f000 f97a 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001294:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001298:	2208      	movs	r2, #8
 800129a:	4619      	mov	r1, r3
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <MX_TIM8_Init+0x150>)
 800129e:	f004 fee1 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 80012a8:	f000 f96e 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM8_Init+0x150>)
 80012ea:	f005 fdbf 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80012f4:	f000 f948 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_TIM8_Init+0x150>)
 80012fa:	f000 faaf 	bl	800185c <HAL_TIM_MspPostInit>

}
 80012fe:	bf00      	nop
 8001300:	3760      	adds	r7, #96	; 0x60
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000031c 	.word	0x2000031c
 800130c:	40013400 	.word	0x40013400

08001310 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b098      	sub	sp, #96	; 0x60
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001316:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2234      	movs	r2, #52	; 0x34
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00a faf9 	bl	800b934 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <MX_TIM15_Init+0x11c>)
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <MX_TIM15_Init+0x120>)
 8001346:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <MX_TIM15_Init+0x11c>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_TIM15_Init+0x11c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001354:	4b35      	ldr	r3, [pc, #212]	; (800142c <MX_TIM15_Init+0x11c>)
 8001356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <MX_TIM15_Init+0x11c>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_TIM15_Init+0x11c>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_TIM15_Init+0x11c>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800136e:	482f      	ldr	r0, [pc, #188]	; (800142c <MX_TIM15_Init+0x11c>)
 8001370:	f003 ff5c 	bl	800522c <HAL_TIM_PWM_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 f905 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800138a:	4619      	mov	r1, r3
 800138c:	4827      	ldr	r0, [pc, #156]	; (800142c <MX_TIM15_Init+0x11c>)
 800138e:	f005 fceb 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001398:	f000 f8f6 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139c:	2360      	movs	r3, #96	; 0x60
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	481a      	ldr	r0, [pc, #104]	; (800142c <MX_TIM15_Init+0x11c>)
 80013c2:	f004 fe4f 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80013cc:	f000 f8dc 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d4:	2204      	movs	r2, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM15_Init+0x11c>)
 80013da:	f004 fe43 	bl	8006064 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80013e4:	f000 f8d0 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001400:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM15_Init+0x11c>)
 8001410:	f005 fd2c 	bl	8006e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800141a:	f000 f8b5 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM15_Init+0x11c>)
 8001420:	f000 fa1c 	bl	800185c <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3760      	adds	r7, #96	; 0x60
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000368 	.word	0x20000368
 8001430:	40014000 	.word	0x40014000

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_DMA_Init+0x50>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <MX_DMA_Init+0x50>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6493      	str	r3, [r2, #72]	; 0x48
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_DMA_Init+0x50>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_DMA_Init+0x50>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <MX_DMA_Init+0x50>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6493      	str	r3, [r2, #72]	; 0x48
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_DMA_Init+0x50>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	200b      	movs	r0, #11
 8001470:	f000 fc93 	bl	8001d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001474:	200b      	movs	r0, #11
 8001476:	f000 fcaa 	bl	8001dce <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <MX_GPIO_Init+0xf4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <MX_GPIO_Init+0xf4>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <MX_GPIO_Init+0xf4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <MX_GPIO_Init+0xf4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <MX_GPIO_Init+0xf4>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_GPIO_Init+0xf4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_GPIO_Init+0xf4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a2a      	ldr	r2, [pc, #168]	; (800157c <MX_GPIO_Init+0xf4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_GPIO_Init+0xf4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2101      	movs	r1, #1
 80014ea:	4825      	ldr	r0, [pc, #148]	; (8001580 <MX_GPIO_Init+0xf8>)
 80014ec:	f001 f8e6 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	21a2      	movs	r1, #162	; 0xa2
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f001 f8e0 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2118      	movs	r1, #24
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <MX_GPIO_Init+0xfc>)
 8001502:	f001 f8db 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001506:	2301      	movs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	; (8001580 <MX_GPIO_Init+0xf8>)
 800151e:	f000 ff4b 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8001522:	2302      	movs	r3, #2
 8001524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4619      	mov	r1, r3
 8001534:	4812      	ldr	r0, [pc, #72]	; (8001580 <MX_GPIO_Init+0xf8>)
 8001536:	f000 ff3f 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 800153a:	23a2      	movs	r3, #162	; 0xa2
 800153c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f000 ff30 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8001558:	2318      	movs	r3, #24
 800155a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_GPIO_Init+0xfc>)
 8001570:	f000 ff22 	bl	80023b8 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	48001400 	.word	0x48001400
 8001584:	48000400 	.word	0x48000400

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6613      	str	r3, [r2, #96]	; 0x60
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_TIM_Encoder_MspInit+0x138>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d12a      	bne.n	8001654 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001608:	6613      	str	r3, [r2, #96]	; 0x60
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 800162e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001640:	2306      	movs	r3, #6
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f000 feb3 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001652:	e05b      	b.n	800170c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a30      	ldr	r2, [pc, #192]	; (800171c <HAL_TIM_Encoder_MspInit+0x140>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d129      	bne.n	80016b2 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001662:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6593      	str	r3, [r2, #88]	; 0x58
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800168e:	2350      	movs	r3, #80	; 0x50
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800169e:	2302      	movs	r3, #2
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f000 fe84 	bl	80023b8 <HAL_GPIO_Init>
}
 80016b0:	e02c      	b.n	800170c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1a      	ldr	r2, [pc, #104]	; (8001720 <HAL_TIM_Encoder_MspInit+0x144>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d127      	bne.n	800170c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 80016ec:	23c0      	movs	r3, #192	; 0xc0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016fc:	2302      	movs	r3, #2
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <HAL_TIM_Encoder_MspInit+0x148>)
 8001708:	f000 fe56 	bl	80023b8 <HAL_GPIO_Init>
}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	; 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40012c00 	.word	0x40012c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40000400 	.word	0x40000400
 8001720:	40000800 	.word	0x40000800
 8001724:	48000400 	.word	0x48000400

08001728 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d138      	bne.n	80017ac <HAL_TIM_PWM_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001754:	4a2b      	ldr	r2, [pc, #172]	; (8001804 <HAL_TIM_PWM_MspInit+0xdc>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 800175a:	2238      	movs	r2, #56	; 0x38
 800175c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001760:	2210      	movs	r2, #16
 8001762:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800178e:	481c      	ldr	r0, [pc, #112]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 8001790:	f000 fb38 	bl	8001e04 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800179a:	f7ff fef5 	bl	8001588 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_TIM_PWM_MspInit+0xd8>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017aa:	e022      	b.n	80017f2 <HAL_TIM_PWM_MspInit+0xca>
  else if(htim_pwm->Instance==TIM8)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	; (8001808 <HAL_TIM_PWM_MspInit+0xe0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10c      	bne.n	80017d0 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
}
 80017ce:	e010      	b.n	80017f2 <HAL_TIM_PWM_MspInit+0xca>
  else if(htim_pwm->Instance==TIM15)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_TIM_PWM_MspInit+0xe4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10b      	bne.n	80017f2 <HAL_TIM_PWM_MspInit+0xca>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_TIM_PWM_MspInit+0xd4>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	200003b4 	.word	0x200003b4
 8001804:	40020008 	.word	0x40020008
 8001808:	40013400 	.word	0x40013400
 800180c:	40014000 	.word	0x40014000

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_TIM_Base_MspInit+0x44>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d113      	bne.n	800184a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6593      	str	r3, [r2, #88]	; 0x58
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_Base_MspInit+0x48>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f000 faab 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001844:	2036      	movs	r0, #54	; 0x36
 8001846:	f000 fac2 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40001000 	.word	0x40001000
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187c:	d11d      	bne.n	80018ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a49      	ldr	r2, [pc, #292]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
 8001894:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a6:	2301      	movs	r3, #1
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f000 fd80 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018b8:	e071      	b.n	800199e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_TIM_MspPostInit+0x150>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d14a      	bne.n	800195a <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001900:	2300      	movs	r3, #0
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001904:	2304      	movs	r3, #4
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4828      	ldr	r0, [pc, #160]	; (80019b0 <HAL_TIM_MspPostInit+0x154>)
 8001910:	f000 fd52 	bl	80023b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001926:	2302      	movs	r3, #2
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f000 fd40 	bl	80023b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 8001938:	2320      	movs	r3, #32
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001948:	2303      	movs	r3, #3
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4817      	ldr	r0, [pc, #92]	; (80019b0 <HAL_TIM_MspPostInit+0x154>)
 8001954:	f000 fd30 	bl	80023b8 <HAL_GPIO_Init>
}
 8001958:	e021      	b.n	800199e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <HAL_TIM_MspPostInit+0x158>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d11c      	bne.n	800199e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	4a0f      	ldr	r2, [pc, #60]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_MspPostInit+0x14c>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 800197c:	230c      	movs	r3, #12
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800198c:	2309      	movs	r3, #9
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 fd0d 	bl	80023b8 <HAL_GPIO_Init>
}
 800199e:	bf00      	nop
 80019a0:	3730      	adds	r7, #48	; 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40013400 	.word	0x40013400
 80019b0:	48000400 	.word	0x48000400
 80019b4:	40014000 	.word	0x40014000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f8ae 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Channel1_IRQHandler+0x10>)
 8001a12:	f000 fb81 	bl	8002118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003b4 	.word	0x200003b4

08001a20 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <USB_LP_IRQHandler+0x10>)
 8001a26:	f000 ff82 	bl	800292e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000113c 	.word	0x2000113c

08001a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM6_DAC_IRQHandler+0x10>)
 8001a3a:	f004 f993 	bl	8005d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002d0 	.word	0x200002d0

08001a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopForever+0x2>)
 8001a6e:	4685      	mov	sp, r0
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopForever+0x6>)
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopForever+0xa>)
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopForever+0xe>)
 8001a76:	2300      	movs	r3, #0
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:
 8001a7a:	58d4      	ldr	r4, [r2, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:
 8001a80:	18c4      	adds	r4, r0, r3
 8001a82:	428c      	cmp	r4, r1
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopForever+0x12>)
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopForever+0x16>)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:
 8001a92:	42a2      	cmp	r2, r4
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>
 8001a96:	f7ff ffd7 	bl	8001a48 <SystemInit>
 8001a9a:	f009 ff19 	bl	800b8d0 <__libc_init_array>
 8001a9e:	f7ff f939 	bl	8000d14 <main>

08001aa2 <LoopForever>:
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
 8001aa4:	20008000 	.word	0x20008000
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000184 	.word	0x20000184
 8001ab0:	0800b9bc 	.word	0x0800b9bc
 8001ab4:	20000184 	.word	0x20000184
 8001ab8:	20001650 	.word	0x20001650

08001abc <ADC1_2_IRQHandler>:
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>

08001abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f95b 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f80e 	bl	8001af0 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e001      	b.n	8001ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae0:	f7ff fd58 	bl	8001594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_InitTick+0x68>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d022      	beq.n	8001b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_InitTick+0x6c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_InitTick+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f966 	bl	8001dea <HAL_SYSTICK_Config>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d809      	bhi.n	8001b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	f000 f932 	bl	8001d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_InitTick+0x70>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e007      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e004      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	20000494 	.word	0x20000494
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000494 	.word	0x20000494

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d004      	beq.n	8001bc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_Delay+0x40>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc4:	bf00      	nop
 8001bc6:	f7ff ffdf 	bl	8001b88 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d8f7      	bhi.n	8001bc6 <HAL_Delay+0x26>
  {
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000008 	.word	0x20000008

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff29 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff40 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff33 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa4 	bl	8001d40 <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e08d      	b.n	8001f32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_DMA_Init+0x138>)
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d80f      	bhi.n	8001e42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_DMA_Init+0x13c>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_DMA_Init+0x140>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <HAL_DMA_Init+0x144>)
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e40:	e00e      	b.n	8001e60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_DMA_Init+0x148>)
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a3d      	ldr	r2, [pc, #244]	; (8001f44 <HAL_DMA_Init+0x140>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a3c      	ldr	r2, [pc, #240]	; (8001f50 <HAL_DMA_Init+0x14c>)
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa1e 	bl	80022f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec0:	d102      	bne.n	8001ec8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001edc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_DMA_Init+0x104>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d80c      	bhi.n	8001f08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa3e 	bl	8002370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020407 	.word	0x40020407
 8001f40:	bffdfff8 	.word	0xbffdfff8
 8001f44:	cccccccd 	.word	0xcccccccd
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	bffdfbf8 	.word	0xbffdfbf8
 8001f50:	40020400 	.word	0x40020400

08001f54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Start_IT+0x20>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e066      	b.n	8002042 <HAL_DMA_Start_IT+0xee>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d155      	bne.n	8002034 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f962 	bl	8002276 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 020e 	orr.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e00f      	b.n	8001fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 020a 	orr.w	r2, r2, #10
 8001fea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002008:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002020:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e005      	b.n	8002040 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800203c:	2302      	movs	r3, #2
 800203e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002040:	7dfb      	ldrb	r3, [r7, #23]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d00d      	beq.n	800207e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e047      	b.n	800210e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 020e 	bic.w	r2, r2, #14
 800208c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 021f 	and.w	r2, r3, #31
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
    }
  }
  return status;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2204      	movs	r2, #4
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d026      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d021      	beq.n	8002192 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0204 	bic.w	r2, r2, #4
 800216a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2104      	movs	r1, #4
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	2b00      	cmp	r3, #0
 8002186:	d071      	beq.n	800226c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002190:	e06c      	b.n	800226c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2202      	movs	r2, #2
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d02e      	beq.n	8002204 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d029      	beq.n	8002204 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020a 	bic.w	r2, r2, #10
 80021cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f003 021f 	and.w	r2, r3, #31
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2102      	movs	r1, #2
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d038      	beq.n	800226c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002202:	e033      	b.n	800226c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2208      	movs	r2, #8
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02a      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d025      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020e 	bic.w	r2, r2, #14
 8002230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800226c:	bf00      	nop
 800226e:	bf00      	nop
}
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800228c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800229e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f202 	lsl.w	r2, r1, r2
 80022b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d108      	bne.n	80022d6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022d4:	e007      	b.n	80022e6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	60da      	str	r2, [r3, #12]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002304:	429a      	cmp	r2, r3
 8002306:	d802      	bhi.n	800230e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e001      	b.n	8002312 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002310:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3b08      	subs	r3, #8
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	461a      	mov	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800233e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2201      	movs	r2, #1
 8002348:	409a      	lsls	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40020407 	.word	0x40020407
 8002360:	40020800 	.word	0x40020800
 8002364:	40020820 	.word	0x40020820
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	40020880 	.word	0x40020880

08002370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002392:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3b01      	subs	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	1000823f 	.word	0x1000823f
 80023b4:	40020940 	.word	0x40020940

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023c6:	e15a      	b.n	800267e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2101      	movs	r1, #1
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	4013      	ands	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 814c 	beq.w	8002678 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d005      	beq.n	80023f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d130      	bne.n	800245a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800242e:	2201      	movs	r2, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 0201 	and.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d017      	beq.n	8002496 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d123      	bne.n	80024ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	08da      	lsrs	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3208      	adds	r2, #8
 80024aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	08da      	lsrs	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3208      	adds	r2, #8
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0203 	and.w	r2, r3, #3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80a6 	beq.w	8002678 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_GPIO_Init+0x2e4>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002530:	4a5a      	ldr	r2, [pc, #360]	; (800269c <HAL_GPIO_Init+0x2e4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6613      	str	r3, [r2, #96]	; 0x60
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_GPIO_Init+0x2e4>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002544:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800256e:	d01f      	beq.n	80025b0 <HAL_GPIO_Init+0x1f8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d019      	beq.n	80025ac <HAL_GPIO_Init+0x1f4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_GPIO_Init+0x1f0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a4a      	ldr	r2, [pc, #296]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00d      	beq.n	80025a4 <HAL_GPIO_Init+0x1ec>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d007      	beq.n	80025a0 <HAL_GPIO_Init+0x1e8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a48      	ldr	r2, [pc, #288]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_GPIO_Init+0x1e4>
 8002598:	2305      	movs	r3, #5
 800259a:	e00a      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 800259c:	2306      	movs	r3, #6
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x1fa>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800261e:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_GPIO_Init+0x300>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_GPIO_Init+0x300>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae9d 	bne.w	80023c8 <HAL_GPIO_Init+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	48001000 	.word	0x48001000
 80026b4:	48001400 	.word	0x48001400
 80026b8:	40010400 	.word	0x40010400

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43d9      	mvns	r1, r3
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	400b      	ands	r3, r1
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002722:	b08b      	sub	sp, #44	; 0x2c
 8002724:	af06      	add	r7, sp, #24
 8002726:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0d7      	b.n	80028e2 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f008 fdbc 	bl	800b2c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2203      	movs	r2, #3
 8002750:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f004 fca9 	bl	80070b0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e04c      	b.n	80027fe <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3301      	adds	r3, #1
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	b298      	uxth	r0, r3
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	3336      	adds	r3, #54	; 0x36
 80027a2:	4602      	mov	r2, r0
 80027a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3303      	adds	r3, #3
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3338      	adds	r3, #56	; 0x38
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	333c      	adds	r3, #60	; 0x3c
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3340      	adds	r3, #64	; 0x40
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	3301      	adds	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	d3ad      	bcc.n	8002764 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e044      	b.n	8002898 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3301      	adds	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3b5      	bcc.n	800280e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	687e      	ldr	r6, [r7, #4]
 80028aa:	466d      	mov	r5, sp
 80028ac:	f106 0410 	add.w	r4, r6, #16
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	602b      	str	r3, [r5, #0]
 80028b8:	1d33      	adds	r3, r6, #4
 80028ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f004 fc12 	bl	80070e6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d102      	bne.n	80028e0 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f001 fc29 	bl	8004132 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_Start+0x16>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e012      	b.n	8002926 <HAL_PCD_Start+0x3c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fbb8 	bl	8007082 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f006 fdd0 	bl	80094bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f006 fdd5 	bl	80094ea <USB_ReadInterrupts>
 8002940:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb26 	bl	8002f9e <PCD_EP_ISR_Handler>

    return;
 8002952:	e110      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d013      	beq.n	8002986 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002970:	b292      	uxth	r2, r2
 8002972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f008 fd35 	bl	800b3e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800297c:	2100      	movs	r1, #0
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8fc 	bl	8002b7c <HAL_PCD_SetAddress>

    return;
 8002984:	e0f7      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00c      	beq.n	80029aa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029a2:	b292      	uxth	r2, r2
 80029a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029a8:	e0e5      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c6:	b292      	uxth	r2, r2
 80029c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029cc:	e0d3      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d034      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0204 	bic.w	r2, r2, #4
 80029ea:	b292      	uxth	r2, r2
 80029ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0208 	bic.w	r2, r2, #8
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f008 fed7 	bl	800b7d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f008 fd18 	bl	800b458 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a40:	e099      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d027      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	b292      	uxth	r2, r2
 8002a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	b292      	uxth	r2, r2
 8002a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0204 	orr.w	r2, r2, #4
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f008 fcc5 	bl	800b424 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a9a:	e06c      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d040      	beq.n	8002b28 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d12b      	bne.n	8002b20 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0204 	orr.w	r2, r2, #4
 8002ada:	b292      	uxth	r2, r2
 8002adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	b292      	uxth	r2, r2
 8002af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b16:	2101      	movs	r1, #1
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f008 fe59 	bl	800b7d0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002b1e:	e02a      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f008 fc7f 	bl	800b424 <HAL_PCD_SuspendCallback>
    return;
 8002b26:	e026      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00f      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b44:	b292      	uxth	r2, r2
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f008 fc3d 	bl	800b3ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b50:	e011      	b.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b74:	bf00      	nop
  }
}
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_PCD_SetAddress+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e013      	b.n	8002bbe <HAL_PCD_SetAddress+0x42>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f006 fc70 	bl	8009494 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	4608      	mov	r0, r1
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	803b      	strh	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0e      	bge.n	8002c0a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	705a      	strb	r2, [r3, #1]
 8002c08:	e00e      	b.n	8002c28 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 0207 	and.w	r2, r3, #7
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c34:	883a      	ldrh	r2, [r7, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	78ba      	ldrb	r2, [r7, #2]
 8002c3e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c52:	78bb      	ldrb	r3, [r7, #2]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d102      	bne.n	8002c5e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_EP_Open+0xa6>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_Open+0xc4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fa54 	bl	8007128 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c88:	7afb      	ldrb	r3, [r7, #11]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da0e      	bge.n	8002cc4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
 8002cc2:	e00e      	b.n	8002ce2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0207 	and.w	r2, r3, #7
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_EP_Close+0x6a>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e00e      	b.n	8002d1a <HAL_PCD_EP_Close+0x88>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fda0 	bl	8007850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 0207 	and.w	r2, r3, #7
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d6e:	7afb      	ldrb	r3, [r7, #11]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 ff53 	bl	8007c2a <USB_EPStartXfer>
 8002d84:	e005      	b.n	8002d92 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6979      	ldr	r1, [r7, #20]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 ff4c 	bl	8007c2a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 0207 	and.w	r2, r3, #7
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fef8 	bl	8007c2a <USB_EPStartXfer>
 8002e3a:	e005      	b.n	8002e48 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6979      	ldr	r1, [r7, #20]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fef1 	bl	8007c2a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 0207 	and.w	r2, r3, #7
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d901      	bls.n	8002e70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e03e      	b.n	8002eee <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da0e      	bge.n	8002e96 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	705a      	strb	r2, [r3, #1]
 8002e94:	e00c      	b.n	8002eb0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_PCD_EP_SetStall+0x7e>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e00e      	b.n	8002eee <HAL_PCD_EP_SetStall+0x9c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f006 f9d9 	bl	8009296 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d901      	bls.n	8002f14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e040      	b.n	8002f96 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0e      	bge.n	8002f3a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00e      	b.n	8002f58 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 0207 	and.w	r2, r3, #7
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_PCD_EP_ClrStall+0x82>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e00e      	b.n	8002f96 <HAL_PCD_EP_ClrStall+0xa0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 f9d6 	bl	8009338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b096      	sub	sp, #88	; 0x58
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fa6:	e39c      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002fc2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 815e 	bne.w	8003288 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002fcc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d150      	bne.n	800307a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	81fb      	strh	r3, [r7, #14]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3328      	adds	r3, #40	; 0x28
 8003000:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4413      	add	r3, r2
 800301c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	441a      	add	r2, r3
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003038:	2100      	movs	r1, #0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f008 f9ab 	bl	800b396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 834a 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x744>
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 8345 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003064:	b2da      	uxtb	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b292      	uxth	r2, r2
 800306c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003078:	e333      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003080:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800308c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d032      	beq.n	80030fe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f006 fa5b 	bl	800958e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030e4:	4013      	ands	r3, r2
 80030e6:	823b      	strh	r3, [r7, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	8a3a      	ldrh	r2, [r7, #16]
 80030ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030f2:	b292      	uxth	r2, r2
 80030f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f008 f920 	bl	800b33c <HAL_PCD_SetupStageCallback>
 80030fc:	e2f1      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030fe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003102:	2b00      	cmp	r3, #0
 8003104:	f280 82ed 	bge.w	80036e2 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29a      	uxth	r2, r3
 8003110:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003114:	4013      	ands	r3, r2
 8003116:	83fb      	strh	r3, [r7, #30]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	8bfa      	ldrh	r2, [r7, #30]
 800311e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003122:	b292      	uxth	r2, r2
 8003124:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4413      	add	r3, r2
 8003140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d019      	beq.n	800318a <PCD_EP_ISR_Handler+0x1ec>
 8003156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	6959      	ldr	r1, [r3, #20]
 8003166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003168:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800316e:	b29b      	uxth	r3, r3
 8003170:	f006 fa0d 	bl	800958e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	441a      	add	r2, r3
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003182:	2100      	movs	r1, #0
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f008 f8eb 	bl	800b360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 82a3 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b3e      	cmp	r3, #62	; 0x3e
 80031c2:	d918      	bls.n	80031f6 <PCD_EP_ISR_Handler+0x258>
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
 80031cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <PCD_EP_ISR_Handler+0x240>
 80031d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031da:	3b01      	subs	r3, #1
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
 80031de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	029b      	lsls	r3, r3, #10
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e029      	b.n	800324a <PCD_EP_ISR_Handler+0x2ac>
 80031f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d112      	bne.n	8003224 <PCD_EP_ISR_Handler+0x286>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003208:	b29a      	uxth	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	801a      	strh	r2, [r3, #0]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800321c:	b29a      	uxth	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	801a      	strh	r2, [r3, #0]
 8003222:	e012      	b.n	800324a <PCD_EP_ISR_Handler+0x2ac>
 8003224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <PCD_EP_ISR_Handler+0x2a0>
 8003238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323a:	3301      	adds	r3, #1
 800323c:	647b      	str	r3, [r7, #68]	; 0x44
 800323e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003240:	b29b      	uxth	r3, r3
 8003242:	029b      	lsls	r3, r3, #10
 8003244:	b29a      	uxth	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	827b      	strh	r3, [r7, #18]
 800325c:	8a7b      	ldrh	r3, [r7, #18]
 800325e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003262:	827b      	strh	r3, [r7, #18]
 8003264:	8a7b      	ldrh	r3, [r7, #18]
 8003266:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800326a:	827b      	strh	r3, [r7, #18]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	8a7b      	ldrh	r3, [r7, #18]
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	b29b      	uxth	r3, r3
 8003284:	8013      	strh	r3, [r2, #0]
 8003286:	e22c      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800329c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f280 80f6 	bge.w	8003492 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032bc:	4013      	ands	r3, r2
 80032be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80032d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032d8:	b292      	uxth	r2, r2
 80032da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032dc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f4:	7b1b      	ldrb	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d123      	bne.n	8003342 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003322:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 808e 	beq.w	8003448 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003332:	6959      	ldr	r1, [r3, #20]
 8003334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003336:	88da      	ldrh	r2, [r3, #6]
 8003338:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800333c:	f006 f927 	bl	800958e <USB_ReadPMA>
 8003340:	e082      	b.n	8003448 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d10a      	bne.n	8003360 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800334a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800334e:	461a      	mov	r2, r3
 8003350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9d3 	bl	80036fe <HAL_PCD_EP_DB_Receive>
 8003358:	4603      	mov	r3, r0
 800335a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800335e:	e073      	b.n	8003448 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	441a      	add	r2, r3
 800338c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d022      	beq.n	8003404 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80033e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02c      	beq.n	8003448 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f4:	6959      	ldr	r1, [r3, #20]
 80033f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f8:	891a      	ldrh	r2, [r3, #8]
 80033fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033fe:	f006 f8c6 	bl	800958e <USB_ReadPMA>
 8003402:	e021      	b.n	8003448 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340c:	b29b      	uxth	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800342c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343a:	6959      	ldr	r1, [r3, #20]
 800343c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343e:	895a      	ldrh	r2, [r3, #10]
 8003440:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003444:	f006 f8a3 	bl	800958e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003450:	441a      	add	r2, r3
 8003452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003454:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800345e:	441a      	add	r2, r3
 8003460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003462:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <PCD_EP_ISR_Handler+0x4da>
 800346c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	429a      	cmp	r2, r3
 8003476:	d206      	bcs.n	8003486 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f007 ff6e 	bl	800b360 <HAL_PCD_DataOutStageCallback>
 8003484:	e005      	b.n	8003492 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800348c:	4618      	mov	r0, r3
 800348e:	f004 fbcc 	bl	8007c2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8121 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80034a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80034f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f2:	78db      	ldrb	r3, [r3, #3]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	f000 80a2 	beq.w	800363e <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80034fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003502:	7b1b      	ldrb	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8093 	beq.w	8003630 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800350a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d046      	beq.n	80035a4 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d126      	bne.n	800356c <PCD_EP_ISR_Handler+0x5ce>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352c:	b29b      	uxth	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	4413      	add	r3, r2
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	00da      	lsls	r2, r3, #3
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	4413      	add	r3, r2
 8003540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003550:	b29a      	uxth	r2, r3
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29a      	uxth	r2, r3
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	e061      	b.n	8003630 <PCD_EP_ISR_Handler+0x692>
 800356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d15d      	bne.n	8003630 <PCD_EP_ISR_Handler+0x692>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	4413      	add	r3, r2
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	00da      	lsls	r2, r3, #3
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	4413      	add	r3, r2
 8003596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]
 80035a2:	e045      	b.n	8003630 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d126      	bne.n	8003600 <PCD_EP_ISR_Handler+0x662>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	4413      	add	r3, r2
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	00da      	lsls	r2, r3, #3
 80035d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d2:	4413      	add	r3, r2
 80035d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	e017      	b.n	8003630 <PCD_EP_ISR_Handler+0x692>
 8003600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d113      	bne.n	8003630 <PCD_EP_ISR_Handler+0x692>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003610:	b29b      	uxth	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003616:	4413      	add	r3, r2
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	00da      	lsls	r2, r3, #3
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	4413      	add	r3, r2
 8003624:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	2200      	movs	r2, #0
 800362e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f007 fead 	bl	800b396 <HAL_PCD_DataInStageCallback>
 800363c:	e051      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800363e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d144      	bne.n	80036d4 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4413      	add	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	4413      	add	r3, r2
 8003664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800367a:	429a      	cmp	r2, r3
 800367c:	d907      	bls.n	800368e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800367e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003686:	1ad2      	subs	r2, r2, r3
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	619a      	str	r2, [r3, #24]
 800368c:	e002      	b.n	8003694 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f007 fe77 	bl	800b396 <HAL_PCD_DataInStageCallback>
 80036a8:	e01b      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036b2:	441a      	add	r2, r3
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036c0:	441a      	add	r2, r3
 80036c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 faac 	bl	8007c2a <USB_EPStartXfer>
 80036d2:	e006      	b.n	80036e2 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036d8:	461a      	mov	r2, r3
 80036da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f917 	bl	8003910 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f6ff ac5a 	blt.w	8002fa8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3758      	adds	r7, #88	; 0x58
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d07c      	beq.n	8003810 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	4413      	add	r3, r2
 8003730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	429a      	cmp	r2, r3
 8003744:	d306      	bcc.n	8003754 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	8b7b      	ldrh	r3, [r7, #26]
 800374c:	1ad2      	subs	r2, r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
 8003752:	e002      	b.n	800375a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d123      	bne.n	80037aa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	833b      	strh	r3, [r7, #24]
 800377e:	8b3b      	ldrh	r3, [r7, #24]
 8003780:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003784:	833b      	strh	r3, [r7, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	8b3b      	ldrh	r3, [r7, #24]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01f      	beq.n	80037f4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	82fb      	strh	r3, [r7, #22]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	8afb      	ldrh	r3, [r7, #22]
 80037e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f4:	8b7b      	ldrh	r3, [r7, #26]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8085 	beq.w	8003906 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6959      	ldr	r1, [r3, #20]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	891a      	ldrh	r2, [r3, #8]
 8003808:	8b7b      	ldrh	r3, [r7, #26]
 800380a:	f005 fec0 	bl	800958e <USB_ReadPMA>
 800380e:	e07a      	b.n	8003906 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003818:	b29b      	uxth	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	4413      	add	r3, r2
 800382a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	8b7b      	ldrh	r3, [r7, #26]
 800383c:	429a      	cmp	r2, r3
 800383e:	d306      	bcc.n	800384e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	8b7b      	ldrh	r3, [r7, #26]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e002      	b.n	8003854 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d123      	bne.n	80038a4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	83fb      	strh	r3, [r7, #30]
 8003878:	8bfb      	ldrh	r3, [r7, #30]
 800387a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800387e:	83fb      	strh	r3, [r7, #30]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	8bfb      	ldrh	r3, [r7, #30]
 8003890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	83bb      	strh	r3, [r7, #28]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	8bbb      	ldrh	r3, [r7, #28]
 80038da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ee:	8b7b      	ldrh	r3, [r7, #26]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	895a      	ldrh	r2, [r3, #10]
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	f005 fe44 	bl	800958e <USB_ReadPMA>
    }
  }

  return count;
 8003906:	8b7b      	ldrh	r3, [r7, #26]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b0a2      	sub	sp, #136	; 0x88
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 81c5 	beq.w	8003cb4 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003932:	b29b      	uxth	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	4413      	add	r3, r2
 8003944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800395a:	429a      	cmp	r2, r3
 800395c:	d907      	bls.n	800396e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	619a      	str	r2, [r3, #24]
 800396c:	e002      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 80b9 	bne.w	8003af0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d126      	bne.n	80039d4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003994:	b29b      	uxth	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	4413      	add	r3, r2
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	00da      	lsls	r2, r3, #3
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	4413      	add	r3, r2
 80039a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	801a      	strh	r2, [r3, #0]
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	e01a      	b.n	8003a0a <HAL_PCD_EP_DB_Transmit+0xfa>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d116      	bne.n	8003a0a <HAL_PCD_EP_DB_Transmit+0xfa>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	4413      	add	r3, r2
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	00da      	lsls	r2, r3, #3
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	4413      	add	r3, r2
 80039fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	2200      	movs	r2, #0
 8003a08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	623b      	str	r3, [r7, #32]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d126      	bne.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x156>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	00da      	lsls	r2, r3, #3
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e017      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	785b      	ldrb	r3, [r3, #1]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	00da      	lsls	r2, r3, #3
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f007 fc7a 	bl	800b396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 82d2 	beq.w	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac8:	827b      	strh	r3, [r7, #18]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	441a      	add	r2, r3
 8003ad8:	8a7b      	ldrh	r3, [r7, #18]
 8003ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
 8003aee:	e2b0      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d021      	beq.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 8284 	bne.w	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b52:	441a      	add	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b60:	441a      	add	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6a1a      	ldr	r2, [r3, #32]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d309      	bcc.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7e:	1ad2      	subs	r2, r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	621a      	str	r2, [r3, #32]
 8003b84:	e015      	b.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003b8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b9c:	e009      	b.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d155      	bne.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x356>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	4413      	add	r3, r2
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	00da      	lsls	r2, r3, #3
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	4413      	add	r3, r2
 8003bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
 8003be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be4:	2b3e      	cmp	r3, #62	; 0x3e
 8003be6:	d916      	bls.n	8003c16 <HAL_PCD_EP_DB_Transmit+0x306>
 8003be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	e043      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d112      	bne.n	8003c42 <HAL_PCD_EP_DB_Transmit+0x332>
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2a:	801a      	strh	r2, [r3, #0]
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e02d      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_PCD_EP_DB_Transmit+0x348>
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	3301      	adds	r3, #1
 8003c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	e01b      	b.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d117      	bne.n	8003c9e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	4413      	add	r3, r2
 8003c84:	643b      	str	r3, [r7, #64]	; 0x40
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	00da      	lsls	r2, r3, #3
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8e:	4413      	add	r3, r2
 8003c90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6959      	ldr	r1, [r3, #20]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	891a      	ldrh	r2, [r3, #8]
 8003caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f005 fc2c 	bl	800950a <USB_WritePMA>
 8003cb2:	e1ce      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d307      	bcc.n	8003cf8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cf0:	1ad2      	subs	r2, r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	e002      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 80c4 	bne.w	8003e90 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d126      	bne.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x44e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d24:	4413      	add	r3, r2
 8003d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	00da      	lsls	r2, r3, #3
 8003d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d30:	4413      	add	r3, r2
 8003d32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d36:	667b      	str	r3, [r7, #100]	; 0x64
 8003d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d46:	801a      	strh	r2, [r3, #0]
 8003d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	e01a      	b.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x484>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d116      	bne.n	8003d94 <HAL_PCD_EP_DB_Transmit+0x484>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d7a:	4413      	add	r3, r2
 8003d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	00da      	lsls	r2, r3, #3
 8003d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d86:	4413      	add	r3, r2
 8003d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	2200      	movs	r2, #0
 8003d92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d12f      	bne.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dba:	4413      	add	r3, r2
 8003dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	00da      	lsls	r2, r3, #3
 8003dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dca:	4413      	add	r3, r2
 8003dcc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dfe:	801a      	strh	r2, [r3, #0]
 8003e00:	e017      	b.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x522>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d113      	bne.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x522>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e18:	4413      	add	r3, r2
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00da      	lsls	r2, r3, #3
 8003e22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2e:	2200      	movs	r2, #0
 8003e30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f007 faac 	bl	800b396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 8104 	bne.w	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e64:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]
 8003e8e:	e0e0      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f040 80b4 	bne.w	8004052 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ef2:	441a      	add	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f00:	441a      	add	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d309      	bcc.n	8003f26 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	621a      	str	r2, [r3, #32]
 8003f24:	e015      	b.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d107      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003f2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f3c:	e009      	b.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2200      	movs	r2, #0
 8003f48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	663b      	str	r3, [r7, #96]	; 0x60
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	785b      	ldrb	r3, [r3, #1]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d155      	bne.n	800400c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f74:	4413      	add	r3, r2
 8003f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	00da      	lsls	r2, r3, #3
 8003f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f86:	657b      	str	r3, [r7, #84]	; 0x54
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f8c:	d916      	bls.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	677b      	str	r3, [r7, #116]	; 0x74
 8003f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x694>
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	677b      	str	r3, [r7, #116]	; 0x74
 8003fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	029b      	lsls	r3, r3, #10
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e040      	b.n	800403e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d112      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	e02a      	b.n	800403e <HAL_PCD_EP_DB_Transmit+0x72e>
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	677b      	str	r3, [r7, #116]	; 0x74
 8003fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	677b      	str	r3, [r7, #116]	; 0x74
 8003ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004000:	b29b      	uxth	r3, r3
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	b29a      	uxth	r2, r3
 8004006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	e018      	b.n	800403e <HAL_PCD_EP_DB_Transmit+0x72e>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d114      	bne.n	800403e <HAL_PCD_EP_DB_Transmit+0x72e>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004022:	4413      	add	r3, r2
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	00da      	lsls	r2, r3, #3
 800402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402e:	4413      	add	r3, r2
 8004030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004038:	b29a      	uxth	r2, r3
 800403a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800403c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	895a      	ldrh	r2, [r3, #10]
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	b29b      	uxth	r3, r3
 800404e:	f005 fa5c 	bl	800950a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406c:	823b      	strh	r3, [r7, #16]
 800406e:	8a3b      	ldrh	r3, [r7, #16]
 8004070:	f083 0310 	eor.w	r3, r3, #16
 8004074:	823b      	strh	r3, [r7, #16]
 8004076:	8a3b      	ldrh	r3, [r7, #16]
 8004078:	f083 0320 	eor.w	r3, r3, #32
 800407c:	823b      	strh	r3, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	8a3b      	ldrh	r3, [r7, #16]
 800408e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409e:	b29b      	uxth	r3, r3
 80040a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3788      	adds	r7, #136	; 0x88
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	4613      	mov	r3, r2
 80040bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e009      	b.n	80040f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040e2:	897a      	ldrh	r2, [r7, #10]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4413      	add	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80040f6:	893b      	ldrh	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	b29a      	uxth	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	80da      	strh	r2, [r3, #6]
 800410a:	e00b      	b.n	8004124 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2201      	movs	r2, #1
 8004110:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	b29a      	uxth	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b29a      	uxth	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004156:	b29b      	uxth	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800416a:	b29b      	uxth	r3, r3
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d141      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a2:	d131      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041a4:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	4a46      	ldr	r2, [pc, #280]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041b4:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041bc:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2232      	movs	r2, #50	; 0x32
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	4a3f      	ldr	r2, [pc, #252]	; (80042cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041d0:	fba2 2303 	umull	r2, r3, r2, r3
 80041d4:	0c9b      	lsrs	r3, r3, #18
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041da:	e002      	b.n	80041e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ee:	d102      	bne.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f2      	bne.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f6:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d158      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e057      	b.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004208:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004218:	e04d      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004220:	d141      	bne.n	80042a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d131      	bne.n	8004294 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2232      	movs	r2, #50	; 0x32
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	0c9b      	lsrs	r3, r3, #18
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004266:	e002      	b.n	800426e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b01      	subs	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d102      	bne.n	8004282 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f2      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428e:	d112      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e011      	b.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	4a0a      	ldr	r2, [pc, #40]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80042a4:	e007      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40007000 	.word	0x40007000
 80042c8:	20000000 	.word	0x20000000
 80042cc:	431bde83 	.word	0x431bde83

080042d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e306      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d075      	beq.n	80043da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4b97      	ldr	r3, [pc, #604]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0x3e>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d002      	beq.n	8004314 <HAL_RCC_OscConfig+0x44>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	4b8d      	ldr	r3, [pc, #564]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d05b      	beq.n	80043d8 <HAL_RCC_OscConfig+0x108>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d157      	bne.n	80043d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e2e1      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d106      	bne.n	8004344 <HAL_RCC_OscConfig+0x74>
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a84      	ldr	r2, [pc, #528]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800433c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e01d      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x98>
 800434e:	4b7f      	ldr	r3, [pc, #508]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7e      	ldr	r2, [pc, #504]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b7c      	ldr	r3, [pc, #496]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7b      	ldr	r2, [pc, #492]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0xb0>
 8004368:	4b78      	ldr	r3, [pc, #480]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a77      	ldr	r2, [pc, #476]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b75      	ldr	r3, [pc, #468]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a74      	ldr	r2, [pc, #464]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800437a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800437e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fbfe 	bl	8001b88 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd fbfa 	bl	8001b88 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e2a6      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0xc0>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd fbea 	bl	8001b88 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fd fbe6 	bl	8001b88 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	; 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e292      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ca:	4b60      	ldr	r3, [pc, #384]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0xe8>
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f0:	4b56      	ldr	r3, [pc, #344]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_OscConfig+0x136>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d002      	beq.n	800440c <HAL_RCC_OscConfig+0x13c>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d11f      	bne.n	800444c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440c:	4b4f      	ldr	r3, [pc, #316]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x154>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e265      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b49      	ldr	r3, [pc, #292]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	4946      	ldr	r1, [pc, #280]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004438:	4b45      	ldr	r3, [pc, #276]	; (8004550 <HAL_RCC_OscConfig+0x280>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fb57 	bl	8001af0 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d043      	beq.n	80044d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e251      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3c      	ldr	r2, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800445a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fb92 	bl	8001b88 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd fb8e 	bl	8001b88 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e23a      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800447a:	4b34      	ldr	r3, [pc, #208]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	492d      	ldr	r1, [pc, #180]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
 800449a:	e01a      	b.n	80044d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80044a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fb6e 	bl	8001b88 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b0:	f7fd fb6a 	bl	8001b88 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e216      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c2:	4b22      	ldr	r3, [pc, #136]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x1e0>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d041      	beq.n	8004562 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01c      	beq.n	8004520 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd fb47 	bl	8001b88 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fe:	f7fd fb43 	bl	8001b88 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e1ef      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <HAL_RCC_OscConfig+0x22e>
 800451e:	e020      	b.n	8004562 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x27c>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fd fb2a 	bl	8001b88 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004536:	e00d      	b.n	8004554 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004538:	f7fd fb26 	bl	8001b88 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d906      	bls.n	8004554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1d2      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004554:	4b8c      	ldr	r3, [pc, #560]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ea      	bne.n	8004538 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80a6 	beq.w	80046bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004574:	4b84      	ldr	r3, [pc, #528]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x2b4>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x2b6>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	4a7e      	ldr	r2, [pc, #504]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
 8004596:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a6:	4b79      	ldr	r3, [pc, #484]	; (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b2:	4b76      	ldr	r3, [pc, #472]	; (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a75      	ldr	r2, [pc, #468]	; (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fd fae3 	bl	8001b88 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fd fadf 	bl	8001b88 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e18b      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b6c      	ldr	r3, [pc, #432]	; (800478c <HAL_RCC_OscConfig+0x4bc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d108      	bne.n	80045fe <HAL_RCC_OscConfig+0x32e>
 80045ec:	4b66      	ldr	r3, [pc, #408]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f2:	4a65      	ldr	r2, [pc, #404]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045fc:	e024      	b.n	8004648 <HAL_RCC_OscConfig+0x378>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d110      	bne.n	8004628 <HAL_RCC_OscConfig+0x358>
 8004606:	4b60      	ldr	r3, [pc, #384]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	4a5e      	ldr	r2, [pc, #376]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004616:	4b5c      	ldr	r3, [pc, #368]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	4a5a      	ldr	r2, [pc, #360]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004626:	e00f      	b.n	8004648 <HAL_RCC_OscConfig+0x378>
 8004628:	4b57      	ldr	r3, [pc, #348]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fd fa9a 	bl	8001b88 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fd fa96 	bl	8001b88 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e140      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	4b46      	ldr	r3, [pc, #280]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ed      	beq.n	8004658 <HAL_RCC_OscConfig+0x388>
 800467c:	e015      	b.n	80046aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467e:	f7fd fa83 	bl	8001b88 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	e00a      	b.n	800469c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fa7f 	bl	8001b88 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f241 3288 	movw	r2, #5000	; 0x1388
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e129      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800469c:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ed      	bne.n	8004686 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046aa:	7ffb      	ldrb	r3, [r7, #31]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	4a34      	ldr	r2, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d03c      	beq.n	8004742 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046d0:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d6:	4a2c      	ldr	r2, [pc, #176]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd fa52 	bl	8001b88 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e8:	f7fd fa4e 	bl	8001b88 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0fa      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046fa:	4b23      	ldr	r3, [pc, #140]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 80046fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0ef      	beq.n	80046e8 <HAL_RCC_OscConfig+0x418>
 8004708:	e01b      	b.n	8004742 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800470a:	4b1f      	ldr	r3, [pc, #124]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800470c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004710:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fd fa35 	bl	8001b88 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004722:	f7fd fa31 	bl	8001b88 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e0dd      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80d1 	beq.w	80048ee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b0c      	cmp	r3, #12
 8004756:	f000 808b 	beq.w	8004870 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d15e      	bne.n	8004820 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <HAL_RCC_OscConfig+0x4b8>)
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd fa0b 	bl	8001b88 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	e00c      	b.n	8004790 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd fa07 	bl	8001b88 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d905      	bls.n	8004790 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0b3      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ec      	bne.n	8004776 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479c:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4b56      	ldr	r3, [pc, #344]	; (80048fc <HAL_RCC_OscConfig+0x62c>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6a11      	ldr	r1, [r2, #32]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ac:	3a01      	subs	r2, #1
 80047ae:	0112      	lsls	r2, r2, #4
 80047b0:	4311      	orrs	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80047b6:	0212      	lsls	r2, r2, #8
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047be:	0852      	lsrs	r2, r2, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	0552      	lsls	r2, r2, #21
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0652      	lsls	r2, r2, #25
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047d6:	06d2      	lsls	r2, r2, #27
 80047d8:	430a      	orrs	r2, r1
 80047da:	4947      	ldr	r1, [pc, #284]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a44      	ldr	r2, [pc, #272]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a41      	ldr	r2, [pc, #260]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fd f9c6 	bl	8001b88 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fd f9c2 	bl	8001b88 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e06e      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x530>
 800481e:	e066      	b.n	80048ee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b35      	ldr	r3, [pc, #212]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004838:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 800483e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004846:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd f99e 	bl	8001b88 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd f99a 	bl	8001b88 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e046      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x580>
 800486e:	e03e      	b.n	80048ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e039      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800487c:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_OscConfig+0x628>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f003 0203 	and.w	r2, r3, #3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	429a      	cmp	r2, r3
 800488e:	d12c      	bne.n	80048ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	3b01      	subs	r3, #1
 800489c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d123      	bne.n	80048ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d11b      	bne.n	80048ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d113      	bne.n	80048ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	3b01      	subs	r3, #1
 80048d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	3b01      	subs	r3, #1
 80048e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000
 80048fc:	019f800c 	.word	0x019f800c

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e11e      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b91      	ldr	r3, [pc, #580]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d910      	bls.n	8004948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b8e      	ldr	r3, [pc, #568]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 020f 	bic.w	r2, r3, #15
 800492e:	498c      	ldr	r1, [pc, #560]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b8a      	ldr	r3, [pc, #552]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e106      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d073      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d129      	bne.n	80049b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495c:	4b81      	ldr	r3, [pc, #516]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0f4      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800496c:	f000 f966 	bl	8004c3c <RCC_GetSysClockFreqFromPLLSource>
 8004970:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4a7c      	ldr	r2, [pc, #496]	; (8004b68 <HAL_RCC_ClockConfig+0x268>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d93f      	bls.n	80049fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800498e:	2b00      	cmp	r3, #0
 8004990:	d033      	beq.n	80049fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004996:	2b00      	cmp	r3, #0
 8004998:	d12f      	bne.n	80049fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800499a:	4b72      	ldr	r3, [pc, #456]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a2:	4a70      	ldr	r2, [pc, #448]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e024      	b.n	80049fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b8:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0c6      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049c8:	4b66      	ldr	r3, [pc, #408]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0be      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049d8:	f000 f8ce 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4a61      	ldr	r2, [pc, #388]	; (8004b68 <HAL_RCC_ClockConfig+0x268>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d909      	bls.n	80049fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049e6:	4b5f      	ldr	r3, [pc, #380]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ee:	4a5d      	ldr	r2, [pc, #372]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b5a      	ldr	r3, [pc, #360]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4957      	ldr	r1, [pc, #348]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fd f8bc 	bl	8001b88 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fd f8b8 	bl	8001b88 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e095      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d023      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a54:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a42      	ldr	r2, [pc, #264]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a74:	4a3b      	ldr	r2, [pc, #236]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4936      	ldr	r1, [pc, #216]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a96:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d21d      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab0:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 020f 	bic.w	r2, r3, #15
 8004ab8:	4929      	ldr	r1, [pc, #164]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004ac0:	f7fd f862 	bl	8001b88 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fd f85e 	bl	8001b88 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e03b      	b.n	8004b56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d1ed      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4917      	ldr	r1, [pc, #92]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490f      	ldr	r1, [pc, #60]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b2a:	f000 f825 	bl	8004b78 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <HAL_RCC_ClockConfig+0x264>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	490c      	ldr	r1, [pc, #48]	; (8004b6c <HAL_RCC_ClockConfig+0x26c>)
 8004b3c:	5ccb      	ldrb	r3, [r1, r3]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <HAL_RCC_ClockConfig+0x270>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x274>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc ffce 	bl	8001af0 <HAL_InitTick>
 8004b54:	4603      	mov	r3, r0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40021000 	.word	0x40021000
 8004b68:	04c4b400 	.word	0x04c4b400
 8004b6c:	0800b9a4 	.word	0x0800b9a4
 8004b70:	20000000 	.word	0x20000000
 8004b74:	20000004 	.word	0x20000004

08004b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d102      	bne.n	8004b90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e047      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b90:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e03e      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d136      	bne.n	8004c1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	091b      	lsrs	r3, r3, #4
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd6:	68d2      	ldr	r2, [r2, #12]
 8004bd8:	0a12      	lsrs	r2, r2, #8
 8004bda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	617b      	str	r3, [r7, #20]
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf0:	68d2      	ldr	r2, [r2, #12]
 8004bf2:	0a12      	lsrs	r2, r2, #8
 8004bf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	617b      	str	r3, [r7, #20]
      break;
 8004bfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0e5b      	lsrs	r3, r3, #25
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e001      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004c20:	693b      	ldr	r3, [r7, #16]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	007a1200 	.word	0x007a1200

08004c3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	091b      	lsrs	r3, r3, #4
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d10c      	bne.n	8004c7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c60:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c6a:	68d2      	ldr	r2, [r2, #12]
 8004c6c:	0a12      	lsrs	r2, r2, #8
 8004c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	617b      	str	r3, [r7, #20]
    break;
 8004c78:	e00c      	b.n	8004c94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c7a:	4a12      	ldr	r2, [pc, #72]	; (8004cc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c84:	68d2      	ldr	r2, [r2, #12]
 8004c86:	0a12      	lsrs	r2, r2, #8
 8004c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    break;
 8004c92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	0e5b      	lsrs	r3, r3, #25
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cae:	687b      	ldr	r3, [r7, #4]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	00f42400 	.word	0x00f42400

08004cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8098 	beq.w	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b40      	ldr	r3, [pc, #256]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	4a3f      	ldr	r2, [pc, #252]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6593      	str	r3, [r2, #88]	; 0x58
 8004d02:	4b3d      	ldr	r3, [pc, #244]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d12:	4b3a      	ldr	r3, [pc, #232]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a39      	ldr	r2, [pc, #228]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d1e:	f7fc ff33 	bl	8001b88 <HAL_GetTick>
 8004d22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d24:	e009      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fc ff2f 	bl	8001b88 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d902      	bls.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	74fb      	strb	r3, [r7, #19]
        break;
 8004d38:	e005      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0ef      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d159      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01e      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d019      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d68:	4b23      	ldr	r3, [pc, #140]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d74:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d84:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a1b      	ldr	r2, [pc, #108]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d016      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fc feef 	bl	8001b88 <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dac:	e00b      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dae:	f7fc feeb 	bl	8001b88 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d902      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8004dc4:	e006      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ec      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	74bb      	strb	r3, [r7, #18]
 8004df6:	e005      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e04:	7c7b      	ldrb	r3, [r7, #17]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d105      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0a:	4ba6      	ldr	r3, [pc, #664]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0e:	4aa5      	ldr	r2, [pc, #660]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e22:	4ba0      	ldr	r3, [pc, #640]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f023 0203 	bic.w	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	499c      	ldr	r1, [pc, #624]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e44:	4b97      	ldr	r3, [pc, #604]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f023 020c 	bic.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4994      	ldr	r1, [pc, #592]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e66:	4b8f      	ldr	r3, [pc, #572]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	498b      	ldr	r1, [pc, #556]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e88:	4b86      	ldr	r3, [pc, #536]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	4983      	ldr	r1, [pc, #524]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eaa:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	497a      	ldr	r1, [pc, #488]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ecc:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	4972      	ldr	r1, [pc, #456]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eee:	4b6d      	ldr	r3, [pc, #436]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	4969      	ldr	r1, [pc, #420]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f10:	4b64      	ldr	r3, [pc, #400]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4961      	ldr	r1, [pc, #388]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f32:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	4958      	ldr	r1, [pc, #352]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	4950      	ldr	r1, [pc, #320]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d105      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f74:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4a4a      	ldr	r2, [pc, #296]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d015      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f8c:	4b45      	ldr	r3, [pc, #276]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4942      	ldr	r1, [pc, #264]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fac:	4b3d      	ldr	r3, [pc, #244]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4a3c      	ldr	r2, [pc, #240]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d015      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fc4:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	4934      	ldr	r1, [pc, #208]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a2e      	ldr	r2, [pc, #184]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800501a:	d105      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005026:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	4918      	ldr	r1, [pc, #96]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005052:	d105      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800505a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800506c:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005072:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	490a      	ldr	r1, [pc, #40]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800508a:	d105      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005098:	7cbb      	ldrb	r3, [r7, #18]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000

080050a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e049      	b.n	800514e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fb9e 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f001 f9de 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e04a      	b.n	8005206 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_TIM_Base_Start_IT+0xbc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d013      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x6c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_TIM_Base_Start_IT+0xc0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <HAL_TIM_Base_Start_IT+0xc4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x6c>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <HAL_TIM_Base_Start_IT+0xc8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x6c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a19      	ldr	r2, [pc, #100]	; (8005224 <HAL_TIM_Base_Start_IT+0xcc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d115      	bne.n	80051f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b17      	ldr	r3, [pc, #92]	; (8005228 <HAL_TIM_Base_Start_IT+0xd0>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d015      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0xaa>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d011      	beq.n	8005202 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	e008      	b.n	8005202 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e000      	b.n	8005204 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	00010007 	.word	0x00010007

0800522c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e049      	b.n	80052d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fa68 	bl	8001728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f001 f91c 	bl	80064a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_TIM_PWM_Start+0x24>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	bf14      	ite	ne
 80052f8:	2301      	movne	r3, #1
 80052fa:	2300      	moveq	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e03c      	b.n	800537a <HAL_TIM_PWM_Start+0x9e>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d109      	bne.n	800531a <HAL_TIM_PWM_Start+0x3e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	bf14      	ite	ne
 8005312:	2301      	movne	r3, #1
 8005314:	2300      	moveq	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e02f      	b.n	800537a <HAL_TIM_PWM_Start+0x9e>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d109      	bne.n	8005334 <HAL_TIM_PWM_Start+0x58>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e022      	b.n	800537a <HAL_TIM_PWM_Start+0x9e>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d109      	bne.n	800534e <HAL_TIM_PWM_Start+0x72>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e015      	b.n	800537a <HAL_TIM_PWM_Start+0x9e>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b10      	cmp	r3, #16
 8005352:	d109      	bne.n	8005368 <HAL_TIM_PWM_Start+0x8c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b01      	cmp	r3, #1
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e008      	b.n	800537a <HAL_TIM_PWM_Start+0x9e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e097      	b.n	80054b2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <HAL_TIM_PWM_Start+0xb6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005390:	e023      	b.n	80053da <HAL_TIM_PWM_Start+0xfe>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_PWM_Start+0xc6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a0:	e01b      	b.n	80053da <HAL_TIM_PWM_Start+0xfe>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0xd6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	e013      	b.n	80053da <HAL_TIM_PWM_Start+0xfe>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Start+0xe6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c0:	e00b      	b.n	80053da <HAL_TIM_PWM_Start+0xfe>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Start+0xf6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	e003      	b.n	80053da <HAL_TIM_PWM_Start+0xfe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fbe6 	bl	8006bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a33      	ldr	r2, [pc, #204]	; (80054bc <HAL_TIM_PWM_Start+0x1e0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d013      	beq.n	800541a <HAL_TIM_PWM_Start+0x13e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a32      	ldr	r2, [pc, #200]	; (80054c0 <HAL_TIM_PWM_Start+0x1e4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIM_PWM_Start+0x13e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a30      	ldr	r2, [pc, #192]	; (80054c4 <HAL_TIM_PWM_Start+0x1e8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIM_PWM_Start+0x13e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a2f      	ldr	r2, [pc, #188]	; (80054c8 <HAL_TIM_PWM_Start+0x1ec>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIM_PWM_Start+0x13e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <HAL_TIM_PWM_Start+0x1f0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_Start+0x142>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_TIM_PWM_Start+0x144>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a20      	ldr	r2, [pc, #128]	; (80054bc <HAL_TIM_PWM_Start+0x1e0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d018      	beq.n	8005470 <HAL_TIM_PWM_Start+0x194>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d013      	beq.n	8005470 <HAL_TIM_PWM_Start+0x194>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <HAL_TIM_PWM_Start+0x1f4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00e      	beq.n	8005470 <HAL_TIM_PWM_Start+0x194>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <HAL_TIM_PWM_Start+0x1f8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d009      	beq.n	8005470 <HAL_TIM_PWM_Start+0x194>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_TIM_PWM_Start+0x1e4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIM_PWM_Start+0x194>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <HAL_TIM_PWM_Start+0x1e8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d115      	bne.n	800549c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005478:	4013      	ands	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b06      	cmp	r3, #6
 8005480:	d015      	beq.n	80054ae <HAL_TIM_PWM_Start+0x1d2>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d011      	beq.n	80054ae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	e008      	b.n	80054ae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e000      	b.n	80054b0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	00010007 	.word	0x00010007

080054dc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start_DMA+0x2c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	bf0c      	ite	eq
 8005500:	2301      	moveq	r3, #1
 8005502:	2300      	movne	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e03c      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d109      	bne.n	8005522 <HAL_TIM_PWM_Start_DMA+0x46>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e02f      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start_DMA+0x60>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e022      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0xa6>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e015      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start_DMA+0x94>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e008      	b.n	8005582 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
 8005588:	e1a6      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e03c      	b.n	800561e <HAL_TIM_PWM_Start_DMA+0x142>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d109      	bne.n	80055be <HAL_TIM_PWM_Start_DMA+0xe2>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	bf0c      	ite	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	2300      	movne	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e02f      	b.n	800561e <HAL_TIM_PWM_Start_DMA+0x142>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e022      	b.n	800561e <HAL_TIM_PWM_Start_DMA+0x142>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_PWM_Start_DMA+0x116>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e015      	b.n	800561e <HAL_TIM_PWM_Start_DMA+0x142>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b10      	cmp	r3, #16
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start_DMA+0x130>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e008      	b.n	800561e <HAL_TIM_PWM_Start_DMA+0x142>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d034      	beq.n	800568c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start_DMA+0x156>
 8005628:	887b      	ldrh	r3, [r7, #2]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e152      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Start_DMA+0x166>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005640:	e026      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b04      	cmp	r3, #4
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start_DMA+0x176>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	e01e      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d104      	bne.n	8005662 <HAL_TIM_PWM_Start_DMA+0x186>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005660:	e016      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d104      	bne.n	8005672 <HAL_TIM_PWM_Start_DMA+0x196>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005670:	e00e      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b10      	cmp	r3, #16
 8005676:	d104      	bne.n	8005682 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005680:	e006      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568a:	e001      	b.n	8005690 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e123      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
  }

  switch (Channel)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	f200 80ae 	bhi.w	80057f4 <HAL_TIM_PWM_Start_DMA+0x318>
 8005698:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080057f5 	.word	0x080057f5
 80056a8:	080057f5 	.word	0x080057f5
 80056ac:	080057f5 	.word	0x080057f5
 80056b0:	0800571d 	.word	0x0800571d
 80056b4:	080057f5 	.word	0x080057f5
 80056b8:	080057f5 	.word	0x080057f5
 80056bc:	080057f5 	.word	0x080057f5
 80056c0:	08005765 	.word	0x08005765
 80056c4:	080057f5 	.word	0x080057f5
 80056c8:	080057f5 	.word	0x080057f5
 80056cc:	080057f5 	.word	0x080057f5
 80056d0:	080057ad 	.word	0x080057ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	4a81      	ldr	r2, [pc, #516]	; (80058e0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	4a80      	ldr	r2, [pc, #512]	; (80058e4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	4a7f      	ldr	r2, [pc, #508]	; (80058e8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3334      	adds	r3, #52	; 0x34
 80056f8:	461a      	mov	r2, r3
 80056fa:	887b      	ldrh	r3, [r7, #2]
 80056fc:	f7fc fc2a 	bl	8001f54 <HAL_DMA_Start_IT>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e0e6      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	60da      	str	r2, [r3, #12]
      break;
 800571a:	e06e      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	4a6f      	ldr	r2, [pc, #444]	; (80058e0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	4a6e      	ldr	r2, [pc, #440]	; (80058e4 <HAL_TIM_PWM_Start_DMA+0x408>)
 800572a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	4a6d      	ldr	r2, [pc, #436]	; (80058e8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8005732:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3338      	adds	r3, #56	; 0x38
 8005740:	461a      	mov	r2, r3
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	f7fc fc06 	bl	8001f54 <HAL_DMA_Start_IT>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0c2      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005760:	60da      	str	r2, [r3, #12]
      break;
 8005762:	e04a      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a5d      	ldr	r2, [pc, #372]	; (80058e0 <HAL_TIM_PWM_Start_DMA+0x404>)
 800576a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4a5c      	ldr	r2, [pc, #368]	; (80058e4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005772:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	4a5b      	ldr	r2, [pc, #364]	; (80058e8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800577a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	333c      	adds	r3, #60	; 0x3c
 8005788:	461a      	mov	r2, r3
 800578a:	887b      	ldrh	r3, [r7, #2]
 800578c:	f7fc fbe2 	bl	8001f54 <HAL_DMA_Start_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e09e      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	60da      	str	r2, [r3, #12]
      break;
 80057aa:	e026      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	4a4b      	ldr	r2, [pc, #300]	; (80058e0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	4a4a      	ldr	r2, [pc, #296]	; (80058e4 <HAL_TIM_PWM_Start_DMA+0x408>)
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	4a49      	ldr	r2, [pc, #292]	; (80058e8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80057c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3340      	adds	r3, #64	; 0x40
 80057d0:	461a      	mov	r2, r3
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	f7fc fbbe 	bl	8001f54 <HAL_DMA_Start_IT>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e07a      	b.n	80058d8 <HAL_TIM_PWM_Start_DMA+0x3fc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057f0:	60da      	str	r2, [r3, #12]
      break;
 80057f2:	e002      	b.n	80057fa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
      break;
 80057f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d16a      	bne.n	80058d6 <HAL_TIM_PWM_Start_DMA+0x3fa>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f9d3 	bl	8006bb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a36      	ldr	r2, [pc, #216]	; (80058ec <HAL_TIM_PWM_Start_DMA+0x410>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_TIM_PWM_Start_DMA+0x364>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a34      	ldr	r2, [pc, #208]	; (80058f0 <HAL_TIM_PWM_Start_DMA+0x414>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_TIM_PWM_Start_DMA+0x364>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_TIM_PWM_Start_DMA+0x364>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_TIM_PWM_Start_DMA+0x364>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a30      	ldr	r2, [pc, #192]	; (80058fc <HAL_TIM_PWM_Start_DMA+0x420>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_TIM_PWM_Start_DMA+0x368>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_TIM_PWM_Start_DMA+0x36a>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005858:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a23      	ldr	r2, [pc, #140]	; (80058ec <HAL_TIM_PWM_Start_DMA+0x410>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d013      	beq.n	8005896 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a23      	ldr	r2, [pc, #140]	; (8005900 <HAL_TIM_PWM_Start_DMA+0x424>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a21      	ldr	r2, [pc, #132]	; (8005904 <HAL_TIM_PWM_Start_DMA+0x428>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_TIM_PWM_Start_DMA+0x3ba>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1a      	ldr	r2, [pc, #104]	; (80058f0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIM_PWM_Start_DMA+0x3ba>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d115      	bne.n	80058c2 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d015      	beq.n	80058d4 <HAL_TIM_PWM_Start_DMA+0x3f8>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ae:	d011      	beq.n	80058d4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      {
        __HAL_TIM_ENABLE(htim);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	e008      	b.n	80058d4 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_PWM_Start_DMA+0x3fa>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08006397 	.word	0x08006397
 80058e4:	0800643f 	.word	0x0800643f
 80058e8:	08006305 	.word	0x08006305
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	00010007 	.word	0x00010007

0800590c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b0c      	cmp	r3, #12
 800591e:	d855      	bhi.n	80059cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800595d 	.word	0x0800595d
 800592c:	080059cd 	.word	0x080059cd
 8005930:	080059cd 	.word	0x080059cd
 8005934:	080059cd 	.word	0x080059cd
 8005938:	08005979 	.word	0x08005979
 800593c:	080059cd 	.word	0x080059cd
 8005940:	080059cd 	.word	0x080059cd
 8005944:	080059cd 	.word	0x080059cd
 8005948:	08005995 	.word	0x08005995
 800594c:	080059cd 	.word	0x080059cd
 8005950:	080059cd 	.word	0x080059cd
 8005954:	080059cd 	.word	0x080059cd
 8005958:	080059b1 	.word	0x080059b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800596a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f7fc fb6a 	bl	800204a <HAL_DMA_Abort_IT>
      break;
 8005976:	e02c      	b.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005986:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	4618      	mov	r0, r3
 800598e:	f7fc fb5c 	bl	800204a <HAL_DMA_Abort_IT>
      break;
 8005992:	e01e      	b.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fb4e 	bl	800204a <HAL_DMA_Abort_IT>
      break;
 80059ae:	e010      	b.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fc fb40 	bl	800204a <HAL_DMA_Abort_IT>
      break;
 80059ca:	e002      	b.n	80059d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
      break;
 80059d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 8081 	bne.w	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2200      	movs	r2, #0
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 f8e6 	bl	8006bb4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3e      	ldr	r2, [pc, #248]	; (8005ae8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3b      	ldr	r2, [pc, #236]	; (8005af0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a3a      	ldr	r2, [pc, #232]	; (8005af4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a38      	ldr	r2, [pc, #224]	; (8005af8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_PWM_Stop_DMA+0x112>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d017      	beq.n	8005a54 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a2e:	4013      	ands	r3, r2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10f      	bne.n	8005a54 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f244 4344 	movw	r3, #17476	; 0x4444
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d107      	bne.n	8005a54 <HAL_TIM_PWM_Stop_DMA+0x148>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10f      	bne.n	8005a84 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	f244 4344 	movw	r3, #17476	; 0x4444
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a92:	e023      	b.n	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d104      	bne.n	8005aa4 <HAL_TIM_PWM_Stop_DMA+0x198>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa2:	e01b      	b.n	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d104      	bne.n	8005ab4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab2:	e013      	b.n	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d104      	bne.n	8005ac4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ac2:	e00b      	b.n	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d104      	bne.n	8005ad4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad2:	e003      	b.n	8005adc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e097      	b.n	8005c40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fb fd59 	bl	80015dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 fca9 	bl	80064a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b9c:	f023 030c 	bic.w	r3, r3, #12
 8005ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	031b      	lsls	r3, r3, #12
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d110      	bne.n	8005c9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b7b      	ldrb	r3, [r7, #13]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e069      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c98:	e031      	b.n	8005cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d110      	bne.n	8005cc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d102      	bne.n	8005cac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca6:	7b3b      	ldrb	r3, [r7, #12]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d001      	beq.n	8005cb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e055      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc0:	e01d      	b.n	8005cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d108      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	7b7b      	ldrb	r3, [r7, #13]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d102      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cd4:	7b3b      	ldrb	r3, [r7, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d001      	beq.n	8005cde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03e      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_TIM_Encoder_Start+0xc4>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d008      	beq.n	8005d1c <HAL_TIM_Encoder_Start+0xd4>
 8005d0a:	e00f      	b.n	8005d2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ff4d 	bl	8006bb4 <TIM_CCxChannelCmd>
      break;
 8005d1a:	e016      	b.n	8005d4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	2104      	movs	r1, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 ff45 	bl	8006bb4 <TIM_CCxChannelCmd>
      break;
 8005d2a:	e00e      	b.n	8005d4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 ff3d 	bl	8006bb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2104      	movs	r1, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 ff36 	bl	8006bb4 <TIM_CCxChannelCmd>
      break;
 8005d48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0202 	mvn.w	r2, #2
 8005d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa7a 	bl	80062a0 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa6c 	bl	800628c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fa7d 	bl	80062b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d122      	bne.n	8005e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d11b      	bne.n	8005e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0204 	mvn.w	r2, #4
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa50 	bl	80062a0 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa42 	bl	800628c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fa53 	bl	80062b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0208 	mvn.w	r2, #8
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa26 	bl	80062a0 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa18 	bl	800628c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa29 	bl	80062b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0210 	mvn.w	r2, #16
 8005e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2208      	movs	r2, #8
 8005e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f9fc 	bl	80062a0 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f9ee 	bl	800628c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9ff 	bl	80062b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d107      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0201 	mvn.w	r2, #1
 8005ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fa fee8 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d10e      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 f856 	bl	8006fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f22:	d10e      	bne.n	8005f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d107      	bne.n	8005f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 f849 	bl	8006fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d10e      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9b7 	bl	80062dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d10e      	bne.n	8005f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	d107      	bne.n	8005f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f06f 0220 	mvn.w	r2, #32
 8005f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 f809 	bl	8006fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fa8:	d10f      	bne.n	8005fca <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb8:	d107      	bne.n	8005fca <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 f80f 	bl	8006fe8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd8:	d10f      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 f801 	bl	8006ffc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006008:	d10f      	bne.n	800602a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006018:	d107      	bne.n	800602a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fff3 	bl	8007010 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006038:	d10f      	bne.n	800605a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006048:	d107      	bne.n	800605a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ffe5 	bl	8007024 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800607e:	2302      	movs	r3, #2
 8006080:	e0ff      	b.n	8006282 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b14      	cmp	r3, #20
 800608e:	f200 80f0 	bhi.w	8006272 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006273 	.word	0x08006273
 80060a0:	08006273 	.word	0x08006273
 80060a4:	08006273 	.word	0x08006273
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	08006273 	.word	0x08006273
 80060b0:	08006273 	.word	0x08006273
 80060b4:	08006273 	.word	0x08006273
 80060b8:	0800616f 	.word	0x0800616f
 80060bc:	08006273 	.word	0x08006273
 80060c0:	08006273 	.word	0x08006273
 80060c4:	08006273 	.word	0x08006273
 80060c8:	080061af 	.word	0x080061af
 80060cc:	08006273 	.word	0x08006273
 80060d0:	08006273 	.word	0x08006273
 80060d4:	08006273 	.word	0x08006273
 80060d8:	080061f1 	.word	0x080061f1
 80060dc:	08006273 	.word	0x08006273
 80060e0:	08006273 	.word	0x08006273
 80060e4:	08006273 	.word	0x08006273
 80060e8:	08006231 	.word	0x08006231
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fa68 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0208 	orr.w	r2, r2, #8
 8006106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0204 	bic.w	r2, r2, #4
 8006116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6999      	ldr	r1, [r3, #24]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	619a      	str	r2, [r3, #24]
      break;
 800612a:	e0a5      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fad8 	bl	80066e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6999      	ldr	r1, [r3, #24]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	619a      	str	r2, [r3, #24]
      break;
 800616c:	e084      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fb41 	bl	80067fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0208 	orr.w	r2, r2, #8
 8006188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0204 	bic.w	r2, r2, #4
 8006198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69d9      	ldr	r1, [r3, #28]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	61da      	str	r2, [r3, #28]
      break;
 80061ac:	e064      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fba9 	bl	800690c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69d9      	ldr	r1, [r3, #28]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	021a      	lsls	r2, r3, #8
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	61da      	str	r2, [r3, #28]
      break;
 80061ee:	e043      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc12 	bl	8006a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0208 	orr.w	r2, r2, #8
 800620a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800622e:	e023      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fc56 	bl	8006ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006270:	e002      	b.n	8006278 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	75fb      	strb	r3, [r7, #23]
      break;
 8006276:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop

0800628c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006310:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d107      	bne.n	800632c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632a:	e02a      	b.n	8006382 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d107      	bne.n	8006346 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2202      	movs	r2, #2
 800633a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	e01d      	b.n	8006382 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d107      	bne.n	8006360 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2204      	movs	r2, #4
 8006354:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800635e:	e010      	b.n	8006382 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d107      	bne.n	800637a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2208      	movs	r2, #8
 800636e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006378:	e003      	b.n	8006382 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ffb4 	bl	80062f0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	771a      	strb	r2, [r3, #28]
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d10b      	bne.n	80063c6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d136      	bne.n	800642a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c4:	e031      	b.n	800642a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d10b      	bne.n	80063e8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2202      	movs	r2, #2
 80063d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d125      	bne.n	800642a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e6:	e020      	b.n	800642a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d10b      	bne.n	800640a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2204      	movs	r2, #4
 80063f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d114      	bne.n	800642a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006408:	e00f      	b.n	800642a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d10a      	bne.n	800642a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2208      	movs	r2, #8
 8006418:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff ff42 	bl	80062b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	771a      	strb	r2, [r3, #28]
}
 8006436:	bf00      	nop
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	429a      	cmp	r2, r3
 8006454:	d103      	bne.n	800645e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	771a      	strb	r2, [r3, #28]
 800645c:	e019      	b.n	8006492 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d103      	bne.n	8006470 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2202      	movs	r2, #2
 800646c:	771a      	strb	r2, [r3, #28]
 800646e:	e010      	b.n	8006492 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d103      	bne.n	8006482 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2204      	movs	r2, #4
 800647e:	771a      	strb	r2, [r3, #28]
 8006480:	e007      	b.n	8006492 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d102      	bne.n	8006492 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2208      	movs	r2, #8
 8006490:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff ff18 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	771a      	strb	r2, [r3, #28]
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3c      	ldr	r2, [pc, #240]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c6:	d00b      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a39      	ldr	r2, [pc, #228]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a38      	ldr	r2, [pc, #224]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_Base_SetConfig+0x38>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d108      	bne.n	80064f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2d      	ldr	r2, [pc, #180]	; (80065ac <TIM_Base_SetConfig+0x104>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d017      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <TIM_Base_SetConfig+0x108>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <TIM_Base_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_Base_SetConfig+0x8a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d108      	bne.n	8006544 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a10      	ldr	r2, [pc, #64]	; (80065ac <TIM_Base_SetConfig+0x104>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <TIM_Base_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a10      	ldr	r2, [pc, #64]	; (80065bc <TIM_Base_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <TIM_Base_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <TIM_Base_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d103      	bne.n	8006598 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	615a      	str	r2, [r3, #20]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a29      	ldr	r2, [pc, #164]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC1_SetConfig+0x80>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a28      	ldr	r2, [pc, #160]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <TIM_OC1_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_OC1_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_OC1_SetConfig+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_OC1_SetConfig+0x118>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0xc2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40014000 	.word	0x40014000
 80066e0:	40014400 	.word	0x40014400
 80066e4:	40014800 	.word	0x40014800

080066e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	f023 0210 	bic.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x6c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <TIM_OC2_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00f      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <TIM_OC2_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <TIM_OC2_SetConfig+0x108>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <TIM_OC2_SetConfig+0x10c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <TIM_OC2_SetConfig+0x110>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x6a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1c      	ldr	r2, [pc, #112]	; (80068f8 <TIM_OC3_SetConfig+0xfc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <TIM_OC3_SetConfig+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <TIM_OC3_SetConfig+0x104>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <TIM_OC3_SetConfig+0x108>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC3_SetConfig+0xae>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC3_SetConfig+0x10c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d113      	bne.n	80068d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800695a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC4_SetConfig+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d10d      	bne.n	8006994 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC4_SetConfig+0x100>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <TIM_OC4_SetConfig+0x104>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <TIM_OC4_SetConfig+0x108>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <TIM_OC4_SetConfig+0x10c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC4_SetConfig+0xb0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a19      	ldr	r2, [pc, #100]	; (8006a1c <TIM_OC4_SetConfig+0x110>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <TIM_OC5_SetConfig+0xb4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00f      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <TIM_OC5_SetConfig+0xb8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a15      	ldr	r2, [pc, #84]	; (8006adc <TIM_OC5_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d007      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <TIM_OC5_SetConfig+0xc0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC5_SetConfig+0x7a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <TIM_OC5_SetConfig+0xc4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d109      	bne.n	8006aae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <TIM_OC6_SetConfig+0xb8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00f      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <TIM_OC6_SetConfig+0xbc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00b      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <TIM_OC6_SetConfig+0xc0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_OC6_SetConfig+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC6_SetConfig+0x7c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <TIM_OC6_SetConfig+0xc8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f003 031f 	and.w	r3, r3, #31
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1a      	ldr	r2, [r3, #32]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	401a      	ands	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1a      	ldr	r2, [r3, #32]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 031f 	and.w	r3, r3, #31
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <HAL_TIMEx_PWMN_Start+0x24>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e022      	b.n	8006c6a <HAL_TIMEx_PWMN_Start+0x6a>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d109      	bne.n	8006c3e <HAL_TIMEx_PWMN_Start+0x3e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	e015      	b.n	8006c6a <HAL_TIMEx_PWMN_Start+0x6a>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d109      	bne.n	8006c58 <HAL_TIMEx_PWMN_Start+0x58>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	bf14      	ite	ne
 8006c50:	2301      	movne	r3, #1
 8006c52:	2300      	moveq	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	e008      	b.n	8006c6a <HAL_TIMEx_PWMN_Start+0x6a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	bf14      	ite	ne
 8006c64:	2301      	movne	r3, #1
 8006c66:	2300      	moveq	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e069      	b.n	8006d46 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <HAL_TIMEx_PWMN_Start+0x82>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c80:	e013      	b.n	8006caa <HAL_TIMEx_PWMN_Start+0xaa>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d104      	bne.n	8006c92 <HAL_TIMEx_PWMN_Start+0x92>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	e00b      	b.n	8006caa <HAL_TIMEx_PWMN_Start+0xaa>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIMEx_PWMN_Start+0xa2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ca0:	e003      	b.n	8006caa <HAL_TIMEx_PWMN_Start+0xaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f9c0 	bl	8007038 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <HAL_TIMEx_PWMN_Start+0x150>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_TIMEx_PWMN_Start+0x104>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cda:	d013      	beq.n	8006d04 <HAL_TIMEx_PWMN_Start+0x104>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIMEx_PWMN_Start+0x154>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_TIMEx_PWMN_Start+0x104>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIMEx_PWMN_Start+0x158>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIMEx_PWMN_Start+0x104>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_TIMEx_PWMN_Start+0x15c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIMEx_PWMN_Start+0x104>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a18      	ldr	r2, [pc, #96]	; (8006d60 <HAL_TIMEx_PWMN_Start+0x160>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d115      	bne.n	8006d30 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <HAL_TIMEx_PWMN_Start+0x164>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d015      	beq.n	8006d42 <HAL_TIMEx_PWMN_Start+0x142>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1c:	d011      	beq.n	8006d42 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	e008      	b.n	8006d42 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e000      	b.n	8006d44 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800
 8006d5c:	40013400 	.word	0x40013400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	00010007 	.word	0x00010007

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e065      	b.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2c      	ldr	r2, [pc, #176]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2b      	ldr	r2, [pc, #172]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d013      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a18      	ldr	r2, [pc, #96]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10c      	bne.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40013400 	.word	0x40013400
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40014000 	.word	0x40014000

08006e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e087      	b.n	8006f98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a27      	ldr	r2, [pc, #156]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a25      	ldr	r2, [pc, #148]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d106      	bne.n	8006f24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1e      	ldr	r2, [pc, #120]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d004      	beq.n	8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d126      	bne.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	051b      	lsls	r3, r3, #20
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a0d      	ldr	r2, [pc, #52]	; (8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d106      	bne.n	8006f86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40013400 	.word	0x40013400

08006fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f003 031f 	and.w	r3, r3, #31
 800704a:	2204      	movs	r2, #4
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	43db      	mvns	r3, r3
 800705a:	401a      	ands	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	fa01 f303 	lsl.w	r3, r1, r3
 8007070:	431a      	orrs	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007092:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007096:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	b29a      	uxth	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80070bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	43db      	mvns	r3, r3
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	4013      	ands	r3, r2
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070e6:	b084      	sub	sp, #16
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	f107 0014 	add.w	r0, r7, #20
 80070f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	b004      	add	sp, #16
 8007126:	4770      	bx	lr

08007128 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007128:	b480      	push	{r7}
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	78db      	ldrb	r3, [r3, #3]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d81f      	bhi.n	800719a <USB_ActivateEndpoint+0x72>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USB_ActivateEndpoint+0x38>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	0800718d 	.word	0x0800718d
 8007168:	080071a3 	.word	0x080071a3
 800716c:	0800717f 	.word	0x0800717f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007170:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007178:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800717c:	e012      	b.n	80071a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800717e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007182:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007186:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800718a:	e00b      	b.n	80071a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800718c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007194:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007198:	e004      	b.n	80071a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80071a0:	e000      	b.n	80071a4 <USB_ActivateEndpoint+0x7c>
      break;
 80071a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80071b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	b21b      	sxth	r3, r3
 80071d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	b21a      	sxth	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b21b      	sxth	r3, r3
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b21b      	sxth	r3, r3
 80071ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80071fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720c:	b29b      	uxth	r3, r3
 800720e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	7b1b      	ldrb	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8149 	bne.w	80074ac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8084 	beq.w	800732c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	4413      	add	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	00da      	lsls	r2, r3, #3
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	88db      	ldrh	r3, [r3, #6]
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	b29b      	uxth	r3, r3
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	827b      	strh	r3, [r7, #18]
 8007266:	8a7b      	ldrh	r3, [r7, #18]
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <USB_ActivateEndpoint+0x180>
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	823b      	strh	r3, [r7, #16]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	8a3b      	ldrh	r3, [r7, #16]
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	78db      	ldrb	r3, [r3, #3]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d020      	beq.n	80072f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c6:	81bb      	strh	r3, [r7, #12]
 80072c8:	89bb      	ldrh	r3, [r7, #12]
 80072ca:	f083 0320 	eor.w	r3, r3, #32
 80072ce:	81bb      	strh	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	441a      	add	r2, r3
 80072da:	89bb      	ldrh	r3, [r7, #12]
 80072dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	8013      	strh	r3, [r2, #0]
 80072f0:	e2a6      	b.n	8007840 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007308:	81fb      	strh	r3, [r7, #14]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]
 800732a:	e289      	b.n	8007840 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	4413      	add	r3, r2
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	00da      	lsls	r2, r3, #3
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	4413      	add	r3, r2
 800734a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	b29b      	uxth	r3, r3
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	4413      	add	r3, r2
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00da      	lsls	r2, r3, #3
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	4413      	add	r3, r2
 800737e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b3e      	cmp	r3, #62	; 0x3e
 800738a:	d918      	bls.n	80073be <USB_ActivateEndpoint+0x296>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	66bb      	str	r3, [r7, #104]	; 0x68
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <USB_ActivateEndpoint+0x27e>
 80073a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073a2:	3b01      	subs	r3, #1
 80073a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	e029      	b.n	8007412 <USB_ActivateEndpoint+0x2ea>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d112      	bne.n	80073ec <USB_ActivateEndpoint+0x2c4>
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e012      	b.n	8007412 <USB_ActivateEndpoint+0x2ea>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <USB_ActivateEndpoint+0x2de>
 8007400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007402:	3301      	adds	r3, #1
 8007404:	66bb      	str	r3, [r7, #104]	; 0x68
 8007406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29a      	uxth	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <USB_ActivateEndpoint+0x33a>
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	843b      	strh	r3, [r7, #32]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	441a      	add	r2, r3
 800744c:	8c3b      	ldrh	r3, [r7, #32]
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	83fb      	strh	r3, [r7, #30]
 800747a:	8bfb      	ldrh	r3, [r7, #30]
 800747c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007480:	83fb      	strh	r3, [r7, #30]
 8007482:	8bfb      	ldrh	r3, [r7, #30]
 8007484:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007488:	83fb      	strh	r3, [r7, #30]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
 80074aa:	e1c9      	b.n	8007840 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	78db      	ldrb	r3, [r3, #3]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d11e      	bne.n	80074f2 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	441a      	add	r2, r3
 80074d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80074dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	8013      	strh	r3, [r2, #0]
 80074f0:	e01d      	b.n	800752e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007508:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	441a      	add	r2, r3
 8007516:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800751a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800751e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	b29b      	uxth	r3, r3
 800752c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800753e:	4413      	add	r3, r2
 8007540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	00da      	lsls	r2, r3, #3
 8007548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754a:	4413      	add	r3, r2
 800754c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007550:	65bb      	str	r3, [r7, #88]	; 0x58
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	891b      	ldrh	r3, [r3, #8]
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	b29b      	uxth	r3, r3
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	657b      	str	r3, [r7, #84]	; 0x54
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756c:	b29b      	uxth	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007572:	4413      	add	r3, r2
 8007574:	657b      	str	r3, [r7, #84]	; 0x54
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	00da      	lsls	r2, r3, #3
 800757c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757e:	4413      	add	r3, r2
 8007580:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007584:	653b      	str	r3, [r7, #80]	; 0x50
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	895b      	ldrh	r3, [r3, #10]
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 8093 	bne.w	80076c6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80075b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80075b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01b      	beq.n	80075f4 <USB_ActivateEndpoint+0x4cc>
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	441a      	add	r2, r3
 80075de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80075e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007602:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01b      	beq.n	8007644 <USB_ActivateEndpoint+0x51c>
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	441a      	add	r2, r3
 800762e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007640:	b29b      	uxth	r3, r3
 8007642:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765a:	873b      	strh	r3, [r7, #56]	; 0x38
 800765c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800765e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007662:	873b      	strh	r3, [r7, #56]	; 0x38
 8007664:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007666:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800766a:	873b      	strh	r3, [r7, #56]	; 0x38
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800767c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007688:	b29b      	uxth	r3, r3
 800768a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29b      	uxth	r3, r3
 800769a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	441a      	add	r2, r3
 80076ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	8013      	strh	r3, [r2, #0]
 80076c4:	e0bc      	b.n	8007840 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80076d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01d      	beq.n	800771e <USB_ActivateEndpoint+0x5f6>
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800770a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771a:	b29b      	uxth	r3, r3
 800771c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800772e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01d      	beq.n	8007776 <USB_ActivateEndpoint+0x64e>
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007750:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	441a      	add	r2, r3
 800775e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800776a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800776e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007772:	b29b      	uxth	r3, r3
 8007774:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	78db      	ldrb	r3, [r3, #3]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d024      	beq.n	80077c8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007798:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800779c:	f083 0320 	eor.w	r3, r3, #32
 80077a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	441a      	add	r2, r3
 80077ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80077b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	8013      	strh	r3, [r2, #0]
 80077c6:	e01d      	b.n	8007804 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	441a      	add	r2, r3
 8007828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007844:	4618      	mov	r0, r3
 8007846:	3774      	adds	r7, #116	; 0x74
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007850:	b480      	push	{r7}
 8007852:	b08d      	sub	sp, #52	; 0x34
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	7b1b      	ldrb	r3, [r3, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f040 808e 	bne.w	8007980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d044      	beq.n	80078f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	81bb      	strh	r3, [r7, #12]
 800787a:	89bb      	ldrh	r3, [r7, #12]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <USB_DeactivateEndpoint+0x6c>
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789a:	817b      	strh	r3, [r7, #10]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	897b      	ldrh	r3, [r7, #10]
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	813b      	strh	r3, [r7, #8]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	893b      	ldrh	r3, [r7, #8]
 80078e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	8013      	strh	r3, [r2, #0]
 80078f4:	e192      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	827b      	strh	r3, [r7, #18]
 8007904:	8a7b      	ldrh	r3, [r7, #18]
 8007906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01b      	beq.n	8007946 <USB_DeactivateEndpoint+0xf6>
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007924:	823b      	strh	r3, [r7, #16]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	8a3b      	ldrh	r3, [r7, #16]
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	81fb      	strh	r3, [r7, #14]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	441a      	add	r2, r3
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]
 800797e:	e14d      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 80a5 	bne.w	8007ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	843b      	strh	r3, [r7, #32]
 8007998:	8c3b      	ldrh	r3, [r7, #32]
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <USB_DeactivateEndpoint+0x18a>
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	83fb      	strh	r3, [r7, #30]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	8bfb      	ldrh	r3, [r7, #30]
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	83bb      	strh	r3, [r7, #28]
 80079e8:	8bbb      	ldrh	r3, [r7, #28]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01b      	beq.n	8007a2a <USB_DeactivateEndpoint+0x1da>
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a08:	837b      	strh	r3, [r7, #26]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	8b7b      	ldrh	r3, [r7, #26]
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a40:	833b      	strh	r3, [r7, #24]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	8b3b      	ldrh	r3, [r7, #24]
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	82fb      	strh	r3, [r7, #22]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	82bb      	strh	r3, [r7, #20]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	441a      	add	r2, r3
 8007abc:	8abb      	ldrh	r3, [r7, #20]
 8007abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	8013      	strh	r3, [r2, #0]
 8007ad2:	e0a3      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01b      	beq.n	8007b24 <USB_DeactivateEndpoint+0x2d4>
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <USB_DeactivateEndpoint+0x324>
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3734      	adds	r7, #52	; 0x34
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b0c2      	sub	sp, #264	; 0x108
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c42:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 867b 	bne.w	800894c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d908      	bls.n	8007c84 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c82:	e007      	b.n	8007c94 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	7b1b      	ldrb	r3, [r3, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d13a      	bne.n	8007d1a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6959      	ldr	r1, [r3, #20]
 8007cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	88da      	ldrh	r2, [r3, #6]
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	f001 fc1d 	bl	800950a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	00da      	lsls	r2, r3, #3
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	4413      	add	r3, r2
 8007d06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	801a      	strh	r2, [r3, #0]
 8007d16:	f000 bde3 	b.w	80088e0 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	78db      	ldrb	r3, [r3, #3]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	f040 843a 	bne.w	80085a0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6a1a      	ldr	r2, [r3, #32]
 8007d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	f240 83b7 	bls.w	80084b8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a1a      	ldr	r2, [r3, #32]
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 81b3 	beq.w	8008152 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	785b      	ldrb	r3, [r3, #1]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d16d      	bne.n	8007ee4 <USB_EPStartXfer+0x2ba>
 8007e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	4413      	add	r3, r2
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	00da      	lsls	r2, r3, #3
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e48:	2b3e      	cmp	r3, #62	; 0x3e
 8007e4a:	d91c      	bls.n	8007e86 <USB_EPStartXfer+0x25c>
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <USB_EPStartXfer+0x242>
 8007e62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e66:	3b01      	subs	r3, #1
 8007e68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	029b      	lsls	r3, r3, #10
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e053      	b.n	8007f2e <USB_EPStartXfer+0x304>
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d112      	bne.n	8007eb4 <USB_EPStartXfer+0x28a>
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	801a      	strh	r2, [r3, #0]
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	e03c      	b.n	8007f2e <USB_EPStartXfer+0x304>
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <USB_EPStartXfer+0x2aa>
 8007eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	e024      	b.n	8007f2e <USB_EPStartXfer+0x304>
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11c      	bne.n	8007f2e <USB_EPStartXfer+0x304>
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	4413      	add	r3, r2
 8007f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	00da      	lsls	r2, r3, #3
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	895b      	ldrh	r3, [r3, #10]
 8007f3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6959      	ldr	r1, [r3, #20]
 8007f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f001 fad4 	bl	800950a <USB_WritePMA>
            ep->xfer_buff += len;
 8007f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f72:	441a      	add	r2, r3
 8007f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1a      	ldr	r2, [r3, #32]
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d90f      	bls.n	8007fbc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8007f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6a1a      	ldr	r2, [r3, #32]
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fac:	1ad2      	subs	r2, r2, r3
 8007fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	621a      	str	r2, [r3, #32]
 8007fba:	e00e      	b.n	8007fda <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	785b      	ldrb	r3, [r3, #1]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d16d      	bne.n	80080c6 <USB_EPStartXfer+0x49c>
 8007fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008004:	b29b      	uxth	r3, r3
 8008006:	461a      	mov	r2, r3
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	4413      	add	r3, r2
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	00da      	lsls	r2, r3, #3
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	4413      	add	r3, r2
 8008020:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802a:	2b3e      	cmp	r3, #62	; 0x3e
 800802c:	d91c      	bls.n	8008068 <USB_EPStartXfer+0x43e>
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	2b00      	cmp	r3, #0
 8008042:	d104      	bne.n	800804e <USB_EPStartXfer+0x424>
 8008044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008048:	3b01      	subs	r3, #1
 800804a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800804e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008052:	b29b      	uxth	r3, r3
 8008054:	029b      	lsls	r3, r3, #10
 8008056:	b29b      	uxth	r3, r3
 8008058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008060:	b29a      	uxth	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	e059      	b.n	800811c <USB_EPStartXfer+0x4f2>
 8008068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800806c:	2b00      	cmp	r3, #0
 800806e:	d112      	bne.n	8008096 <USB_EPStartXfer+0x46c>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800807a:	b29a      	uxth	r2, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29a      	uxth	r2, r3
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e042      	b.n	800811c <USB_EPStartXfer+0x4f2>
 8008096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <USB_EPStartXfer+0x48c>
 80080ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b0:	3301      	adds	r3, #1
 80080b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	029b      	lsls	r3, r3, #10
 80080be:	b29a      	uxth	r2, r3
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e02a      	b.n	800811c <USB_EPStartXfer+0x4f2>
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d122      	bne.n	800811c <USB_EPStartXfer+0x4f2>
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	4413      	add	r3, r2
 80080f8:	623b      	str	r3, [r7, #32]
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	00da      	lsls	r2, r3, #3
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	4413      	add	r3, r2
 800810c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008110:	61fb      	str	r3, [r7, #28]
 8008112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008116:	b29a      	uxth	r2, r3
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	891b      	ldrh	r3, [r3, #8]
 8008128:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800812c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6959      	ldr	r1, [r3, #20]
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800813c:	b29b      	uxth	r3, r3
 800813e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008142:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008146:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	f001 f9dd 	bl	800950a <USB_WritePMA>
 8008150:	e3c6      	b.n	80088e0 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d16d      	bne.n	800823e <USB_EPStartXfer+0x614>
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	64bb      	str	r3, [r7, #72]	; 0x48
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008182:	4413      	add	r3, r2
 8008184:	64bb      	str	r3, [r7, #72]	; 0x48
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	00da      	lsls	r2, r3, #3
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	4413      	add	r3, r2
 8008198:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800819c:	647b      	str	r3, [r7, #68]	; 0x44
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a2:	2b3e      	cmp	r3, #62	; 0x3e
 80081a4:	d91c      	bls.n	80081e0 <USB_EPStartXfer+0x5b6>
 80081a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <USB_EPStartXfer+0x59c>
 80081bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081c0:	3b01      	subs	r3, #1
 80081c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80081c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	029b      	lsls	r3, r3, #10
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d8:	b29a      	uxth	r2, r3
 80081da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e059      	b.n	8008294 <USB_EPStartXfer+0x66a>
 80081e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d112      	bne.n	800820e <USB_EPStartXfer+0x5e4>
 80081e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008206:	b29a      	uxth	r2, r3
 8008208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820a:	801a      	strh	r2, [r3, #0]
 800820c:	e042      	b.n	8008294 <USB_EPStartXfer+0x66a>
 800820e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <USB_EPStartXfer+0x604>
 8008224:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008228:	3301      	adds	r3, #1
 800822a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800822e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008232:	b29b      	uxth	r3, r3
 8008234:	029b      	lsls	r3, r3, #10
 8008236:	b29a      	uxth	r2, r3
 8008238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e02a      	b.n	8008294 <USB_EPStartXfer+0x66a>
 800823e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d122      	bne.n	8008294 <USB_EPStartXfer+0x66a>
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	653b      	str	r3, [r7, #80]	; 0x50
 800825a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008268:	b29b      	uxth	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826e:	4413      	add	r3, r2
 8008270:	653b      	str	r3, [r7, #80]	; 0x50
 8008272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00da      	lsls	r2, r3, #3
 8008280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008282:	4413      	add	r3, r2
 8008284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828e:	b29a      	uxth	r2, r3
 8008290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008292:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	891b      	ldrh	r3, [r3, #8]
 80082a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6959      	ldr	r1, [r3, #20]
 80082b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80082ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80082be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80082c2:	6800      	ldr	r0, [r0, #0]
 80082c4:	f001 f921 	bl	800950a <USB_WritePMA>
            ep->xfer_buff += len;
 80082c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d8:	441a      	add	r2, r3
 80082da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80082e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6a1a      	ldr	r2, [r3, #32]
 80082f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d90f      	bls.n	8008322 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8008302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	621a      	str	r2, [r3, #32]
 8008320:	e00e      	b.n	8008340 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8008322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2200      	movs	r2, #0
 800833e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	643b      	str	r3, [r7, #64]	; 0x40
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d16d      	bne.n	8008438 <USB_EPStartXfer+0x80e>
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	63bb      	str	r3, [r7, #56]	; 0x38
 8008368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	4413      	add	r3, r2
 800837e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	00da      	lsls	r2, r3, #3
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	4413      	add	r3, r2
 8008392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
 8008398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800839c:	2b3e      	cmp	r3, #62	; 0x3e
 800839e:	d91c      	bls.n	80083da <USB_EPStartXfer+0x7b0>
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ae:	f003 031f 	and.w	r3, r3, #31
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <USB_EPStartXfer+0x796>
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ba:	3b01      	subs	r3, #1
 80083bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	029b      	lsls	r3, r3, #10
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	e053      	b.n	8008482 <USB_EPStartXfer+0x858>
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d112      	bne.n	8008408 <USB_EPStartXfer+0x7de>
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	e03c      	b.n	8008482 <USB_EPStartXfer+0x858>
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840c:	085b      	lsrs	r3, r3, #1
 800840e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <USB_EPStartXfer+0x7fe>
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008422:	3301      	adds	r3, #1
 8008424:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	b29b      	uxth	r3, r3
 800842e:	029b      	lsls	r3, r3, #10
 8008430:	b29a      	uxth	r2, r3
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	e024      	b.n	8008482 <USB_EPStartXfer+0x858>
 8008438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d11c      	bne.n	8008482 <USB_EPStartXfer+0x858>
 8008448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800845c:	4413      	add	r3, r2
 800845e:	643b      	str	r3, [r7, #64]	; 0x40
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	00da      	lsls	r2, r3, #3
 800846e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008470:	4413      	add	r3, r2
 8008472:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847c:	b29a      	uxth	r2, r3
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	895b      	ldrh	r3, [r3, #10]
 800848e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6959      	ldr	r1, [r3, #20]
 800849e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084b0:	6800      	ldr	r0, [r0, #0]
 80084b2:	f001 f82a 	bl	800950a <USB_WritePMA>
 80084b6:	e213      	b.n	80088e0 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80084c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80084ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80084f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008520:	b29b      	uxth	r3, r3
 8008522:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853e:	b29b      	uxth	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008544:	4413      	add	r3, r2
 8008546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	00da      	lsls	r2, r3, #3
 8008556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008558:	4413      	add	r3, r2
 800855a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800855e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008564:	b29a      	uxth	r2, r3
 8008566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008568:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800856a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	891b      	ldrh	r3, [r3, #8]
 8008576:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800857a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6959      	ldr	r1, [r3, #20]
 8008586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858a:	b29b      	uxth	r3, r3
 800858c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008590:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008594:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008598:	6800      	ldr	r0, [r0, #0]
 800859a:	f000 ffb6 	bl	800950a <USB_WritePMA>
 800859e:	e19f      	b.n	80088e0 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80085a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b0:	1ad2      	subs	r2, r2, r3
 80085b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80bc 	beq.w	800875e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	673b      	str	r3, [r7, #112]	; 0x70
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	785b      	ldrb	r3, [r3, #1]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d16d      	bne.n	80086de <USB_EPStartXfer+0xab4>
 8008602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	66bb      	str	r3, [r7, #104]	; 0x68
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861c:	b29b      	uxth	r3, r3
 800861e:	461a      	mov	r2, r3
 8008620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008622:	4413      	add	r3, r2
 8008624:	66bb      	str	r3, [r7, #104]	; 0x68
 8008626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	00da      	lsls	r2, r3, #3
 8008634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008636:	4413      	add	r3, r2
 8008638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800863c:	667b      	str	r3, [r7, #100]	; 0x64
 800863e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008642:	2b3e      	cmp	r3, #62	; 0x3e
 8008644:	d91c      	bls.n	8008680 <USB_EPStartXfer+0xa56>
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	2b00      	cmp	r3, #0
 800865a:	d104      	bne.n	8008666 <USB_EPStartXfer+0xa3c>
 800865c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008660:	3b01      	subs	r3, #1
 8008662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800866a:	b29b      	uxth	r3, r3
 800866c:	029b      	lsls	r3, r3, #10
 800866e:	b29b      	uxth	r3, r3
 8008670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008678:	b29a      	uxth	r2, r3
 800867a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800867c:	801a      	strh	r2, [r3, #0]
 800867e:	e053      	b.n	8008728 <USB_EPStartXfer+0xafe>
 8008680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008684:	2b00      	cmp	r3, #0
 8008686:	d112      	bne.n	80086ae <USB_EPStartXfer+0xa84>
 8008688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008692:	b29a      	uxth	r2, r3
 8008694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e03c      	b.n	8008728 <USB_EPStartXfer+0xafe>
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d004      	beq.n	80086ce <USB_EPStartXfer+0xaa4>
 80086c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086c8:	3301      	adds	r3, #1
 80086ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	029b      	lsls	r3, r3, #10
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086da:	801a      	strh	r2, [r3, #0]
 80086dc:	e024      	b.n	8008728 <USB_EPStartXfer+0xafe>
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d11c      	bne.n	8008728 <USB_EPStartXfer+0xafe>
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008702:	4413      	add	r3, r2
 8008704:	673b      	str	r3, [r7, #112]	; 0x70
 8008706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	00da      	lsls	r2, r3, #3
 8008714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008716:	4413      	add	r3, r2
 8008718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800871c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800871e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008722:	b29a      	uxth	r2, r3
 8008724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008726:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	895b      	ldrh	r3, [r3, #10]
 8008734:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6959      	ldr	r1, [r3, #20]
 8008744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008748:	b29b      	uxth	r3, r3
 800874a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800874e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008752:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008756:	6800      	ldr	r0, [r0, #0]
 8008758:	f000 fed7 	bl	800950a <USB_WritePMA>
 800875c:	e0c0      	b.n	80088e0 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800875e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d16d      	bne.n	800884a <USB_EPStartXfer+0xc20>
 800876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	67fb      	str	r3, [r7, #124]	; 0x7c
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008788:	b29b      	uxth	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800878e:	4413      	add	r3, r2
 8008790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	00da      	lsls	r2, r3, #3
 80087a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087a2:	4413      	add	r3, r2
 80087a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80087a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80087aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ae:	2b3e      	cmp	r3, #62	; 0x3e
 80087b0:	d91c      	bls.n	80087ec <USB_EPStartXfer+0xbc2>
 80087b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c0:	f003 031f 	and.w	r3, r3, #31
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <USB_EPStartXfer+0xba8>
 80087c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087cc:	3b01      	subs	r3, #1
 80087ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	029b      	lsls	r3, r3, #10
 80087da:	b29b      	uxth	r3, r3
 80087dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e8:	801a      	strh	r2, [r3, #0]
 80087ea:	e05f      	b.n	80088ac <USB_EPStartXfer+0xc82>
 80087ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d112      	bne.n	800881a <USB_EPStartXfer+0xbf0>
 80087f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008812:	b29a      	uxth	r2, r3
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	e048      	b.n	80088ac <USB_EPStartXfer+0xc82>
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <USB_EPStartXfer+0xc10>
 8008830:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008834:	3301      	adds	r3, #1
 8008836:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800883a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800883e:	b29b      	uxth	r3, r3
 8008840:	029b      	lsls	r3, r3, #10
 8008842:	b29a      	uxth	r2, r3
 8008844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	e030      	b.n	80088ac <USB_EPStartXfer+0xc82>
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d128      	bne.n	80088ac <USB_EPStartXfer+0xc82>
 800885a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800887e:	4413      	add	r3, r2
 8008880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	00da      	lsls	r2, r3, #3
 8008892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008896:	4413      	add	r3, r2
 8008898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800889c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	891b      	ldrh	r3, [r3, #8]
 80088b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6959      	ldr	r1, [r3, #20]
 80088c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	f000 fe15 	bl	800950a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80088e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4413      	add	r3, r2
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008906:	817b      	strh	r3, [r7, #10]
 8008908:	897b      	ldrh	r3, [r7, #10]
 800890a:	f083 0310 	eor.w	r3, r3, #16
 800890e:	817b      	strh	r3, [r7, #10]
 8008910:	897b      	ldrh	r3, [r7, #10]
 8008912:	f083 0320 	eor.w	r3, r3, #32
 8008916:	817b      	strh	r3, [r7, #10]
 8008918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	441a      	add	r2, r3
 8008932:	897b      	ldrh	r3, [r7, #10]
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]
 8008948:	f000 bc9f 	b.w	800928a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800894c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	7b1b      	ldrb	r3, [r3, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 80ae 	bne.w	8008aba <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800895e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	429a      	cmp	r2, r3
 8008978:	d917      	bls.n	80089aa <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800898a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	619a      	str	r2, [r3, #24]
 80089a8:	e00e      	b.n	80089c8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80089aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80089ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089ec:	4413      	add	r3, r2
 80089ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	00da      	lsls	r2, r3, #3
 8008a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a04:	4413      	add	r3, r2
 8008a06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a12:	2b3e      	cmp	r3, #62	; 0x3e
 8008a14:	d91d      	bls.n	8008a52 <USB_EPStartXfer+0xe28>
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <USB_EPStartXfer+0xe0c>
 8008a2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a30:	3b01      	subs	r3, #1
 8008a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	e3e1      	b.n	8009216 <USB_EPStartXfer+0x15ec>
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d116      	bne.n	8008a88 <USB_EPStartXfer+0xe5e>
 8008a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e3c6      	b.n	8009216 <USB_EPStartXfer+0x15ec>
 8008a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <USB_EPStartXfer+0xe7e>
 8008a9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008aa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	029b      	lsls	r3, r3, #10
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e3ad      	b.n	8009216 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	78db      	ldrb	r3, [r3, #3]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	f040 8200 	bne.w	8008ecc <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f040 8091 	bne.w	8008c00 <USB_EPStartXfer+0xfd6>
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b02:	4413      	add	r3, r2
 8008b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	00da      	lsls	r2, r3, #3
 8008b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	2b3e      	cmp	r3, #62	; 0x3e
 8008b32:	d925      	bls.n	8008b80 <USB_EPStartXfer+0xf56>
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	095b      	lsrs	r3, r3, #5
 8008b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	f003 031f 	and.w	r3, r3, #31
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d104      	bne.n	8008b64 <USB_EPStartXfer+0xf3a>
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	029b      	lsls	r3, r3, #10
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	e074      	b.n	8008c6a <USB_EPStartXfer+0x1040>
 8008b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d116      	bne.n	8008bbe <USB_EPStartXfer+0xf94>
 8008b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	e055      	b.n	8008c6a <USB_EPStartXfer+0x1040>
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <USB_EPStartXfer+0xfc4>
 8008be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be8:	3301      	adds	r3, #1
 8008bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	029b      	lsls	r3, r3, #10
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	e034      	b.n	8008c6a <USB_EPStartXfer+0x1040>
 8008c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d12c      	bne.n	8008c6a <USB_EPStartXfer+0x1040>
 8008c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c34:	4413      	add	r3, r2
 8008c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	00da      	lsls	r2, r3, #3
 8008c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c68:	801a      	strh	r2, [r3, #0]
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f040 8091 	bne.w	8008dac <USB_EPStartXfer+0x1182>
 8008c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cae:	4413      	add	r3, r2
 8008cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	00da      	lsls	r2, r3, #3
 8008cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8008cde:	d925      	bls.n	8008d2c <USB_EPStartXfer+0x1102>
 8008ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <USB_EPStartXfer+0x10e6>
 8008d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	029b      	lsls	r3, r3, #10
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d28:	801a      	strh	r2, [r3, #0]
 8008d2a:	e06d      	b.n	8008e08 <USB_EPStartXfer+0x11de>
 8008d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d116      	bne.n	8008d6a <USB_EPStartXfer+0x1140>
 8008d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d4e:	801a      	strh	r2, [r3, #0]
 8008d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d66:	801a      	strh	r2, [r3, #0]
 8008d68:	e04e      	b.n	8008e08 <USB_EPStartXfer+0x11de>
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	085b      	lsrs	r3, r3, #1
 8008d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <USB_EPStartXfer+0x1170>
 8008d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d94:	3301      	adds	r3, #1
 8008d96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	029b      	lsls	r3, r3, #10
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	e02d      	b.n	8008e08 <USB_EPStartXfer+0x11de>
 8008dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	785b      	ldrb	r3, [r3, #1]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d125      	bne.n	8008e08 <USB_EPStartXfer+0x11de>
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	00da      	lsls	r2, r3, #3
 8008de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dea:	4413      	add	r3, r2
 8008dec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e06:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 81fe 	beq.w	8009216 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <USB_EPStartXfer+0x1228>
 8008e46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10d      	bne.n	8008e6e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008e52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f040 81db 	bne.w	8009216 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008e60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f040 81d4 	bne.w	8009216 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e94:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	441a      	add	r2, r3
 8008eb2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	8013      	strh	r3, [r2, #0]
 8008eca:	e1a4      	b.n	8009216 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	78db      	ldrb	r3, [r3, #3]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	f040 819a 	bne.w	8009212 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d917      	bls.n	8008f2a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8008efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1a:	1ad2      	subs	r2, r2, r3
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	619a      	str	r2, [r3, #24]
 8008f28:	e00e      	b.n	8008f48 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d178      	bne.n	800904a <USB_EPStartXfer+0x1420>
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f94:	4413      	add	r3, r2
 8008f96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa4:	d91d      	bls.n	8008fe2 <USB_EPStartXfer+0x13b8>
 8008fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb4:	f003 031f 	and.w	r3, r3, #31
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <USB_EPStartXfer+0x139c>
 8008fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	029b      	lsls	r3, r3, #10
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	e064      	b.n	80090ac <USB_EPStartXfer+0x1482>
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d116      	bne.n	8009018 <USB_EPStartXfer+0x13ee>
 8008fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800900a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900e:	b29a      	uxth	r2, r3
 8009010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009014:	801a      	strh	r2, [r3, #0]
 8009016:	e049      	b.n	80090ac <USB_EPStartXfer+0x1482>
 8009018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800901c:	085b      	lsrs	r3, r3, #1
 800901e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d004      	beq.n	8009038 <USB_EPStartXfer+0x140e>
 800902e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009032:	3301      	adds	r3, #1
 8009034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800903c:	b29b      	uxth	r3, r3
 800903e:	029b      	lsls	r3, r3, #10
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	e030      	b.n	80090ac <USB_EPStartXfer+0x1482>
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d128      	bne.n	80090ac <USB_EPStartXfer+0x1482>
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009076:	b29b      	uxth	r3, r3
 8009078:	461a      	mov	r2, r3
 800907a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800907e:	4413      	add	r3, r2
 8009080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	00da      	lsls	r2, r3, #3
 8009092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009096:	4413      	add	r3, r2
 8009098:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800909c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80090aa:	801a      	strh	r2, [r3, #0]
 80090ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	785b      	ldrb	r3, [r3, #1]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d178      	bne.n	80091bc <USB_EPStartXfer+0x1592>
 80090ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80090ee:	4413      	add	r3, r2
 80090f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	00da      	lsls	r2, r3, #3
 8009102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009106:	4413      	add	r3, r2
 8009108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800910c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009114:	2b3e      	cmp	r3, #62	; 0x3e
 8009116:	d91d      	bls.n	8009154 <USB_EPStartXfer+0x152a>
 8009118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	f003 031f 	and.w	r3, r3, #31
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <USB_EPStartXfer+0x150e>
 800912e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009132:	3b01      	subs	r3, #1
 8009134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800913c:	b29b      	uxth	r3, r3
 800913e:	029b      	lsls	r3, r3, #10
 8009140:	b29b      	uxth	r3, r3
 8009142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800914a:	b29a      	uxth	r2, r3
 800914c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	e060      	b.n	8009216 <USB_EPStartXfer+0x15ec>
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009158:	2b00      	cmp	r3, #0
 800915a:	d116      	bne.n	800918a <USB_EPStartXfer+0x1560>
 800915c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009168:	b29a      	uxth	r2, r3
 800916a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800916e:	801a      	strh	r2, [r3, #0]
 8009170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009180:	b29a      	uxth	r2, r3
 8009182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	e045      	b.n	8009216 <USB_EPStartXfer+0x15ec>
 800918a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <USB_EPStartXfer+0x1580>
 80091a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091a4:	3301      	adds	r3, #1
 80091a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	029b      	lsls	r3, r3, #10
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091b8:	801a      	strh	r2, [r3, #0]
 80091ba:	e02c      	b.n	8009216 <USB_EPStartXfer+0x15ec>
 80091bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d124      	bne.n	8009216 <USB_EPStartXfer+0x15ec>
 80091cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091da:	b29b      	uxth	r3, r3
 80091dc:	461a      	mov	r2, r3
 80091de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091e2:	4413      	add	r3, r2
 80091e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	00da      	lsls	r2, r3, #3
 80091f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091fa:	4413      	add	r3, r2
 80091fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	b29a      	uxth	r2, r3
 800920a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	e001      	b.n	8009216 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e03a      	b.n	800928c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009240:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009244:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009248:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800924c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009254:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	441a      	add	r2, r3
 8009272:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800927a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800927e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	b29b      	uxth	r3, r3
 8009288:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009296:	b480      	push	{r7}
 8009298:	b085      	sub	sp, #20
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d020      	beq.n	80092ea <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092be:	81bb      	strh	r3, [r7, #12]
 80092c0:	89bb      	ldrh	r3, [r7, #12]
 80092c2:	f083 0310 	eor.w	r3, r3, #16
 80092c6:	81bb      	strh	r3, [r7, #12]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	89bb      	ldrh	r3, [r7, #12]
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]
 80092e8:	e01f      	b.n	800932a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009300:	81fb      	strh	r3, [r7, #14]
 8009302:	89fb      	ldrh	r3, [r7, #14]
 8009304:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009308:	81fb      	strh	r3, [r7, #14]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	441a      	add	r2, r3
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800931a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800931e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009326:	b29b      	uxth	r3, r3
 8009328:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	7b1b      	ldrb	r3, [r3, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 809d 	bne.w	8009486 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d04c      	beq.n	80093ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	823b      	strh	r3, [r7, #16]
 8009362:	8a3b      	ldrh	r3, [r7, #16]
 8009364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <USB_EPClearStall+0x6c>
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	81fb      	strh	r3, [r7, #14]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	89fb      	ldrh	r3, [r7, #14]
 8009390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	78db      	ldrb	r3, [r3, #3]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d06c      	beq.n	8009486 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c2:	81bb      	strh	r3, [r7, #12]
 80093c4:	89bb      	ldrh	r3, [r7, #12]
 80093c6:	f083 0320 	eor.w	r3, r3, #32
 80093ca:	81bb      	strh	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	441a      	add	r2, r3
 80093d6:	89bb      	ldrh	r3, [r7, #12]
 80093d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	8013      	strh	r3, [r2, #0]
 80093ec:	e04b      	b.n	8009486 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	82fb      	strh	r3, [r7, #22]
 80093fc:	8afb      	ldrh	r3, [r7, #22]
 80093fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01b      	beq.n	800943e <USB_EPClearStall+0x106>
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941c:	82bb      	strh	r3, [r7, #20]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	441a      	add	r2, r3
 8009428:	8abb      	ldrh	r3, [r7, #20]
 800942a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800943a:	b29b      	uxth	r3, r3
 800943c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009454:	827b      	strh	r3, [r7, #18]
 8009456:	8a7b      	ldrh	r3, [r7, #18]
 8009458:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800945c:	827b      	strh	r3, [r7, #18]
 800945e:	8a7b      	ldrh	r3, [r7, #18]
 8009460:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009464:	827b      	strh	r3, [r7, #18]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	441a      	add	r2, r3
 8009470:	8a7b      	ldrh	r3, [r7, #18]
 8009472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009482:	b29b      	uxth	r3, r3
 8009484:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2280      	movs	r2, #128	; 0x80
 80094aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80094fc:	68fb      	ldr	r3, [r7, #12]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800950a:	b480      	push	{r7}
 800950c:	b08d      	sub	sp, #52	; 0x34
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	4611      	mov	r1, r2
 8009516:	461a      	mov	r2, r3
 8009518:	460b      	mov	r3, r1
 800951a:	80fb      	strh	r3, [r7, #6]
 800951c:	4613      	mov	r3, r2
 800951e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009520:	88bb      	ldrh	r3, [r7, #4]
 8009522:	3301      	adds	r3, #1
 8009524:	085b      	lsrs	r3, r3, #1
 8009526:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009530:	88fa      	ldrh	r2, [r7, #6]
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800953a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009540:	e01b      	b.n	800957a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	3301      	adds	r3, #1
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	b29b      	uxth	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	b29a      	uxth	r2, r3
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	3302      	adds	r3, #2
 800956c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	3301      	adds	r3, #1
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	3b01      	subs	r3, #1
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e0      	bne.n	8009542 <USB_WritePMA+0x38>
  }
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	3734      	adds	r7, #52	; 0x34
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800958e:	b480      	push	{r7}
 8009590:	b08b      	sub	sp, #44	; 0x2c
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	4611      	mov	r1, r2
 800959a:	461a      	mov	r2, r3
 800959c:	460b      	mov	r3, r1
 800959e:	80fb      	strh	r3, [r7, #6]
 80095a0:	4613      	mov	r3, r2
 80095a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80095a4:	88bb      	ldrh	r3, [r7, #4]
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095b4:	88fa      	ldrh	r2, [r7, #6]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095be:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
 80095c4:	e018      	b.n	80095f8 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	3302      	adds	r3, #2
 80095d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	3301      	adds	r3, #1
 80095e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	0a1b      	lsrs	r3, r3, #8
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	3301      	adds	r3, #1
 80095f0:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	3b01      	subs	r3, #1
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e3      	bne.n	80095c6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80095fe:	88bb      	ldrh	r3, [r7, #4]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	b29b      	uxth	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	b2da      	uxtb	r2, r3
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	701a      	strb	r2, [r3, #0]
  }
}
 800961a:	bf00      	nop
 800961c:	372c      	adds	r7, #44	; 0x2c
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009632:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009636:	f002 f901 	bl	800b83c <USBD_static_malloc>
 800963a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800964a:	2302      	movs	r3, #2
 800964c:	e066      	b.n	800971c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7c1b      	ldrb	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d119      	bne.n	8009692 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800965e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009662:	2202      	movs	r2, #2
 8009664:	2181      	movs	r1, #129	; 0x81
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 ff8d 	bl	800b586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009676:	2202      	movs	r2, #2
 8009678:	2101      	movs	r1, #1
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 ff83 	bl	800b586 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2210      	movs	r2, #16
 800968c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009690:	e016      	b.n	80096c0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	2202      	movs	r2, #2
 8009696:	2181      	movs	r1, #129	; 0x81
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 ff74 	bl	800b586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80096a4:	2340      	movs	r3, #64	; 0x40
 80096a6:	2202      	movs	r2, #2
 80096a8:	2101      	movs	r1, #1
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f001 ff6b 	bl	800b586 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2210      	movs	r2, #16
 80096bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096c0:	2308      	movs	r3, #8
 80096c2:	2203      	movs	r2, #3
 80096c4:	2182      	movs	r1, #130	; 0x82
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 ff5d 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7c1b      	ldrb	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d109      	bne.n	800970a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009700:	2101      	movs	r1, #1
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f002 f82f 	bl	800b766 <USBD_LL_PrepareReceive>
 8009708:	e007      	b.n	800971a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	2101      	movs	r1, #1
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 f826 	bl	800b766 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009730:	2181      	movs	r1, #129	; 0x81
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 ff4d 	bl	800b5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800973e:	2101      	movs	r1, #1
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f001 ff46 	bl	800b5d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800974e:	2182      	movs	r1, #130	; 0x82
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 ff3e 	bl	800b5d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00e      	beq.n	800978e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009780:	4618      	mov	r0, r3
 8009782:	f002 f869 	bl	800b858 <USBD_static_free>
    pdev->pClassData = NULL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	e0af      	b.n	8009920 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d03f      	beq.n	800984c <USBD_CDC_Setup+0xb4>
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	f040 809f 	bne.w	8009910 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d02e      	beq.n	8009838 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b25b      	sxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da16      	bge.n	8009812 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80097f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	88d2      	ldrh	r2, [r2, #6]
 80097f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	88db      	ldrh	r3, [r3, #6]
 80097fc:	2b07      	cmp	r3, #7
 80097fe:	bf28      	it	cs
 8009800:	2307      	movcs	r3, #7
 8009802:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	89fa      	ldrh	r2, [r7, #14]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f001 facf 	bl	800adae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009810:	e085      	b.n	800991e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	785a      	ldrb	r2, [r3, #1]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	88db      	ldrh	r3, [r3, #6]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009828:	6939      	ldr	r1, [r7, #16]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	88db      	ldrh	r3, [r3, #6]
 800982e:	461a      	mov	r2, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 fae8 	bl	800ae06 <USBD_CtlPrepareRx>
      break;
 8009836:	e072      	b.n	800991e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	7850      	ldrb	r0, [r2, #1]
 8009844:	2200      	movs	r2, #0
 8009846:	6839      	ldr	r1, [r7, #0]
 8009848:	4798      	blx	r3
      break;
 800984a:	e068      	b.n	800991e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b0b      	cmp	r3, #11
 8009852:	d852      	bhi.n	80098fa <USBD_CDC_Setup+0x162>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <USBD_CDC_Setup+0xc4>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	0800988d 	.word	0x0800988d
 8009860:	08009909 	.word	0x08009909
 8009864:	080098fb 	.word	0x080098fb
 8009868:	080098fb 	.word	0x080098fb
 800986c:	080098fb 	.word	0x080098fb
 8009870:	080098fb 	.word	0x080098fb
 8009874:	080098fb 	.word	0x080098fb
 8009878:	080098fb 	.word	0x080098fb
 800987c:	080098fb 	.word	0x080098fb
 8009880:	080098fb 	.word	0x080098fb
 8009884:	080098b7 	.word	0x080098b7
 8009888:	080098e1 	.word	0x080098e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b03      	cmp	r3, #3
 8009896:	d107      	bne.n	80098a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009898:	f107 030a 	add.w	r3, r7, #10
 800989c:	2202      	movs	r2, #2
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 fa84 	bl	800adae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098a6:	e032      	b.n	800990e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 fa0e 	bl	800accc <USBD_CtlError>
            ret = USBD_FAIL;
 80098b0:	2303      	movs	r3, #3
 80098b2:	75fb      	strb	r3, [r7, #23]
          break;
 80098b4:	e02b      	b.n	800990e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d107      	bne.n	80098d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098c2:	f107 030d 	add.w	r3, r7, #13
 80098c6:	2201      	movs	r2, #1
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fa6f 	bl	800adae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098d0:	e01d      	b.n	800990e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 f9f9 	bl	800accc <USBD_CtlError>
            ret = USBD_FAIL;
 80098da:	2303      	movs	r3, #3
 80098dc:	75fb      	strb	r3, [r7, #23]
          break;
 80098de:	e016      	b.n	800990e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d00f      	beq.n	800990c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 f9ec 	bl	800accc <USBD_CtlError>
            ret = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80098f8:	e008      	b.n	800990c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 f9e5 	bl	800accc <USBD_CtlError>
          ret = USBD_FAIL;
 8009902:	2303      	movs	r3, #3
 8009904:	75fb      	strb	r3, [r7, #23]
          break;
 8009906:	e002      	b.n	800990e <USBD_CDC_Setup+0x176>
          break;
 8009908:	bf00      	nop
 800990a:	e008      	b.n	800991e <USBD_CDC_Setup+0x186>
          break;
 800990c:	bf00      	nop
      }
      break;
 800990e:	e006      	b.n	800991e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 f9da 	bl	800accc <USBD_CtlError>
      ret = USBD_FAIL;
 8009918:	2303      	movs	r3, #3
 800991a:	75fb      	strb	r3, [r7, #23]
      break;
 800991c:	bf00      	nop
  }

  return (uint8_t)ret;
 800991e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3718      	adds	r7, #24
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800993a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009946:	2303      	movs	r3, #3
 8009948:	e04f      	b.n	80099ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009950:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	3318      	adds	r3, #24
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d029      	beq.n	80099bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	3318      	adds	r3, #24
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	78f9      	ldrb	r1, [r7, #3]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	460b      	mov	r3, r1
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	440b      	add	r3, r1
 8009984:	00db      	lsls	r3, r3, #3
 8009986:	4403      	add	r3, r0
 8009988:	3338      	adds	r3, #56	; 0x38
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009990:	fb01 f303 	mul.w	r3, r1, r3
 8009994:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009996:	2b00      	cmp	r3, #0
 8009998:	d110      	bne.n	80099bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	6879      	ldr	r1, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	440b      	add	r3, r1
 80099a8:	3318      	adds	r3, #24
 80099aa:	2200      	movs	r2, #0
 80099ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099ae:	78f9      	ldrb	r1, [r7, #3]
 80099b0:	2300      	movs	r3, #0
 80099b2:	2200      	movs	r2, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 feb5 	bl	800b724 <USBD_LL_Transmit>
 80099ba:	e015      	b.n	80099e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00b      	beq.n	80099e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80099e4:	78fa      	ldrb	r2, [r7, #3]
 80099e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e015      	b.n	8009a40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fec5 	bl	800b7a8 <USBD_LL_GetRxDataSize>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e01b      	b.n	8009a9a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d015      	beq.n	8009a98 <USBD_CDC_EP0_RxReady+0x50>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a72:	2bff      	cmp	r3, #255	; 0xff
 8009a74:	d010      	beq.n	8009a98 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009a84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2243      	movs	r2, #67	; 0x43
 8009ab0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009ab2:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	20000094 	.word	0x20000094

08009ac4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2243      	movs	r2, #67	; 0x43
 8009ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009ad2:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	20000050 	.word	0x20000050

08009ae4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2243      	movs	r2, #67	; 0x43
 8009af0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009af2:	4b03      	ldr	r3, [pc, #12]	; (8009b00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	200000d8 	.word	0x200000d8

08009b04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	220a      	movs	r2, #10
 8009b10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b12:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	2000000c 	.word	0x2000000c

08009b24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e004      	b.n	8009b42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b087      	sub	sp, #28
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e008      	b.n	8009b7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b085      	sub	sp, #20
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e004      	b.n	8009bb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e01a      	b.n	8009c14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d114      	bne.n	8009c12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009c06:	2181      	movs	r1, #129	; 0x81
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 fd8b 	bl	800b724 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e016      	b.n	8009c68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7c1b      	ldrb	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d109      	bne.n	8009c56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f001 fd89 	bl	800b766 <USBD_LL_PrepareReceive>
 8009c54:	e007      	b.n	8009c66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c5c:	2340      	movs	r3, #64	; 0x40
 8009c5e:	2101      	movs	r1, #1
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 fd80 	bl	800b766 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e01f      	b.n	8009cc8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	79fa      	ldrb	r2, [r7, #7]
 8009cba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f001 fbe7 	bl	800b490 <USBD_LL_Init>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3718      	adds	r7, #24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e016      	b.n	8009d16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d04:	f107 020e 	add.w	r2, r7, #14
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 fc12 	bl	800b550 <USBD_LL_Start>
 8009d2c:	4603      	mov	r3, r0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	78fa      	ldrb	r2, [r7, #3]
 8009d70:	4611      	mov	r1, r2
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	78fa      	ldrb	r2, [r7, #3]
 8009da4:	4611      	mov	r1, r2
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
  }

  return USBD_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 ff46 	bl	800ac58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009de8:	f003 031f 	and.w	r3, r3, #31
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d01a      	beq.n	8009e26 <USBD_LL_SetupStage+0x72>
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d822      	bhi.n	8009e3a <USBD_LL_SetupStage+0x86>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <USBD_LL_SetupStage+0x4a>
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d00a      	beq.n	8009e12 <USBD_LL_SetupStage+0x5e>
 8009dfc:	e01d      	b.n	8009e3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f9ee 	bl	800a1e8 <USBD_StdDevReq>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e10:	e020      	b.n	8009e54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa52 	bl	800a2c4 <USBD_StdItfReq>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
      break;
 8009e24:	e016      	b.n	8009e54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa91 	bl	800a356 <USBD_StdEPReq>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
      break;
 8009e38:	e00c      	b.n	8009e54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fbe1 	bl	800b610 <USBD_LL_StallEP>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]
      break;
 8009e52:	bf00      	nop
  }

  return ret;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	460b      	mov	r3, r1
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d138      	bne.n	8009ee4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d14a      	bne.n	8009f1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d913      	bls.n	8009eb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	1ad2      	subs	r2, r2, r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	bf28      	it	cs
 8009eaa:	4613      	movcs	r3, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 ffc5 	bl	800ae40 <USBD_CtlContinueRx>
 8009eb6:	e030      	b.n	8009f1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d10b      	bne.n	8009edc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d005      	beq.n	8009edc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 ffc0 	bl	800ae62 <USBD_CtlSendStatus>
 8009ee2:	e01a      	b.n	8009f1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d114      	bne.n	8009f1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00e      	beq.n	8009f1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	7afa      	ldrb	r2, [r7, #11]
 8009f06:	4611      	mov	r1, r2
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	4798      	blx	r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	e000      	b.n	8009f1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d16b      	bne.n	800a010 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d156      	bne.n	8009ff6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d914      	bls.n	8009f7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	1ad2      	subs	r2, r2, r3
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6879      	ldr	r1, [r7, #4]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 ff3a 	bl	800ade4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f001 fbf5 	bl	800b766 <USBD_LL_PrepareReceive>
 8009f7c:	e03b      	b.n	8009ff6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d11c      	bne.n	8009fc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d316      	bcc.n	8009fc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d20f      	bcs.n	8009fc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 ff1b 	bl	800ade4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2100      	movs	r1, #0
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f001 fbd2 	bl	800b766 <USBD_LL_PrepareReceive>
 8009fc2:	e018      	b.n	8009ff6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d10b      	bne.n	8009fe8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fe8:	2180      	movs	r1, #128	; 0x80
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f001 fb10 	bl	800b610 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 ff49 	bl	800ae88 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d122      	bne.n	800a046 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fe98 	bl	8009d36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a00e:	e01a      	b.n	800a046 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d114      	bne.n	800a046 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00e      	beq.n	800a046 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	7afa      	ldrb	r2, [r7, #11]
 800a032:	4611      	mov	r1, r2
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	4798      	blx	r3
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	e000      	b.n	800a048 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e02f      	b.n	800a0e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00f      	beq.n	800a0ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6852      	ldr	r2, [r2, #4]
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fa66 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2240      	movs	r2, #64	; 0x40
 800a0c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0ca:	2340      	movs	r3, #64	; 0x40
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2180      	movs	r1, #128	; 0x80
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 fa58 	bl	800b586 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2240      	movs	r2, #64	; 0x40
 800a0e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	78fa      	ldrb	r2, [r7, #3]
 800a0fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2204      	movs	r2, #4
 800a126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d106      	bne.n	800a15a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a152:	b2da      	uxtb	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e012      	b.n	800a1a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b03      	cmp	r3, #3
 800a188:	d10b      	bne.n	800a1a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d005      	beq.n	800a1a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1ca:	8a3b      	ldrh	r3, [r7, #16]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	b21a      	sxth	r2, r3
 800a1d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a1da:	89fb      	ldrh	r3, [r7, #14]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1fe:	2b40      	cmp	r3, #64	; 0x40
 800a200:	d005      	beq.n	800a20e <USBD_StdDevReq+0x26>
 800a202:	2b40      	cmp	r3, #64	; 0x40
 800a204:	d853      	bhi.n	800a2ae <USBD_StdDevReq+0xc6>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <USBD_StdDevReq+0x3a>
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d14f      	bne.n	800a2ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
      break;
 800a220:	e04a      	b.n	800a2b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b09      	cmp	r3, #9
 800a228:	d83b      	bhi.n	800a2a2 <USBD_StdDevReq+0xba>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <USBD_StdDevReq+0x48>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a299 	.word	0x0800a299
 800a238:	0800a2a3 	.word	0x0800a2a3
 800a23c:	0800a28f 	.word	0x0800a28f
 800a240:	0800a2a3 	.word	0x0800a2a3
 800a244:	0800a263 	.word	0x0800a263
 800a248:	0800a259 	.word	0x0800a259
 800a24c:	0800a2a3 	.word	0x0800a2a3
 800a250:	0800a27b 	.word	0x0800a27b
 800a254:	0800a26d 	.word	0x0800a26d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f9de 	bl	800a61c <USBD_GetDescriptor>
          break;
 800a260:	e024      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fb6d 	bl	800a944 <USBD_SetAddress>
          break;
 800a26a:	e01f      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fbac 	bl	800a9cc <USBD_SetConfig>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]
          break;
 800a278:	e018      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fc4b 	bl	800ab18 <USBD_GetConfig>
          break;
 800a282:	e013      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fc7c 	bl	800ab84 <USBD_GetStatus>
          break;
 800a28c:	e00e      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fcab 	bl	800abec <USBD_SetFeature>
          break;
 800a296:	e009      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fcba 	bl	800ac14 <USBD_ClrFeature>
          break;
 800a2a0:	e004      	b.n	800a2ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fd11 	bl	800accc <USBD_CtlError>
          break;
 800a2aa:	bf00      	nop
      }
      break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fd0b 	bl	800accc <USBD_CtlError>
      break;
 800a2b6:	bf00      	nop
  }

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2da:	2b40      	cmp	r3, #64	; 0x40
 800a2dc:	d005      	beq.n	800a2ea <USBD_StdItfReq+0x26>
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d82f      	bhi.n	800a342 <USBD_StdItfReq+0x7e>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <USBD_StdItfReq+0x26>
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d12b      	bne.n	800a342 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d81d      	bhi.n	800a334 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	889b      	ldrh	r3, [r3, #4]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d813      	bhi.n	800a32a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	6839      	ldr	r1, [r7, #0]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	4798      	blx	r3
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	88db      	ldrh	r3, [r3, #6]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d110      	bne.n	800a33e <USBD_StdItfReq+0x7a>
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10d      	bne.n	800a33e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fd9d 	bl	800ae62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a328:	e009      	b.n	800a33e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fccd 	bl	800accc <USBD_CtlError>
          break;
 800a332:	e004      	b.n	800a33e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fcc8 	bl	800accc <USBD_CtlError>
          break;
 800a33c:	e000      	b.n	800a340 <USBD_StdItfReq+0x7c>
          break;
 800a33e:	bf00      	nop
      }
      break;
 800a340:	e004      	b.n	800a34c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 fcc1 	bl	800accc <USBD_CtlError>
      break;
 800a34a:	bf00      	nop
  }

  return ret;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	889b      	ldrh	r3, [r3, #4]
 800a368:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d007      	beq.n	800a386 <USBD_StdEPReq+0x30>
 800a376:	2b40      	cmp	r3, #64	; 0x40
 800a378:	f200 8145 	bhi.w	800a606 <USBD_StdEPReq+0x2b0>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00c      	beq.n	800a39a <USBD_StdEPReq+0x44>
 800a380:	2b20      	cmp	r3, #32
 800a382:	f040 8140 	bne.w	800a606 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]
      break;
 800a398:	e13a      	b.n	800a610 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	785b      	ldrb	r3, [r3, #1]
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d007      	beq.n	800a3b2 <USBD_StdEPReq+0x5c>
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	f300 8129 	bgt.w	800a5fa <USBD_StdEPReq+0x2a4>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d07f      	beq.n	800a4ac <USBD_StdEPReq+0x156>
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d03c      	beq.n	800a42a <USBD_StdEPReq+0xd4>
 800a3b0:	e123      	b.n	800a5fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d002      	beq.n	800a3c4 <USBD_StdEPReq+0x6e>
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d016      	beq.n	800a3f0 <USBD_StdEPReq+0x9a>
 800a3c2:	e02c      	b.n	800a41e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00d      	beq.n	800a3e6 <USBD_StdEPReq+0x90>
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	2b80      	cmp	r3, #128	; 0x80
 800a3ce:	d00a      	beq.n	800a3e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 f91b 	bl	800b610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3da:	2180      	movs	r1, #128	; 0x80
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 f917 	bl	800b610 <USBD_LL_StallEP>
 800a3e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3e4:	e020      	b.n	800a428 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fc6f 	bl	800accc <USBD_CtlError>
              break;
 800a3ee:	e01b      	b.n	800a428 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	885b      	ldrh	r3, [r3, #2]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10e      	bne.n	800a416 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00b      	beq.n	800a416 <USBD_StdEPReq+0xc0>
 800a3fe:	7bbb      	ldrb	r3, [r7, #14]
 800a400:	2b80      	cmp	r3, #128	; 0x80
 800a402:	d008      	beq.n	800a416 <USBD_StdEPReq+0xc0>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	88db      	ldrh	r3, [r3, #6]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 f8fd 	bl	800b610 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fd23 	bl	800ae62 <USBD_CtlSendStatus>

              break;
 800a41c:	e004      	b.n	800a428 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fc53 	bl	800accc <USBD_CtlError>
              break;
 800a426:	bf00      	nop
          }
          break;
 800a428:	e0ec      	b.n	800a604 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b02      	cmp	r3, #2
 800a434:	d002      	beq.n	800a43c <USBD_StdEPReq+0xe6>
 800a436:	2b03      	cmp	r3, #3
 800a438:	d016      	beq.n	800a468 <USBD_StdEPReq+0x112>
 800a43a:	e030      	b.n	800a49e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00d      	beq.n	800a45e <USBD_StdEPReq+0x108>
 800a442:	7bbb      	ldrb	r3, [r7, #14]
 800a444:	2b80      	cmp	r3, #128	; 0x80
 800a446:	d00a      	beq.n	800a45e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 f8df 	bl	800b610 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a452:	2180      	movs	r1, #128	; 0x80
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 f8db 	bl	800b610 <USBD_LL_StallEP>
 800a45a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a45c:	e025      	b.n	800a4aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fc33 	bl	800accc <USBD_CtlError>
              break;
 800a466:	e020      	b.n	800a4aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	885b      	ldrh	r3, [r3, #2]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d11b      	bne.n	800a4a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	4619      	mov	r1, r3
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 f8e5 	bl	800b64e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fcec 	bl	800ae62 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	4798      	blx	r3
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a49c:	e004      	b.n	800a4a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fc13 	bl	800accc <USBD_CtlError>
              break;
 800a4a6:	e000      	b.n	800a4aa <USBD_StdEPReq+0x154>
              break;
 800a4a8:	bf00      	nop
          }
          break;
 800a4aa:	e0ab      	b.n	800a604 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d002      	beq.n	800a4be <USBD_StdEPReq+0x168>
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d032      	beq.n	800a522 <USBD_StdEPReq+0x1cc>
 800a4bc:	e097      	b.n	800a5ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d007      	beq.n	800a4d4 <USBD_StdEPReq+0x17e>
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	2b80      	cmp	r3, #128	; 0x80
 800a4c8:	d004      	beq.n	800a4d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fbfd 	bl	800accc <USBD_CtlError>
                break;
 800a4d2:	e091      	b.n	800a5f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	da0b      	bge.n	800a4f4 <USBD_StdEPReq+0x19e>
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	e00b      	b.n	800a50c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4f4:	7bbb      	ldrb	r3, [r7, #14]
 800a4f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4413      	add	r3, r2
 800a50a:	3304      	adds	r3, #4
 800a50c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2202      	movs	r2, #2
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fc47 	bl	800adae <USBD_CtlSendData>
              break;
 800a520:	e06a      	b.n	800a5f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da11      	bge.n	800a54e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	f003 020f 	and.w	r2, r3, #15
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	440b      	add	r3, r1
 800a53c:	3324      	adds	r3, #36	; 0x24
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d117      	bne.n	800a574 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fbc0 	bl	800accc <USBD_CtlError>
                  break;
 800a54c:	e054      	b.n	800a5f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	f003 020f 	and.w	r2, r3, #15
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	440b      	add	r3, r1
 800a560:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d104      	bne.n	800a574 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fbad 	bl	800accc <USBD_CtlError>
                  break;
 800a572:	e041      	b.n	800a5f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	da0b      	bge.n	800a594 <USBD_StdEPReq+0x23e>
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	3310      	adds	r3, #16
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	4413      	add	r3, r2
 800a590:	3304      	adds	r3, #4
 800a592:	e00b      	b.n	800a5ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a594:	7bbb      	ldrb	r3, [r7, #14]
 800a596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <USBD_StdEPReq+0x264>
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
 800a5b6:	2b80      	cmp	r3, #128	; 0x80
 800a5b8:	d103      	bne.n	800a5c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e00e      	b.n	800a5e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f001 f860 	bl	800b68c <USBD_LL_IsStallEP>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e002      	b.n	800a5e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fbe1 	bl	800adae <USBD_CtlSendData>
              break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fb6b 	bl	800accc <USBD_CtlError>
              break;
 800a5f6:	bf00      	nop
          }
          break;
 800a5f8:	e004      	b.n	800a604 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 fb65 	bl	800accc <USBD_CtlError>
          break;
 800a602:	bf00      	nop
      }
      break;
 800a604:	e004      	b.n	800a610 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a606:	6839      	ldr	r1, [r7, #0]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fb5f 	bl	800accc <USBD_CtlError>
      break;
 800a60e:	bf00      	nop
  }

  return ret;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	0a1b      	lsrs	r3, r3, #8
 800a638:	b29b      	uxth	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b0e      	cmp	r3, #14
 800a63e:	f200 8152 	bhi.w	800a8e6 <USBD_GetDescriptor+0x2ca>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <USBD_GetDescriptor+0x2c>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a6b9 	.word	0x0800a6b9
 800a64c:	0800a6d1 	.word	0x0800a6d1
 800a650:	0800a711 	.word	0x0800a711
 800a654:	0800a8e7 	.word	0x0800a8e7
 800a658:	0800a8e7 	.word	0x0800a8e7
 800a65c:	0800a887 	.word	0x0800a887
 800a660:	0800a8b3 	.word	0x0800a8b3
 800a664:	0800a8e7 	.word	0x0800a8e7
 800a668:	0800a8e7 	.word	0x0800a8e7
 800a66c:	0800a8e7 	.word	0x0800a8e7
 800a670:	0800a8e7 	.word	0x0800a8e7
 800a674:	0800a8e7 	.word	0x0800a8e7
 800a678:	0800a8e7 	.word	0x0800a8e7
 800a67c:	0800a8e7 	.word	0x0800a8e7
 800a680:	0800a685 	.word	0x0800a685
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a696:	69db      	ldr	r3, [r3, #28]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	7c12      	ldrb	r2, [r2, #16]
 800a69c:	f107 0108 	add.w	r1, r7, #8
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4798      	blx	r3
 800a6a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6a6:	e126      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fb0e 	bl	800accc <USBD_CtlError>
        err++;
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b6:	e11e      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	7c12      	ldrb	r2, [r2, #16]
 800a6c4:	f107 0108 	add.w	r1, r7, #8
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4798      	blx	r3
 800a6cc:	60f8      	str	r0, [r7, #12]
      break;
 800a6ce:	e112      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	7c1b      	ldrb	r3, [r3, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10d      	bne.n	800a6f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e0:	f107 0208 	add.w	r2, r7, #8
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	4798      	blx	r3
 800a6e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	2202      	movs	r2, #2
 800a6f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6f2:	e100      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	f107 0208 	add.w	r2, r7, #8
 800a700:	4610      	mov	r0, r2
 800a702:	4798      	blx	r3
 800a704:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3301      	adds	r3, #1
 800a70a:	2202      	movs	r2, #2
 800a70c:	701a      	strb	r2, [r3, #0]
      break;
 800a70e:	e0f2      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	885b      	ldrh	r3, [r3, #2]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b05      	cmp	r3, #5
 800a718:	f200 80ac 	bhi.w	800a874 <USBD_GetDescriptor+0x258>
 800a71c:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_GetDescriptor+0x108>)
 800a71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a722:	bf00      	nop
 800a724:	0800a73d 	.word	0x0800a73d
 800a728:	0800a771 	.word	0x0800a771
 800a72c:	0800a7a5 	.word	0x0800a7a5
 800a730:	0800a7d9 	.word	0x0800a7d9
 800a734:	0800a80d 	.word	0x0800a80d
 800a738:	0800a841 	.word	0x0800a841
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00b      	beq.n	800a760 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	7c12      	ldrb	r2, [r2, #16]
 800a754:	f107 0108 	add.w	r1, r7, #8
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a75e:	e091      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fab2 	bl	800accc <USBD_CtlError>
            err++;
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	3301      	adds	r3, #1
 800a76c:	72fb      	strb	r3, [r7, #11]
          break;
 800a76e:	e089      	b.n	800a884 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	7c12      	ldrb	r2, [r2, #16]
 800a788:	f107 0108 	add.w	r1, r7, #8
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
 800a790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a792:	e077      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fa98 	bl	800accc <USBD_CtlError>
            err++;
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7a2:	e06f      	b.n	800a884 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	7c12      	ldrb	r2, [r2, #16]
 800a7bc:	f107 0108 	add.w	r1, r7, #8
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
 800a7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c6:	e05d      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa7e 	bl	800accc <USBD_CtlError>
            err++;
 800a7d0:	7afb      	ldrb	r3, [r7, #11]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d6:	e055      	b.n	800a884 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7c12      	ldrb	r2, [r2, #16]
 800a7f0:	f107 0108 	add.w	r1, r7, #8
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fa:	e043      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fa64 	bl	800accc <USBD_CtlError>
            err++;
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	3301      	adds	r3, #1
 800a808:	72fb      	strb	r3, [r7, #11]
          break;
 800a80a:	e03b      	b.n	800a884 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	7c12      	ldrb	r2, [r2, #16]
 800a824:	f107 0108 	add.w	r1, r7, #8
 800a828:	4610      	mov	r0, r2
 800a82a:	4798      	blx	r3
 800a82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82e:	e029      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fa4a 	bl	800accc <USBD_CtlError>
            err++;
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	3301      	adds	r3, #1
 800a83c:	72fb      	strb	r3, [r7, #11]
          break;
 800a83e:	e021      	b.n	800a884 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00b      	beq.n	800a864 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	7c12      	ldrb	r2, [r2, #16]
 800a858:	f107 0108 	add.w	r1, r7, #8
 800a85c:	4610      	mov	r0, r2
 800a85e:	4798      	blx	r3
 800a860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a862:	e00f      	b.n	800a884 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa30 	bl	800accc <USBD_CtlError>
            err++;
 800a86c:	7afb      	ldrb	r3, [r7, #11]
 800a86e:	3301      	adds	r3, #1
 800a870:	72fb      	strb	r3, [r7, #11]
          break;
 800a872:	e007      	b.n	800a884 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa28 	bl	800accc <USBD_CtlError>
          err++;
 800a87c:	7afb      	ldrb	r3, [r7, #11]
 800a87e:	3301      	adds	r3, #1
 800a880:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a882:	bf00      	nop
      }
      break;
 800a884:	e037      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	7c1b      	ldrb	r3, [r3, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a896:	f107 0208 	add.w	r2, r7, #8
 800a89a:	4610      	mov	r0, r2
 800a89c:	4798      	blx	r3
 800a89e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8a0:	e029      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 fa11 	bl	800accc <USBD_CtlError>
        err++;
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a8b0:	e021      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	7c1b      	ldrb	r3, [r3, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	f107 0208 	add.w	r2, r7, #8
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4798      	blx	r3
 800a8ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d4:	e00f      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9f7 	bl	800accc <USBD_CtlError>
        err++;
 800a8de:	7afb      	ldrb	r3, [r7, #11]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e4:	e007      	b.n	800a8f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f9ef 	bl	800accc <USBD_CtlError>
      err++;
 800a8ee:	7afb      	ldrb	r3, [r7, #11]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f4:	bf00      	nop
  }

  if (err != 0U)
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11e      	bne.n	800a93a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	88db      	ldrh	r3, [r3, #6]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d016      	beq.n	800a932 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a904:	893b      	ldrh	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00e      	beq.n	800a928 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	88da      	ldrh	r2, [r3, #6]
 800a90e:	893b      	ldrh	r3, [r7, #8]
 800a910:	4293      	cmp	r3, r2
 800a912:	bf28      	it	cs
 800a914:	4613      	movcs	r3, r2
 800a916:	b29b      	uxth	r3, r3
 800a918:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a91a:	893b      	ldrh	r3, [r7, #8]
 800a91c:	461a      	mov	r2, r3
 800a91e:	68f9      	ldr	r1, [r7, #12]
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fa44 	bl	800adae <USBD_CtlSendData>
 800a926:	e009      	b.n	800a93c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f9ce 	bl	800accc <USBD_CtlError>
 800a930:	e004      	b.n	800a93c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa95 	bl	800ae62 <USBD_CtlSendStatus>
 800a938:	e000      	b.n	800a93c <USBD_GetDescriptor+0x320>
    return;
 800a93a:	bf00      	nop
  }
}
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop

0800a944 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	889b      	ldrh	r3, [r3, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d131      	bne.n	800a9ba <USBD_SetAddress+0x76>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d12d      	bne.n	800a9ba <USBD_SetAddress+0x76>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	885b      	ldrh	r3, [r3, #2]
 800a962:	2b7f      	cmp	r3, #127	; 0x7f
 800a964:	d829      	bhi.n	800a9ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	885b      	ldrh	r3, [r3, #2]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a970:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d104      	bne.n	800a988 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f9a3 	bl	800accc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a986:	e01d      	b.n	800a9c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	7bfa      	ldrb	r2, [r7, #15]
 800a98c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fea6 	bl	800b6e6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fa61 	bl	800ae62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	e009      	b.n	800a9c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b8:	e004      	b.n	800a9c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f985 	bl	800accc <USBD_CtlError>
  }
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	885b      	ldrh	r3, [r3, #2]
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	4b4c      	ldr	r3, [pc, #304]	; (800ab14 <USBD_SetConfig+0x148>)
 800a9e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9e4:	4b4b      	ldr	r3, [pc, #300]	; (800ab14 <USBD_SetConfig+0x148>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d905      	bls.n	800a9f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f96c 	bl	800accc <USBD_CtlError>
    return USBD_FAIL;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e088      	b.n	800ab0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d002      	beq.n	800aa0a <USBD_SetConfig+0x3e>
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d025      	beq.n	800aa54 <USBD_SetConfig+0x88>
 800aa08:	e071      	b.n	800aaee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa0a:	4b42      	ldr	r3, [pc, #264]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d01c      	beq.n	800aa4c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aa12:	4b40      	ldr	r3, [pc, #256]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa1c:	4b3d      	ldr	r3, [pc, #244]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff f992 	bl	8009d4c <USBD_SetClassConfig>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f949 	bl	800accc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa3a:	e065      	b.n	800ab08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fa10 	bl	800ae62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2203      	movs	r2, #3
 800aa46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa4a:	e05d      	b.n	800ab08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa08 	bl	800ae62 <USBD_CtlSendStatus>
      break;
 800aa52:	e059      	b.n	800ab08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa54:	4b2f      	ldr	r3, [pc, #188]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d112      	bne.n	800aa82 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa64:	4b2b      	ldr	r3, [pc, #172]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff f985 	bl	8009d84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f9f1 	bl	800ae62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa80:	e042      	b.n	800ab08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aa82:	4b24      	ldr	r3, [pc, #144]	; (800ab14 <USBD_SetConfig+0x148>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d02a      	beq.n	800aae6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff f973 	bl	8009d84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	; (800ab14 <USBD_SetConfig+0x148>)
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	; (800ab14 <USBD_SetConfig+0x148>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff f94c 	bl	8009d4c <USBD_SetClassConfig>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00f      	beq.n	800aade <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f903 	bl	800accc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff f958 	bl	8009d84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aadc:	e014      	b.n	800ab08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f9bf 	bl	800ae62 <USBD_CtlSendStatus>
      break;
 800aae4:	e010      	b.n	800ab08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9bb 	bl	800ae62 <USBD_CtlSendStatus>
      break;
 800aaec:	e00c      	b.n	800ab08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f8eb 	bl	800accc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aaf6:	4b07      	ldr	r3, [pc, #28]	; (800ab14 <USBD_SetConfig+0x148>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff f941 	bl	8009d84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab02:	2303      	movs	r3, #3
 800ab04:	73fb      	strb	r3, [r7, #15]
      break;
 800ab06:	bf00      	nop
  }

  return ret;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000498 	.word	0x20000498

0800ab18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	88db      	ldrh	r3, [r3, #6]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d004      	beq.n	800ab34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f8cd 	bl	800accc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab32:	e023      	b.n	800ab7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	dc02      	bgt.n	800ab46 <USBD_GetConfig+0x2e>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	dc03      	bgt.n	800ab4c <USBD_GetConfig+0x34>
 800ab44:	e015      	b.n	800ab72 <USBD_GetConfig+0x5a>
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d00b      	beq.n	800ab62 <USBD_GetConfig+0x4a>
 800ab4a:	e012      	b.n	800ab72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3308      	adds	r3, #8
 800ab56:	2201      	movs	r2, #1
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f927 	bl	800adae <USBD_CtlSendData>
        break;
 800ab60:	e00c      	b.n	800ab7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3304      	adds	r3, #4
 800ab66:	2201      	movs	r2, #1
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f91f 	bl	800adae <USBD_CtlSendData>
        break;
 800ab70:	e004      	b.n	800ab7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8a9 	bl	800accc <USBD_CtlError>
        break;
 800ab7a:	bf00      	nop
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	3b01      	subs	r3, #1
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d81e      	bhi.n	800abda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	88db      	ldrh	r3, [r3, #6]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d004      	beq.n	800abae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f890 	bl	800accc <USBD_CtlError>
        break;
 800abac:	e01a      	b.n	800abe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f043 0202 	orr.w	r2, r3, #2
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	330c      	adds	r3, #12
 800abce:	2202      	movs	r2, #2
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f8eb 	bl	800adae <USBD_CtlSendData>
      break;
 800abd8:	e004      	b.n	800abe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f875 	bl	800accc <USBD_CtlError>
      break;
 800abe2:	bf00      	nop
  }
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d106      	bne.n	800ac0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2201      	movs	r2, #1
 800ac02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f92b 	bl	800ae62 <USBD_CtlSendStatus>
  }
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d80b      	bhi.n	800ac44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	885b      	ldrh	r3, [r3, #2]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d10c      	bne.n	800ac4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f910 	bl	800ae62 <USBD_CtlSendStatus>
      }
      break;
 800ac42:	e004      	b.n	800ac4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f840 	bl	800accc <USBD_CtlError>
      break;
 800ac4c:	e000      	b.n	800ac50 <USBD_ClrFeature+0x3c>
      break;
 800ac4e:	bf00      	nop
  }
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3301      	adds	r3, #1
 800ac72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f7ff fa92 	bl	800a1ac <SWAPBYTE>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7ff fa85 	bl	800a1ac <SWAPBYTE>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff fa78 	bl	800a1ac <SWAPBYTE>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	80da      	strh	r2, [r3, #6]
}
 800acc4:	bf00      	nop
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800acd6:	2180      	movs	r1, #128	; 0x80
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fc99 	bl	800b610 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800acde:	2100      	movs	r1, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc95 	bl	800b610 <USBD_LL_StallEP>
}
 800ace6:	bf00      	nop
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b086      	sub	sp, #24
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acfa:	2300      	movs	r3, #0
 800acfc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d036      	beq.n	800ad72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad08:	6938      	ldr	r0, [r7, #16]
 800ad0a:	f000 f836 	bl	800ad7a <USBD_GetLen>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	3301      	adds	r3, #1
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	4413      	add	r3, r2
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	7812      	ldrb	r2, [r2, #0]
 800ad26:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad2e:	7dfb      	ldrb	r3, [r7, #23]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	4413      	add	r3, r2
 800ad34:	2203      	movs	r2, #3
 800ad36:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ad3e:	e013      	b.n	800ad68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	4413      	add	r3, r2
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	7812      	ldrb	r2, [r2, #0]
 800ad4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	613b      	str	r3, [r7, #16]
    idx++;
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	3301      	adds	r3, #1
 800ad56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	701a      	strb	r2, [r3, #0]
    idx++;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	3301      	adds	r3, #1
 800ad66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e7      	bne.n	800ad40 <USBD_GetString+0x52>
 800ad70:	e000      	b.n	800ad74 <USBD_GetString+0x86>
    return;
 800ad72:	bf00      	nop
  }
}
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ad8a:	e005      	b.n	800ad98 <USBD_GetLen+0x1e>
  {
    len++;
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1f5      	bne.n	800ad8c <USBD_GetLen+0x12>
  }

  return len;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	2100      	movs	r1, #0
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 fca5 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	2100      	movs	r1, #0
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fc94 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2203      	movs	r2, #3
 800ae16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fc98 	bl	800b766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	2100      	movs	r1, #0
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f000 fc87 	bl	800b766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae72:	2300      	movs	r3, #0
 800ae74:	2200      	movs	r2, #0
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fc53 	bl	800b724 <USBD_LL_Transmit>

  return USBD_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2205      	movs	r2, #5
 800ae94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fc61 	bl	800b766 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
	...

0800aeb0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4912      	ldr	r1, [pc, #72]	; (800af00 <MX_USB_Device_Init+0x50>)
 800aeb8:	4812      	ldr	r0, [pc, #72]	; (800af04 <MX_USB_Device_Init+0x54>)
 800aeba:	f7fe fed9 	bl	8009c70 <USBD_Init>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800aec4:	f7f6 fb60 	bl	8001588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800aec8:	490f      	ldr	r1, [pc, #60]	; (800af08 <MX_USB_Device_Init+0x58>)
 800aeca:	480e      	ldr	r0, [pc, #56]	; (800af04 <MX_USB_Device_Init+0x54>)
 800aecc:	f7fe ff00 	bl	8009cd0 <USBD_RegisterClass>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800aed6:	f7f6 fb57 	bl	8001588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800aeda:	490c      	ldr	r1, [pc, #48]	; (800af0c <MX_USB_Device_Init+0x5c>)
 800aedc:	4809      	ldr	r0, [pc, #36]	; (800af04 <MX_USB_Device_Init+0x54>)
 800aede:	f7fe fe21 	bl	8009b24 <USBD_CDC_RegisterInterface>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d001      	beq.n	800aeec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800aee8:	f7f6 fb4e 	bl	8001588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800aeec:	4805      	ldr	r0, [pc, #20]	; (800af04 <MX_USB_Device_Init+0x54>)
 800aeee:	f7fe ff16 	bl	8009d1e <USBD_Start>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aef8:	f7f6 fb46 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aefc:	bf00      	nop
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20000130 	.word	0x20000130
 800af04:	2000049c 	.word	0x2000049c
 800af08:	20000018 	.word	0x20000018
 800af0c:	2000011c 	.word	0x2000011c

0800af10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800af14:	2200      	movs	r2, #0
 800af16:	4905      	ldr	r1, [pc, #20]	; (800af2c <CDC_Init_FS+0x1c>)
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <CDC_Init_FS+0x20>)
 800af1a:	f7fe fe18 	bl	8009b4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800af1e:	4905      	ldr	r1, [pc, #20]	; (800af34 <CDC_Init_FS+0x24>)
 800af20:	4803      	ldr	r0, [pc, #12]	; (800af30 <CDC_Init_FS+0x20>)
 800af22:	f7fe fe32 	bl	8009b8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800af26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800af28:	4618      	mov	r0, r3
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	20000b54 	.word	0x20000b54
 800af30:	2000049c 	.word	0x2000049c
 800af34:	2000076c 	.word	0x2000076c

0800af38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800af3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800af3e:	4618      	mov	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	6039      	str	r1, [r7, #0]
 800af52:	71fb      	strb	r3, [r7, #7]
 800af54:	4613      	mov	r3, r2
 800af56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	2b23      	cmp	r3, #35	; 0x23
 800af5c:	d84a      	bhi.n	800aff4 <CDC_Control_FS+0xac>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <CDC_Control_FS+0x1c>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800aff5 	.word	0x0800aff5
 800af68:	0800aff5 	.word	0x0800aff5
 800af6c:	0800aff5 	.word	0x0800aff5
 800af70:	0800aff5 	.word	0x0800aff5
 800af74:	0800aff5 	.word	0x0800aff5
 800af78:	0800aff5 	.word	0x0800aff5
 800af7c:	0800aff5 	.word	0x0800aff5
 800af80:	0800aff5 	.word	0x0800aff5
 800af84:	0800aff5 	.word	0x0800aff5
 800af88:	0800aff5 	.word	0x0800aff5
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800aff5 	.word	0x0800aff5
 800af94:	0800aff5 	.word	0x0800aff5
 800af98:	0800aff5 	.word	0x0800aff5
 800af9c:	0800aff5 	.word	0x0800aff5
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800aff5 	.word	0x0800aff5
 800afa8:	0800aff5 	.word	0x0800aff5
 800afac:	0800aff5 	.word	0x0800aff5
 800afb0:	0800aff5 	.word	0x0800aff5
 800afb4:	0800aff5 	.word	0x0800aff5
 800afb8:	0800aff5 	.word	0x0800aff5
 800afbc:	0800aff5 	.word	0x0800aff5
 800afc0:	0800aff5 	.word	0x0800aff5
 800afc4:	0800aff5 	.word	0x0800aff5
 800afc8:	0800aff5 	.word	0x0800aff5
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800aff5 	.word	0x0800aff5
 800afd8:	0800aff5 	.word	0x0800aff5
 800afdc:	0800aff5 	.word	0x0800aff5
 800afe0:	0800aff5 	.word	0x0800aff5
 800afe4:	0800aff5 	.word	0x0800aff5
 800afe8:	0800aff5 	.word	0x0800aff5
 800afec:	0800aff5 	.word	0x0800aff5
 800aff0:	0800aff5 	.word	0x0800aff5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aff4:	bf00      	nop
  }

  return (USBD_OK);
 800aff6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7f5 fc0f 	bl	8000834 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4805      	ldr	r0, [pc, #20]	; (800b030 <CDC_Receive_FS+0x2c>)
 800b01a:	f7fe fdb6 	bl	8009b8a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b01e:	4804      	ldr	r0, [pc, #16]	; (800b030 <CDC_Receive_FS+0x2c>)
 800b020:	f7fe fdfc 	bl	8009c1c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800b024:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000049c 	.word	0x2000049c

0800b034 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b044:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <CDC_Transmit_FS+0x48>)
 800b046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b04a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b056:	2301      	movs	r3, #1
 800b058:	e00b      	b.n	800b072 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b05a:	887b      	ldrh	r3, [r7, #2]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4806      	ldr	r0, [pc, #24]	; (800b07c <CDC_Transmit_FS+0x48>)
 800b062:	f7fe fd74 	bl	8009b4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b066:	4805      	ldr	r0, [pc, #20]	; (800b07c <CDC_Transmit_FS+0x48>)
 800b068:	f7fe fda8 	bl	8009bbc <USBD_CDC_TransmitPacket>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	2000049c 	.word	0x2000049c

0800b080 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b096:	4618      	mov	r0, r3
 800b098:	371c      	adds	r7, #28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
	...

0800b0a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	6039      	str	r1, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2212      	movs	r2, #18
 800b0b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b0b6:	4b03      	ldr	r3, [pc, #12]	; (800b0c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	20000150 	.word	0x20000150

0800b0c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2204      	movs	r2, #4
 800b0d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	20000164 	.word	0x20000164

0800b0ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6039      	str	r1, [r7, #0]
 800b0f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	4907      	ldr	r1, [pc, #28]	; (800b120 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b102:	4808      	ldr	r0, [pc, #32]	; (800b124 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b104:	f7ff fdf3 	bl	800acee <USBD_GetString>
 800b108:	e004      	b.n	800b114 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	4904      	ldr	r1, [pc, #16]	; (800b120 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b10e:	4805      	ldr	r0, [pc, #20]	; (800b124 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b110:	f7ff fded 	bl	800acee <USBD_GetString>
  }
  return USBD_StrDesc;
 800b114:	4b02      	ldr	r3, [pc, #8]	; (800b120 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000f3c 	.word	0x20000f3c
 800b124:	0800b95c 	.word	0x0800b95c

0800b128 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	6039      	str	r1, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	4904      	ldr	r1, [pc, #16]	; (800b148 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b138:	4804      	ldr	r0, [pc, #16]	; (800b14c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b13a:	f7ff fdd8 	bl	800acee <USBD_GetString>
  return USBD_StrDesc;
 800b13e:	4b02      	ldr	r3, [pc, #8]	; (800b148 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20000f3c 	.word	0x20000f3c
 800b14c:	0800b974 	.word	0x0800b974

0800b150 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	6039      	str	r1, [r7, #0]
 800b15a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	221a      	movs	r2, #26
 800b160:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b162:	f000 f843 	bl	800b1ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b166:	4b02      	ldr	r3, [pc, #8]	; (800b170 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20000168 	.word	0x20000168

0800b174 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	4603      	mov	r3, r0
 800b17c:	6039      	str	r1, [r7, #0]
 800b17e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d105      	bne.n	800b192 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	4907      	ldr	r1, [pc, #28]	; (800b1a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b18a:	4808      	ldr	r0, [pc, #32]	; (800b1ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b18c:	f7ff fdaf 	bl	800acee <USBD_GetString>
 800b190:	e004      	b.n	800b19c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	4904      	ldr	r1, [pc, #16]	; (800b1a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b196:	4805      	ldr	r0, [pc, #20]	; (800b1ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b198:	f7ff fda9 	bl	800acee <USBD_GetString>
  }
  return USBD_StrDesc;
 800b19c:	4b02      	ldr	r3, [pc, #8]	; (800b1a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000f3c 	.word	0x20000f3c
 800b1ac:	0800b988 	.word	0x0800b988

0800b1b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d105      	bne.n	800b1ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4907      	ldr	r1, [pc, #28]	; (800b1e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b1c6:	4808      	ldr	r0, [pc, #32]	; (800b1e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b1c8:	f7ff fd91 	bl	800acee <USBD_GetString>
 800b1cc:	e004      	b.n	800b1d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	4904      	ldr	r1, [pc, #16]	; (800b1e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b1d2:	4805      	ldr	r0, [pc, #20]	; (800b1e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b1d4:	f7ff fd8b 	bl	800acee <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000f3c 	.word	0x20000f3c
 800b1e8:	0800b994 	.word	0x0800b994

0800b1ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1f2:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <Get_SerialNum+0x44>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1f8:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <Get_SerialNum+0x48>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1fe:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <Get_SerialNum+0x4c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4413      	add	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b212:	2208      	movs	r2, #8
 800b214:	4909      	ldr	r1, [pc, #36]	; (800b23c <Get_SerialNum+0x50>)
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 f814 	bl	800b244 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b21c:	2204      	movs	r2, #4
 800b21e:	4908      	ldr	r1, [pc, #32]	; (800b240 <Get_SerialNum+0x54>)
 800b220:	68b8      	ldr	r0, [r7, #8]
 800b222:	f000 f80f 	bl	800b244 <IntToUnicode>
  }
}
 800b226:	bf00      	nop
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	1fff7590 	.word	0x1fff7590
 800b234:	1fff7594 	.word	0x1fff7594
 800b238:	1fff7598 	.word	0x1fff7598
 800b23c:	2000016a 	.word	0x2000016a
 800b240:	2000017a 	.word	0x2000017a

0800b244 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	4613      	mov	r3, r2
 800b250:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b256:	2300      	movs	r3, #0
 800b258:	75fb      	strb	r3, [r7, #23]
 800b25a:	e027      	b.n	800b2ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	0f1b      	lsrs	r3, r3, #28
 800b260:	2b09      	cmp	r3, #9
 800b262:	d80b      	bhi.n	800b27c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	0f1b      	lsrs	r3, r3, #28
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4619      	mov	r1, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	440b      	add	r3, r1
 800b274:	3230      	adds	r2, #48	; 0x30
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e00a      	b.n	800b292 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	0f1b      	lsrs	r3, r3, #28
 800b280:	b2da      	uxtb	r2, r3
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	4619      	mov	r1, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	440b      	add	r3, r1
 800b28c:	3237      	adds	r2, #55	; 0x37
 800b28e:	b2d2      	uxtb	r2, r2
 800b290:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	011b      	lsls	r3, r3, #4
 800b296:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	3301      	adds	r3, #1
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
 800b2ac:	7dfa      	ldrb	r2, [r7, #23]
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d3d3      	bcc.n	800b25c <IntToUnicode+0x18>
  }
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b094      	sub	sp, #80	; 0x50
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b2cc:	f107 030c 	add.w	r3, r7, #12
 800b2d0:	2244      	movs	r2, #68	; 0x44
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f000 fb2d 	bl	800b934 <memset>
  if(pcdHandle->Instance==USB)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a15      	ldr	r2, [pc, #84]	; (800b334 <HAL_PCD_MspInit+0x70>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d122      	bne.n	800b32a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b2e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b2ee:	f107 030c 	add.w	r3, r7, #12
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f9 fce8 	bl	8004cc8 <HAL_RCCEx_PeriphCLKConfig>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b2fe:	f7f6 f943 	bl	8001588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b302:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <HAL_PCD_MspInit+0x74>)
 800b304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b306:	4a0c      	ldr	r2, [pc, #48]	; (800b338 <HAL_PCD_MspInit+0x74>)
 800b308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b30c:	6593      	str	r3, [r2, #88]	; 0x58
 800b30e:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <HAL_PCD_MspInit+0x74>)
 800b310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b316:	60bb      	str	r3, [r7, #8]
 800b318:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b31a:	2200      	movs	r2, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	2014      	movs	r0, #20
 800b320:	f7f6 fd3b 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b324:	2014      	movs	r0, #20
 800b326:	f7f6 fd52 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b32a:	bf00      	nop
 800b32c:	3750      	adds	r7, #80	; 0x50
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40005c00 	.word	0x40005c00
 800b338:	40021000 	.word	0x40021000

0800b33c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f7fe fd2e 	bl	8009db4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	6879      	ldr	r1, [r7, #4]
 800b376:	4613      	mov	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4413      	add	r3, r2
 800b37c:	00db      	lsls	r3, r3, #3
 800b37e:	440b      	add	r3, r1
 800b380:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	78fb      	ldrb	r3, [r7, #3]
 800b388:	4619      	mov	r1, r3
 800b38a:	f7fe fd68 	bl	8009e5e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b3a8:	78fa      	ldrb	r2, [r7, #3]
 800b3aa:	6879      	ldr	r1, [r7, #4]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	440b      	add	r3, r1
 800b3b6:	333c      	adds	r3, #60	; 0x3c
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	f7fe fdb1 	bl	8009f24 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fec5 	bl	800a168 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d001      	beq.n	800b3fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b3fa:	f7f6 f8c5 	bl	8001588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b404:	7bfa      	ldrb	r2, [r7, #15]
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fe fe6f 	bl	800a0ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fe1b 	bl	800a050 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b41a:	bf00      	nop
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fe6a 	bl	800a10c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d005      	beq.n	800b44c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <HAL_PCD_SuspendCallback+0x30>)
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	4a03      	ldr	r2, [pc, #12]	; (800b454 <HAL_PCD_SuspendCallback+0x30>)
 800b446:	f043 0306 	orr.w	r3, r3, #6
 800b44a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	e000ed00 	.word	0xe000ed00

0800b458 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d007      	beq.n	800b478 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b468:	4b08      	ldr	r3, [pc, #32]	; (800b48c <HAL_PCD_ResumeCallback+0x34>)
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	4a07      	ldr	r2, [pc, #28]	; (800b48c <HAL_PCD_ResumeCallback+0x34>)
 800b46e:	f023 0306 	bic.w	r3, r3, #6
 800b472:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b474:	f000 f9fa 	bl	800b86c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fe5a 	bl	800a138 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	e000ed00 	.word	0xe000ed00

0800b490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b498:	4a2b      	ldr	r2, [pc, #172]	; (800b548 <USBD_LL_Init+0xb8>)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a29      	ldr	r2, [pc, #164]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b4a8:	4b27      	ldr	r3, [pc, #156]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4aa:	4a28      	ldr	r2, [pc, #160]	; (800b54c <USBD_LL_Init+0xbc>)
 800b4ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b4ae:	4b26      	ldr	r3, [pc, #152]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4b0:	2208      	movs	r2, #8
 800b4b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b4b4:	4b24      	ldr	r3, [pc, #144]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b4ba:	4b23      	ldr	r3, [pc, #140]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4bc:	2202      	movs	r2, #2
 800b4be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b4c0:	4b21      	ldr	r3, [pc, #132]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b4c6:	4b20      	ldr	r3, [pc, #128]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b4cc:	4b1e      	ldr	r3, [pc, #120]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b4d2:	4b1d      	ldr	r3, [pc, #116]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b4d8:	481b      	ldr	r0, [pc, #108]	; (800b548 <USBD_LL_Init+0xb8>)
 800b4da:	f7f7 f921 	bl	8002720 <HAL_PCD_Init>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b4e4:	f7f6 f850 	bl	8001588 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4ee:	2318      	movs	r3, #24
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	f7f8 fdda 	bl	80040ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b4fe:	2358      	movs	r3, #88	; 0x58
 800b500:	2200      	movs	r2, #0
 800b502:	2180      	movs	r1, #128	; 0x80
 800b504:	f7f8 fdd2 	bl	80040ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b50e:	23c0      	movs	r3, #192	; 0xc0
 800b510:	2200      	movs	r2, #0
 800b512:	2181      	movs	r1, #129	; 0x81
 800b514:	f7f8 fdca 	bl	80040ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b51e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b522:	2200      	movs	r2, #0
 800b524:	2101      	movs	r1, #1
 800b526:	f7f8 fdc1 	bl	80040ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b534:	2200      	movs	r2, #0
 800b536:	2182      	movs	r1, #130	; 0x82
 800b538:	f7f8 fdb8 	bl	80040ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	2000113c 	.word	0x2000113c
 800b54c:	40005c00 	.word	0x40005c00

0800b550 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b566:	4618      	mov	r0, r3
 800b568:	f7f7 f9bf 	bl	80028ea <HAL_PCD_Start>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	4618      	mov	r0, r3
 800b574:	f000 f980 	bl	800b878 <USBD_Get_USB_Status>
 800b578:	4603      	mov	r3, r0
 800b57a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	4608      	mov	r0, r1
 800b590:	4611      	mov	r1, r2
 800b592:	461a      	mov	r2, r3
 800b594:	4603      	mov	r3, r0
 800b596:	70fb      	strb	r3, [r7, #3]
 800b598:	460b      	mov	r3, r1
 800b59a:	70bb      	strb	r3, [r7, #2]
 800b59c:	4613      	mov	r3, r2
 800b59e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5ae:	78bb      	ldrb	r3, [r7, #2]
 800b5b0:	883a      	ldrh	r2, [r7, #0]
 800b5b2:	78f9      	ldrb	r1, [r7, #3]
 800b5b4:	f7f7 fb07 	bl	8002bc6 <HAL_PCD_EP_Open>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 f95a 	bl	800b878 <USBD_Get_USB_Status>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5ec:	78fa      	ldrb	r2, [r7, #3]
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7f7 fb4e 	bl	8002c92 <HAL_PCD_EP_Close>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 f93b 	bl	800b878 <USBD_Get_USB_Status>
 800b602:	4603      	mov	r3, r0
 800b604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b606:	7bbb      	ldrb	r3, [r7, #14]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f7 fc0f 	bl	8002e52 <HAL_PCD_EP_SetStall>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 f91c 	bl	800b878 <USBD_Get_USB_Status>
 800b640:	4603      	mov	r3, r0
 800b642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b644:	7bbb      	ldrb	r3, [r7, #14]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b668:	78fa      	ldrb	r2, [r7, #3]
 800b66a:	4611      	mov	r1, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f7 fc42 	bl	8002ef6 <HAL_PCD_EP_ClrStall>
 800b672:	4603      	mov	r3, r0
 800b674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 f8fd 	bl	800b878 <USBD_Get_USB_Status>
 800b67e:	4603      	mov	r3, r0
 800b680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b682:	7bbb      	ldrb	r3, [r7, #14]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b69e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	da0c      	bge.n	800b6c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ae:	68f9      	ldr	r1, [r7, #12]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	440b      	add	r3, r1
 800b6bc:	3302      	adds	r3, #2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	e00b      	b.n	800b6da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6c2:	78fb      	ldrb	r3, [r7, #3]
 800b6c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6c8:	68f9      	ldr	r1, [r7, #12]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	440b      	add	r3, r1
 800b6d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b6d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f7f7 fa39 	bl	8002b7c <HAL_PCD_SetAddress>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 f8b1 	bl	800b878 <USBD_Get_USB_Status>
 800b716:	4603      	mov	r3, r0
 800b718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	607a      	str	r2, [r7, #4]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	460b      	mov	r3, r1
 800b732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b742:	7af9      	ldrb	r1, [r7, #11]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	f7f7 fb40 	bl	8002dcc <HAL_PCD_EP_Transmit>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f890 	bl	800b878 <USBD_Get_USB_Status>
 800b758:	4603      	mov	r3, r0
 800b75a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b75c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b086      	sub	sp, #24
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
 800b772:	460b      	mov	r3, r1
 800b774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b784:	7af9      	ldrb	r1, [r7, #11]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	f7f7 faca 	bl	8002d22 <HAL_PCD_EP_Receive>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f86f 	bl	800b878 <USBD_Get_USB_Status>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b79e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7ba:	78fa      	ldrb	r2, [r7, #3]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7f7 faec 	bl	8002d9c <HAL_PCD_EP_GetRxCount>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <HAL_PCDEx_LPM_Callback+0x18>
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d013      	beq.n	800b80e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b7e6:	e023      	b.n	800b830 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b7f0:	f000 f83c 	bl	800b86c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7f4:	4b10      	ldr	r3, [pc, #64]	; (800b838 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	4a0f      	ldr	r2, [pc, #60]	; (800b838 <HAL_PCDEx_LPM_Callback+0x68>)
 800b7fa:	f023 0306 	bic.w	r3, r3, #6
 800b7fe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fc96 	bl	800a138 <USBD_LL_Resume>
    break;
 800b80c:	e010      	b.n	800b830 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fc79 	bl	800a10c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <HAL_PCDEx_LPM_Callback+0x68>)
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	4a04      	ldr	r2, [pc, #16]	; (800b838 <HAL_PCDEx_LPM_Callback+0x68>)
 800b828:	f043 0306 	orr.w	r3, r3, #6
 800b82c:	6113      	str	r3, [r2, #16]
    break;
 800b82e:	bf00      	nop
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	e000ed00 	.word	0xe000ed00

0800b83c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b844:	4b03      	ldr	r3, [pc, #12]	; (800b854 <USBD_static_malloc+0x18>)
}
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20001430 	.word	0x20001430

0800b858 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]

}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b870:	f7f5 fabe 	bl	8000df0 <SystemClock_Config>
}
 800b874:	bf00      	nop
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d817      	bhi.n	800b8bc <USBD_Get_USB_Status+0x44>
 800b88c:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <USBD_Get_USB_Status+0x1c>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8a5 	.word	0x0800b8a5
 800b898:	0800b8ab 	.word	0x0800b8ab
 800b89c:	0800b8b1 	.word	0x0800b8b1
 800b8a0:	0800b8b7 	.word	0x0800b8b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a8:	e00b      	b.n	800b8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ae:	e008      	b.n	800b8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8b4:	e005      	b.n	800b8c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ba:	e002      	b.n	800b8c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c0:	bf00      	nop
  }
  return usb_status;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <__libc_init_array>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	4d0d      	ldr	r5, [pc, #52]	; (800b908 <__libc_init_array+0x38>)
 800b8d4:	4c0d      	ldr	r4, [pc, #52]	; (800b90c <__libc_init_array+0x3c>)
 800b8d6:	1b64      	subs	r4, r4, r5
 800b8d8:	10a4      	asrs	r4, r4, #2
 800b8da:	2600      	movs	r6, #0
 800b8dc:	42a6      	cmp	r6, r4
 800b8de:	d109      	bne.n	800b8f4 <__libc_init_array+0x24>
 800b8e0:	4d0b      	ldr	r5, [pc, #44]	; (800b910 <__libc_init_array+0x40>)
 800b8e2:	4c0c      	ldr	r4, [pc, #48]	; (800b914 <__libc_init_array+0x44>)
 800b8e4:	f000 f82e 	bl	800b944 <_init>
 800b8e8:	1b64      	subs	r4, r4, r5
 800b8ea:	10a4      	asrs	r4, r4, #2
 800b8ec:	2600      	movs	r6, #0
 800b8ee:	42a6      	cmp	r6, r4
 800b8f0:	d105      	bne.n	800b8fe <__libc_init_array+0x2e>
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f8:	4798      	blx	r3
 800b8fa:	3601      	adds	r6, #1
 800b8fc:	e7ee      	b.n	800b8dc <__libc_init_array+0xc>
 800b8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b902:	4798      	blx	r3
 800b904:	3601      	adds	r6, #1
 800b906:	e7f2      	b.n	800b8ee <__libc_init_array+0x1e>
 800b908:	0800b9b4 	.word	0x0800b9b4
 800b90c:	0800b9b4 	.word	0x0800b9b4
 800b910:	0800b9b4 	.word	0x0800b9b4
 800b914:	0800b9b8 	.word	0x0800b9b8

0800b918 <memcpy>:
 800b918:	440a      	add	r2, r1
 800b91a:	4291      	cmp	r1, r2
 800b91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b920:	d100      	bne.n	800b924 <memcpy+0xc>
 800b922:	4770      	bx	lr
 800b924:	b510      	push	{r4, lr}
 800b926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b92e:	4291      	cmp	r1, r2
 800b930:	d1f9      	bne.n	800b926 <memcpy+0xe>
 800b932:	bd10      	pop	{r4, pc}

0800b934 <memset>:
 800b934:	4402      	add	r2, r0
 800b936:	4603      	mov	r3, r0
 800b938:	4293      	cmp	r3, r2
 800b93a:	d100      	bne.n	800b93e <memset+0xa>
 800b93c:	4770      	bx	lr
 800b93e:	f803 1b01 	strb.w	r1, [r3], #1
 800b942:	e7f9      	b.n	800b938 <memset+0x4>

0800b944 <_init>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr

0800b950 <_fini>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	bf00      	nop
 800b954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b956:	bc08      	pop	{r3}
 800b958:	469e      	mov	lr, r3
 800b95a:	4770      	bx	lr
