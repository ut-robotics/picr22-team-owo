
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800abf0  0800abf0  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abf0  0800abf0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800abf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000194  0800ad8c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800ad8c  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ec  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000362c  00000000  00000000  000368b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00039ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001666f  00000000  00000000  0005d08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6571  00000000  00000000  000736fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005184  00000000  00000000  00139cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab80 	.word	0x0800ab80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	0800ab80 	.word	0x0800ab80

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2iz>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d215      	bcs.n	800081a <__aeabi_d2iz+0x36>
 80007ee:	d511      	bpl.n	8000814 <__aeabi_d2iz+0x30>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d912      	bls.n	8000820 <__aeabi_d2iz+0x3c>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080a:	fa23 f002 	lsr.w	r0, r3, r2
 800080e:	bf18      	it	ne
 8000810:	4240      	negne	r0, r0
 8000812:	4770      	bx	lr
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	4770      	bx	lr
 800081a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800081e:	d105      	bne.n	800082c <__aeabi_d2iz+0x48>
 8000820:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000824:	bf08      	it	eq
 8000826:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800082a:	4770      	bx	lr
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <clamp>:

volatile uint8_t isCommandReceived = 0;

volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
 800083e:	460b      	mov	r3, r1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	429a      	cmp	r2, r3
 800084c:	d901      	bls.n	8000852 <clamp+0x1e>
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	e006      	b.n	8000860 <clamp+0x2c>
	else if (value < min) {return min;}
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	88bb      	ldrh	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d201      	bcs.n	800085e <clamp+0x2a>
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	e000      	b.n	8000860 <clamp+0x2c>
	return value;
 800085e:	88fb      	ldrh	r3, [r7, #6]
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b0e      	cmp	r3, #14
 800087c:	d110      	bne.n	80008a0 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 800087e:	220e      	movs	r2, #14
 8000880:	6879      	ldr	r1, [r7, #4]
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <CDC_On_Receive+0x3c>)
 8000884:	f00a f966 	bl	800ab54 <memcpy>
    if (command.delimiter == 0xAAAA) {
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <CDC_On_Receive+0x3c>)
 800088a:	899b      	ldrh	r3, [r3, #12]
 800088c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <CDC_On_Receive+0x40>)
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <CDC_On_Receive+0x44>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	2000040c 	.word	0x2000040c
 80008b0:	2000040e 	.word	0x2000040e

080008b4 <enc_init>:

// Initialises the encoders
void enc_init() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 80008b8:	2104      	movs	r1, #4
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <enc_init+0x20>)
 80008bc:	f004 fbc8 	bl	8005050 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80008c0:	2104      	movs	r1, #4
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <enc_init+0x24>)
 80008c4:	f004 fbc4 	bl	8005050 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80008c8:	2104      	movs	r1, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <enc_init+0x28>)
 80008cc:	f004 fbc0 	bl	8005050 <HAL_TIM_Encoder_Start>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000294 	.word	0x20000294
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	20000248 	.word	0x20000248

080008e0 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <pwm_init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <pwm_init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <pwm_init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80008f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fa:	f241 3233 	movw	r2, #4915	; 0x1333
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <pwm_init+0x68>)
 8000902:	f241 320b 	movw	r2, #4875	; 0x130b
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <pwm_init+0x68>)
 800090a:	f641 0206 	movw	r2, #6150	; 0x1806
 800090e:	639a      	str	r2, [r3, #56]	; 0x38

	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 30);
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <pwm_init+0x6c>)
 8000914:	f004 f9f6 	bl	8004d04 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <pwm_init+0x6c>)
 800091c:	f005 fa8e 	bl	8005e3c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <pwm_init+0x6c>)
 8000924:	f005 fa8a 	bl	8005e3c <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <pwm_init+0x70>)
 800092c:	f004 f9ea 	bl	8004d04 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000930:	2100      	movs	r1, #0
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <pwm_init+0x74>)
 8000934:	f004 f9e6 	bl	8004d04 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000938:	2104      	movs	r1, #4
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <pwm_init+0x74>)
 800093c:	f004 f9e2 	bl	8004d04 <HAL_TIM_PWM_Start>
    //TIM15->CCR1 = 32000;
    //HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013400 	.word	0x40013400
 8000948:	40014000 	.word	0x40014000
 800094c:	2000032c 	.word	0x2000032c
 8000950:	200001fc 	.word	0x200001fc
 8000954:	20000378 	.word	0x20000378

08000958 <motor_status_update>:

// Updates the motor's speed and direction from the command struct
void motor_status_update() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	e053      	b.n	8000a0c <motor_status_update+0xb4>
		if (command.speed[i] >= 0) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <motor_status_update+0xc8>)
 8000968:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db23      	blt.n	80009b8 <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	492c      	ldr	r1, [pc, #176]	; (8000a24 <motor_status_update+0xcc>)
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	3302      	adds	r3, #2
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <motor_status_update+0xc8>)
 8000988:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d104      	bne.n	800099a <motor_status_update+0x42>
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <motor_status_update+0xc8>)
 8000994:	2102      	movs	r1, #2
 8000996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <motor_status_update+0xc8>)
 800099e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	b298      	uxth	r0, r3
 80009a6:	491f      	ldr	r1, [pc, #124]	; (8000a24 <motor_status_update+0xcc>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	4602      	mov	r2, r0
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e026      	b.n	8000a06 <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	491a      	ldr	r1, [pc, #104]	; (8000a24 <motor_status_update+0xcc>)
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	3302      	adds	r3, #2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <motor_status_update+0xc8>)
 80009d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d105      	bne.n	80009e6 <motor_status_update+0x8e>
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <motor_status_update+0xc8>)
 80009de:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80009e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <motor_status_update+0xc8>)
 80009ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	425b      	negs	r3, r3
 80009f4:	b298      	uxth	r0, r3
 80009f6:	490b      	ldr	r1, [pc, #44]	; (8000a24 <motor_status_update+0xcc>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	4602      	mov	r2, r0
 8000a04:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d9a8      	bls.n	8000964 <motor_status_update+0xc>
		}
	}
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200003c4 	.word	0x200003c4

08000a28 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	496a      	ldr	r1, [pc, #424]	; (8000be0 <motor_pwm+0x1b8>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d00e      	beq.n	8000a70 <motor_pwm+0x48>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	dc10      	bgt.n	8000a78 <motor_pwm+0x50>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <motor_pwm+0x38>
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d004      	beq.n	8000a68 <motor_pwm+0x40>
 8000a5e:	e00b      	b.n	8000a78 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 8000a60:	4b60      	ldr	r3, [pc, #384]	; (8000be4 <motor_pwm+0x1bc>)
 8000a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a64:	82bb      	strh	r3, [r7, #20]
			break;
 8000a66:	e007      	b.n	8000a78 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000a68:	4b5f      	ldr	r3, [pc, #380]	; (8000be8 <motor_pwm+0x1c0>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	82bb      	strh	r3, [r7, #20]
			break;
 8000a6e:	e003      	b.n	8000a78 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 8000a70:	4b5e      	ldr	r3, [pc, #376]	; (8000bec <motor_pwm+0x1c4>)
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	82bb      	strh	r3, [r7, #20]
			break;
 8000a76:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000a78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	4957      	ldr	r1, [pc, #348]	; (8000be0 <motor_pwm+0x1b8>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a92:	1ac3      	subs	r3, r0, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfb8      	it	lt
 8000a98:	425b      	neglt	r3, r3
 8000a9a:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000aa2:	494f      	ldr	r1, [pc, #316]	; (8000be0 <motor_pwm+0x1b8>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	440b      	add	r3, r1
 8000aae:	3304      	adds	r3, #4
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	801a      	strh	r2, [r3, #0]
	} else if (pos_change > speed*0.6) {
		motor_status[mot_id].enc_change = pos_change;
	}*/

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <motor_pwm+0x1b8>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d111      	bne.n	8000ae0 <motor_pwm+0xb8>
 8000abc:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <motor_pwm+0x1b8>)
 8000abe:	8b1b      	ldrh	r3, [r3, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10d      	bne.n	8000ae0 <motor_pwm+0xb8>
 8000ac4:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <motor_pwm+0x1b8>)
 8000ac6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <motor_pwm+0xb8>
		motor_status[mot_id].integral = 0;
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	4944      	ldr	r1, [pc, #272]	; (8000be0 <motor_pwm+0x1b8>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	3308      	adds	r3, #8
 8000adc:	2200      	movs	r2, #0
 8000ade:	801a      	strh	r2, [r3, #0]
	}

	int16_t error = speed - motor_status[mot_id].enc_change;
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	493f      	ldr	r1, [pc, #252]	; (8000be0 <motor_pwm+0x1b8>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	3306      	adds	r3, #6
 8000af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	8a3a      	ldrh	r2, [r7, #16]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	81bb      	strh	r3, [r7, #12]

	motor_status[mot_id].integral += error;
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	4937      	ldr	r1, [pc, #220]	; (8000be0 <motor_pwm+0x1b8>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	89bb      	ldrh	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	b218      	sxth	r0, r3
 8000b1e:	4930      	ldr	r1, [pc, #192]	; (8000be0 <motor_pwm+0x1b8>)
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	440b      	add	r3, r1
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].integral = 0;
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	492b      	ldr	r1, [pc, #172]	; (8000be0 <motor_pwm+0x1b8>)
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3308      	adds	r3, #8
 8000b40:	2200      	movs	r2, #0
 8000b42:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = error * 5 + (int16_t)(motor_status[mot_id].integral * 0.1);
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	461a      	mov	r2, r3
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29c      	uxth	r4, r3
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	4923      	ldr	r1, [pc, #140]	; (8000be0 <motor_pwm+0x1b8>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3308      	adds	r3, #8
 8000b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdd4 	bl	8000710 <__aeabi_i2d>
 8000b68:	a31b      	add	r3, pc, #108	; (adr r3, 8000bd8 <motor_pwm+0x1b0>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f7ff fb53 	bl	8000218 <__aeabi_dmul>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff fe33 	bl	80007e4 <__aeabi_d2iz>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4423      	add	r3, r4
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {
 8000b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da01      	bge.n	8000b96 <motor_pwm+0x16e>
		pid_speed = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	827b      	strh	r3, [r7, #18]
	}

	if (speed > 0) {
 8000b96:	8a3b      	ldrh	r3, [r7, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d011      	beq.n	8000bc0 <motor_pwm+0x198>
		pwm = 4500 + pid_speed * 700; // Effectively linear
 8000b9c:	8a7b      	ldrh	r3, [r7, #18]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	0091      	lsls	r1, r2, #2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	460b      	mov	r3, r1
 8000bac:	4413      	add	r3, r2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	00d2      	lsls	r2, r2, #3
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8000bbc:	3314      	adds	r3, #20
 8000bbe:	82fb      	strh	r3, [r7, #22]
	}

	if (pwm > 49151) { // emergency limiter, set to 75% currently (49151)
 8000bc0:	8afb      	ldrh	r3, [r7, #22]
 8000bc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000bc6:	d302      	bcc.n	8000bce <motor_pwm+0x1a6>
		pwm = 49151;
 8000bc8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000bcc:	82fb      	strh	r3, [r7, #22]
	}

	return pwm;
 8000bce:	8afb      	ldrh	r3, [r7, #22]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	9999999a 	.word	0x9999999a
 8000bdc:	3fb99999 	.word	0x3fb99999
 8000be0:	200003c4 	.word	0x200003c4
 8000be4:	40000400 	.word	0x40000400
 8000be8:	40012c00 	.word	0x40012c00
 8000bec:	40000800 	.word	0x40000800

08000bf0 <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d018      	beq.n	8000c32 <motor_direction+0x42>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	dc1f      	bgt.n	8000c44 <motor_direction+0x54>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <motor_direction+0x1e>
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d009      	beq.n	8000c20 <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000c0c:	e01a      	b.n	8000c44 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <motor_direction+0x5c>)
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	461a      	mov	r2, r3
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f001 fa7d 	bl	8002118 <HAL_GPIO_WritePin>
			break;
 8000c1e:	e011      	b.n	8000c44 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <motor_direction+0x5c>)
 8000c22:	7e9b      	ldrb	r3, [r3, #26]
 8000c24:	461a      	mov	r2, r3
 8000c26:	2120      	movs	r1, #32
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2c:	f001 fa74 	bl	8002118 <HAL_GPIO_WritePin>
			break;
 8000c30:	e008      	b.n	8000c44 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <motor_direction+0x5c>)
 8000c34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <motor_direction+0x60>)
 8000c3e:	f001 fa6b 	bl	8002118 <HAL_GPIO_WritePin>
			break;
 8000c42:	bf00      	nop
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200003c4 	.word	0x200003c4
 8000c50:	48000400 	.word	0x48000400

08000c54 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <wake_drivers_up+0x58>)
 8000c60:	f001 fa5a 	bl	8002118 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000c64:	2300      	movs	r3, #0
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	e003      	b.n	8000c72 <wake_drivers_up+0x1e>
 8000c6a:	bf00      	nop
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c78:	d3f7      	bcc.n	8000c6a <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <wake_drivers_up+0x58>)
 8000c80:	f001 fa4a 	bl	8002118 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 8000c84:	2300      	movs	r3, #0
 8000c86:	80bb      	strh	r3, [r7, #4]
 8000c88:	e003      	b.n	8000c92 <wake_drivers_up+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	80bb      	strh	r3, [r7, #4]
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000c98:	d3f7      	bcc.n	8000c8a <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <wake_drivers_up+0x58>)
 8000ca0:	f001 fa3a 	bl	8002118 <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	48000400 	.word	0x48000400

08000cb0 <thrower_pwm>:
// Currently abandoned.
void thrower_pwm(uint16_t thrower_speed) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);					// Stop transmitting previous thrower value
	return;
 8000cba:	bf00      	nop
			thrower_data[15-i] = 399;
		}
	}
	//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	//HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)thrower_data, 20); // Each pulse draws takes its length from array
}
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <HAL_TIM_PeriodElapsedCallback>:

// 100 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!

	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000cd0:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	2b31      	cmp	r3, #49	; 0x31
 8000cd8:	d912      	bls.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf0:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000cf8:	f241 320b 	movw	r2, #4875	; 0x130b
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8000cfe:	e04c      	b.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fe91 	bl	8000a28 <motor_pwm>
 8000d06:	4603      	mov	r3, r0
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fe8a 	bl	8000a28 <motor_pwm>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fe83 	bl	8000a28 <motor_pwm>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff ff60 	bl	8000bf0 <motor_direction>
	motor_direction(1); // Motor 2
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff ff5d 	bl	8000bf0 <motor_direction>
	motor_direction(2); // Motor 3
 8000d36:	2002      	movs	r0, #2
 8000d38:	f7ff ff5a 	bl	8000bf0 <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d3e:	88db      	ldrh	r3, [r3, #6]
 8000d40:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d44:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fd73 	bl	8000834 <clamp>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d5a:	891b      	ldrh	r3, [r3, #8]
 8000d5c:	f641 129a 	movw	r2, #6554	; 0x199a
 8000d60:	f640 41cd 	movw	r1, #3277	; 0xccd
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fd65 	bl	8000834 <clamp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000d74:	895b      	ldrh	r3, [r3, #10]
 8000d76:	f641 0206 	movw	r2, #6150	; 0x1806
 8000d7a:	f241 215c 	movw	r1, #4700	; 0x125c
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd58 	bl	8000834 <clamp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000d8a:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	3301      	adds	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000d98:	801a      	strh	r2, [r3, #0]
}
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000040e 	.word	0x2000040e
 8000da4:	40013400 	.word	0x40013400
 8000da8:	40014000 	.word	0x40014000
 8000dac:	20000000 	.word	0x20000000

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fe72 	bl	8001a9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f86b 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f000 fb8b 	bl	80014d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dc2:	f000 f90f 	bl	8000fe4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dc6:	f000 f967 	bl	8001098 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dca:	f000 f8b1 	bl	8000f30 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dce:	f000 f9b9 	bl	8001144 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000dd2:	f000 fa43 	bl	800125c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000dd6:	f000 faed 	bl	80013b4 <MX_TIM15_Init>
  MX_TIM6_Init();
 8000dda:	f000 fa09 	bl	80011f0 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000dde:	f009 f985 	bl	800a0ec <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000df2:	81fb      	strh	r3, [r7, #14]
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
        .delimiter = 0xAAAA
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <main+0xd0>)
 8000df6:	f003 fec3 	bl	8004b80 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f000 fec0 	bl	8001b80 <HAL_Delay>
  enc_init();
 8000e00:	f7ff fd58 	bl	80008b4 <enc_init>
  pwm_init();
 8000e04:	f7ff fd6c 	bl	80008e0 <pwm_init>
  wake_drivers_up();
 8000e08:	f7ff ff24 	bl	8000c54 <wake_drivers_up>
  thrower_pwm(0);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff4f 	bl	8000cb0 <thrower_pwm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <main+0xd4>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0fa      	beq.n	8000e12 <main+0x62>
    	isCommandReceived = 0;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <main+0xd4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000e22:	f7ff ff17 	bl	8000c54 <wake_drivers_up>
    	motor_status_update();
 8000e26:	f7ff fd97 	bl	8000958 <motor_status_update>
    	thrower_pwm(command.thrower_speed);
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <main+0xd8>)
 8000e2c:	88db      	ldrh	r3, [r3, #6]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff3e 	bl	8000cb0 <thrower_pwm>

		feedback.speed[0] = motor_status[0].target_speed;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <main+0xdc>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	803b      	strh	r3, [r7, #0]
		feedback.speed[1] = motor_status[1].target_speed;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <main+0xdc>)
 8000e3e:	8b1b      	ldrh	r3, [r3, #24]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	807b      	strh	r3, [r7, #2]
		feedback.speed[2] = motor_status[2].target_speed;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <main+0xdc>)
 8000e46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	80bb      	strh	r3, [r7, #4]

		feedback.change[0] = motor_status[0].enc_change;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0xdc>)
 8000e4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e52:	80fb      	strh	r3, [r7, #6]
		feedback.change[1] = motor_status[1].enc_change;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <main+0xdc>)
 8000e56:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e5a:	813b      	strh	r3, [r7, #8]
		feedback.change[2] = motor_status[2].enc_change;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <main+0xdc>)
 8000e5e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000e62:	817b      	strh	r3, [r7, #10]
		//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // lights!!!

		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 8000e64:	2102      	movs	r1, #2
 8000e66:	480a      	ldr	r0, [pc, #40]	; (8000e90 <main+0xe0>)
 8000e68:	f001 f93e 	bl	80020e8 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	81bb      	strh	r3, [r7, #12]
		// This doesn't work lol
		//HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, HAL_GPIO_ReadPin(INFR_GPIO_Port, INFR_Pin));

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000e72:	463b      	mov	r3, r7
 8000e74:	2110      	movs	r1, #16
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 f9fa 	bl	800a270 <CDC_Transmit_FS>
    if (isCommandReceived) {
 8000e7c:	e7c9      	b.n	8000e12 <main+0x62>
 8000e7e:	bf00      	nop
 8000e80:	200002e0 	.word	0x200002e0
 8000e84:	2000040c 	.word	0x2000040c
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	200003c4 	.word	0x200003c4
 8000e90:	48001400 	.word	0x48001400

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	2238      	movs	r2, #56	; 0x38
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 fe64 	bl	800ab70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f002 fe7a 	bl	8003bb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ebc:	2322      	movs	r3, #34	; 0x22
 8000ebe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000eda:	2314      	movs	r3, #20
 8000edc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 ff02 	bl	8003cf8 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000efa:	f000 fb6d 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fa06 	bl	8004328 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f22:	f000 fb59 	bl	80015d8 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3750      	adds	r7, #80	; 0x50
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fe16 	bl	800ab70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <MX_TIM1_Init+0xb0>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000fa6:	f003 ffad 	bl	8004f04 <HAL_TIM_Encoder_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000fb0:	f000 fb12 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM1_Init+0xac>)
 8000fc6:	f004 ffed 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000fd0:	f000 fb02 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	; 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001b0 	.word	0x200001b0
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_TIM2_Init+0xb0>)
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_TIM2_Init+0xb0>)
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_TIM2_Init+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001030:	4818      	ldr	r0, [pc, #96]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001032:	f003 fe0f 	bl	8004c54 <HAL_TIM_PWM_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 facc 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001050:	f004 ffa8 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800105a:	f000 fabd 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2360      	movs	r3, #96	; 0x60
 8001060:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001076:	f004 f9f9 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001080:	f000 faaa 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM2_Init+0xb0>)
 8001086:	f000 fbe3 	bl	8001850 <HAL_TIM_MspPostInit>

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc

08001098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 fd62 	bl	800ab70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_TIM3_Init+0xa4>)
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <MX_TIM3_Init+0xa8>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM3_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM3_Init+0xa4>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM3_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_TIM3_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010dc:	2301      	movs	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM3_Init+0xa4>)
 8001108:	f003 fefc 	bl	8004f04 <HAL_TIM_Encoder_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001112:	f000 fa61 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_TIM3_Init+0xa4>)
 8001124:	f004 ff3e 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800112e:	f000 fa53 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000248 	.word	0x20000248
 8001140:	40000400 	.word	0x40000400

08001144 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f009 fd0c 	bl	800ab70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_TIM4_Init+0xa4>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_TIM4_Init+0xa8>)
 8001166:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_TIM4_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM4_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM4_Init+0xa4>)
 8001176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM4_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM4_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM4_Init+0xa4>)
 80011b4:	f003 fea6 	bl	8004f04 <HAL_TIM_Encoder_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80011be:	f000 fa0b 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM4_Init+0xa4>)
 80011d0:	f004 fee8 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011da:	f000 f9fd 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000294 	.word	0x20000294
 80011ec:	40000800 	.word	0x40000800

080011f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_TIM6_Init+0x64>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_TIM6_Init+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 23;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_TIM6_Init+0x64>)
 8001208:	2217      	movs	r2, #23
 800120a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_TIM6_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_TIM6_Init+0x64>)
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_TIM6_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM6_Init+0x64>)
 8001222:	f003 fc55 	bl	8004ad0 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800122c:	f000 f9d4 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM6_Init+0x64>)
 800123e:	f004 feb1 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 f9c6 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002e0 	.word	0x200002e0
 8001258:	40001000 	.word	0x40001000

0800125c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b098      	sub	sp, #96	; 0x60
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2234      	movs	r2, #52	; 0x34
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f009 fc71 	bl	800ab70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800128e:	4b47      	ldr	r3, [pc, #284]	; (80013ac <MX_TIM8_Init+0x150>)
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <MX_TIM8_Init+0x154>)
 8001292:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001294:	4b45      	ldr	r3, [pc, #276]	; (80013ac <MX_TIM8_Init+0x150>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <MX_TIM8_Init+0x150>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <MX_TIM8_Init+0x150>)
 80012a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b40      	ldr	r3, [pc, #256]	; (80013ac <MX_TIM8_Init+0x150>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <MX_TIM8_Init+0x150>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <MX_TIM8_Init+0x150>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012ba:	483c      	ldr	r0, [pc, #240]	; (80013ac <MX_TIM8_Init+0x150>)
 80012bc:	f003 fcca 	bl	8004c54 <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f987 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012da:	4619      	mov	r1, r3
 80012dc:	4833      	ldr	r0, [pc, #204]	; (80013ac <MX_TIM8_Init+0x150>)
 80012de:	f004 fe61 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 f976 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001308:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4826      	ldr	r0, [pc, #152]	; (80013ac <MX_TIM8_Init+0x150>)
 8001312:	f004 f8ab 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800131c:	f000 f95c 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001324:	2204      	movs	r2, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4820      	ldr	r0, [pc, #128]	; (80013ac <MX_TIM8_Init+0x150>)
 800132a:	f004 f89f 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001334:	f000 f950 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800133c:	2208      	movs	r2, #8
 800133e:	4619      	mov	r1, r3
 8001340:	481a      	ldr	r0, [pc, #104]	; (80013ac <MX_TIM8_Init+0x150>)
 8001342:	f004 f893 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 800134c:	f000 f944 	bl	80015d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM8_Init+0x150>)
 800138e:	f004 fe8b 	bl	80060a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001398:	f000 f91e 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM8_Init+0x150>)
 800139e:	f000 fa57 	bl	8001850 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3760      	adds	r7, #96	; 0x60
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000032c 	.word	0x2000032c
 80013b0:	40013400 	.word	0x40013400

080013b4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b098      	sub	sp, #96	; 0x60
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2234      	movs	r2, #52	; 0x34
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 fbc5 	bl	800ab70 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80013e8:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <MX_TIM15_Init+0x120>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80013ee:	2230      	movs	r2, #48	; 0x30
 80013f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MX_TIM15_Init+0x11c>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_TIM15_Init+0x11c>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_TIM15_Init+0x11c>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001412:	482f      	ldr	r0, [pc, #188]	; (80014d0 <MX_TIM15_Init+0x11c>)
 8001414:	f003 fc1e 	bl	8004c54 <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800141e:	f000 f8db 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800142a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800142e:	4619      	mov	r1, r3
 8001430:	4827      	ldr	r0, [pc, #156]	; (80014d0 <MX_TIM15_Init+0x11c>)
 8001432:	f004 fdb7 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 f8cc 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_TIM15_Init+0x11c>)
 8001466:	f004 f801 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001470:	f000 f8b2 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001474:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001478:	2204      	movs	r2, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM15_Init+0x11c>)
 800147e:	f003 fff5 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001488:	f000 f8a6 	bl	80015d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80014b4:	f004 fdf8 	bl	80060a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80014be:	f000 f88b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM15_Init+0x11c>)
 80014c4:	f000 f9c4 	bl	8001850 <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3760      	adds	r7, #96	; 0x60
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000378 	.word	0x20000378
 80014d4:	40014000 	.word	0x40014000

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_GPIO_Init+0xf4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a36      	ldr	r2, [pc, #216]	; (80015cc <MX_GPIO_Init+0xf4>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <MX_GPIO_Init+0xf4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <MX_GPIO_Init+0xf4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a30      	ldr	r2, [pc, #192]	; (80015cc <MX_GPIO_Init+0xf4>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <MX_GPIO_Init+0xf4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <MX_GPIO_Init+0xf4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <MX_GPIO_Init+0xf4>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <MX_GPIO_Init+0xf4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	4825      	ldr	r0, [pc, #148]	; (80015d0 <MX_GPIO_Init+0xf8>)
 800153c:	f000 fdec 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	21a2      	movs	r1, #162	; 0xa2
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f000 fde6 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2118      	movs	r1, #24
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <MX_GPIO_Init+0xfc>)
 8001552:	f000 fde1 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001556:	2301      	movs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_GPIO_Init+0xf8>)
 800156e:	f000 fc39 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8001572:	2302      	movs	r3, #2
 8001574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4619      	mov	r1, r3
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0xf8>)
 8001586:	f000 fc2d 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 800158a:	23a2      	movs	r3, #162	; 0xa2
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f000 fc1e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 80015a8:	2318      	movs	r3, #24
 80015aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_GPIO_Init+0xfc>)
 80015c0:	f000 fc10 	bl	8001de4 <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48001400 	.word	0x48001400
 80015d4:	48000400 	.word	0x48000400

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6613      	str	r3, [r2, #96]	; 0x60
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x44>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x44>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x44>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a46      	ldr	r2, [pc, #280]	; (8001764 <HAL_TIM_Encoder_MspInit+0x138>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12a      	bne.n	80016a4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a45      	ldr	r2, [pc, #276]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a3f      	ldr	r2, [pc, #252]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 800167e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001690:	2306      	movs	r3, #6
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 fba1 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016a2:	e05b      	b.n	800175c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_TIM_Encoder_MspInit+0x140>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d129      	bne.n	8001702 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 80016de:	2350      	movs	r3, #80	; 0x50
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ee:	2302      	movs	r3, #2
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f000 fb72 	bl	8001de4 <HAL_GPIO_Init>
}
 8001700:	e02c      	b.n	800175c <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <HAL_TIM_Encoder_MspInit+0x144>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d127      	bne.n	800175c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 800172a:	f043 0302 	orr.w	r3, r3, #2
 800172e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800174c:	2302      	movs	r3, #2
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <HAL_TIM_Encoder_MspInit+0x148>)
 8001758:	f000 fb44 	bl	8001de4 <HAL_GPIO_Init>
}
 800175c:	bf00      	nop
 800175e:	3738      	adds	r7, #56	; 0x38
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40021000 	.word	0x40021000
 800176c:	40000400 	.word	0x40000400
 8001770:	40000800 	.word	0x40000800
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001788:	d10c      	bne.n	80017a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6593      	str	r3, [r2, #88]	; 0x58
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017a2:	e022      	b.n	80017ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_TIM_PWM_MspInit+0x84>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10c      	bne.n	80017c8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
}
 80017c6:	e010      	b.n	80017ea <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_TIM_PWM_MspInit+0x88>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10b      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_PWM_MspInit+0x80>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	bf00      	nop
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40013400 	.word	0x40013400
 8001800:	40014000 	.word	0x40014000

08001804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_TIM_Base_MspInit+0x44>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d113      	bne.n	800183e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_TIM_Base_MspInit+0x48>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2036      	movs	r0, #54	; 0x36
 8001834:	f000 faa1 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f000 fab8 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40001000 	.word	0x40001000
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001870:	d11d      	bne.n	80018ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4b4a      	ldr	r3, [pc, #296]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	4a49      	ldr	r2, [pc, #292]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800189a:	2301      	movs	r3, #1
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f000 fa9c 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018ac:	e071      	b.n	8001992 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3b      	ldr	r2, [pc, #236]	; (80019a0 <HAL_TIM_MspPostInit+0x150>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d14a      	bne.n	800194e <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a37      	ldr	r2, [pc, #220]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	4a31      	ldr	r2, [pc, #196]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80018f8:	2304      	movs	r3, #4
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4828      	ldr	r0, [pc, #160]	; (80019a4 <HAL_TIM_MspPostInit+0x154>)
 8001904:	f000 fa6e 	bl	8001de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800191a:	2302      	movs	r3, #2
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f000 fa5c 	bl	8001de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800192c:	2320      	movs	r3, #32
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800193c:	2303      	movs	r3, #3
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4817      	ldr	r0, [pc, #92]	; (80019a4 <HAL_TIM_MspPostInit+0x154>)
 8001948:	f000 fa4c 	bl	8001de4 <HAL_GPIO_Init>
}
 800194c:	e021      	b.n	8001992 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_TIM_MspPostInit+0x158>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d11c      	bne.n	8001992 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_TIM_MspPostInit+0x14c>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 8001970:	230c      	movs	r3, #12
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001980:	2309      	movs	r3, #9
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 fa29 	bl	8001de4 <HAL_GPIO_Init>
}
 8001992:	bf00      	nop
 8001994:	3730      	adds	r7, #48	; 0x30
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40013400 	.word	0x40013400
 80019a4:	48000400 	.word	0x48000400
 80019a8:	40014000 	.word	0x40014000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f8a4 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <USB_LP_IRQHandler+0x10>)
 8001a06:	f000 fca6 	bl	8002356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200010b8 	.word	0x200010b8

08001a14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM6_DAC_IRQHandler+0x10>)
 8001a1a:	f003 fba7 	bl	800516c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002e0 	.word	0x200002e0

08001a28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <LoopForever+0x2>)
 8001a4e:	4685      	mov	sp, r0
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopForever+0x6>)
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopForever+0xa>)
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopForever+0xe>)
 8001a56:	2300      	movs	r3, #0
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:
 8001a5a:	58d4      	ldr	r4, [r2, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:
 8001a60:	18c4      	adds	r4, r0, r3
 8001a62:	428c      	cmp	r4, r1
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopForever+0x12>)
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopForever+0x16>)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:
 8001a72:	42a2      	cmp	r2, r4
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>
 8001a76:	f7ff ffd7 	bl	8001a28 <SystemInit>
 8001a7a:	f009 f847 	bl	800ab0c <__libc_init_array>
 8001a7e:	f7ff f997 	bl	8000db0 <main>

08001a82 <LoopForever>:
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
 8001a84:	20008000 	.word	0x20008000
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000194 	.word	0x20000194
 8001a90:	0800abf8 	.word	0x0800abf8
 8001a94:	20000194 	.word	0x20000194
 8001a98:	200015cc 	.word	0x200015cc

08001a9c <ADC1_2_IRQHandler>:
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>

08001a9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f95b 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f80e 	bl	8001ad0 <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e001      	b.n	8001ac4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ac0:	f7ff fd90 	bl	80015e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_InitTick+0x68>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d022      	beq.n	8001b2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_InitTick+0x6c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_InitTick+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f966 	bl	8001dca <HAL_SYSTICK_Config>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	d809      	bhi.n	8001b1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b12:	f000 f932 	bl	8001d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_InitTick+0x70>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e004      	b.n	8001b2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000018 	.word	0x20000018
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20000014 	.word	0x20000014

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b54:	6013      	str	r3, [r2, #0]
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000410 	.word	0x20000410
 8001b64:	20000018 	.word	0x20000018

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000410 	.word	0x20000410

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff ffee 	bl	8001b68 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d004      	beq.n	8001ba4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_Delay+0x40>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba4:	bf00      	nop
 8001ba6:	f7ff ffdf 	bl	8001b68 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d8f7      	bhi.n	8001ba6 <HAL_Delay+0x26>
  {
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000018 	.word	0x20000018

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff40 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff33 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ffa4 	bl	8001d20 <SysTick_Config>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001df2:	e15a      	b.n	80020aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	4013      	ands	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 814c 	beq.w	80020a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d130      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	f003 0201 	and.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d017      	beq.n	8001ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d123      	bne.n	8001f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	08da      	lsrs	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3208      	adds	r2, #8
 8001ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	08da      	lsrs	r2, r3, #3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3208      	adds	r2, #8
 8001f10:	6939      	ldr	r1, [r7, #16]
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0203 	and.w	r2, r3, #3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80a6 	beq.w	80020a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_GPIO_Init+0x2e4>)
 8001f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5c:	4a5a      	ldr	r2, [pc, #360]	; (80020c8 <HAL_GPIO_Init+0x2e4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6613      	str	r3, [r2, #96]	; 0x60
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_GPIO_Init+0x2e4>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f70:	4a56      	ldr	r2, [pc, #344]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9a:	d01f      	beq.n	8001fdc <HAL_GPIO_Init+0x1f8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a4c      	ldr	r2, [pc, #304]	; (80020d0 <HAL_GPIO_Init+0x2ec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d019      	beq.n	8001fd8 <HAL_GPIO_Init+0x1f4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a4b      	ldr	r2, [pc, #300]	; (80020d4 <HAL_GPIO_Init+0x2f0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_GPIO_Init+0x1f0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <HAL_GPIO_Init+0x2f4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <HAL_GPIO_Init+0x2f8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_GPIO_Init+0x2fc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	e00a      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fc8:	2306      	movs	r3, #6
 8001fca:	e008      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fcc:	2304      	movs	r3, #4
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1fa>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_GPIO_Init+0x2e8>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002020:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002026:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_GPIO_Init+0x300>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <HAL_GPIO_Init+0x300>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_GPIO_Init+0x300>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209e:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_GPIO_Init+0x300>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f ae9d 	bne.w	8001df4 <HAL_GPIO_Init+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	48000c00 	.word	0x48000c00
 80020dc:	48001000 	.word	0x48001000
 80020e0:	48001400 	.word	0x48001400
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e001      	b.n	800210a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002134:	e002      	b.n	800213c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af06      	add	r7, sp, #24
 800214e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0d7      	b.n	800230a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f008 f9c6 	bl	800a500 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f004 f8b3 	bl	80062ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e04c      	b.n	8002226 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3301      	adds	r3, #1
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	b298      	uxth	r0, r3
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3336      	adds	r3, #54	; 0x36
 80021ca:	4602      	mov	r2, r0
 80021cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3303      	adds	r3, #3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	3338      	adds	r3, #56	; 0x38
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	333c      	adds	r3, #60	; 0x3c
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	3340      	adds	r3, #64	; 0x40
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3ad      	bcc.n	800218c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e044      	b.n	80022c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	440b      	add	r3, r1
 8002270:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3b5      	bcc.n	8002236 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	687e      	ldr	r6, [r7, #4]
 80022d2:	466d      	mov	r5, sp
 80022d4:	f106 0410 	add.w	r4, r6, #16
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	602b      	str	r3, [r5, #0]
 80022e0:	1d33      	adds	r3, r6, #4
 80022e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f004 f81c 	bl	8006322 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f001 fc29 	bl	8003b5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002312 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_PCD_Start+0x16>
 8002324:	2302      	movs	r3, #2
 8002326:	e012      	b.n	800234e <HAL_PCD_Start+0x3c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 ffc2 	bl	80062be <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f006 f9da 	bl	80086f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f006 f9df 	bl	8008726 <USB_ReadInterrupts>
 8002368:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb26 	bl	80029c6 <PCD_EP_ISR_Handler>

    return;
 800237a:	e110      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	2b00      	cmp	r3, #0
 8002384:	d013      	beq.n	80023ae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	b292      	uxth	r2, r2
 800239a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f008 f93f 	bl	800a622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023a4:	2100      	movs	r1, #0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8fc 	bl	80025a4 <HAL_PCD_SetAddress>

    return;
 80023ac:	e0f7      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00c      	beq.n	80023d2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023ca:	b292      	uxth	r2, r2
 80023cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023d0:	e0e5      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00c      	beq.n	80023f6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ee:	b292      	uxth	r2, r2
 80023f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80023f4:	e0d3      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d034      	beq.n	800246a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	b292      	uxth	r2, r2
 8002414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0208 	bic.w	r2, r2, #8
 800242a:	b292      	uxth	r2, r2
 800242c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002442:	2100      	movs	r1, #0
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f008 fae1 	bl	800aa0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f008 f922 	bl	800a694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002458:	b29a      	uxth	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002462:	b292      	uxth	r2, r2
 8002464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002468:	e099      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002470:	2b00      	cmp	r3, #0
 8002472:	d027      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0208 	orr.w	r2, r2, #8
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249e:	b292      	uxth	r2, r2
 80024a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0204 	orr.w	r2, r2, #4
 80024b6:	b292      	uxth	r2, r2
 80024b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f008 f8cf 	bl	800a660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024c2:	e06c      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d040      	beq.n	8002550 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e0:	b292      	uxth	r2, r2
 80024e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d12b      	bne.n	8002548 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0204 	orr.w	r2, r2, #4
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	b292      	uxth	r2, r2
 800251c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002530:	b29b      	uxth	r3, r3
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800253e:	2101      	movs	r1, #1
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f008 fa63 	bl	800aa0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002546:	e02a      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f008 f889 	bl	800a660 <HAL_PCD_SuspendCallback>
    return;
 800254e:	e026      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00f      	beq.n	800257a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002562:	b29a      	uxth	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800256c:	b292      	uxth	r2, r2
 800256e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f008 f847 	bl	800a606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002578:	e011      	b.n	800259e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002596:	b292      	uxth	r2, r2
 8002598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800259c:	bf00      	nop
  }
}
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_PCD_SetAddress+0x1a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e013      	b.n	80025e6 <HAL_PCD_SetAddress+0x42>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f006 f87a 	bl	80086d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	4608      	mov	r0, r1
 80025f8:	4611      	mov	r1, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	460b      	mov	r3, r1
 8002602:	803b      	strh	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800260c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	da0e      	bge.n	8002632 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e00e      	b.n	8002650 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 0207 	and.w	r2, r3, #7
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800265c:	883a      	ldrh	r2, [r7, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	78ba      	ldrb	r2, [r7, #2]
 8002666:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d004      	beq.n	800267a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800267a:	78bb      	ldrb	r3, [r7, #2]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_PCD_EP_Open+0xa6>
 8002690:	2302      	movs	r3, #2
 8002692:	e00e      	b.n	80026b2 <HAL_PCD_EP_Open+0xc4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fe5e 	bl	8006364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80026b0:	7afb      	ldrb	r3, [r7, #11]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da0e      	bge.n	80026ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	705a      	strb	r2, [r3, #1]
 80026ea:	e00e      	b.n	800270a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 0207 	and.w	r2, r3, #7
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_PCD_EP_Close+0x6a>
 8002720:	2302      	movs	r3, #2
 8002722:	e00e      	b.n	8002742 <HAL_PCD_EP_Close+0x88>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f004 f9aa 	bl	8006a8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	f003 0207 	and.w	r2, r3, #7
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	b2da      	uxtb	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	2b00      	cmp	r3, #0
 800279e:	d106      	bne.n	80027ae <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6979      	ldr	r1, [r7, #20]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 fb5d 	bl	8006e66 <USB_EPStartXfer>
 80027ac:	e005      	b.n	80027ba <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6979      	ldr	r1, [r7, #20]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 fb56 	bl	8006e66 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	f003 0207 	and.w	r2, r3, #7
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	460b      	mov	r3, r1
 8002802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002804:	7afb      	ldrb	r3, [r7, #11]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2201      	movs	r2, #1
 800283e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	b2da      	uxtb	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6979      	ldr	r1, [r7, #20]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 fb02 	bl	8006e66 <USB_EPStartXfer>
 8002862:	e005      	b.n	8002870 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6979      	ldr	r1, [r7, #20]
 800286a:	4618      	mov	r0, r3
 800286c:	f004 fafb 	bl	8006e66 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 0207 	and.w	r2, r3, #7
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	429a      	cmp	r2, r3
 8002892:	d901      	bls.n	8002898 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e03e      	b.n	8002916 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	da0e      	bge.n	80028be <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	705a      	strb	r2, [r3, #1]
 80028bc:	e00c      	b.n	80028d8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_EP_SetStall+0x7e>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e00e      	b.n	8002916 <HAL_PCD_EP_SetStall+0x9c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f005 fde3 	bl	80084d2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	f003 020f 	and.w	r2, r3, #15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d901      	bls.n	800293c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e040      	b.n	80029be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800293c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	da0e      	bge.n	8002962 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
 8002960:	e00e      	b.n	8002980 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 0207 	and.w	r2, r3, #7
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_PCD_EP_ClrStall+0x82>
 800299c:	2302      	movs	r3, #2
 800299e:	e00e      	b.n	80029be <HAL_PCD_EP_ClrStall+0xa0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f005 fde0 	bl	8008574 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b096      	sub	sp, #88	; 0x58
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029ce:	e39c      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80029dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80029ea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f040 815e 	bne.w	8002cb0 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d150      	bne.n	8002aa2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	81fb      	strh	r3, [r7, #14]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3328      	adds	r3, #40	; 0x28
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a60:	2100      	movs	r1, #0
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f007 fdb5 	bl	800a5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 834a 	beq.w	800310a <PCD_EP_ISR_Handler+0x744>
 8002a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8345 	bne.w	800310a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aa0:	e333      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ab4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d032      	beq.n	8002b26 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f005 fe65 	bl	80087ca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	823b      	strh	r3, [r7, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	8a3a      	ldrh	r2, [r7, #16]
 8002b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f007 fd2a 	bl	800a578 <HAL_PCD_SetupStageCallback>
 8002b24:	e2f1      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b26:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f280 82ed 	bge.w	800310a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	83fb      	strh	r3, [r7, #30]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	8bfa      	ldrh	r2, [r7, #30]
 8002b46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d019      	beq.n	8002bb2 <PCD_EP_ISR_Handler+0x1ec>
 8002b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8c:	6959      	ldr	r1, [r3, #20]
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f005 fe17 	bl	80087ca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	441a      	add	r2, r3
 8002ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002baa:	2100      	movs	r1, #0
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f007 fcf5 	bl	800a59c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 82a3 	bne.w	800310a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4413      	add	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b3e      	cmp	r3, #62	; 0x3e
 8002bea:	d918      	bls.n	8002c1e <PCD_EP_ISR_Handler+0x258>
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <PCD_EP_ISR_Handler+0x240>
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	3b01      	subs	r3, #1
 8002c04:	647b      	str	r3, [r7, #68]	; 0x44
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	e029      	b.n	8002c72 <PCD_EP_ISR_Handler+0x2ac>
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <PCD_EP_ISR_Handler+0x286>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e012      	b.n	8002c72 <PCD_EP_ISR_Handler+0x2ac>
 8002c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <PCD_EP_ISR_Handler+0x2a0>
 8002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c62:	3301      	adds	r3, #1
 8002c64:	647b      	str	r3, [r7, #68]	; 0x44
 8002c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	029b      	lsls	r3, r3, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	827b      	strh	r3, [r7, #18]
 8002c84:	8a7b      	ldrh	r3, [r7, #18]
 8002c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c8a:	827b      	strh	r3, [r7, #18]
 8002c8c:	8a7b      	ldrh	r3, [r7, #18]
 8002c8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c92:	827b      	strh	r3, [r7, #18]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	8013      	strh	r3, [r2, #0]
 8002cae:	e22c      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cc4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f280 80f6 	bge.w	8002eba <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002cfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d00:	b292      	uxth	r2, r2
 8002d02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d04:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1c:	7b1b      	ldrb	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d123      	bne.n	8002d6a <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8002d4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808e 	beq.w	8002e70 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	88da      	ldrh	r2, [r3, #6]
 8002d60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d64:	f005 fd31 	bl	80087ca <USB_ReadPMA>
 8002d68:	e082      	b.n	8002e70 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6c:	78db      	ldrb	r3, [r3, #3]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d10a      	bne.n	8002d88 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d72:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d76:	461a      	mov	r2, r3
 8002d78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f9d3 	bl	8003126 <HAL_PCD_EP_DB_Receive>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002d86:	e073      	b.n	8002e70 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d022      	beq.n	8002e2c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02c      	beq.n	8002e70 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	6959      	ldr	r1, [r3, #20]
 8002e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e20:	891a      	ldrh	r2, [r3, #8]
 8002e22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e26:	f005 fcd0 	bl	80087ca <USB_ReadPMA>
 8002e2a:	e021      	b.n	8002e70 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002e54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e62:	6959      	ldr	r1, [r3, #20]
 8002e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e66:	895a      	ldrh	r2, [r3, #10]
 8002e68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e6c:	f005 fcad 	bl	80087ca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e78:	441a      	add	r2, r3
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e86:	441a      	add	r2, r3
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <PCD_EP_ISR_Handler+0x4da>
 8002e94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d206      	bcs.n	8002eae <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f007 fb78 	bl	800a59c <HAL_PCD_DataOutStageCallback>
 8002eac:	e005      	b.n	8002eba <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 ffd6 	bl	8006e66 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002eba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8121 	beq.w	800310a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ec8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	f000 80a2 	beq.w	8003066 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2a:	7b1b      	ldrb	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8093 	beq.w	8003058 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d046      	beq.n	8002fcc <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d126      	bne.n	8002f94 <PCD_EP_ISR_Handler+0x5ce>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	4413      	add	r3, r2
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	00da      	lsls	r2, r3, #3
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	4413      	add	r3, r2
 8002f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	e061      	b.n	8003058 <PCD_EP_ISR_Handler+0x692>
 8002f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d15d      	bne.n	8003058 <PCD_EP_ISR_Handler+0x692>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	4413      	add	r3, r2
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	00da      	lsls	r2, r3, #3
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e045      	b.n	8003058 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d126      	bne.n	8003028 <PCD_EP_ISR_Handler+0x662>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	4413      	add	r3, r2
 8002ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	00da      	lsls	r2, r3, #3
 8002ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800300c:	b29a      	uxth	r2, r3
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003020:	b29a      	uxth	r2, r3
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	e017      	b.n	8003058 <PCD_EP_ISR_Handler+0x692>
 8003028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d113      	bne.n	8003058 <PCD_EP_ISR_Handler+0x692>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	4413      	add	r3, r2
 8003040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	00da      	lsls	r2, r3, #3
 8003048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304a:	4413      	add	r3, r2
 800304c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003050:	63bb      	str	r3, [r7, #56]	; 0x38
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2200      	movs	r2, #0
 8003056:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f007 fab7 	bl	800a5d2 <HAL_PCD_DataInStageCallback>
 8003064:	e051      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003066:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d144      	bne.n	80030fc <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4413      	add	r3, r2
 800308c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d907      	bls.n	80030b6 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80030a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	619a      	str	r2, [r3, #24]
 80030b4:	e002      	b.n	80030bc <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f007 fa81 	bl	800a5d2 <HAL_PCD_DataInStageCallback>
 80030d0:	e01b      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030da:	441a      	add	r2, r3
 80030dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030de:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80030e8:	441a      	add	r2, r3
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 feb6 	bl	8006e66 <USB_EPStartXfer>
 80030fa:	e006      	b.n	800310a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003100:	461a      	mov	r2, r3
 8003102:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f917 	bl	8003338 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003112:	b29b      	uxth	r3, r3
 8003114:	b21b      	sxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	f6ff ac5a 	blt.w	80029d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3758      	adds	r7, #88	; 0x58
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b088      	sub	sp, #32
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d07c      	beq.n	8003238 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	4413      	add	r3, r2
 8003158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003162:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	8b7b      	ldrh	r3, [r7, #26]
 800316a:	429a      	cmp	r2, r3
 800316c:	d306      	bcc.n	800317c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	8b7b      	ldrh	r3, [r7, #26]
 8003174:	1ad2      	subs	r2, r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e002      	b.n	8003182 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d123      	bne.n	80031d2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	833b      	strh	r3, [r7, #24]
 80031a6:	8b3b      	ldrh	r3, [r7, #24]
 80031a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031ac:	833b      	strh	r3, [r7, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	441a      	add	r2, r3
 80031bc:	8b3b      	ldrh	r3, [r7, #24]
 80031be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01f      	beq.n	800321c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	82fb      	strh	r3, [r7, #22]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003214:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800321c:	8b7b      	ldrh	r3, [r7, #26]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8085 	beq.w	800332e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6959      	ldr	r1, [r3, #20]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	891a      	ldrh	r2, [r3, #8]
 8003230:	8b7b      	ldrh	r3, [r7, #26]
 8003232:	f005 faca 	bl	80087ca <USB_ReadPMA>
 8003236:	e07a      	b.n	800332e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003240:	b29b      	uxth	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	4413      	add	r3, r2
 8003252:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	8b7b      	ldrh	r3, [r7, #26]
 8003264:	429a      	cmp	r2, r3
 8003266:	d306      	bcc.n	8003276 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	8b7b      	ldrh	r3, [r7, #26]
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	619a      	str	r2, [r3, #24]
 8003274:	e002      	b.n	800327c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d123      	bne.n	80032cc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	83fb      	strh	r3, [r7, #30]
 80032a0:	8bfb      	ldrh	r3, [r7, #30]
 80032a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032a6:	83fb      	strh	r3, [r7, #30]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	8bfb      	ldrh	r3, [r7, #30]
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d11f      	bne.n	8003316 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	83bb      	strh	r3, [r7, #28]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	8bbb      	ldrh	r3, [r7, #28]
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003316:	8b7b      	ldrh	r3, [r7, #26]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	6959      	ldr	r1, [r3, #20]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	895a      	ldrh	r2, [r3, #10]
 8003328:	8b7b      	ldrh	r3, [r7, #26]
 800332a:	f005 fa4e 	bl	80087ca <USB_ReadPMA>
    }
  }

  return count;
 800332e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b0a2      	sub	sp, #136	; 0x88
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 81c5 	beq.w	80036dc <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335a:	b29b      	uxth	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	4413      	add	r3, r2
 800336c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003376:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003382:	429a      	cmp	r2, r3
 8003384:	d907      	bls.n	8003396 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	619a      	str	r2, [r3, #24]
 8003394:	e002      	b.n	800339c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 80b9 	bne.w	8003518 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	785b      	ldrb	r3, [r3, #1]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d126      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0xc4>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033bc:	b29b      	uxth	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	4413      	add	r3, r2
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	00da      	lsls	r2, r3, #3
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	4413      	add	r3, r2
 80033d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e01a      	b.n	8003432 <HAL_PCD_EP_DB_Transmit+0xfa>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d116      	bne.n	8003432 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	4413      	add	r3, r2
 800341a:	633b      	str	r3, [r7, #48]	; 0x30
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	00da      	lsls	r2, r3, #3
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	4413      	add	r3, r2
 8003426:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	2200      	movs	r2, #0
 8003430:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	623b      	str	r3, [r7, #32]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d126      	bne.n	800348e <HAL_PCD_EP_DB_Transmit+0x156>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4413      	add	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00da      	lsls	r2, r3, #3
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	4413      	add	r3, r2
 8003462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003472:	b29a      	uxth	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003486:	b29a      	uxth	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e017      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x186>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d113      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x186>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	4413      	add	r3, r2
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	00da      	lsls	r2, r3, #3
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2200      	movs	r2, #0
 80034bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f007 f884 	bl	800a5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034ca:	88fb      	ldrh	r3, [r7, #6]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 82d2 	beq.w	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f0:	827b      	strh	r3, [r7, #18]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	8a7b      	ldrh	r3, [r7, #18]
 8003502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800350a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800350e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003512:	b29b      	uxth	r3, r3
 8003514:	8013      	strh	r3, [r2, #0]
 8003516:	e2b0      	b.n	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d021      	beq.n	8003566 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 8284 	bne.w	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800357a:	441a      	add	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003588:	441a      	add	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	d309      	bcc.n	80035ae <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	621a      	str	r2, [r3, #32]
 80035ac:	e015      	b.n	80035da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80035b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035c4:	e009      	b.n	80035da <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	785b      	ldrb	r3, [r3, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d155      	bne.n	800368e <HAL_PCD_EP_DB_Transmit+0x356>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	4413      	add	r3, r2
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00da      	lsls	r2, r3, #3
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	4413      	add	r3, r2
 8003604:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360c:	2b3e      	cmp	r3, #62	; 0x3e
 800360e:	d916      	bls.n	800363e <HAL_PCD_EP_DB_Transmit+0x306>
 8003610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	64bb      	str	r3, [r7, #72]	; 0x48
 8003616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	3b01      	subs	r3, #1
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	b29b      	uxth	r3, r3
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	b29b      	uxth	r3, r3
 800362e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003636:	b29a      	uxth	r2, r3
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	801a      	strh	r2, [r3, #0]
 800363c:	e043      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800363e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003640:	2b00      	cmp	r3, #0
 8003642:	d112      	bne.n	800366a <HAL_PCD_EP_DB_Transmit+0x332>
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800364e:	b29a      	uxth	r2, r3
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29a      	uxth	r2, r3
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e02d      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_PCD_EP_DB_Transmit+0x348>
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367c:	3301      	adds	r3, #1
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003682:	b29b      	uxth	r3, r3
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	b29a      	uxth	r2, r3
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	801a      	strh	r2, [r3, #0]
 800368c:	e01b      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d117      	bne.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x38e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036aa:	4413      	add	r3, r2
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	00da      	lsls	r2, r3, #3
 80036b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b6:	4413      	add	r3, r2
 80036b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6959      	ldr	r1, [r3, #20]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	891a      	ldrh	r2, [r3, #8]
 80036d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f005 f836 	bl	8008746 <USB_WritePMA>
 80036da:	e1ce      	b.n	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800370c:	429a      	cmp	r2, r3
 800370e:	d307      	bcc.n	8003720 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003718:	1ad2      	subs	r2, r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	619a      	str	r2, [r3, #24]
 800371e:	e002      	b.n	8003726 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f040 80c4 	bne.w	80038b8 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	785b      	ldrb	r3, [r3, #1]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d126      	bne.n	8003786 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	66bb      	str	r3, [r7, #104]	; 0x68
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003746:	b29b      	uxth	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800374c:	4413      	add	r3, r2
 800374e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	00da      	lsls	r2, r3, #3
 8003756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003758:	4413      	add	r3, r2
 800375a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
 8003760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800376a:	b29a      	uxth	r2, r3
 800376c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800377e:	b29a      	uxth	r2, r3
 8003780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	e01a      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x484>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d116      	bne.n	80037bc <HAL_PCD_EP_DB_Transmit+0x484>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	673b      	str	r3, [r7, #112]	; 0x70
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a2:	4413      	add	r3, r2
 80037a4:	673b      	str	r3, [r7, #112]	; 0x70
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	00da      	lsls	r2, r3, #3
 80037ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ae:	4413      	add	r3, r2
 80037b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b8:	2200      	movs	r2, #0
 80037ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d12f      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037da:	b29b      	uxth	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e2:	4413      	add	r3, r2
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	00da      	lsls	r2, r3, #3
 80037ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037f2:	4413      	add	r3, r2
 80037f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003808:	b29a      	uxth	r2, r3
 800380a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800380e:	801a      	strh	r2, [r3, #0]
 8003810:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003820:	b29a      	uxth	r2, r3
 8003822:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	e017      	b.n	800385a <HAL_PCD_EP_DB_Transmit+0x522>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d113      	bne.n	800385a <HAL_PCD_EP_DB_Transmit+0x522>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383a:	b29b      	uxth	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003840:	4413      	add	r3, r2
 8003842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	00da      	lsls	r2, r3, #3
 800384a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800384c:	4413      	add	r3, r2
 800384e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003852:	67bb      	str	r3, [r7, #120]	; 0x78
 8003854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003856:	2200      	movs	r2, #0
 8003858:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f006 feb6 	bl	800a5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8104 	bne.w	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	441a      	add	r2, r3
 800389e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80038a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8013      	strh	r3, [r2, #0]
 80038b6:	e0e0      	b.n	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d121      	bne.n	8003906 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	441a      	add	r2, r3
 80038ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80038f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003902:	b29b      	uxth	r3, r3
 8003904:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 80b4 	bne.w	8003a7a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800391a:	441a      	add	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003928:	441a      	add	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d309      	bcc.n	800394e <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003946:	1ad2      	subs	r2, r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	621a      	str	r2, [r3, #32]
 800394c:	e015      	b.n	800397a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8003956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003964:	e009      	b.n	800397a <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d155      	bne.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	65bb      	str	r3, [r7, #88]	; 0x58
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399c:	4413      	add	r3, r2
 800399e:	65bb      	str	r3, [r7, #88]	; 0x58
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	00da      	lsls	r2, r3, #3
 80039a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
 80039b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b2:	2b3e      	cmp	r3, #62	; 0x3e
 80039b4:	d916      	bls.n	80039e4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80039b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	677b      	str	r3, [r7, #116]	; 0x74
 80039bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <HAL_PCD_EP_DB_Transmit+0x694>
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	3b01      	subs	r3, #1
 80039ca:	677b      	str	r3, [r7, #116]	; 0x74
 80039cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	029b      	lsls	r3, r3, #10
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039dc:	b29a      	uxth	r2, r3
 80039de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	e040      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x72e>
 80039e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d112      	bne.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80039ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e02a      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	677b      	str	r3, [r7, #116]	; 0x74
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	3301      	adds	r3, #1
 8003a24:	677b      	str	r3, [r7, #116]	; 0x74
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e018      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d114      	bne.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4a:	4413      	add	r3, r2
 8003a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a56:	4413      	add	r3, r2
 8003a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a64:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6959      	ldr	r1, [r3, #20]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	895a      	ldrh	r2, [r3, #10]
 8003a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f004 fe66 	bl	8008746 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a94:	823b      	strh	r3, [r7, #16]
 8003a96:	8a3b      	ldrh	r3, [r7, #16]
 8003a98:	f083 0310 	eor.w	r3, r3, #16
 8003a9c:	823b      	strh	r3, [r7, #16]
 8003a9e:	8a3b      	ldrh	r3, [r7, #16]
 8003aa0:	f083 0320 	eor.w	r3, r3, #32
 8003aa4:	823b      	strh	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	8a3b      	ldrh	r3, [r7, #16]
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3788      	adds	r7, #136	; 0x88
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	897b      	ldrh	r3, [r7, #10]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e009      	b.n	8003b1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b0a:	897a      	ldrh	r2, [r7, #10]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b1e:	893b      	ldrh	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	80da      	strh	r2, [r3, #6]
 8003b32:	e00b      	b.n	8003b4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2201      	movs	r2, #1
 8003b38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d141      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d131      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bcc:	4b47      	ldr	r3, [pc, #284]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bdc:	4b43      	ldr	r3, [pc, #268]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be4:	4a41      	ldr	r2, [pc, #260]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2232      	movs	r2, #50	; 0x32
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	4a3f      	ldr	r2, [pc, #252]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	e002      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0a:	4b38      	ldr	r3, [pc, #224]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c16:	d102      	bne.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f2      	bne.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d158      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e057      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c40:	e04d      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d141      	bne.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c56:	d131      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5e:	4a23      	ldr	r2, [pc, #140]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2232      	movs	r2, #50	; 0x32
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	0c9b      	lsrs	r3, r3, #18
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c8e:	e002      	b.n	8003c96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d102      	bne.n	8003caa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f2      	bne.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb6:	d112      	bne.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e011      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ccc:	e007      	b.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd6:	4a05      	ldr	r2, [pc, #20]	; (8003cec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40007000 	.word	0x40007000
 8003cf0:	20000010 	.word	0x20000010
 8003cf4:	431bde83 	.word	0x431bde83

08003cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e306      	b.n	8004318 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d075      	beq.n	8003e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d16:	4b97      	ldr	r3, [pc, #604]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d20:	4b94      	ldr	r3, [pc, #592]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3e>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d002      	beq.n	8003d3c <HAL_RCC_OscConfig+0x44>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	4b8d      	ldr	r3, [pc, #564]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05b      	beq.n	8003e00 <HAL_RCC_OscConfig+0x108>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d157      	bne.n	8003e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e2e1      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x74>
 8003d5e:	4b85      	ldr	r3, [pc, #532]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a84      	ldr	r2, [pc, #528]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e01d      	b.n	8003da8 <HAL_RCC_OscConfig+0xb0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x98>
 8003d76:	4b7f      	ldr	r3, [pc, #508]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7e      	ldr	r2, [pc, #504]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b7c      	ldr	r3, [pc, #496]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a7b      	ldr	r2, [pc, #492]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0xb0>
 8003d90:	4b78      	ldr	r3, [pc, #480]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a77      	ldr	r2, [pc, #476]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b75      	ldr	r3, [pc, #468]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a74      	ldr	r2, [pc, #464]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd feda 	bl	8001b68 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fd fed6 	bl	8001b68 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e2a6      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0xc0>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd fec6 	bl	8001b68 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fd fec2 	bl	8001b68 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e292      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df2:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0xe8>
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d075      	beq.n	8003efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0e:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e18:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b0c      	cmp	r3, #12
 8003e26:	d102      	bne.n	8003e2e <HAL_RCC_OscConfig+0x136>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d002      	beq.n	8003e34 <HAL_RCC_OscConfig+0x13c>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d11f      	bne.n	8003e74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_OscConfig+0x154>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e265      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4c:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	4946      	ldr	r1, [pc, #280]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e60:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <HAL_RCC_OscConfig+0x280>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd fe33 	bl	8001ad0 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d043      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e251      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fe6e 	bl	8001b68 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fd fe6a 	bl	8001b68 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e23a      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea2:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	061b      	lsls	r3, r3, #24
 8003ebc:	492d      	ldr	r1, [pc, #180]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
 8003ec2:	e01a      	b.n	8003efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fe4a 	bl	8001b68 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fe46 	bl	8001b68 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e216      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1e0>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d041      	beq.n	8003f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd fe23 	bl	8001b68 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fd fe1f 	bl	8001b68 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e1ef      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0ef      	beq.n	8003f26 <HAL_RCC_OscConfig+0x22e>
 8003f46:	e020      	b.n	8003f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_OscConfig+0x27c>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd fe06 	bl	8001b68 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f5e:	e00d      	b.n	8003f7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fd fe02 	bl	8001b68 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d906      	bls.n	8003f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1d2      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f7c:	4b8c      	ldr	r3, [pc, #560]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ea      	bne.n	8003f60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80a6 	beq.w	80040e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f9c:	4b84      	ldr	r3, [pc, #528]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_OscConfig+0x2b4>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x2b6>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	4a7e      	ldr	r2, [pc, #504]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fce:	4b79      	ldr	r3, [pc, #484]	; (80041b4 <HAL_RCC_OscConfig+0x4bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d118      	bne.n	800400c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x4bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_RCC_OscConfig+0x4bc>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fdbf 	bl	8001b68 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fee:	f7fd fdbb 	bl	8001b68 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e18b      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x4bc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <HAL_RCC_OscConfig+0x32e>
 8004014:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004024:	e024      	b.n	8004070 <HAL_RCC_OscConfig+0x378>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d110      	bne.n	8004050 <HAL_RCC_OscConfig+0x358>
 800402e:	4b60      	ldr	r3, [pc, #384]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	4a5e      	ldr	r2, [pc, #376]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800403e:	4b5c      	ldr	r3, [pc, #368]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	4a5a      	ldr	r2, [pc, #360]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404e:	e00f      	b.n	8004070 <HAL_RCC_OscConfig+0x378>
 8004050:	4b57      	ldr	r3, [pc, #348]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004056:	4a56      	ldr	r2, [pc, #344]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d016      	beq.n	80040a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd fd76 	bl	8001b68 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407e:	e00a      	b.n	8004096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fd fd72 	bl	8001b68 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e140      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	4b46      	ldr	r3, [pc, #280]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ed      	beq.n	8004080 <HAL_RCC_OscConfig+0x388>
 80040a4:	e015      	b.n	80040d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fd fd5f 	bl	8001b68 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd fd5b 	bl	8001b68 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e129      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1ed      	bne.n	80040ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d2:	7ffb      	ldrb	r3, [r7, #31]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d105      	bne.n	80040e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d8:	4b35      	ldr	r3, [pc, #212]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	4a34      	ldr	r2, [pc, #208]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 80040de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d03c      	beq.n	800416a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01c      	beq.n	8004132 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 80040fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040fe:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fd fd2e 	bl	8001b68 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004110:	f7fd fd2a 	bl	8001b68 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0fa      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ef      	beq.n	8004110 <HAL_RCC_OscConfig+0x418>
 8004130:	e01b      	b.n	800416a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fd fd11 	bl	8001b68 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800414a:	f7fd fd0d 	bl	8001b68 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e0dd      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 800415e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ef      	bne.n	800414a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80d1 	beq.w	8004316 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b0c      	cmp	r3, #12
 800417e:	f000 808b 	beq.w	8004298 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d15e      	bne.n	8004248 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <HAL_RCC_OscConfig+0x4b8>)
 8004190:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd fce7 	bl	8001b68 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419c:	e00c      	b.n	80041b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419e:	f7fd fce3 	bl	8001b68 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d905      	bls.n	80041b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e0b3      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ec      	bne.n	800419e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c4:	4b56      	ldr	r3, [pc, #344]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCC_OscConfig+0x62c>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6a11      	ldr	r1, [r2, #32]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d4:	3a01      	subs	r2, #1
 80041d6:	0112      	lsls	r2, r2, #4
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041de:	0212      	lsls	r2, r2, #8
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041e6:	0852      	lsrs	r2, r2, #1
 80041e8:	3a01      	subs	r2, #1
 80041ea:	0552      	lsls	r2, r2, #21
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0652      	lsls	r2, r2, #25
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041fe:	06d2      	lsls	r2, r2, #27
 8004200:	430a      	orrs	r2, r1
 8004202:	4947      	ldr	r1, [pc, #284]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 8004204:	4313      	orrs	r3, r2
 8004206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004208:	4b45      	ldr	r3, [pc, #276]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a44      	ldr	r2, [pc, #272]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800420e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a41      	ldr	r2, [pc, #260]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fca2 	bl	8001b68 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fd fc9e 	bl	8001b68 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e06e      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x530>
 8004246:	e066      	b.n	8004316 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a34      	ldr	r2, [pc, #208]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a31      	ldr	r2, [pc, #196]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004260:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a2e      	ldr	r2, [pc, #184]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 8004266:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd fc7a 	bl	8001b68 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004278:	f7fd fc76 	bl	8001b68 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e046      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800428a:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x580>
 8004296:	e03e      	b.n	8004316 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e039      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <HAL_RCC_OscConfig+0x628>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d12c      	bne.n	8004312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	3b01      	subs	r3, #1
 80042c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d123      	bne.n	8004312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d11b      	bne.n	8004312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d113      	bne.n	8004312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	085b      	lsrs	r3, r3, #1
 80042f6:	3b01      	subs	r3, #1
 80042f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	019f800c 	.word	0x019f800c

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e11e      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b91      	ldr	r3, [pc, #580]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b8e      	ldr	r3, [pc, #568]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	498c      	ldr	r1, [pc, #560]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b8a      	ldr	r3, [pc, #552]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e106      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d073      	beq.n	8004464 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d129      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004384:	4b81      	ldr	r3, [pc, #516]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0f4      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004394:	f000 f966 	bl	8004664 <RCC_GetSysClockFreqFromPLLSource>
 8004398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4a7c      	ldr	r2, [pc, #496]	; (8004590 <HAL_RCC_ClockConfig+0x268>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d93f      	bls.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043a2:	4b7a      	ldr	r3, [pc, #488]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d033      	beq.n	8004422 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d12f      	bne.n	8004422 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043c2:	4b72      	ldr	r3, [pc, #456]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ca:	4a70      	ldr	r2, [pc, #448]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e024      	b.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0c6      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0be      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004400:	f000 f8ce 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004404:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4a61      	ldr	r2, [pc, #388]	; (8004590 <HAL_RCC_ClockConfig+0x268>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d909      	bls.n	8004422 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004416:	4a5d      	ldr	r2, [pc, #372]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004422:	4b5a      	ldr	r3, [pc, #360]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f023 0203 	bic.w	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4957      	ldr	r1, [pc, #348]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004430:	4313      	orrs	r3, r2
 8004432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fd fb98 	bl	8001b68 <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443a:	e00a      	b.n	8004452 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800443c:	f7fd fb94 	bl	8001b68 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e095      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 020c 	and.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	429a      	cmp	r2, r3
 8004462:	d1eb      	bne.n	800443c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d023      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800447c:	4b43      	ldr	r3, [pc, #268]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a42      	ldr	r2, [pc, #264]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004486:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004494:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800449c:	4a3b      	ldr	r2, [pc, #236]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 800449e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4936      	ldr	r1, [pc, #216]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e008      	b.n	80044ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d105      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044be:	4b33      	ldr	r3, [pc, #204]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4a32      	ldr	r2, [pc, #200]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 80044c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ca:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d21d      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d8:	4b2b      	ldr	r3, [pc, #172]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	4929      	ldr	r1, [pc, #164]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044e8:	f7fd fb3e 	bl	8001b68 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fd fb3a 	bl	8001b68 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03b      	b.n	800457e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d1ed      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b1a      	ldr	r3, [pc, #104]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4917      	ldr	r1, [pc, #92]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490f      	ldr	r1, [pc, #60]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004552:	f000 f825 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_ClockConfig+0x264>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490c      	ldr	r1, [pc, #48]	; (8004594 <HAL_RCC_ClockConfig+0x26c>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x270>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x274>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd faaa 	bl	8001ad0 <HAL_InitTick>
 800457c:	4603      	mov	r3, r0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	04c4b400 	.word	0x04c4b400
 8004594:	0800abe0 	.word	0x0800abe0
 8004598:	20000010 	.word	0x20000010
 800459c:	20000014 	.word	0x20000014

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045a6:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045b2:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e047      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d102      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e03e      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d136      	bne.n	8004644 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3301      	adds	r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d10c      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f4:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fe:	68d2      	ldr	r2, [r2, #12]
 8004600:	0a12      	lsrs	r2, r2, #8
 8004602:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
      break;
 800460c:	e00c      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	4a10      	ldr	r2, [pc, #64]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004618:	68d2      	ldr	r2, [r2, #12]
 800461a:	0a12      	lsrs	r2, r2, #8
 800461c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]
      break;
 8004626:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_GetSysClockFreq+0xb8>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	0e5b      	lsrs	r3, r3, #25
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	e001      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004648:	693b      	ldr	r3, [r7, #16]
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	00f42400 	.word	0x00f42400
 8004660:	007a1200 	.word	0x007a1200

08004664 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800466a:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d10c      	bne.n	80046a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004688:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004692:	68d2      	ldr	r2, [r2, #12]
 8004694:	0a12      	lsrs	r2, r2, #8
 8004696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
    break;
 80046a0:	e00c      	b.n	80046bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046ac:	68d2      	ldr	r2, [r2, #12]
 80046ae:	0a12      	lsrs	r2, r2, #8
 80046b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b4:	fb02 f303 	mul.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    break;
 80046ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	0e5b      	lsrs	r3, r3, #25
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	3301      	adds	r3, #1
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046d6:	687b      	ldr	r3, [r7, #4]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40021000 	.word	0x40021000
 80046e8:	007a1200 	.word	0x007a1200
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f8:	2300      	movs	r3, #0
 80046fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046fc:	2300      	movs	r3, #0
 80046fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8098 	beq.w	800483e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b43      	ldr	r3, [pc, #268]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	4a3f      	ldr	r2, [pc, #252]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6593      	str	r3, [r2, #88]	; 0x58
 800472a:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800473a:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a39      	ldr	r2, [pc, #228]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004746:	f7fd fa0f 	bl	8001b68 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474c:	e009      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fd fa0b 	bl	8001b68 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d902      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	74fb      	strb	r3, [r7, #19]
        break;
 8004760:	e005      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ef      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d159      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004774:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01e      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	429a      	cmp	r2, r3
 800478e:	d019      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800479c:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ac:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d016      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f9cb 	bl	8001b68 <HAL_GetTick>
 80047d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d4:	e00b      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fd f9c7 	bl	8001b68 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d902      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	74fb      	strb	r3, [r7, #19]
            break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ec      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	4903      	ldr	r1, [pc, #12]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004818:	e008      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	74bb      	strb	r3, [r7, #18]
 800481e:	e005      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004820:	40021000 	.word	0x40021000
 8004824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482c:	7c7b      	ldrb	r3, [r7, #17]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4ba6      	ldr	r3, [pc, #664]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004836:	4aa5      	ldr	r2, [pc, #660]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484a:	4ba0      	ldr	r3, [pc, #640]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 0203 	bic.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	499c      	ldr	r1, [pc, #624]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486c:	4b97      	ldr	r3, [pc, #604]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 020c 	bic.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	4994      	ldr	r1, [pc, #592]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800488e:	4b8f      	ldr	r3, [pc, #572]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	498b      	ldr	r1, [pc, #556]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b0:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4983      	ldr	r1, [pc, #524]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d2:	4b7e      	ldr	r3, [pc, #504]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	497a      	ldr	r1, [pc, #488]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f4:	4b75      	ldr	r3, [pc, #468]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4972      	ldr	r1, [pc, #456]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004916:	4b6d      	ldr	r3, [pc, #436]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4969      	ldr	r1, [pc, #420]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004938:	4b64      	ldr	r3, [pc, #400]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4961      	ldr	r1, [pc, #388]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b5c      	ldr	r3, [pc, #368]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	4958      	ldr	r1, [pc, #352]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	4950      	ldr	r1, [pc, #320]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d105      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a4a      	ldr	r2, [pc, #296]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d015      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049b4:	4b45      	ldr	r3, [pc, #276]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	4942      	ldr	r1, [pc, #264]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b3d      	ldr	r3, [pc, #244]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a3c      	ldr	r2, [pc, #240]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049ec:	4b37      	ldr	r3, [pc, #220]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4934      	ldr	r1, [pc, #208]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a0a:	d105      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d015      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a24:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	4926      	ldr	r1, [pc, #152]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d015      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	4918      	ldr	r1, [pc, #96]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a12      	ldr	r2, [pc, #72]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d015      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000

08004ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e049      	b.n	8004b76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fe84 	bl	8001804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 fde8 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d001      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04a      	b.n	8004c2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d013      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1a      	ldr	r2, [pc, #104]	; (8004c48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d115      	bne.n	8004c18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d015      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0xaa>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d011      	beq.n	8004c2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	e008      	b.n	8004c2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e000      	b.n	8004c2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40013400 	.word	0x40013400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	00010007 	.word	0x00010007

08004c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e049      	b.n	8004cfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc fd7c 	bl	8001778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 fd26 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x24>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e03c      	b.n	8004da2 <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x3e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e02f      	b.n	8004da2 <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x58>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e022      	b.n	8004da2 <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b0c      	cmp	r3, #12
 8004d60:	d109      	bne.n	8004d76 <HAL_TIM_PWM_Start+0x72>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	e015      	b.n	8004da2 <HAL_TIM_PWM_Start+0x9e>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d109      	bne.n	8004d90 <HAL_TIM_PWM_Start+0x8c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e008      	b.n	8004da2 <HAL_TIM_PWM_Start+0x9e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e097      	b.n	8004eda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0xb6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	e023      	b.n	8004e02 <HAL_TIM_PWM_Start+0xfe>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xc6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	e01b      	b.n	8004e02 <HAL_TIM_PWM_Start+0xfe>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_PWM_Start+0xd6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	e013      	b.n	8004e02 <HAL_TIM_PWM_Start+0xfe>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d104      	bne.n	8004dea <HAL_TIM_PWM_Start+0xe6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de8:	e00b      	b.n	8004e02 <HAL_TIM_PWM_Start+0xfe>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b10      	cmp	r3, #16
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xf6>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	e003      	b.n	8004e02 <HAL_TIM_PWM_Start+0xfe>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fff0 	bl	8005df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x13e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x13e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_TIM_PWM_Start+0x1e8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x13e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <HAL_TIM_PWM_Start+0x1ec>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x13e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <HAL_TIM_PWM_Start+0x1f0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x142>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_PWM_Start+0x144>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d018      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x194>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d013      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x194>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <HAL_TIM_PWM_Start+0x1f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x194>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <HAL_TIM_PWM_Start+0x1f8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x194>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x194>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a16      	ldr	r2, [pc, #88]	; (8004eec <HAL_TIM_PWM_Start+0x1e8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d115      	bne.n	8004ec4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <HAL_TIM_PWM_Start+0x1fc>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d015      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x1d2>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb0:	d011      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	e008      	b.n	8004ed6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	00010007 	.word	0x00010007

08004f04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e097      	b.n	8005048 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fc fb7d 	bl	800162c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2202      	movs	r2, #2
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f48:	f023 0307 	bic.w	r3, r3, #7
 8004f4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 fbc3 	bl	80056e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	4313      	orrs	r3, r2
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fa4:	f023 030c 	bic.w	r3, r3, #12
 8004fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	011a      	lsls	r2, r3, #4
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	031b      	lsls	r3, r3, #12
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005060:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005068:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005070:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005078:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d110      	bne.n	80050a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d102      	bne.n	800508c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005086:	7b7b      	ldrb	r3, [r7, #13]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e069      	b.n	8005164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	e031      	b.n	8005106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d110      	bne.n	80050ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d102      	bne.n	80050b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ae:	7b3b      	ldrb	r3, [r7, #12]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d001      	beq.n	80050b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e055      	b.n	8005164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c8:	e01d      	b.n	8005106 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	7bfb      	ldrb	r3, [r7, #15]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d108      	bne.n	80050e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d0:	7bbb      	ldrb	r3, [r7, #14]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d105      	bne.n	80050e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d6:	7b7b      	ldrb	r3, [r7, #13]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d102      	bne.n	80050e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050dc:	7b3b      	ldrb	r3, [r7, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e03e      	b.n	8005164 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_TIM_Encoder_Start+0xc4>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d008      	beq.n	8005124 <HAL_TIM_Encoder_Start+0xd4>
 8005112:	e00f      	b.n	8005134 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2201      	movs	r2, #1
 800511a:	2100      	movs	r1, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fe67 	bl	8005df0 <TIM_CCxChannelCmd>
      break;
 8005122:	e016      	b.n	8005152 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	2104      	movs	r1, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fe5f 	bl	8005df0 <TIM_CCxChannelCmd>
      break;
 8005132:	e00e      	b.n	8005152 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2201      	movs	r2, #1
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fe57 	bl	8005df0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2201      	movs	r2, #1
 8005148:	2104      	movs	r1, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fe50 	bl	8005df0 <TIM_CCxChannelCmd>
      break;
 8005150:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b02      	cmp	r3, #2
 8005180:	d122      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d11b      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0202 	mvn.w	r2, #2
 8005198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa7a 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 80051b4:	e005      	b.n	80051c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa6c 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fa7d 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0204 	mvn.w	r2, #4
 80051ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa50 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa42 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fa53 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b08      	cmp	r3, #8
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b08      	cmp	r3, #8
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0208 	mvn.w	r2, #8
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2204      	movs	r2, #4
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa26 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa18 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa29 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b10      	cmp	r3, #16
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0210 	mvn.w	r2, #16
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2208      	movs	r2, #8
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f9fc 	bl	80056a8 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9ee 	bl	8005694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f9ff 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0201 	mvn.w	r2, #1
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fb fcec 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 ff70 	bl	80061fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532a:	d10e      	bne.n	800534a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d107      	bne.n	800534a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 ff63 	bl	8006210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b40      	cmp	r3, #64	; 0x40
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f9ad 	bl	80056d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0220 	mvn.w	r2, #32
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 ff23 	bl	80061e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b0:	d10f      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 ff29 	bl	8006224 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e0:	d10f      	bne.n	8005402 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 ff1b 	bl	8006238 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005410:	d10f      	bne.n	8005432 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005420:	d107      	bne.n	8005432 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800542a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 ff0d 	bl	800624c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800543c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005440:	d10f      	bne.n	8005462 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800544c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005450:	d107      	bne.n	8005462 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 feff 	bl	8006260 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005486:	2302      	movs	r3, #2
 8005488:	e0ff      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b14      	cmp	r3, #20
 8005496:	f200 80f0 	bhi.w	800567a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	0800567b 	.word	0x0800567b
 80054a8:	0800567b 	.word	0x0800567b
 80054ac:	0800567b 	.word	0x0800567b
 80054b0:	08005535 	.word	0x08005535
 80054b4:	0800567b 	.word	0x0800567b
 80054b8:	0800567b 	.word	0x0800567b
 80054bc:	0800567b 	.word	0x0800567b
 80054c0:	08005577 	.word	0x08005577
 80054c4:	0800567b 	.word	0x0800567b
 80054c8:	0800567b 	.word	0x0800567b
 80054cc:	0800567b 	.word	0x0800567b
 80054d0:	080055b7 	.word	0x080055b7
 80054d4:	0800567b 	.word	0x0800567b
 80054d8:	0800567b 	.word	0x0800567b
 80054dc:	0800567b 	.word	0x0800567b
 80054e0:	080055f9 	.word	0x080055f9
 80054e4:	0800567b 	.word	0x0800567b
 80054e8:	0800567b 	.word	0x0800567b
 80054ec:	0800567b 	.word	0x0800567b
 80054f0:	08005639 	.word	0x08005639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f982 	bl	8005804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0204 	bic.w	r2, r2, #4
 800551e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6999      	ldr	r1, [r3, #24]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	619a      	str	r2, [r3, #24]
      break;
 8005532:	e0a5      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f9f2 	bl	8005924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800554e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6999      	ldr	r1, [r3, #24]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	021a      	lsls	r2, r3, #8
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	619a      	str	r2, [r3, #24]
      break;
 8005574:	e084      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa5b 	bl	8005a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0208 	orr.w	r2, r2, #8
 8005590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0204 	bic.w	r2, r2, #4
 80055a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69d9      	ldr	r1, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	61da      	str	r2, [r3, #28]
      break;
 80055b4:	e064      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fac3 	bl	8005b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69d9      	ldr	r1, [r3, #28]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	021a      	lsls	r2, r3, #8
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	61da      	str	r2, [r3, #28]
      break;
 80055f6:	e043      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fb2c 	bl	8005c5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0208 	orr.w	r2, r2, #8
 8005612:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0204 	bic.w	r2, r2, #4
 8005622:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005636:	e023      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fb70 	bl	8005d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005652:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005662:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005678:	e002      	b.n	8005680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
      break;
 800567e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005688:	7dfb      	ldrb	r3, [r7, #23]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <TIM_Base_SetConfig+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a39      	ldr	r2, [pc, #228]	; (80057ec <TIM_Base_SetConfig+0x108>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a38      	ldr	r2, [pc, #224]	; (80057f0 <TIM_Base_SetConfig+0x10c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a37      	ldr	r2, [pc, #220]	; (80057f4 <TIM_Base_SetConfig+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2d      	ldr	r2, [pc, #180]	; (80057e8 <TIM_Base_SetConfig+0x104>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2a      	ldr	r2, [pc, #168]	; (80057ec <TIM_Base_SetConfig+0x108>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a29      	ldr	r2, [pc, #164]	; (80057f0 <TIM_Base_SetConfig+0x10c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a28      	ldr	r2, [pc, #160]	; (80057f4 <TIM_Base_SetConfig+0x110>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a27      	ldr	r2, [pc, #156]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <TIM_Base_SetConfig+0x118>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <TIM_Base_SetConfig+0x11c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <TIM_Base_SetConfig+0x104>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00f      	beq.n	80057cc <TIM_Base_SetConfig+0xe8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <TIM_Base_SetConfig+0x110>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00b      	beq.n	80057cc <TIM_Base_SetConfig+0xe8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a10      	ldr	r2, [pc, #64]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d007      	beq.n	80057cc <TIM_Base_SetConfig+0xe8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <TIM_Base_SetConfig+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0xe8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a0e      	ldr	r2, [pc, #56]	; (8005800 <TIM_Base_SetConfig+0x11c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d103      	bne.n	80057d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	615a      	str	r2, [r3, #20]
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0201 	bic.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 0302 	bic.w	r3, r3, #2
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <TIM_OC1_SetConfig+0x10c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00f      	beq.n	8005884 <TIM_OC1_SetConfig+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2b      	ldr	r2, [pc, #172]	; (8005914 <TIM_OC1_SetConfig+0x110>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_OC1_SetConfig+0x80>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <TIM_OC1_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_OC1_SetConfig+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <TIM_OC1_SetConfig+0x118>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC1_SetConfig+0x80>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a28      	ldr	r2, [pc, #160]	; (8005920 <TIM_OC1_SetConfig+0x11c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d10c      	bne.n	800589e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0308 	bic.w	r3, r3, #8
 800588a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <TIM_OC1_SetConfig+0x10c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_OC1_SetConfig+0xc2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1a      	ldr	r2, [pc, #104]	; (8005914 <TIM_OC1_SetConfig+0x110>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_OC1_SetConfig+0xc2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <TIM_OC1_SetConfig+0x114>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_OC1_SetConfig+0xc2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a18      	ldr	r2, [pc, #96]	; (800591c <TIM_OC1_SetConfig+0x118>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_OC1_SetConfig+0xc2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a17      	ldr	r2, [pc, #92]	; (8005920 <TIM_OC1_SetConfig+0x11c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d111      	bne.n	80058ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40014000 	.word	0x40014000
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800

08005924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f023 0210 	bic.w	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0320 	bic.w	r3, r3, #32
 8005972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <TIM_OC2_SetConfig+0x100>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_OC2_SetConfig+0x6c>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <TIM_OC2_SetConfig+0x104>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10d      	bne.n	80059ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <TIM_OC2_SetConfig+0x100>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00f      	beq.n	80059d4 <TIM_OC2_SetConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <TIM_OC2_SetConfig+0x104>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00b      	beq.n	80059d4 <TIM_OC2_SetConfig+0xb0>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <TIM_OC2_SetConfig+0x108>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d007      	beq.n	80059d4 <TIM_OC2_SetConfig+0xb0>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <TIM_OC2_SetConfig+0x10c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d003      	beq.n	80059d4 <TIM_OC2_SetConfig+0xb0>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <TIM_OC2_SetConfig+0x110>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d113      	bne.n	80059fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <TIM_OC3_SetConfig+0xfc>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x6a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <TIM_OC3_SetConfig+0x100>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10d      	bne.n	8005abe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <TIM_OC3_SetConfig+0xfc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00f      	beq.n	8005ae6 <TIM_OC3_SetConfig+0xae>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1b      	ldr	r2, [pc, #108]	; (8005b38 <TIM_OC3_SetConfig+0x100>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00b      	beq.n	8005ae6 <TIM_OC3_SetConfig+0xae>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	; (8005b3c <TIM_OC3_SetConfig+0x104>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d007      	beq.n	8005ae6 <TIM_OC3_SetConfig+0xae>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	; (8005b40 <TIM_OC3_SetConfig+0x108>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d003      	beq.n	8005ae6 <TIM_OC3_SetConfig+0xae>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a18      	ldr	r2, [pc, #96]	; (8005b44 <TIM_OC3_SetConfig+0x10c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d113      	bne.n	8005b0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	621a      	str	r2, [r3, #32]
}
 8005b28:	bf00      	nop
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40012c00 	.word	0x40012c00
 8005b38:	40013400 	.word	0x40013400
 8005b3c:	40014000 	.word	0x40014000
 8005b40:	40014400 	.word	0x40014400
 8005b44:	40014800 	.word	0x40014800

08005b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <TIM_OC4_SetConfig+0x100>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC4_SetConfig+0x6c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <TIM_OC4_SetConfig+0x104>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10d      	bne.n	8005bd0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	031b      	lsls	r3, r3, #12
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <TIM_OC4_SetConfig+0x100>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00f      	beq.n	8005bf8 <TIM_OC4_SetConfig+0xb0>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <TIM_OC4_SetConfig+0x104>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_OC4_SetConfig+0xb0>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <TIM_OC4_SetConfig+0x108>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_OC4_SetConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <TIM_OC4_SetConfig+0x10c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC4_SetConfig+0xb0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <TIM_OC4_SetConfig+0x110>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	019b      	lsls	r3, r3, #6
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40013400 	.word	0x40013400
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <TIM_OC5_SetConfig+0xb4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x7a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <TIM_OC5_SetConfig+0xb8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x7a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <TIM_OC5_SetConfig+0xbc>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x7a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <TIM_OC5_SetConfig+0xc0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_OC5_SetConfig+0x7a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <TIM_OC5_SetConfig+0xc4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d109      	bne.n	8005cea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	051b      	lsls	r3, r3, #20
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <TIM_OC6_SetConfig+0xb8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_OC6_SetConfig+0x7c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC6_SetConfig+0xbc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_OC6_SetConfig+0x7c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC6_SetConfig+0xc0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_OC6_SetConfig+0x7c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <TIM_OC6_SetConfig+0xc4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_OC6_SetConfig+0x7c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a14      	ldr	r2, [pc, #80]	; (8005dec <TIM_OC6_SetConfig+0xc8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d109      	bne.n	8005db4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	029b      	lsls	r3, r3, #10
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40013400 	.word	0x40013400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400
 8005dec:	40014800 	.word	0x40014800

08005df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	2201      	movs	r2, #1
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1a      	ldr	r2, [r3, #32]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	401a      	ands	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d109      	bne.n	8005e60 <HAL_TIMEx_PWMN_Start+0x24>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e022      	b.n	8005ea6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d109      	bne.n	8005e7a <HAL_TIMEx_PWMN_Start+0x3e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	bf14      	ite	ne
 8005e72:	2301      	movne	r3, #1
 8005e74:	2300      	moveq	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	e015      	b.n	8005ea6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d109      	bne.n	8005e94 <HAL_TIMEx_PWMN_Start+0x58>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e008      	b.n	8005ea6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e069      	b.n	8005f82 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIMEx_PWMN_Start+0x82>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebc:	e013      	b.n	8005ee6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d104      	bne.n	8005ece <HAL_TIMEx_PWMN_Start+0x92>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	e00b      	b.n	8005ee6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d104      	bne.n	8005ede <HAL_TIMEx_PWMN_Start+0xa2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005edc:	e003      	b.n	8005ee6 <HAL_TIMEx_PWMN_Start+0xaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f9c0 	bl	8006274 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a20      	ldr	r2, [pc, #128]	; (8005f8c <HAL_TIMEx_PWMN_Start+0x150>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_TIMEx_PWMN_Start+0x104>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f16:	d013      	beq.n	8005f40 <HAL_TIMEx_PWMN_Start+0x104>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_TIMEx_PWMN_Start+0x154>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_TIMEx_PWMN_Start+0x104>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_TIMEx_PWMN_Start+0x158>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_TIMEx_PWMN_Start+0x104>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIMEx_PWMN_Start+0x104>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_TIMEx_PWMN_Start+0x160>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d115      	bne.n	8005f6c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b06      	cmp	r3, #6
 8005f50:	d015      	beq.n	8005f7e <HAL_TIMEx_PWMN_Start+0x142>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f58:	d011      	beq.n	8005f7e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6a:	e008      	b.n	8005f7e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e000      	b.n	8005f80 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	00010007 	.word	0x00010007

08005fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e065      	b.n	8006088 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2b      	ldr	r2, [pc, #172]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1b      	ldr	r2, [pc, #108]	; (8006094 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d018      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d013      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a18      	ldr	r2, [pc, #96]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00e      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d009      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d10c      	bne.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	4313      	orrs	r3, r2
 800606c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40013400 	.word	0x40013400
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40014000 	.word	0x40014000

080060a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e087      	b.n	80061d4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	041b      	lsls	r3, r3, #16
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d106      	bne.n	8006160 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d126      	bne.n	80061c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	051b      	lsls	r3, r3, #20
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0e      	ldr	r2, [pc, #56]	; (80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a0d      	ldr	r2, [pc, #52]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d106      	bne.n	80061c2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40012c00 	.word	0x40012c00
 80061e4:	40013400 	.word	0x40013400

080061e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	2204      	movs	r2, #4
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80062f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80062f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	b29b      	uxth	r3, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	b29b      	uxth	r3, r3
 800630a:	4013      	ands	r3, r2
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006322:	b084      	sub	sp, #16
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	f107 0014 	add.w	r0, r7, #20
 8006330:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr

08006364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006364:	b480      	push	{r7}
 8006366:	b09d      	sub	sp, #116	; 0x74
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29b      	uxth	r3, r3
 8006382:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	78db      	ldrb	r3, [r3, #3]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d81f      	bhi.n	80063d6 <USB_ActivateEndpoint+0x72>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <USB_ActivateEndpoint+0x38>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063df 	.word	0x080063df
 80063a8:	080063bb 	.word	0x080063bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063b8:	e012      	b.n	80063e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80063c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063c6:	e00b      	b.n	80063e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80063c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80063d4:	e004      	b.n	80063e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80063dc:	e000      	b.n	80063e0 <USB_ActivateEndpoint+0x7c>
      break;
 80063de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	441a      	add	r2, r3
 80063ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	b21b      	sxth	r3, r3
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	b21a      	sxth	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b21b      	sxth	r3, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	b21b      	sxth	r3, r3
 8006426:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	7b1b      	ldrb	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 8149 	bne.w	80066e8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8084 	beq.w	8006568 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	4413      	add	r3, r2
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	00da      	lsls	r2, r3, #3
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	88db      	ldrh	r3, [r3, #6]
 8006488:	085b      	lsrs	r3, r3, #1
 800648a:	b29b      	uxth	r3, r3
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	827b      	strh	r3, [r7, #18]
 80064a2:	8a7b      	ldrh	r3, [r7, #18]
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <USB_ActivateEndpoint+0x180>
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	823b      	strh	r3, [r7, #16]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	8a3b      	ldrh	r3, [r7, #16]
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	78db      	ldrb	r3, [r3, #3]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d020      	beq.n	800652e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006502:	81bb      	strh	r3, [r7, #12]
 8006504:	89bb      	ldrh	r3, [r7, #12]
 8006506:	f083 0320 	eor.w	r3, r3, #32
 800650a:	81bb      	strh	r3, [r7, #12]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	89bb      	ldrh	r3, [r7, #12]
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
 800652c:	e2a6      	b.n	8006a7c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006544:	81fb      	strh	r3, [r7, #14]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	89fb      	ldrh	r3, [r7, #14]
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
 8006566:	e289      	b.n	8006a7c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	633b      	str	r3, [r7, #48]	; 0x30
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006572:	b29b      	uxth	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	4413      	add	r3, r2
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	00da      	lsls	r2, r3, #3
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	4413      	add	r3, r2
 8006586:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	88db      	ldrh	r3, [r3, #6]
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	4413      	add	r3, r2
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	00da      	lsls	r2, r3, #3
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b3e      	cmp	r3, #62	; 0x3e
 80065c6:	d918      	bls.n	80065fa <USB_ActivateEndpoint+0x296>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <USB_ActivateEndpoint+0x27e>
 80065dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065de:	3b01      	subs	r3, #1
 80065e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80065e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e029      	b.n	800664e <USB_ActivateEndpoint+0x2ea>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d112      	bne.n	8006628 <USB_ActivateEndpoint+0x2c4>
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800660c:	b29a      	uxth	r2, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006620:	b29a      	uxth	r2, r3
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e012      	b.n	800664e <USB_ActivateEndpoint+0x2ea>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <USB_ActivateEndpoint+0x2de>
 800663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663e:	3301      	adds	r3, #1
 8006640:	66bb      	str	r3, [r7, #104]	; 0x68
 8006642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	847b      	strh	r3, [r7, #34]	; 0x22
 800665c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01b      	beq.n	800669e <USB_ActivateEndpoint+0x33a>
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	843b      	strh	r3, [r7, #32]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	8c3b      	ldrh	r3, [r7, #32]
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	83fb      	strh	r3, [r7, #30]
 80066b6:	8bfb      	ldrh	r3, [r7, #30]
 80066b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066bc:	83fb      	strh	r3, [r7, #30]
 80066be:	8bfb      	ldrh	r3, [r7, #30]
 80066c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066c4:	83fb      	strh	r3, [r7, #30]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	8bfb      	ldrh	r3, [r7, #30]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
 80066e6:	e1c9      	b.n	8006a7c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d11e      	bne.n	800672e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006706:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006720:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]
 800672c:	e01d      	b.n	800676a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800677a:	4413      	add	r3, r2
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006786:	4413      	add	r3, r2
 8006788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678c:	65bb      	str	r3, [r7, #88]	; 0x58
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	891b      	ldrh	r3, [r3, #8]
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	b29b      	uxth	r3, r3
 8006796:	005b      	lsls	r3, r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	657b      	str	r3, [r7, #84]	; 0x54
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ae:	4413      	add	r3, r2
 80067b0:	657b      	str	r3, [r7, #84]	; 0x54
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	00da      	lsls	r2, r3, #3
 80067b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067c0:	653b      	str	r3, [r7, #80]	; 0x50
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	895b      	ldrh	r3, [r3, #10]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f040 8093 	bne.w	8006902 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01b      	beq.n	8006830 <USB_ActivateEndpoint+0x4cc>
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800683e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01b      	beq.n	8006880 <USB_ActivateEndpoint+0x51c>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	873b      	strh	r3, [r7, #56]	; 0x38
 8006898:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800689a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800689e:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	441a      	add	r2, r3
 80068b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
 8006900:	e0bc      	b.n	8006a7c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01d      	beq.n	800695a <USB_ActivateEndpoint+0x5f6>
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800696a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800696e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01d      	beq.n	80069b2 <USB_ActivateEndpoint+0x64e>
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	441a      	add	r2, r3
 800699a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800699e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	78db      	ldrb	r3, [r3, #3]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d024      	beq.n	8006a04 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069d8:	f083 0320 	eor.w	r3, r3, #32
 80069dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e01d      	b.n	8006a40 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006a7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3774      	adds	r7, #116	; 0x74
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b08d      	sub	sp, #52	; 0x34
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	7b1b      	ldrb	r3, [r3, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 808e 	bne.w	8006bbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d044      	beq.n	8006b32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	81bb      	strh	r3, [r7, #12]
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <USB_DeactivateEndpoint+0x6c>
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	817b      	strh	r3, [r7, #10]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	813b      	strh	r3, [r7, #8]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	893b      	ldrh	r3, [r7, #8]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
 8006b30:	e192      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	827b      	strh	r3, [r7, #18]
 8006b40:	8a7b      	ldrh	r3, [r7, #18]
 8006b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01b      	beq.n	8006b82 <USB_DeactivateEndpoint+0xf6>
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	823b      	strh	r3, [r7, #16]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	8a3b      	ldrh	r3, [r7, #16]
 8006b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	81fb      	strh	r3, [r7, #14]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	441a      	add	r2, r3
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]
 8006bba:	e14d      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 80a5 	bne.w	8006d10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	843b      	strh	r3, [r7, #32]
 8006bd4:	8c3b      	ldrh	r3, [r7, #32]
 8006bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01b      	beq.n	8006c16 <USB_DeactivateEndpoint+0x18a>
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	83fb      	strh	r3, [r7, #30]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8bfb      	ldrh	r3, [r7, #30]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	83bb      	strh	r3, [r7, #28]
 8006c24:	8bbb      	ldrh	r3, [r7, #28]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01b      	beq.n	8006c66 <USB_DeactivateEndpoint+0x1da>
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	837b      	strh	r3, [r7, #26]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	8b7b      	ldrh	r3, [r7, #26]
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	833b      	strh	r3, [r7, #24]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	8b3b      	ldrh	r3, [r7, #24]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	82fb      	strh	r3, [r7, #22]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	8afb      	ldrh	r3, [r7, #22]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	82bb      	strh	r3, [r7, #20]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8abb      	ldrh	r3, [r7, #20]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
 8006d0e:	e0a3      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01b      	beq.n	8006d60 <USB_DeactivateEndpoint+0x2d4>
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <USB_DeactivateEndpoint+0x324>
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3734      	adds	r7, #52	; 0x34
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b0c2      	sub	sp, #264	; 0x108
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e74:	6018      	str	r0, [r3, #0]
 8006e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e7e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 867b 	bne.w	8007b88 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d908      	bls.n	8006ec0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ebe:	e007      	b.n	8006ed0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	7b1b      	ldrb	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d13a      	bne.n	8006f56 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6959      	ldr	r1, [r3, #20]
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	88da      	ldrh	r2, [r3, #6]
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	f001 fc1d 	bl	8008746 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	00da      	lsls	r2, r3, #3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	f000 bde3 	b.w	8007b1c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	78db      	ldrb	r3, [r3, #3]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	f040 843a 	bne.w	80077dc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	f240 83b7 	bls.w	80076f4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	441a      	add	r2, r3
 8006fca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6a1a      	ldr	r2, [r3, #32]
 8006fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 81b3 	beq.w	800738e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
 8007034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d16d      	bne.n	8007120 <USB_EPStartXfer+0x2ba>
 8007044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	4413      	add	r3, r2
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	00da      	lsls	r2, r3, #3
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	4413      	add	r3, r2
 800707a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	2b3e      	cmp	r3, #62	; 0x3e
 8007086:	d91c      	bls.n	80070c2 <USB_EPStartXfer+0x25c>
 8007088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708c:	095b      	lsrs	r3, r3, #5
 800708e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	f003 031f 	and.w	r3, r3, #31
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <USB_EPStartXfer+0x242>
 800709e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070a2:	3b01      	subs	r3, #1
 80070a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e053      	b.n	800716a <USB_EPStartXfer+0x304>
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d112      	bne.n	80070f0 <USB_EPStartXfer+0x28a>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e03c      	b.n	800716a <USB_EPStartXfer+0x304>
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <USB_EPStartXfer+0x2aa>
 8007106:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800710a:	3301      	adds	r3, #1
 800710c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007110:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007114:	b29b      	uxth	r3, r3
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	b29a      	uxth	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	e024      	b.n	800716a <USB_EPStartXfer+0x304>
 8007120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d11c      	bne.n	800716a <USB_EPStartXfer+0x304>
 8007130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713e:	b29b      	uxth	r3, r3
 8007140:	461a      	mov	r2, r3
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	4413      	add	r3, r2
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
 8007148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	00da      	lsls	r2, r3, #3
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	4413      	add	r3, r2
 800715a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	b29a      	uxth	r2, r3
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	895b      	ldrh	r3, [r3, #10]
 8007176:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800717a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6959      	ldr	r1, [r3, #20]
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	b29b      	uxth	r3, r3
 800718c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007190:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007194:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f001 fad4 	bl	8008746 <USB_WritePMA>
            ep->xfer_buff += len;
 800719e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	441a      	add	r2, r3
 80071b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d90f      	bls.n	80071f8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80071d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e8:	1ad2      	subs	r2, r2, r3
 80071ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	621a      	str	r2, [r3, #32]
 80071f6:	e00e      	b.n	8007216 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d16d      	bne.n	8007302 <USB_EPStartXfer+0x49c>
 8007226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800722a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007240:	b29b      	uxth	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	4413      	add	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00da      	lsls	r2, r3, #3
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	4413      	add	r3, r2
 800725c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007266:	2b3e      	cmp	r3, #62	; 0x3e
 8007268:	d91c      	bls.n	80072a4 <USB_EPStartXfer+0x43e>
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <USB_EPStartXfer+0x424>
 8007280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007284:	3b01      	subs	r3, #1
 8007286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728e:	b29b      	uxth	r3, r3
 8007290:	029b      	lsls	r3, r3, #10
 8007292:	b29b      	uxth	r3, r3
 8007294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729c:	b29a      	uxth	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	e059      	b.n	8007358 <USB_EPStartXfer+0x4f2>
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d112      	bne.n	80072d2 <USB_EPStartXfer+0x46c>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e042      	b.n	8007358 <USB_EPStartXfer+0x4f2>
 80072d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <USB_EPStartXfer+0x48c>
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ec:	3301      	adds	r3, #1
 80072ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80072f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e02a      	b.n	8007358 <USB_EPStartXfer+0x4f2>
 8007302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d122      	bne.n	8007358 <USB_EPStartXfer+0x4f2>
 8007312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800732c:	b29b      	uxth	r3, r3
 800732e:	461a      	mov	r2, r3
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	4413      	add	r3, r2
 8007334:	623b      	str	r3, [r7, #32]
 8007336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00da      	lsls	r2, r3, #3
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	4413      	add	r3, r2
 8007348:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007352:	b29a      	uxth	r2, r3
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	891b      	ldrh	r3, [r3, #8]
 8007364:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6959      	ldr	r1, [r3, #20]
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007378:	b29b      	uxth	r3, r3
 800737a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800737e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007382:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007386:	6800      	ldr	r0, [r0, #0]
 8007388:	f001 f9dd 	bl	8008746 <USB_WritePMA>
 800738c:	e3c6      	b.n	8007b1c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d16d      	bne.n	800747a <USB_EPStartXfer+0x614>
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073be:	4413      	add	r3, r2
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	00da      	lsls	r2, r3, #3
 80073d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d2:	4413      	add	r3, r2
 80073d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80073d8:	647b      	str	r3, [r7, #68]	; 0x44
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073de:	2b3e      	cmp	r3, #62	; 0x3e
 80073e0:	d91c      	bls.n	800741c <USB_EPStartXfer+0x5b6>
 80073e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <USB_EPStartXfer+0x59c>
 80073f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073fc:	3b01      	subs	r3, #1
 80073fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007406:	b29b      	uxth	r3, r3
 8007408:	029b      	lsls	r3, r3, #10
 800740a:	b29b      	uxth	r3, r3
 800740c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007414:	b29a      	uxth	r2, r3
 8007416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007418:	801a      	strh	r2, [r3, #0]
 800741a:	e059      	b.n	80074d0 <USB_EPStartXfer+0x66a>
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	2b00      	cmp	r3, #0
 8007422:	d112      	bne.n	800744a <USB_EPStartXfer+0x5e4>
 8007424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800742e:	b29a      	uxth	r2, r3
 8007430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800743e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007442:	b29a      	uxth	r2, r3
 8007444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e042      	b.n	80074d0 <USB_EPStartXfer+0x66a>
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <USB_EPStartXfer+0x604>
 8007460:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007464:	3301      	adds	r3, #1
 8007466:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800746a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29a      	uxth	r2, r3
 8007474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e02a      	b.n	80074d0 <USB_EPStartXfer+0x66a>
 800747a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d122      	bne.n	80074d0 <USB_EPStartXfer+0x66a>
 800748a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	653b      	str	r3, [r7, #80]	; 0x50
 8007496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074aa:	4413      	add	r3, r2
 80074ac:	653b      	str	r3, [r7, #80]	; 0x50
 80074ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	00da      	lsls	r2, r3, #3
 80074bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074be:	4413      	add	r3, r2
 80074c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	891b      	ldrh	r3, [r3, #8]
 80074dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6959      	ldr	r1, [r3, #20]
 80074ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80074f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80074fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	f001 f921 	bl	8008746 <USB_WritePMA>
            ep->xfer_buff += len;
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007514:	441a      	add	r2, r3
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d90f      	bls.n	800755e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800753e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	621a      	str	r2, [r3, #32]
 800755c:	e00e      	b.n	800757c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2200      	movs	r2, #0
 800757a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	643b      	str	r3, [r7, #64]	; 0x40
 8007588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d16d      	bne.n	8007674 <USB_EPStartXfer+0x80e>
 8007598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800759c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	4413      	add	r3, r2
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80075bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	00da      	lsls	r2, r3, #3
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	4413      	add	r3, r2
 80075ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d8:	2b3e      	cmp	r3, #62	; 0x3e
 80075da:	d91c      	bls.n	8007616 <USB_EPStartXfer+0x7b0>
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <USB_EPStartXfer+0x796>
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007600:	b29b      	uxth	r3, r3
 8007602:	029b      	lsls	r3, r3, #10
 8007604:	b29b      	uxth	r3, r3
 8007606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760e:	b29a      	uxth	r2, r3
 8007610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007612:	801a      	strh	r2, [r3, #0]
 8007614:	e053      	b.n	80076be <USB_EPStartXfer+0x858>
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761a:	2b00      	cmp	r3, #0
 800761c:	d112      	bne.n	8007644 <USB_EPStartXfer+0x7de>
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007628:	b29a      	uxth	r2, r3
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29a      	uxth	r2, r3
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e03c      	b.n	80076be <USB_EPStartXfer+0x858>
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800764e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <USB_EPStartXfer+0x7fe>
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765e:	3301      	adds	r3, #1
 8007660:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007668:	b29b      	uxth	r3, r3
 800766a:	029b      	lsls	r3, r3, #10
 800766c:	b29a      	uxth	r2, r3
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	e024      	b.n	80076be <USB_EPStartXfer+0x858>
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d11c      	bne.n	80076be <USB_EPStartXfer+0x858>
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007692:	b29b      	uxth	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007698:	4413      	add	r3, r2
 800769a:	643b      	str	r3, [r7, #64]	; 0x40
 800769c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	00da      	lsls	r2, r3, #3
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	895b      	ldrh	r3, [r3, #10]
 80076ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6959      	ldr	r1, [r3, #20]
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076ec:	6800      	ldr	r0, [r0, #0]
 80076ee:	f001 f82a 	bl	8008746 <USB_WritePMA>
 80076f2:	e213      	b.n	8007b1c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800772e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800776c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007770:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777a:	b29b      	uxth	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007780:	4413      	add	r3, r2
 8007782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00da      	lsls	r2, r3, #3
 8007792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007794:	4413      	add	r3, r2
 8007796:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800779a:	65bb      	str	r3, [r7, #88]	; 0x58
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80077a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	891b      	ldrh	r3, [r3, #8]
 80077b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6959      	ldr	r1, [r3, #20]
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80077d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80077d4:	6800      	ldr	r0, [r0, #0]
 80077d6:	f000 ffb6 	bl	8008746 <USB_WritePMA>
 80077da:	e19f      	b.n	8007b1c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80bc 	beq.w	800799a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	673b      	str	r3, [r7, #112]	; 0x70
 800782e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	785b      	ldrb	r3, [r3, #1]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d16d      	bne.n	800791a <USB_EPStartXfer+0xab4>
 800783e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007842:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	66bb      	str	r3, [r7, #104]	; 0x68
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800785e:	4413      	add	r3, r2
 8007860:	66bb      	str	r3, [r7, #104]	; 0x68
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007872:	4413      	add	r3, r2
 8007874:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007878:	667b      	str	r3, [r7, #100]	; 0x64
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787e:	2b3e      	cmp	r3, #62	; 0x3e
 8007880:	d91c      	bls.n	80078bc <USB_EPStartXfer+0xa56>
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	f003 031f 	and.w	r3, r3, #31
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <USB_EPStartXfer+0xa3c>
 8007898:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800789c:	3b01      	subs	r3, #1
 800789e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	029b      	lsls	r3, r3, #10
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e053      	b.n	8007964 <USB_EPStartXfer+0xafe>
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USB_EPStartXfer+0xa84>
 80078c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e03c      	b.n	8007964 <USB_EPStartXfer+0xafe>
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <USB_EPStartXfer+0xaa4>
 8007900:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007904:	3301      	adds	r3, #1
 8007906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800790a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800790e:	b29b      	uxth	r3, r3
 8007910:	029b      	lsls	r3, r3, #10
 8007912:	b29a      	uxth	r2, r3
 8007914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e024      	b.n	8007964 <USB_EPStartXfer+0xafe>
 800791a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d11c      	bne.n	8007964 <USB_EPStartXfer+0xafe>
 800792a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800793e:	4413      	add	r3, r2
 8007940:	673b      	str	r3, [r7, #112]	; 0x70
 8007942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00da      	lsls	r2, r3, #3
 8007950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007952:	4413      	add	r3, r2
 8007954:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795e:	b29a      	uxth	r2, r3
 8007960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007962:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	895b      	ldrh	r3, [r3, #10]
 8007970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6959      	ldr	r1, [r3, #20]
 8007980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007984:	b29b      	uxth	r3, r3
 8007986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800798a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800798e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	f000 fed7 	bl	8008746 <USB_WritePMA>
 8007998:	e0c0      	b.n	8007b1c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d16d      	bne.n	8007a86 <USB_EPStartXfer+0xc20>
 80079aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ca:	4413      	add	r3, r2
 80079cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	00da      	lsls	r2, r3, #3
 80079dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079de:	4413      	add	r3, r2
 80079e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ea:	2b3e      	cmp	r3, #62	; 0x3e
 80079ec:	d91c      	bls.n	8007a28 <USB_EPStartXfer+0xbc2>
 80079ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fc:	f003 031f 	and.w	r3, r3, #31
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <USB_EPStartXfer+0xba8>
 8007a04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e05f      	b.n	8007ae8 <USB_EPStartXfer+0xc82>
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d112      	bne.n	8007a56 <USB_EPStartXfer+0xbf0>
 8007a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e048      	b.n	8007ae8 <USB_EPStartXfer+0xc82>
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	085b      	lsrs	r3, r3, #1
 8007a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <USB_EPStartXfer+0xc10>
 8007a6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a70:	3301      	adds	r3, #1
 8007a72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007a76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e030      	b.n	8007ae8 <USB_EPStartXfer+0xc82>
 8007a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d128      	bne.n	8007ae8 <USB_EPStartXfer+0xc82>
 8007a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aba:	4413      	add	r3, r2
 8007abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	00da      	lsls	r2, r3, #3
 8007ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ae6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	891b      	ldrh	r3, [r3, #8]
 8007af4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6959      	ldr	r1, [r3, #20]
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b0e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b12:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b16:	6800      	ldr	r0, [r0, #0]
 8007b18:	f000 fe15 	bl	8008746 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4413      	add	r3, r2
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b42:	817b      	strh	r3, [r7, #10]
 8007b44:	897b      	ldrh	r3, [r7, #10]
 8007b46:	f083 0310 	eor.w	r3, r3, #16
 8007b4a:	817b      	strh	r3, [r7, #10]
 8007b4c:	897b      	ldrh	r3, [r7, #10]
 8007b4e:	f083 0320 	eor.w	r3, r3, #32
 8007b52:	817b      	strh	r3, [r7, #10]
 8007b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	441a      	add	r2, r3
 8007b6e:	897b      	ldrh	r3, [r7, #10]
 8007b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	8013      	strh	r3, [r2, #0]
 8007b84:	f000 bc9f 	b.w	80084c6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	7b1b      	ldrb	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 80ae 	bne.w	8007cf6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d917      	bls.n	8007be6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd6:	1ad2      	subs	r2, r2, r3
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	619a      	str	r2, [r3, #24]
 8007be4:	e00e      	b.n	8007c04 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2200      	movs	r2, #0
 8007c02:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c28:	4413      	add	r3, r2
 8007c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	00da      	lsls	r2, r3, #3
 8007c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c40:	4413      	add	r3, r2
 8007c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c50:	d91d      	bls.n	8007c8e <USB_EPStartXfer+0xe28>
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <USB_EPStartXfer+0xe0c>
 8007c68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	029b      	lsls	r3, r3, #10
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e3e1      	b.n	8008452 <USB_EPStartXfer+0x15ec>
 8007c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d116      	bne.n	8007cc4 <USB_EPStartXfer+0xe5e>
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	e3c6      	b.n	8008452 <USB_EPStartXfer+0x15ec>
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <USB_EPStartXfer+0xe7e>
 8007cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	029b      	lsls	r3, r3, #10
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e3ad      	b.n	8008452 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	78db      	ldrb	r3, [r3, #3]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	f040 8200 	bne.w	8008108 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 8091 	bne.w	8007e3c <USB_EPStartXfer+0xfd6>
 8007d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d3e:	4413      	add	r3, r2
 8007d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	00da      	lsls	r2, r3, #3
 8007d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d56:	4413      	add	r3, r2
 8007d58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d6e:	d925      	bls.n	8007dbc <USB_EPStartXfer+0xf56>
 8007d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 031f 	and.w	r3, r3, #31
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <USB_EPStartXfer+0xf3a>
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	029b      	lsls	r3, r3, #10
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e074      	b.n	8007ea6 <USB_EPStartXfer+0x1040>
 8007dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d116      	bne.n	8007dfa <USB_EPStartXfer+0xf94>
 8007dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e055      	b.n	8007ea6 <USB_EPStartXfer+0x1040>
 8007dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <USB_EPStartXfer+0xfc4>
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e24:	3301      	adds	r3, #1
 8007e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	029b      	lsls	r3, r3, #10
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	e034      	b.n	8007ea6 <USB_EPStartXfer+0x1040>
 8007e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d12c      	bne.n	8007ea6 <USB_EPStartXfer+0x1040>
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e70:	4413      	add	r3, r2
 8007e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	00da      	lsls	r2, r3, #3
 8007e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e88:	4413      	add	r3, r2
 8007e8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	785b      	ldrb	r3, [r3, #1]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f040 8091 	bne.w	8007fe8 <USB_EPStartXfer+0x1182>
 8007ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eea:	4413      	add	r3, r2
 8007eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	00da      	lsls	r2, r3, #3
 8007efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f02:	4413      	add	r3, r2
 8007f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1a:	d925      	bls.n	8007f68 <USB_EPStartXfer+0x1102>
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <USB_EPStartXfer+0x10e6>
 8007f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e06d      	b.n	8008044 <USB_EPStartXfer+0x11de>
 8007f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d116      	bne.n	8007fa6 <USB_EPStartXfer+0x1140>
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	e04e      	b.n	8008044 <USB_EPStartXfer+0x11de>
 8007fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <USB_EPStartXfer+0x1170>
 8007fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	029b      	lsls	r3, r3, #10
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e02d      	b.n	8008044 <USB_EPStartXfer+0x11de>
 8007fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d125      	bne.n	8008044 <USB_EPStartXfer+0x11de>
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008006:	b29b      	uxth	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800800e:	4413      	add	r3, r2
 8008010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	00da      	lsls	r2, r3, #3
 8008022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008026:	4413      	add	r3, r2
 8008028:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800802c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008042:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 81fe 	beq.w	8008452 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008076:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800807a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USB_EPStartXfer+0x1228>
 8008082:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800808e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008096:	2b00      	cmp	r3, #0
 8008098:	f040 81db 	bne.w	8008452 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800809c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80080a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 81d4 	bne.w	8008452 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80080d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	441a      	add	r2, r3
 80080ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80080f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008102:	b29b      	uxth	r3, r3
 8008104:	8013      	strh	r3, [r2, #0]
 8008106:	e1a4      	b.n	8008452 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	78db      	ldrb	r3, [r3, #3]
 8008114:	2b01      	cmp	r3, #1
 8008116:	f040 819a 	bne.w	800844e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699a      	ldr	r2, [r3, #24]
 8008126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	429a      	cmp	r2, r3
 8008134:	d917      	bls.n	8008166 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008156:	1ad2      	subs	r2, r2, r3
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	619a      	str	r2, [r3, #24]
 8008164:	e00e      	b.n	8008184 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8008166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2200      	movs	r2, #0
 8008182:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d178      	bne.n	8008286 <USB_EPStartXfer+0x1420>
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081b8:	4413      	add	r3, r2
 80081ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	00da      	lsls	r2, r3, #3
 80081cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081de:	2b3e      	cmp	r3, #62	; 0x3e
 80081e0:	d91d      	bls.n	800821e <USB_EPStartXfer+0x13b8>
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80081ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f0:	f003 031f 	and.w	r3, r3, #31
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <USB_EPStartXfer+0x139c>
 80081f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fc:	3b01      	subs	r3, #1
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008206:	b29b      	uxth	r3, r3
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	b29b      	uxth	r3, r3
 800820c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008214:	b29a      	uxth	r2, r3
 8008216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800821a:	801a      	strh	r2, [r3, #0]
 800821c:	e064      	b.n	80082e8 <USB_EPStartXfer+0x1482>
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008222:	2b00      	cmp	r3, #0
 8008224:	d116      	bne.n	8008254 <USB_EPStartXfer+0x13ee>
 8008226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008232:	b29a      	uxth	r2, r3
 8008234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824a:	b29a      	uxth	r2, r3
 800824c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	e049      	b.n	80082e8 <USB_EPStartXfer+0x1482>
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <USB_EPStartXfer+0x140e>
 800826a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826e:	3301      	adds	r3, #1
 8008270:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008278:	b29b      	uxth	r3, r3
 800827a:	029b      	lsls	r3, r3, #10
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e030      	b.n	80082e8 <USB_EPStartXfer+0x1482>
 8008286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d128      	bne.n	80082e8 <USB_EPStartXfer+0x1482>
 8008296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800829a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ba:	4413      	add	r3, r2
 80082bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	00da      	lsls	r2, r3, #3
 80082ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082d2:	4413      	add	r3, r2
 80082d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d178      	bne.n	80083f8 <USB_EPStartXfer+0x1592>
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008322:	b29b      	uxth	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800832a:	4413      	add	r3, r2
 800832c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	00da      	lsls	r2, r3, #3
 800833e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008342:	4413      	add	r3, r2
 8008344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008350:	2b3e      	cmp	r3, #62	; 0x3e
 8008352:	d91d      	bls.n	8008390 <USB_EPStartXfer+0x152a>
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800835e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008362:	f003 031f 	and.w	r3, r3, #31
 8008366:	2b00      	cmp	r3, #0
 8008368:	d104      	bne.n	8008374 <USB_EPStartXfer+0x150e>
 800836a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800836e:	3b01      	subs	r3, #1
 8008370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008378:	b29b      	uxth	r3, r3
 800837a:	029b      	lsls	r3, r3, #10
 800837c:	b29b      	uxth	r3, r3
 800837e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008386:	b29a      	uxth	r2, r3
 8008388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e060      	b.n	8008452 <USB_EPStartXfer+0x15ec>
 8008390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008394:	2b00      	cmp	r3, #0
 8008396:	d116      	bne.n	80083c6 <USB_EPStartXfer+0x1560>
 8008398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083aa:	801a      	strh	r2, [r3, #0]
 80083ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e045      	b.n	8008452 <USB_EPStartXfer+0x15ec>
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <USB_EPStartXfer+0x1580>
 80083dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083e0:	3301      	adds	r3, #1
 80083e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083f4:	801a      	strh	r2, [r3, #0]
 80083f6:	e02c      	b.n	8008452 <USB_EPStartXfer+0x15ec>
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	785b      	ldrb	r3, [r3, #1]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d124      	bne.n	8008452 <USB_EPStartXfer+0x15ec>
 8008408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008416:	b29b      	uxth	r3, r3
 8008418:	461a      	mov	r2, r3
 800841a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800841e:	4413      	add	r3, r2
 8008420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	00da      	lsls	r2, r3, #3
 8008432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008436:	4413      	add	r3, r2
 8008438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800843c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	e001      	b.n	8008452 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e03a      	b.n	80084c8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008478:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800847c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008484:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008488:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800848c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008490:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d020      	beq.n	8008526 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fa:	81bb      	strh	r3, [r7, #12]
 80084fc:	89bb      	ldrh	r3, [r7, #12]
 80084fe:	f083 0310 	eor.w	r3, r3, #16
 8008502:	81bb      	strh	r3, [r7, #12]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	441a      	add	r2, r3
 800850e:	89bb      	ldrh	r3, [r7, #12]
 8008510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008520:	b29b      	uxth	r3, r3
 8008522:	8013      	strh	r3, [r2, #0]
 8008524:	e01f      	b.n	8008566 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	b29b      	uxth	r3, r3
 8008534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853c:	81fb      	strh	r3, [r7, #14]
 800853e:	89fb      	ldrh	r3, [r7, #14]
 8008540:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008544:	81fb      	strh	r3, [r7, #14]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008562:	b29b      	uxth	r3, r3
 8008564:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	7b1b      	ldrb	r3, [r3, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 809d 	bne.w	80086c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d04c      	beq.n	800862a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	823b      	strh	r3, [r7, #16]
 800859e:	8a3b      	ldrh	r3, [r7, #16]
 80085a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01b      	beq.n	80085e0 <USB_EPClearStall+0x6c>
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085be:	81fb      	strh	r3, [r7, #14]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	441a      	add	r2, r3
 80085ca:	89fb      	ldrh	r3, [r7, #14]
 80085cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085dc:	b29b      	uxth	r3, r3
 80085de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d06c      	beq.n	80086c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fe:	81bb      	strh	r3, [r7, #12]
 8008600:	89bb      	ldrh	r3, [r7, #12]
 8008602:	f083 0320 	eor.w	r3, r3, #32
 8008606:	81bb      	strh	r3, [r7, #12]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	441a      	add	r2, r3
 8008612:	89bb      	ldrh	r3, [r7, #12]
 8008614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	b29b      	uxth	r3, r3
 8008626:	8013      	strh	r3, [r2, #0]
 8008628:	e04b      	b.n	80086c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	82fb      	strh	r3, [r7, #22]
 8008638:	8afb      	ldrh	r3, [r7, #22]
 800863a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01b      	beq.n	800867a <USB_EPClearStall+0x106>
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	82bb      	strh	r3, [r7, #20]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	441a      	add	r2, r3
 8008664:	8abb      	ldrh	r3, [r7, #20]
 8008666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800866e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008676:	b29b      	uxth	r3, r3
 8008678:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800868c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008690:	827b      	strh	r3, [r7, #18]
 8008692:	8a7b      	ldrh	r3, [r7, #18]
 8008694:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008698:	827b      	strh	r3, [r7, #18]
 800869a:	8a7b      	ldrh	r3, [r7, #18]
 800869c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086a0:	827b      	strh	r3, [r7, #18]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	8a7b      	ldrh	r3, [r7, #18]
 80086ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086be:	b29b      	uxth	r3, r3
 80086c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2280      	movs	r2, #128	; 0x80
 80086e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29a      	uxth	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008734:	b29b      	uxth	r3, r3
 8008736:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008738:	68fb      	ldr	r3, [r7, #12]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008746:	b480      	push	{r7}
 8008748:	b08d      	sub	sp, #52	; 0x34
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	4611      	mov	r1, r2
 8008752:	461a      	mov	r2, r3
 8008754:	460b      	mov	r3, r1
 8008756:	80fb      	strh	r3, [r7, #6]
 8008758:	4613      	mov	r3, r2
 800875a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800875c:	88bb      	ldrh	r3, [r7, #4]
 800875e:	3301      	adds	r3, #1
 8008760:	085b      	lsrs	r3, r3, #1
 8008762:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877c:	e01b      	b.n	80087b6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	3301      	adds	r3, #1
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	b29b      	uxth	r3, r3
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	b29b      	uxth	r3, r3
 8008794:	461a      	mov	r2, r3
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	3302      	adds	r3, #2
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	3301      	adds	r3, #1
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	3b01      	subs	r3, #1
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e0      	bne.n	800877e <USB_WritePMA+0x38>
  }
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3734      	adds	r7, #52	; 0x34
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b08b      	sub	sp, #44	; 0x2c
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	4611      	mov	r1, r2
 80087d6:	461a      	mov	r2, r3
 80087d8:	460b      	mov	r3, r1
 80087da:	80fb      	strh	r3, [r7, #6]
 80087dc:	4613      	mov	r3, r2
 80087de:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80087e0:	88bb      	ldrh	r3, [r7, #4]
 80087e2:	085b      	lsrs	r3, r3, #1
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087fa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	e018      	b.n	8008834 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	3302      	adds	r3, #2
 800880e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	b2da      	uxtb	r2, r3
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	3301      	adds	r3, #1
 800881c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	0a1b      	lsrs	r3, r3, #8
 8008822:	b2da      	uxtb	r2, r3
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	3b01      	subs	r3, #1
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e3      	bne.n	8008802 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800883a:	88bb      	ldrh	r3, [r7, #4]
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d007      	beq.n	8008856 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	701a      	strb	r2, [r3, #0]
  }
}
 8008856:	bf00      	nop
 8008858:	372c      	adds	r7, #44	; 0x2c
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800886e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008872:	f002 f901 	bl	800aa78 <USBD_static_malloc>
 8008876:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008886:	2302      	movs	r3, #2
 8008888:	e066      	b.n	8008958 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	7c1b      	ldrb	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d119      	bne.n	80088ce <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800889a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889e:	2202      	movs	r2, #2
 80088a0:	2181      	movs	r1, #129	; 0x81
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 ff8d 	bl	800a7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b2:	2202      	movs	r2, #2
 80088b4:	2101      	movs	r1, #1
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 ff83 	bl	800a7c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2210      	movs	r2, #16
 80088c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80088cc:	e016      	b.n	80088fc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088ce:	2340      	movs	r3, #64	; 0x40
 80088d0:	2202      	movs	r2, #2
 80088d2:	2181      	movs	r1, #129	; 0x81
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 ff74 	bl	800a7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	2202      	movs	r2, #2
 80088e4:	2101      	movs	r1, #1
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 ff6b 	bl	800a7c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2210      	movs	r2, #16
 80088f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088fc:	2308      	movs	r3, #8
 80088fe:	2203      	movs	r2, #3
 8008900:	2182      	movs	r1, #130	; 0x82
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 ff5d 	bl	800a7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7c1b      	ldrb	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800893c:	2101      	movs	r1, #1
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 f82f 	bl	800a9a2 <USBD_LL_PrepareReceive>
 8008944:	e007      	b.n	8008956 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800894c:	2340      	movs	r3, #64	; 0x40
 800894e:	2101      	movs	r1, #1
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f002 f826 	bl	800a9a2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800896c:	2181      	movs	r1, #129	; 0x81
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 ff4d 	bl	800a80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800897a:	2101      	movs	r1, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 ff46 	bl	800a80e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800898a:	2182      	movs	r1, #130	; 0x82
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 ff3e 	bl	800a80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 f869 	bl	800aa94 <USBD_static_free>
    pdev->pClassData = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e0af      	b.n	8008b5c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d03f      	beq.n	8008a88 <USBD_CDC_Setup+0xb4>
 8008a08:	2b20      	cmp	r3, #32
 8008a0a:	f040 809f 	bne.w	8008b4c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	88db      	ldrh	r3, [r3, #6]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d02e      	beq.n	8008a74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b25b      	sxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	da16      	bge.n	8008a4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008a2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	88d2      	ldrh	r2, [r2, #6]
 8008a32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	88db      	ldrh	r3, [r3, #6]
 8008a38:	2b07      	cmp	r3, #7
 8008a3a:	bf28      	it	cs
 8008a3c:	2307      	movcs	r3, #7
 8008a3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	89fa      	ldrh	r2, [r7, #14]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 facf 	bl	8009fea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008a4c:	e085      	b.n	8008b5a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	785a      	ldrb	r2, [r3, #1]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008a64:	6939      	ldr	r1, [r7, #16]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	88db      	ldrh	r3, [r3, #6]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fae8 	bl	800a042 <USBD_CtlPrepareRx>
      break;
 8008a72:	e072      	b.n	8008b5a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	7850      	ldrb	r0, [r2, #1]
 8008a80:	2200      	movs	r2, #0
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	4798      	blx	r3
      break;
 8008a86:	e068      	b.n	8008b5a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b0b      	cmp	r3, #11
 8008a8e:	d852      	bhi.n	8008b36 <USBD_CDC_Setup+0x162>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <USBD_CDC_Setup+0xc4>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008ac9 	.word	0x08008ac9
 8008a9c:	08008b45 	.word	0x08008b45
 8008aa0:	08008b37 	.word	0x08008b37
 8008aa4:	08008b37 	.word	0x08008b37
 8008aa8:	08008b37 	.word	0x08008b37
 8008aac:	08008b37 	.word	0x08008b37
 8008ab0:	08008b37 	.word	0x08008b37
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008b37 	.word	0x08008b37
 8008abc:	08008b37 	.word	0x08008b37
 8008ac0:	08008af3 	.word	0x08008af3
 8008ac4:	08008b1d 	.word	0x08008b1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d107      	bne.n	8008ae4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ad4:	f107 030a 	add.w	r3, r7, #10
 8008ad8:	2202      	movs	r2, #2
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fa84 	bl	8009fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ae2:	e032      	b.n	8008b4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 fa0e 	bl	8009f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008aec:	2303      	movs	r3, #3
 8008aee:	75fb      	strb	r3, [r7, #23]
          break;
 8008af0:	e02b      	b.n	8008b4a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d107      	bne.n	8008b0e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008afe:	f107 030d 	add.w	r3, r7, #13
 8008b02:	2201      	movs	r2, #1
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fa6f 	bl	8009fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b0c:	e01d      	b.n	8008b4a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f9f9 	bl	8009f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	75fb      	strb	r3, [r7, #23]
          break;
 8008b1a:	e016      	b.n	8008b4a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d00f      	beq.n	8008b48 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f9ec 	bl	8009f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b30:	2303      	movs	r3, #3
 8008b32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b34:	e008      	b.n	8008b48 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f9e5 	bl	8009f08 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	75fb      	strb	r3, [r7, #23]
          break;
 8008b42:	e002      	b.n	8008b4a <USBD_CDC_Setup+0x176>
          break;
 8008b44:	bf00      	nop
 8008b46:	e008      	b.n	8008b5a <USBD_CDC_Setup+0x186>
          break;
 8008b48:	bf00      	nop
      }
      break;
 8008b4a:	e006      	b.n	8008b5a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f9da 	bl	8009f08 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	75fb      	strb	r3, [r7, #23]
      break;
 8008b58:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e04f      	b.n	8008c26 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	440b      	add	r3, r1
 8008b9c:	3318      	adds	r3, #24
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d029      	beq.n	8008bf8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	3318      	adds	r3, #24
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	78f9      	ldrb	r1, [r7, #3]
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4403      	add	r3, r0
 8008bc4:	3338      	adds	r3, #56	; 0x38
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bcc:	fb01 f303 	mul.w	r3, r1, r3
 8008bd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d110      	bne.n	8008bf8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3318      	adds	r3, #24
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bea:	78f9      	ldrb	r1, [r7, #3]
 8008bec:	2300      	movs	r3, #0
 8008bee:	2200      	movs	r2, #0
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 feb5 	bl	800a960 <USBD_LL_Transmit>
 8008bf6:	e015      	b.n	8008c24 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008c20:	78fa      	ldrb	r2, [r7, #3]
 8008c22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e015      	b.n	8008c7c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 fec5 	bl	800a9e4 <USBD_LL_GetRxDataSize>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c76:	4611      	mov	r1, r2
 8008c78:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e01b      	b.n	8008cd6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d015      	beq.n	8008cd4 <USBD_CDC_EP0_RxReady+0x50>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008cae:	2bff      	cmp	r3, #255	; 0xff
 8008cb0:	d010      	beq.n	8008cd4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008cc0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	22ff      	movs	r2, #255	; 0xff
 8008cd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2243      	movs	r2, #67	; 0x43
 8008cec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cee:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	200000a4 	.word	0x200000a4

08008d00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2243      	movs	r2, #67	; 0x43
 8008d0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008d0e:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	20000060 	.word	0x20000060

08008d20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2243      	movs	r2, #67	; 0x43
 8008d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008d2e:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	200000e8 	.word	0x200000e8

08008d40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d4e:	4b03      	ldr	r3, [pc, #12]	; (8008d5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	2000001c 	.word	0x2000001c

08008d60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e004      	b.n	8008d7e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b087      	sub	sp, #28
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e008      	b.n	8008dba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e004      	b.n	8008dec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e01a      	b.n	8008e50 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d114      	bne.n	8008e4e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008e42:	2181      	movs	r1, #129	; 0x81
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fd8b 	bl	800a960 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e016      	b.n	8008ea4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d109      	bne.n	8008e92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e88:	2101      	movs	r1, #1
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 fd89 	bl	800a9a2 <USBD_LL_PrepareReceive>
 8008e90:	e007      	b.n	8008ea2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e98:	2340      	movs	r3, #64	; 0x40
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fd80 	bl	800a9a2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e01f      	b.n	8008f04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	79fa      	ldrb	r2, [r7, #7]
 8008ef6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f001 fbe7 	bl	800a6cc <USBD_LL_Init>
 8008efe:	4603      	mov	r3, r0
 8008f00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e016      	b.n	8008f52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f40:	f107 020e 	add.w	r2, r7, #14
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	4602      	mov	r2, r0
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fc12 	bl	800a78c <USBD_LL_Start>
 8008f68:	4603      	mov	r3, r0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d009      	beq.n	8008fb6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	4611      	mov	r1, r2
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d007      	beq.n	8008fe6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
  }

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 ff46 	bl	8009e94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2b02      	cmp	r3, #2
 800902a:	d01a      	beq.n	8009062 <USBD_LL_SetupStage+0x72>
 800902c:	2b02      	cmp	r3, #2
 800902e:	d822      	bhi.n	8009076 <USBD_LL_SetupStage+0x86>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <USBD_LL_SetupStage+0x4a>
 8009034:	2b01      	cmp	r3, #1
 8009036:	d00a      	beq.n	800904e <USBD_LL_SetupStage+0x5e>
 8009038:	e01d      	b.n	8009076 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f9ee 	bl	8009424 <USBD_StdDevReq>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]
      break;
 800904c:	e020      	b.n	8009090 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa52 	bl	8009500 <USBD_StdItfReq>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
      break;
 8009060:	e016      	b.n	8009090 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa91 	bl	8009592 <USBD_StdEPReq>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
      break;
 8009074:	e00c      	b.n	8009090 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800907c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009080:	b2db      	uxtb	r3, r3
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f001 fbe1 	bl	800a84c <USBD_LL_StallEP>
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]
      break;
 800908e:	bf00      	nop
  }

  return ret;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	460b      	mov	r3, r1
 80090a4:	607a      	str	r2, [r7, #4]
 80090a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d138      	bne.n	8009120 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d14a      	bne.n	8009156 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	689a      	ldr	r2, [r3, #8]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d913      	bls.n	80090f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	4293      	cmp	r3, r2
 80090e4:	bf28      	it	cs
 80090e6:	4613      	movcs	r3, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 ffc5 	bl	800a07c <USBD_CtlContinueRx>
 80090f2:	e030      	b.n	8009156 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d10b      	bne.n	8009118 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d005      	beq.n	8009118 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 ffc0 	bl	800a09e <USBD_CtlSendStatus>
 800911e:	e01a      	b.n	8009156 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b03      	cmp	r3, #3
 800912a:	d114      	bne.n	8009156 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00e      	beq.n	8009156 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	7afa      	ldrb	r2, [r7, #11]
 8009142:	4611      	mov	r1, r2
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	4798      	blx	r3
 8009148:	4603      	mov	r3, r0
 800914a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	e000      	b.n	8009158 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	460b      	mov	r3, r1
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d16b      	bne.n	800924c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3314      	adds	r3, #20
 8009178:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009180:	2b02      	cmp	r3, #2
 8009182:	d156      	bne.n	8009232 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	429a      	cmp	r2, r3
 800918e:	d914      	bls.n	80091ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	1ad2      	subs	r2, r2, r3
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	461a      	mov	r2, r3
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 ff3a 	bl	800a020 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	2100      	movs	r1, #0
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f001 fbf5 	bl	800a9a2 <USBD_LL_PrepareReceive>
 80091b8:	e03b      	b.n	8009232 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d11c      	bne.n	8009200 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d316      	bcc.n	8009200 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091dc:	429a      	cmp	r2, r3
 80091de:	d20f      	bcs.n	8009200 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 ff1b 	bl	800a020 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f2:	2300      	movs	r3, #0
 80091f4:	2200      	movs	r2, #0
 80091f6:	2100      	movs	r1, #0
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f001 fbd2 	bl	800a9a2 <USBD_LL_PrepareReceive>
 80091fe:	e018      	b.n	8009232 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b03      	cmp	r3, #3
 800920a:	d10b      	bne.n	8009224 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009224:	2180      	movs	r1, #128	; 0x80
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f001 fb10 	bl	800a84c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 ff49 	bl	800a0c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009238:	2b01      	cmp	r3, #1
 800923a:	d122      	bne.n	8009282 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f7ff fe98 	bl	8008f72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800924a:	e01a      	b.n	8009282 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b03      	cmp	r3, #3
 8009256:	d114      	bne.n	8009282 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00e      	beq.n	8009282 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	7afa      	ldrb	r2, [r7, #11]
 800926e:	4611      	mov	r1, r2
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	e000      	b.n	8009284 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80092bc:	2303      	movs	r3, #3
 80092be:	e02f      	b.n	8009320 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00f      	beq.n	80092ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6852      	ldr	r2, [r2, #4]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	4611      	mov	r1, r2
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 fa66 	bl	800a7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2240      	movs	r2, #64	; 0x40
 8009302:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009306:	2340      	movs	r3, #64	; 0x40
 8009308:	2200      	movs	r2, #0
 800930a:	2180      	movs	r1, #128	; 0x80
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fa58 	bl	800a7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2240      	movs	r2, #64	; 0x40
 800931c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009356:	b2da      	uxtb	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2204      	movs	r2, #4
 8009362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b04      	cmp	r3, #4
 8009386:	d106      	bne.n	8009396 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800938e:	b2da      	uxtb	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e012      	b.n	80093e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	d10b      	bne.n	80093de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3301      	adds	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009406:	8a3b      	ldrh	r3, [r7, #16]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b21a      	sxth	r2, r3
 800940c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009410:	4313      	orrs	r3, r2
 8009412:	b21b      	sxth	r3, r3
 8009414:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009416:	89fb      	ldrh	r3, [r7, #14]
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d005      	beq.n	800944a <USBD_StdDevReq+0x26>
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d853      	bhi.n	80094ea <USBD_StdDevReq+0xc6>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00b      	beq.n	800945e <USBD_StdDevReq+0x3a>
 8009446:	2b20      	cmp	r3, #32
 8009448:	d14f      	bne.n	80094ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]
      break;
 800945c:	e04a      	b.n	80094f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	2b09      	cmp	r3, #9
 8009464:	d83b      	bhi.n	80094de <USBD_StdDevReq+0xba>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_StdDevReq+0x48>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	080094c1 	.word	0x080094c1
 8009470:	080094d5 	.word	0x080094d5
 8009474:	080094df 	.word	0x080094df
 8009478:	080094cb 	.word	0x080094cb
 800947c:	080094df 	.word	0x080094df
 8009480:	0800949f 	.word	0x0800949f
 8009484:	08009495 	.word	0x08009495
 8009488:	080094df 	.word	0x080094df
 800948c:	080094b7 	.word	0x080094b7
 8009490:	080094a9 	.word	0x080094a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9de 	bl	8009858 <USBD_GetDescriptor>
          break;
 800949c:	e024      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fb6d 	bl	8009b80 <USBD_SetAddress>
          break;
 80094a6:	e01f      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fbac 	bl	8009c08 <USBD_SetConfig>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]
          break;
 80094b4:	e018      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fc4b 	bl	8009d54 <USBD_GetConfig>
          break;
 80094be:	e013      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fc7c 	bl	8009dc0 <USBD_GetStatus>
          break;
 80094c8:	e00e      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fcab 	bl	8009e28 <USBD_SetFeature>
          break;
 80094d2:	e009      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fcba 	bl	8009e50 <USBD_ClrFeature>
          break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fd11 	bl	8009f08 <USBD_CtlError>
          break;
 80094e6:	bf00      	nop
      }
      break;
 80094e8:	e004      	b.n	80094f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fd0b 	bl	8009f08 <USBD_CtlError>
      break;
 80094f2:	bf00      	nop
  }

  return ret;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop

08009500 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009516:	2b40      	cmp	r3, #64	; 0x40
 8009518:	d005      	beq.n	8009526 <USBD_StdItfReq+0x26>
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d82f      	bhi.n	800957e <USBD_StdItfReq+0x7e>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <USBD_StdItfReq+0x26>
 8009522:	2b20      	cmp	r3, #32
 8009524:	d12b      	bne.n	800957e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952c:	b2db      	uxtb	r3, r3
 800952e:	3b01      	subs	r3, #1
 8009530:	2b02      	cmp	r3, #2
 8009532:	d81d      	bhi.n	8009570 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	889b      	ldrh	r3, [r3, #4]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b01      	cmp	r3, #1
 800953c:	d813      	bhi.n	8009566 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	88db      	ldrh	r3, [r3, #6]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d110      	bne.n	800957a <USBD_StdItfReq+0x7a>
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10d      	bne.n	800957a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fd9d 	bl	800a09e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009564:	e009      	b.n	800957a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fccd 	bl	8009f08 <USBD_CtlError>
          break;
 800956e:	e004      	b.n	800957a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fcc8 	bl	8009f08 <USBD_CtlError>
          break;
 8009578:	e000      	b.n	800957c <USBD_StdItfReq+0x7c>
          break;
 800957a:	bf00      	nop
      }
      break;
 800957c:	e004      	b.n	8009588 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fcc1 	bl	8009f08 <USBD_CtlError>
      break;
 8009586:	bf00      	nop
  }

  return ret;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	889b      	ldrh	r3, [r3, #4]
 80095a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d007      	beq.n	80095c2 <USBD_StdEPReq+0x30>
 80095b2:	2b40      	cmp	r3, #64	; 0x40
 80095b4:	f200 8145 	bhi.w	8009842 <USBD_StdEPReq+0x2b0>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00c      	beq.n	80095d6 <USBD_StdEPReq+0x44>
 80095bc:	2b20      	cmp	r3, #32
 80095be:	f040 8140 	bne.w	8009842 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	4798      	blx	r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]
      break;
 80095d4:	e13a      	b.n	800984c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	785b      	ldrb	r3, [r3, #1]
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d007      	beq.n	80095ee <USBD_StdEPReq+0x5c>
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f300 8129 	bgt.w	8009836 <USBD_StdEPReq+0x2a4>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d07f      	beq.n	80096e8 <USBD_StdEPReq+0x156>
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d03c      	beq.n	8009666 <USBD_StdEPReq+0xd4>
 80095ec:	e123      	b.n	8009836 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d002      	beq.n	8009600 <USBD_StdEPReq+0x6e>
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d016      	beq.n	800962c <USBD_StdEPReq+0x9a>
 80095fe:	e02c      	b.n	800965a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00d      	beq.n	8009622 <USBD_StdEPReq+0x90>
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b80      	cmp	r3, #128	; 0x80
 800960a:	d00a      	beq.n	8009622 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f91b 	bl	800a84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009616:	2180      	movs	r1, #128	; 0x80
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f917 	bl	800a84c <USBD_LL_StallEP>
 800961e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009620:	e020      	b.n	8009664 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fc6f 	bl	8009f08 <USBD_CtlError>
              break;
 800962a:	e01b      	b.n	8009664 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	885b      	ldrh	r3, [r3, #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10e      	bne.n	8009652 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <USBD_StdEPReq+0xc0>
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	2b80      	cmp	r3, #128	; 0x80
 800963e:	d008      	beq.n	8009652 <USBD_StdEPReq+0xc0>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	88db      	ldrh	r3, [r3, #6]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 f8fd 	bl	800a84c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fd23 	bl	800a09e <USBD_CtlSendStatus>

              break;
 8009658:	e004      	b.n	8009664 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc53 	bl	8009f08 <USBD_CtlError>
              break;
 8009662:	bf00      	nop
          }
          break;
 8009664:	e0ec      	b.n	8009840 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d002      	beq.n	8009678 <USBD_StdEPReq+0xe6>
 8009672:	2b03      	cmp	r3, #3
 8009674:	d016      	beq.n	80096a4 <USBD_StdEPReq+0x112>
 8009676:	e030      	b.n	80096da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00d      	beq.n	800969a <USBD_StdEPReq+0x108>
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b80      	cmp	r3, #128	; 0x80
 8009682:	d00a      	beq.n	800969a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f8df 	bl	800a84c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f001 f8db 	bl	800a84c <USBD_LL_StallEP>
 8009696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009698:	e025      	b.n	80096e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc33 	bl	8009f08 <USBD_CtlError>
              break;
 80096a2:	e020      	b.n	80096e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	885b      	ldrh	r3, [r3, #2]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d11b      	bne.n	80096e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096b6:	7bbb      	ldrb	r3, [r7, #14]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 f8e5 	bl	800a88a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fcec 	bl	800a09e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80096d8:	e004      	b.n	80096e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc13 	bl	8009f08 <USBD_CtlError>
              break;
 80096e2:	e000      	b.n	80096e6 <USBD_StdEPReq+0x154>
              break;
 80096e4:	bf00      	nop
          }
          break;
 80096e6:	e0ab      	b.n	8009840 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d002      	beq.n	80096fa <USBD_StdEPReq+0x168>
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d032      	beq.n	800975e <USBD_StdEPReq+0x1cc>
 80096f8:	e097      	b.n	800982a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d007      	beq.n	8009710 <USBD_StdEPReq+0x17e>
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b80      	cmp	r3, #128	; 0x80
 8009704:	d004      	beq.n	8009710 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fbfd 	bl	8009f08 <USBD_CtlError>
                break;
 800970e:	e091      	b.n	8009834 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da0b      	bge.n	8009730 <USBD_StdEPReq+0x19e>
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	3310      	adds	r3, #16
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	4413      	add	r3, r2
 800972c:	3304      	adds	r3, #4
 800972e:	e00b      	b.n	8009748 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009736:	4613      	mov	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4413      	add	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	4413      	add	r3, r2
 8009746:	3304      	adds	r3, #4
 8009748:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2202      	movs	r2, #2
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fc47 	bl	8009fea <USBD_CtlSendData>
              break;
 800975c:	e06a      	b.n	8009834 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800975e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da11      	bge.n	800978a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	3324      	adds	r3, #36	; 0x24
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d117      	bne.n	80097b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009780:	6839      	ldr	r1, [r7, #0]
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fbc0 	bl	8009f08 <USBD_CtlError>
                  break;
 8009788:	e054      	b.n	8009834 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	440b      	add	r3, r1
 800979c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d104      	bne.n	80097b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fbad 	bl	8009f08 <USBD_CtlError>
                  break;
 80097ae:	e041      	b.n	8009834 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	da0b      	bge.n	80097d0 <USBD_StdEPReq+0x23e>
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097be:	4613      	mov	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	3310      	adds	r3, #16
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4413      	add	r3, r2
 80097cc:	3304      	adds	r3, #4
 80097ce:	e00b      	b.n	80097e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4413      	add	r3, r2
 80097e6:	3304      	adds	r3, #4
 80097e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <USBD_StdEPReq+0x264>
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	2b80      	cmp	r3, #128	; 0x80
 80097f4:	d103      	bne.n	80097fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	e00e      	b.n	800981c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 f860 	bl	800a8c8 <USBD_LL_IsStallEP>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	e002      	b.n	800981c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2202      	movs	r2, #2
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fbe1 	bl	8009fea <USBD_CtlSendData>
              break;
 8009828:	e004      	b.n	8009834 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fb6b 	bl	8009f08 <USBD_CtlError>
              break;
 8009832:	bf00      	nop
          }
          break;
 8009834:	e004      	b.n	8009840 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fb65 	bl	8009f08 <USBD_CtlError>
          break;
 800983e:	bf00      	nop
      }
      break;
 8009840:	e004      	b.n	800984c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fb5f 	bl	8009f08 <USBD_CtlError>
      break;
 800984a:	bf00      	nop
  }

  return ret;
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009862:	2300      	movs	r3, #0
 8009864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	2b0e      	cmp	r3, #14
 800987a:	f200 8152 	bhi.w	8009b22 <USBD_GetDescriptor+0x2ca>
 800987e:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBD_GetDescriptor+0x2c>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	080098f5 	.word	0x080098f5
 8009888:	0800990d 	.word	0x0800990d
 800988c:	0800994d 	.word	0x0800994d
 8009890:	08009b23 	.word	0x08009b23
 8009894:	08009b23 	.word	0x08009b23
 8009898:	08009ac3 	.word	0x08009ac3
 800989c:	08009aef 	.word	0x08009aef
 80098a0:	08009b23 	.word	0x08009b23
 80098a4:	08009b23 	.word	0x08009b23
 80098a8:	08009b23 	.word	0x08009b23
 80098ac:	08009b23 	.word	0x08009b23
 80098b0:	08009b23 	.word	0x08009b23
 80098b4:	08009b23 	.word	0x08009b23
 80098b8:	08009b23 	.word	0x08009b23
 80098bc:	080098c1 	.word	0x080098c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00b      	beq.n	80098e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	7c12      	ldrb	r2, [r2, #16]
 80098d8:	f107 0108 	add.w	r1, r7, #8
 80098dc:	4610      	mov	r0, r2
 80098de:	4798      	blx	r3
 80098e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098e2:	e126      	b.n	8009b32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb0e 	bl	8009f08 <USBD_CtlError>
        err++;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	3301      	adds	r3, #1
 80098f0:	72fb      	strb	r3, [r7, #11]
      break;
 80098f2:	e11e      	b.n	8009b32 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7c12      	ldrb	r2, [r2, #16]
 8009900:	f107 0108 	add.w	r1, r7, #8
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
 8009908:	60f8      	str	r0, [r7, #12]
      break;
 800990a:	e112      	b.n	8009b32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	7c1b      	ldrb	r3, [r3, #16]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10d      	bne.n	8009930 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800991a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991c:	f107 0208 	add.w	r2, r7, #8
 8009920:	4610      	mov	r0, r2
 8009922:	4798      	blx	r3
 8009924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3301      	adds	r3, #1
 800992a:	2202      	movs	r2, #2
 800992c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800992e:	e100      	b.n	8009b32 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	f107 0208 	add.w	r2, r7, #8
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
 8009940:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	2202      	movs	r2, #2
 8009948:	701a      	strb	r2, [r3, #0]
      break;
 800994a:	e0f2      	b.n	8009b32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	885b      	ldrh	r3, [r3, #2]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b05      	cmp	r3, #5
 8009954:	f200 80ac 	bhi.w	8009ab0 <USBD_GetDescriptor+0x258>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <USBD_GetDescriptor+0x108>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009979 	.word	0x08009979
 8009964:	080099ad 	.word	0x080099ad
 8009968:	080099e1 	.word	0x080099e1
 800996c:	08009a15 	.word	0x08009a15
 8009970:	08009a49 	.word	0x08009a49
 8009974:	08009a7d 	.word	0x08009a7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00b      	beq.n	800999c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7c12      	ldrb	r2, [r2, #16]
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999a:	e091      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fab2 	bl	8009f08 <USBD_CtlError>
            err++;
 80099a4:	7afb      	ldrb	r3, [r7, #11]
 80099a6:	3301      	adds	r3, #1
 80099a8:	72fb      	strb	r3, [r7, #11]
          break;
 80099aa:	e089      	b.n	8009ac0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ce:	e077      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa98 	bl	8009f08 <USBD_CtlError>
            err++;
 80099d8:	7afb      	ldrb	r3, [r7, #11]
 80099da:	3301      	adds	r3, #1
 80099dc:	72fb      	strb	r3, [r7, #11]
          break;
 80099de:	e06f      	b.n	8009ac0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e05d      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa7e 	bl	8009f08 <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e055      	b.n	8009ac0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a36:	e043      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa64 	bl	8009f08 <USBD_CtlError>
            err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
          break;
 8009a46:	e03b      	b.n	8009ac0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e029      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa4a 	bl	8009f08 <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e021      	b.n	8009ac0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	7c12      	ldrb	r2, [r2, #16]
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a9e:	e00f      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa30 	bl	8009f08 <USBD_CtlError>
            err++;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	72fb      	strb	r3, [r7, #11]
          break;
 8009aae:	e007      	b.n	8009ac0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fa28 	bl	8009f08 <USBD_CtlError>
          err++;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	3301      	adds	r3, #1
 8009abc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009abe:	bf00      	nop
      }
      break;
 8009ac0:	e037      	b.n	8009b32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	7c1b      	ldrb	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d109      	bne.n	8009ade <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	f107 0208 	add.w	r2, r7, #8
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	4798      	blx	r3
 8009ada:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009adc:	e029      	b.n	8009b32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fa11 	bl	8009f08 <USBD_CtlError>
        err++;
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	72fb      	strb	r3, [r7, #11]
      break;
 8009aec:	e021      	b.n	8009b32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7c1b      	ldrb	r3, [r3, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10d      	bne.n	8009b12 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afe:	f107 0208 	add.w	r2, r7, #8
 8009b02:	4610      	mov	r0, r2
 8009b04:	4798      	blx	r3
 8009b06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b10:	e00f      	b.n	8009b32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f9f7 	bl	8009f08 <USBD_CtlError>
        err++;
 8009b1a:	7afb      	ldrb	r3, [r7, #11]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b20:	e007      	b.n	8009b32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9ef 	bl	8009f08 <USBD_CtlError>
      err++;
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009b30:	bf00      	nop
  }

  if (err != 0U)
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11e      	bne.n	8009b76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	88db      	ldrh	r3, [r3, #6]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b40:	893b      	ldrh	r3, [r7, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00e      	beq.n	8009b64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	88da      	ldrh	r2, [r3, #6]
 8009b4a:	893b      	ldrh	r3, [r7, #8]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bf28      	it	cs
 8009b50:	4613      	movcs	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b56:	893b      	ldrh	r3, [r7, #8]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68f9      	ldr	r1, [r7, #12]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa44 	bl	8009fea <USBD_CtlSendData>
 8009b62:	e009      	b.n	8009b78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f9ce 	bl	8009f08 <USBD_CtlError>
 8009b6c:	e004      	b.n	8009b78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa95 	bl	800a09e <USBD_CtlSendStatus>
 8009b74:	e000      	b.n	8009b78 <USBD_GetDescriptor+0x320>
    return;
 8009b76:	bf00      	nop
  }
}
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop

08009b80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	889b      	ldrh	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d131      	bne.n	8009bf6 <USBD_SetAddress+0x76>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	88db      	ldrh	r3, [r3, #6]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d12d      	bne.n	8009bf6 <USBD_SetAddress+0x76>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8009ba0:	d829      	bhi.n	8009bf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d104      	bne.n	8009bc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9a3 	bl	8009f08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc2:	e01d      	b.n	8009c00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7bfa      	ldrb	r2, [r7, #15]
 8009bc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fea6 	bl	800a922 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa61 	bl	800a09e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	e009      	b.n	8009c00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf4:	e004      	b.n	8009c00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f985 	bl	8009f08 <USBD_CtlError>
  }
}
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c12:	2300      	movs	r3, #0
 8009c14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	885b      	ldrh	r3, [r3, #2]
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	4b4c      	ldr	r3, [pc, #304]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c20:	4b4b      	ldr	r3, [pc, #300]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d905      	bls.n	8009c34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f96c 	bl	8009f08 <USBD_CtlError>
    return USBD_FAIL;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e088      	b.n	8009d46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d002      	beq.n	8009c46 <USBD_SetConfig+0x3e>
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d025      	beq.n	8009c90 <USBD_SetConfig+0x88>
 8009c44:	e071      	b.n	8009d2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c46:	4b42      	ldr	r3, [pc, #264]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01c      	beq.n	8009c88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009c4e:	4b40      	ldr	r3, [pc, #256]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c58:	4b3d      	ldr	r3, [pc, #244]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f992 	bl	8008f88 <USBD_SetClassConfig>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f949 	bl	8009f08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c76:	e065      	b.n	8009d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa10 	bl	800a09e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2203      	movs	r2, #3
 8009c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c86:	e05d      	b.n	8009d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa08 	bl	800a09e <USBD_CtlSendStatus>
      break;
 8009c8e:	e059      	b.n	8009d44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c90:	4b2f      	ldr	r3, [pc, #188]	; (8009d50 <USBD_SetConfig+0x148>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d112      	bne.n	8009cbe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ca0:	4b2b      	ldr	r3, [pc, #172]	; (8009d50 <USBD_SetConfig+0x148>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009caa:	4b29      	ldr	r3, [pc, #164]	; (8009d50 <USBD_SetConfig+0x148>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff f985 	bl	8008fc0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f9f1 	bl	800a09e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cbc:	e042      	b.n	8009d44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009cbe:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <USBD_SetConfig+0x148>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d02a      	beq.n	8009d22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff f973 	bl	8008fc0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009cda:	4b1d      	ldr	r3, [pc, #116]	; (8009d50 <USBD_SetConfig+0x148>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ce4:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <USBD_SetConfig+0x148>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff f94c 	bl	8008f88 <USBD_SetClassConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00f      	beq.n	8009d1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f903 	bl	8009f08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff f958 	bl	8008fc0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2202      	movs	r2, #2
 8009d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d18:	e014      	b.n	8009d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9bf 	bl	800a09e <USBD_CtlSendStatus>
      break;
 8009d20:	e010      	b.n	8009d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9bb 	bl	800a09e <USBD_CtlSendStatus>
      break;
 8009d28:	e00c      	b.n	8009d44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f8eb 	bl	8009f08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <USBD_SetConfig+0x148>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff f941 	bl	8008fc0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	73fb      	strb	r3, [r7, #15]
      break;
 8009d42:	bf00      	nop
  }

  return ret;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000414 	.word	0x20000414

08009d54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	88db      	ldrh	r3, [r3, #6]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d004      	beq.n	8009d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f8cd 	bl	8009f08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d6e:	e023      	b.n	8009db8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	dc02      	bgt.n	8009d82 <USBD_GetConfig+0x2e>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	dc03      	bgt.n	8009d88 <USBD_GetConfig+0x34>
 8009d80:	e015      	b.n	8009dae <USBD_GetConfig+0x5a>
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d00b      	beq.n	8009d9e <USBD_GetConfig+0x4a>
 8009d86:	e012      	b.n	8009dae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3308      	adds	r3, #8
 8009d92:	2201      	movs	r2, #1
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f927 	bl	8009fea <USBD_CtlSendData>
        break;
 8009d9c:	e00c      	b.n	8009db8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3304      	adds	r3, #4
 8009da2:	2201      	movs	r2, #1
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f91f 	bl	8009fea <USBD_CtlSendData>
        break;
 8009dac:	e004      	b.n	8009db8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f8a9 	bl	8009f08 <USBD_CtlError>
        break;
 8009db6:	bf00      	nop
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d81e      	bhi.n	8009e16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	88db      	ldrh	r3, [r3, #6]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d004      	beq.n	8009dea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f890 	bl	8009f08 <USBD_CtlError>
        break;
 8009de8:	e01a      	b.n	8009e20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d005      	beq.n	8009e06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f043 0202 	orr.w	r2, r3, #2
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	330c      	adds	r3, #12
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f8eb 	bl	8009fea <USBD_CtlSendData>
      break;
 8009e14:	e004      	b.n	8009e20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f875 	bl	8009f08 <USBD_CtlError>
      break;
 8009e1e:	bf00      	nop
  }
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	885b      	ldrh	r3, [r3, #2]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d106      	bne.n	8009e48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f92b 	bl	800a09e <USBD_CtlSendStatus>
  }
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d80b      	bhi.n	8009e80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	885b      	ldrh	r3, [r3, #2]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10c      	bne.n	8009e8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f910 	bl	800a09e <USBD_CtlSendStatus>
      }
      break;
 8009e7e:	e004      	b.n	8009e8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f840 	bl	8009f08 <USBD_CtlError>
      break;
 8009e88:	e000      	b.n	8009e8c <USBD_ClrFeature+0x3c>
      break;
 8009e8a:	bf00      	nop
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	781a      	ldrb	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fa92 	bl	80093e8 <SWAPBYTE>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f7ff fa85 	bl	80093e8 <SWAPBYTE>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f7ff fa78 	bl	80093e8 <SWAPBYTE>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	80da      	strh	r2, [r3, #6]
}
 8009f00:	bf00      	nop
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f12:	2180      	movs	r1, #128	; 0x80
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fc99 	bl	800a84c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fc95 	bl	800a84c <USBD_LL_StallEP>
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d036      	beq.n	8009fae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f44:	6938      	ldr	r0, [r7, #16]
 8009f46:	f000 f836 	bl	8009fb6 <USBD_GetLen>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	7812      	ldrb	r2, [r2, #0]
 8009f62:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	3301      	adds	r3, #1
 8009f68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	4413      	add	r3, r2
 8009f70:	2203      	movs	r2, #3
 8009f72:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	3301      	adds	r3, #1
 8009f78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f7a:	e013      	b.n	8009fa4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	4413      	add	r3, r2
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	7812      	ldrb	r2, [r2, #0]
 8009f86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	613b      	str	r3, [r7, #16]
    idx++;
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	3301      	adds	r3, #1
 8009f92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	4413      	add	r3, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e7      	bne.n	8009f7c <USBD_GetString+0x52>
 8009fac:	e000      	b.n	8009fb0 <USBD_GetString+0x86>
    return;
 8009fae:	bf00      	nop
  }
}
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fc6:	e005      	b.n	8009fd4 <USBD_GetLen+0x1e>
  {
    len++;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1f5      	bne.n	8009fc8 <USBD_GetLen+0x12>
  }

  return len;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	2100      	movs	r1, #0
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f000 fca5 	bl	800a960 <USBD_LL_Transmit>

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	2100      	movs	r1, #0
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fc94 	bl	800a960 <USBD_LL_Transmit>

  return USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	60f8      	str	r0, [r7, #12]
 800a04a:	60b9      	str	r1, [r7, #8]
 800a04c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2203      	movs	r2, #3
 800a052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	2100      	movs	r1, #0
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 fc98 	bl	800a9a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	2100      	movs	r1, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fc87 	bl	800a9a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2204      	movs	r2, #4
 800a0aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fc53 	bl	800a960 <USBD_LL_Transmit>

  return USBD_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fc61 	bl	800a9a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4912      	ldr	r1, [pc, #72]	; (800a13c <MX_USB_Device_Init+0x50>)
 800a0f4:	4812      	ldr	r0, [pc, #72]	; (800a140 <MX_USB_Device_Init+0x54>)
 800a0f6:	f7fe fed9 	bl	8008eac <USBD_Init>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a100:	f7f7 fa6a 	bl	80015d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a104:	490f      	ldr	r1, [pc, #60]	; (800a144 <MX_USB_Device_Init+0x58>)
 800a106:	480e      	ldr	r0, [pc, #56]	; (800a140 <MX_USB_Device_Init+0x54>)
 800a108:	f7fe ff00 	bl	8008f0c <USBD_RegisterClass>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a112:	f7f7 fa61 	bl	80015d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a116:	490c      	ldr	r1, [pc, #48]	; (800a148 <MX_USB_Device_Init+0x5c>)
 800a118:	4809      	ldr	r0, [pc, #36]	; (800a140 <MX_USB_Device_Init+0x54>)
 800a11a:	f7fe fe21 	bl	8008d60 <USBD_CDC_RegisterInterface>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a124:	f7f7 fa58 	bl	80015d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a128:	4805      	ldr	r0, [pc, #20]	; (800a140 <MX_USB_Device_Init+0x54>)
 800a12a:	f7fe ff16 	bl	8008f5a <USBD_Start>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a134:	f7f7 fa50 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a138:	bf00      	nop
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20000140 	.word	0x20000140
 800a140:	20000418 	.word	0x20000418
 800a144:	20000028 	.word	0x20000028
 800a148:	2000012c 	.word	0x2000012c

0800a14c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a150:	2200      	movs	r2, #0
 800a152:	4905      	ldr	r1, [pc, #20]	; (800a168 <CDC_Init_FS+0x1c>)
 800a154:	4805      	ldr	r0, [pc, #20]	; (800a16c <CDC_Init_FS+0x20>)
 800a156:	f7fe fe18 	bl	8008d8a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a15a:	4905      	ldr	r1, [pc, #20]	; (800a170 <CDC_Init_FS+0x24>)
 800a15c:	4803      	ldr	r0, [pc, #12]	; (800a16c <CDC_Init_FS+0x20>)
 800a15e:	f7fe fe32 	bl	8008dc6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a162:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a164:	4618      	mov	r0, r3
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000ad0 	.word	0x20000ad0
 800a16c:	20000418 	.word	0x20000418
 800a170:	200006e8 	.word	0x200006e8

0800a174 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a178:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	6039      	str	r1, [r7, #0]
 800a18e:	71fb      	strb	r3, [r7, #7]
 800a190:	4613      	mov	r3, r2
 800a192:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b23      	cmp	r3, #35	; 0x23
 800a198:	d84a      	bhi.n	800a230 <CDC_Control_FS+0xac>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <CDC_Control_FS+0x1c>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a231 	.word	0x0800a231
 800a1a4:	0800a231 	.word	0x0800a231
 800a1a8:	0800a231 	.word	0x0800a231
 800a1ac:	0800a231 	.word	0x0800a231
 800a1b0:	0800a231 	.word	0x0800a231
 800a1b4:	0800a231 	.word	0x0800a231
 800a1b8:	0800a231 	.word	0x0800a231
 800a1bc:	0800a231 	.word	0x0800a231
 800a1c0:	0800a231 	.word	0x0800a231
 800a1c4:	0800a231 	.word	0x0800a231
 800a1c8:	0800a231 	.word	0x0800a231
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a231 	.word	0x0800a231
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a231 	.word	0x0800a231
 800a1dc:	0800a231 	.word	0x0800a231
 800a1e0:	0800a231 	.word	0x0800a231
 800a1e4:	0800a231 	.word	0x0800a231
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a231 	.word	0x0800a231
 800a1f0:	0800a231 	.word	0x0800a231
 800a1f4:	0800a231 	.word	0x0800a231
 800a1f8:	0800a231 	.word	0x0800a231
 800a1fc:	0800a231 	.word	0x0800a231
 800a200:	0800a231 	.word	0x0800a231
 800a204:	0800a231 	.word	0x0800a231
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a231 	.word	0x0800a231
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a231 	.word	0x0800a231
 800a220:	0800a231 	.word	0x0800a231
 800a224:	0800a231 	.word	0x0800a231
 800a228:	0800a231 	.word	0x0800a231
 800a22c:	0800a231 	.word	0x0800a231
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a230:	bf00      	nop
  }

  return (USBD_OK);
 800a232:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7f6 fb0d 	bl	800086c <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	4805      	ldr	r0, [pc, #20]	; (800a26c <CDC_Receive_FS+0x2c>)
 800a256:	f7fe fdb6 	bl	8008dc6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a25a:	4804      	ldr	r0, [pc, #16]	; (800a26c <CDC_Receive_FS+0x2c>)
 800a25c:	f7fe fdfc 	bl	8008e58 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800a260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20000418 	.word	0x20000418

0800a270 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <CDC_Transmit_FS+0x48>)
 800a282:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a286:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a292:	2301      	movs	r3, #1
 800a294:	e00b      	b.n	800a2ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a296:	887b      	ldrh	r3, [r7, #2]
 800a298:	461a      	mov	r2, r3
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4806      	ldr	r0, [pc, #24]	; (800a2b8 <CDC_Transmit_FS+0x48>)
 800a29e:	f7fe fd74 	bl	8008d8a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2a2:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <CDC_Transmit_FS+0x48>)
 800a2a4:	f7fe fda8 	bl	8008df8 <USBD_CDC_TransmitPacket>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000418 	.word	0x20000418

0800a2bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	6039      	str	r1, [r7, #0]
 800a2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2212      	movs	r2, #18
 800a2f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800a2f2:	4b03      	ldr	r3, [pc, #12]	; (800a300 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20000160 	.word	0x20000160

0800a304 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	4603      	mov	r3, r0
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	2204      	movs	r2, #4
 800a314:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a316:	4b03      	ldr	r3, [pc, #12]	; (800a324 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	20000174 	.word	0x20000174

0800a328 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	6039      	str	r1, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4907      	ldr	r1, [pc, #28]	; (800a35c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a33e:	4808      	ldr	r0, [pc, #32]	; (800a360 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a340:	f7ff fdf3 	bl	8009f2a <USBD_GetString>
 800a344:	e004      	b.n	800a350 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4904      	ldr	r1, [pc, #16]	; (800a35c <USBD_CDC_ProductStrDescriptor+0x34>)
 800a34a:	4805      	ldr	r0, [pc, #20]	; (800a360 <USBD_CDC_ProductStrDescriptor+0x38>)
 800a34c:	f7ff fded 	bl	8009f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a350:	4b02      	ldr	r3, [pc, #8]	; (800a35c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000eb8 	.word	0x20000eb8
 800a360:	0800ab98 	.word	0x0800ab98

0800a364 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	6039      	str	r1, [r7, #0]
 800a36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	4904      	ldr	r1, [pc, #16]	; (800a384 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800a374:	4804      	ldr	r0, [pc, #16]	; (800a388 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800a376:	f7ff fdd8 	bl	8009f2a <USBD_GetString>
  return USBD_StrDesc;
 800a37a:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20000eb8 	.word	0x20000eb8
 800a388:	0800abb0 	.word	0x0800abb0

0800a38c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	221a      	movs	r2, #26
 800a39c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a39e:	f000 f843 	bl	800a428 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a3a2:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20000178 	.word	0x20000178

0800a3b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d105      	bne.n	800a3ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	4907      	ldr	r1, [pc, #28]	; (800a3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3c6:	4808      	ldr	r0, [pc, #32]	; (800a3e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a3c8:	f7ff fdaf 	bl	8009f2a <USBD_GetString>
 800a3cc:	e004      	b.n	800a3d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800a3d4:	f7ff fda9 	bl	8009f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000eb8 	.word	0x20000eb8
 800a3e8:	0800abc4 	.word	0x0800abc4

0800a3ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	6039      	str	r1, [r7, #0]
 800a3f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d105      	bne.n	800a40a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	4907      	ldr	r1, [pc, #28]	; (800a420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a402:	4808      	ldr	r0, [pc, #32]	; (800a424 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a404:	f7ff fd91 	bl	8009f2a <USBD_GetString>
 800a408:	e004      	b.n	800a414 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	4904      	ldr	r1, [pc, #16]	; (800a420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800a40e:	4805      	ldr	r0, [pc, #20]	; (800a424 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800a410:	f7ff fd8b 	bl	8009f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000eb8 	.word	0x20000eb8
 800a424:	0800abd0 	.word	0x0800abd0

0800a428 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <Get_SerialNum+0x44>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a434:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <Get_SerialNum+0x48>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a43a:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <Get_SerialNum+0x4c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4413      	add	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a44e:	2208      	movs	r2, #8
 800a450:	4909      	ldr	r1, [pc, #36]	; (800a478 <Get_SerialNum+0x50>)
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f814 	bl	800a480 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a458:	2204      	movs	r2, #4
 800a45a:	4908      	ldr	r1, [pc, #32]	; (800a47c <Get_SerialNum+0x54>)
 800a45c:	68b8      	ldr	r0, [r7, #8]
 800a45e:	f000 f80f 	bl	800a480 <IntToUnicode>
  }
}
 800a462:	bf00      	nop
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	1fff7590 	.word	0x1fff7590
 800a470:	1fff7594 	.word	0x1fff7594
 800a474:	1fff7598 	.word	0x1fff7598
 800a478:	2000017a 	.word	0x2000017a
 800a47c:	2000018a 	.word	0x2000018a

0800a480 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
 800a496:	e027      	b.n	800a4e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	0f1b      	lsrs	r3, r3, #28
 800a49c:	2b09      	cmp	r3, #9
 800a49e:	d80b      	bhi.n	800a4b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	0f1b      	lsrs	r3, r3, #28
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	440b      	add	r3, r1
 800a4b0:	3230      	adds	r2, #48	; 0x30
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	701a      	strb	r2, [r3, #0]
 800a4b6:	e00a      	b.n	800a4ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	0f1b      	lsrs	r3, r3, #28
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	440b      	add	r3, r1
 800a4c8:	3237      	adds	r2, #55	; 0x37
 800a4ca:	b2d2      	uxtb	r2, r2
 800a4cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	3301      	adds	r3, #1
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	4413      	add	r3, r2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	75fb      	strb	r3, [r7, #23]
 800a4e8:	7dfa      	ldrb	r2, [r7, #23]
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3d3      	bcc.n	800a498 <IntToUnicode+0x18>
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b094      	sub	sp, #80	; 0x50
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	2244      	movs	r2, #68	; 0x44
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fb2d 	bl	800ab70 <memset>
  if(pcdHandle->Instance==USB)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <HAL_PCD_MspInit+0x70>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d122      	bne.n	800a566 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a524:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a526:	2300      	movs	r3, #0
 800a528:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fa f8de 	bl	80046f0 <HAL_RCCEx_PeriphCLKConfig>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800a53a:	f7f7 f84d 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a53e:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <HAL_PCD_MspInit+0x74>)
 800a540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a542:	4a0c      	ldr	r2, [pc, #48]	; (800a574 <HAL_PCD_MspInit+0x74>)
 800a544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a548:	6593      	str	r3, [r2, #88]	; 0x58
 800a54a:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <HAL_PCD_MspInit+0x74>)
 800a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a54e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a552:	60bb      	str	r3, [r7, #8]
 800a554:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	2014      	movs	r0, #20
 800a55c:	f7f7 fc0d 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a560:	2014      	movs	r0, #20
 800a562:	f7f7 fc24 	bl	8001dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a566:	bf00      	nop
 800a568:	3750      	adds	r7, #80	; 0x50
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	40005c00 	.word	0x40005c00
 800a574:	40021000 	.word	0x40021000

0800a578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a58c:	4619      	mov	r1, r3
 800a58e:	4610      	mov	r0, r2
 800a590:	f7fe fd2e 	bl	8008ff0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	440b      	add	r3, r1
 800a5bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f7fe fd68 	bl	800909a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	00db      	lsls	r3, r3, #3
 800a5f0:	440b      	add	r3, r1
 800a5f2:	333c      	adds	r3, #60	; 0x3c
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f7fe fdb1 	bl	8009160 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe fec5 	bl	80093a4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a62a:	2301      	movs	r3, #1
 800a62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d001      	beq.n	800a63a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a636:	f7f6 ffcf 	bl	80015d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a640:	7bfa      	ldrb	r2, [r7, #15]
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe fe6f 	bl	8009328 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a650:	4618      	mov	r0, r3
 800a652:	f7fe fe1b 	bl	800928c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a656:	bf00      	nop
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe fe6a 	bl	8009348 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a67c:	4b04      	ldr	r3, [pc, #16]	; (800a690 <HAL_PCD_SuspendCallback+0x30>)
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	4a03      	ldr	r2, [pc, #12]	; (800a690 <HAL_PCD_SuspendCallback+0x30>)
 800a682:	f043 0306 	orr.w	r3, r3, #6
 800a686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed00 	.word	0xe000ed00

0800a694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6a4:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_PCD_ResumeCallback+0x34>)
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_PCD_ResumeCallback+0x34>)
 800a6aa:	f023 0306 	bic.w	r3, r3, #6
 800a6ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a6b0:	f000 f9fa 	bl	800aaa8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fe5a 	bl	8009374 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	e000ed00 	.word	0xe000ed00

0800a6cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a6d4:	4a2b      	ldr	r2, [pc, #172]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a29      	ldr	r2, [pc, #164]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a6e4:	4b27      	ldr	r3, [pc, #156]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6e6:	4a28      	ldr	r2, [pc, #160]	; (800a788 <USBD_LL_Init+0xbc>)
 800a6e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6ea:	4b26      	ldr	r3, [pc, #152]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6ec:	2208      	movs	r2, #8
 800a6ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6f0:	4b24      	ldr	r3, [pc, #144]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6f6:	4b23      	ldr	r3, [pc, #140]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a6fc:	4b21      	ldr	r3, [pc, #132]	; (800a784 <USBD_LL_Init+0xb8>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a702:	4b20      	ldr	r3, [pc, #128]	; (800a784 <USBD_LL_Init+0xb8>)
 800a704:	2200      	movs	r2, #0
 800a706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a708:	4b1e      	ldr	r3, [pc, #120]	; (800a784 <USBD_LL_Init+0xb8>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a70e:	4b1d      	ldr	r3, [pc, #116]	; (800a784 <USBD_LL_Init+0xb8>)
 800a710:	2200      	movs	r2, #0
 800a712:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a714:	481b      	ldr	r0, [pc, #108]	; (800a784 <USBD_LL_Init+0xb8>)
 800a716:	f7f7 fd17 	bl	8002148 <HAL_PCD_Init>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a720:	f7f6 ff5a 	bl	80015d8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a72a:	2318      	movs	r3, #24
 800a72c:	2200      	movs	r2, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	f7f9 f9d0 	bl	8003ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a73a:	2358      	movs	r3, #88	; 0x58
 800a73c:	2200      	movs	r2, #0
 800a73e:	2180      	movs	r1, #128	; 0x80
 800a740:	f7f9 f9c8 	bl	8003ad4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a74a:	23c0      	movs	r3, #192	; 0xc0
 800a74c:	2200      	movs	r2, #0
 800a74e:	2181      	movs	r1, #129	; 0x81
 800a750:	f7f9 f9c0 	bl	8003ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a75a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a75e:	2200      	movs	r2, #0
 800a760:	2101      	movs	r1, #1
 800a762:	f7f9 f9b7 	bl	8003ad4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a770:	2200      	movs	r2, #0
 800a772:	2182      	movs	r1, #130	; 0x82
 800a774:	f7f9 f9ae 	bl	8003ad4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200010b8 	.word	0x200010b8
 800a788:	40005c00 	.word	0x40005c00

0800a78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7f7 fdb5 	bl	8002312 <HAL_PCD_Start>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f980 	bl	800aab4 <USBD_Get_USB_Status>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	4608      	mov	r0, r1
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	70fb      	strb	r3, [r7, #3]
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	70bb      	strb	r3, [r7, #2]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a7ea:	78bb      	ldrb	r3, [r7, #2]
 800a7ec:	883a      	ldrh	r2, [r7, #0]
 800a7ee:	78f9      	ldrb	r1, [r7, #3]
 800a7f0:	f7f7 fefd 	bl	80025ee <HAL_PCD_EP_Open>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 f95a 	bl	800aab4 <USBD_Get_USB_Status>
 800a800:	4603      	mov	r3, r0
 800a802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a804:	7bbb      	ldrb	r3, [r7, #14]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	460b      	mov	r3, r1
 800a818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	4611      	mov	r1, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f7 ff44 	bl	80026ba <HAL_PCD_EP_Close>
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f93b 	bl	800aab4 <USBD_Get_USB_Status>
 800a83e:	4603      	mov	r3, r0
 800a840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a842:	7bbb      	ldrb	r3, [r7, #14]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	4611      	mov	r1, r2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f8 f805 	bl	800287a <HAL_PCD_EP_SetStall>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f91c 	bl	800aab4 <USBD_Get_USB_Status>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a880:	7bbb      	ldrb	r3, [r7, #14]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8a4:	78fa      	ldrb	r2, [r7, #3]
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7f8 f838 	bl	800291e <HAL_PCD_EP_ClrStall>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 f8fd 	bl	800aab4 <USBD_Get_USB_Status>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	da0c      	bge.n	800a8fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	e00b      	b.n	800a916 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a904:	68f9      	ldr	r1, [r7, #12]
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	440b      	add	r3, r1
 800a910:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a914:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a93c:	78fa      	ldrb	r2, [r7, #3]
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7f7 fe2f 	bl	80025a4 <HAL_PCD_SetAddress>
 800a946:	4603      	mov	r3, r0
 800a948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 f8b1 	bl	800aab4 <USBD_Get_USB_Status>
 800a952:	4603      	mov	r3, r0
 800a954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a956:	7bbb      	ldrb	r3, [r7, #14]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	607a      	str	r2, [r7, #4]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	460b      	mov	r3, r1
 800a96e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a97e:	7af9      	ldrb	r1, [r7, #11]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	f7f7 ff36 	bl	80027f4 <HAL_PCD_EP_Transmit>
 800a988:	4603      	mov	r3, r0
 800a98a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f890 	bl	800aab4 <USBD_Get_USB_Status>
 800a994:	4603      	mov	r3, r0
 800a996:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a998:	7dbb      	ldrb	r3, [r7, #22]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b086      	sub	sp, #24
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a9c0:	7af9      	ldrb	r1, [r7, #11]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	f7f7 fec0 	bl	800274a <HAL_PCD_EP_Receive>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f86f 	bl	800aab4 <USBD_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f7 fee2 	bl	80027c4 <HAL_PCD_EP_GetRxCount>
 800aa00:	4603      	mov	r3, r0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_PCDEx_LPM_Callback+0x18>
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d013      	beq.n	800aa4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800aa22:	e023      	b.n	800aa6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aa2c:	f000 f83c 	bl	800aaa8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	4a0f      	ldr	r2, [pc, #60]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa36:	f023 0306 	bic.w	r3, r3, #6
 800aa3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fc96 	bl	8009374 <USBD_LL_Resume>
    break;
 800aa48:	e010      	b.n	800aa6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fe fc79 	bl	8009348 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	4a04      	ldr	r2, [pc, #16]	; (800aa74 <HAL_PCDEx_LPM_Callback+0x68>)
 800aa64:	f043 0306 	orr.w	r3, r3, #6
 800aa68:	6113      	str	r3, [r2, #16]
    break;
 800aa6a:	bf00      	nop
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed00 	.word	0xe000ed00

0800aa78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa80:	4b03      	ldr	r3, [pc, #12]	; (800aa90 <USBD_static_malloc+0x18>)
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	200013ac 	.word	0x200013ac

0800aa94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]

}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800aaac:	f7f6 f9f2 	bl	8000e94 <SystemClock_Config>
}
 800aab0:	bf00      	nop
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d817      	bhi.n	800aaf8 <USBD_Get_USB_Status+0x44>
 800aac8:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_Get_USB_Status+0x1c>)
 800aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aace:	bf00      	nop
 800aad0:	0800aae1 	.word	0x0800aae1
 800aad4:	0800aae7 	.word	0x0800aae7
 800aad8:	0800aaed 	.word	0x0800aaed
 800aadc:	0800aaf3 	.word	0x0800aaf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	e00b      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaea:	e008      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaec:	2301      	movs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf0:	e005      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf6:	e002      	b.n	800aafe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	73fb      	strb	r3, [r7, #15]
    break;
 800aafc:	bf00      	nop
  }
  return usb_status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <__libc_init_array>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	4d0d      	ldr	r5, [pc, #52]	; (800ab44 <__libc_init_array+0x38>)
 800ab10:	4c0d      	ldr	r4, [pc, #52]	; (800ab48 <__libc_init_array+0x3c>)
 800ab12:	1b64      	subs	r4, r4, r5
 800ab14:	10a4      	asrs	r4, r4, #2
 800ab16:	2600      	movs	r6, #0
 800ab18:	42a6      	cmp	r6, r4
 800ab1a:	d109      	bne.n	800ab30 <__libc_init_array+0x24>
 800ab1c:	4d0b      	ldr	r5, [pc, #44]	; (800ab4c <__libc_init_array+0x40>)
 800ab1e:	4c0c      	ldr	r4, [pc, #48]	; (800ab50 <__libc_init_array+0x44>)
 800ab20:	f000 f82e 	bl	800ab80 <_init>
 800ab24:	1b64      	subs	r4, r4, r5
 800ab26:	10a4      	asrs	r4, r4, #2
 800ab28:	2600      	movs	r6, #0
 800ab2a:	42a6      	cmp	r6, r4
 800ab2c:	d105      	bne.n	800ab3a <__libc_init_array+0x2e>
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab34:	4798      	blx	r3
 800ab36:	3601      	adds	r6, #1
 800ab38:	e7ee      	b.n	800ab18 <__libc_init_array+0xc>
 800ab3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab3e:	4798      	blx	r3
 800ab40:	3601      	adds	r6, #1
 800ab42:	e7f2      	b.n	800ab2a <__libc_init_array+0x1e>
 800ab44:	0800abf0 	.word	0x0800abf0
 800ab48:	0800abf0 	.word	0x0800abf0
 800ab4c:	0800abf0 	.word	0x0800abf0
 800ab50:	0800abf4 	.word	0x0800abf4

0800ab54 <memcpy>:
 800ab54:	440a      	add	r2, r1
 800ab56:	4291      	cmp	r1, r2
 800ab58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab5c:	d100      	bne.n	800ab60 <memcpy+0xc>
 800ab5e:	4770      	bx	lr
 800ab60:	b510      	push	{r4, lr}
 800ab62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab6a:	4291      	cmp	r1, r2
 800ab6c:	d1f9      	bne.n	800ab62 <memcpy+0xe>
 800ab6e:	bd10      	pop	{r4, pc}

0800ab70 <memset>:
 800ab70:	4402      	add	r2, r0
 800ab72:	4603      	mov	r3, r0
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d100      	bne.n	800ab7a <memset+0xa>
 800ab78:	4770      	bx	lr
 800ab7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab7e:	e7f9      	b.n	800ab74 <memset+0x4>

0800ab80 <_init>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_fini>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr
