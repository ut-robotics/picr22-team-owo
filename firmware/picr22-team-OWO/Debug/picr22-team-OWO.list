
picr22-team-OWO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a420  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a650  0800a650  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800a650  0800a650  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a650  0800a650  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a650  0800a650  0001a650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a654  0800a654  0001a654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800a658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  20000198  0800a7f0  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  0800a7f0  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166a2  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  0003686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c57  00000000  00000000  0003c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166bd  00000000  00000000  0005cfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c654c  00000000  00000000  00073684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000505c  00000000  00000000  00139c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000198 	.word	0x20000198
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a5e0 	.word	0x0800a5e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000019c 	.word	0x2000019c
 8000214:	0800a5e0 	.word	0x0800a5e0

08000218 <clamp>:
Command command = {.speed[0] = 0, .speed[1] = 0, .speed[2] = 0, .thrower_speed = 3277, .servo1 = 4875, .servo2 = 6150, .flat_const = 0, .int_const = 0, .delimiter = 0};

volatile uint8_t isCommandReceived = 0;
volatile uint16_t commandless_count = 0;

uint16_t clamp(uint16_t value, uint16_t min, uint16_t max) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
 8000222:	460b      	mov	r3, r1
 8000224:	80bb      	strh	r3, [r7, #4]
 8000226:	4613      	mov	r3, r2
 8000228:	807b      	strh	r3, [r7, #2]
	if (value > max) {return max;}
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	887b      	ldrh	r3, [r7, #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d901      	bls.n	8000236 <clamp+0x1e>
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	e006      	b.n	8000244 <clamp+0x2c>
	else if (value < min) {return min;}
 8000236:	88fa      	ldrh	r2, [r7, #6]
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	429a      	cmp	r2, r3
 800023c:	d201      	bcs.n	8000242 <clamp+0x2a>
 800023e:	88bb      	ldrh	r3, [r7, #4]
 8000240:	e000      	b.n	8000244 <clamp+0x2c>
	return value;
 8000242:	88fb      	ldrh	r3, [r7, #6]
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <CDC_On_Receive>:


// Copies the recieved command into the command struct
void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // command recieve callback, copies data to command struct
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) {
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b14      	cmp	r3, #20
 8000260:	d110      	bne.n	8000284 <CDC_On_Receive+0x34>
    memcpy(&command, buffer, sizeof(Command));
 8000262:	2214      	movs	r2, #20
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <CDC_On_Receive+0x3c>)
 8000268:	f00a f9a4 	bl	800a5b4 <memcpy>
    if (command.delimiter == 0xAAAA) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <CDC_On_Receive+0x3c>)
 800026e:	8a5b      	ldrh	r3, [r3, #18]
 8000270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000274:	4293      	cmp	r3, r2
 8000276:	d105      	bne.n	8000284 <CDC_On_Receive+0x34>
      isCommandReceived = 1;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <CDC_On_Receive+0x40>)
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
      commandless_count = 0;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <CDC_On_Receive+0x44>)
 8000280:	2200      	movs	r2, #0
 8000282:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000000 	.word	0x20000000
 8000290:	20000410 	.word	0x20000410
 8000294:	20000412 	.word	0x20000412

08000298 <enc_init>:

// Initialises the encoders
void enc_init() {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 1 ?
 800029c:	2104      	movs	r1, #4
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <enc_init+0x20>)
 80002a0:	f004 fc06 	bl	8004ab0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 2
 80002a4:	2104      	movs	r1, #4
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <enc_init+0x24>)
 80002a8:	f004 fc02 	bl	8004ab0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Motor 3 ?
 80002ac:	2104      	movs	r1, #4
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <enc_init+0x28>)
 80002b0:	f004 fbfe 	bl	8004ab0 <HAL_TIM_Encoder_Start>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000298 	.word	0x20000298
 80002bc:	200001b4 	.word	0x200001b4
 80002c0:	2000024c 	.word	0x2000024c

080002c4 <pwm_init>:

// Initialises the PWMs
void pwm_init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	TIM8->CCR2 = 0;
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <pwm_init+0x64>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80002ce:	4b16      	ldr	r3, [pc, #88]	; (8000328 <pwm_init+0x64>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = 0;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <pwm_init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM2->CCR1 = 4915;
 80002da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002de:	f241 3233 	movw	r2, #4915	; 0x1333
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = 4875;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <pwm_init+0x68>)
 80002e6:	f241 320b 	movw	r2, #4875	; 0x130b
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = 6150;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <pwm_init+0x68>)
 80002ee:	f641 0206 	movw	r2, #6150	; 0x1806
 80002f2:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80002f4:	2100      	movs	r1, #0
 80002f6:	480e      	ldr	r0, [pc, #56]	; (8000330 <pwm_init+0x6c>)
 80002f8:	f004 fa34 	bl	8004764 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	480c      	ldr	r0, [pc, #48]	; (8000330 <pwm_init+0x6c>)
 8000300:	f005 facc 	bl	800589c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	480a      	ldr	r0, [pc, #40]	; (8000330 <pwm_init+0x6c>)
 8000308:	f005 fac8 	bl	800589c <HAL_TIMEx_PWMN_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800030c:	2100      	movs	r1, #0
 800030e:	4809      	ldr	r0, [pc, #36]	; (8000334 <pwm_init+0x70>)
 8000310:	f004 fa28 	bl	8004764 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <pwm_init+0x74>)
 8000318:	f004 fa24 	bl	8004764 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <pwm_init+0x74>)
 8000320:	f004 fa20 	bl	8004764 <HAL_TIM_PWM_Start>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013400 	.word	0x40013400
 800032c:	40014000 	.word	0x40014000
 8000330:	20000330 	.word	0x20000330
 8000334:	20000200 	.word	0x20000200
 8000338:	2000037c 	.word	0x2000037c

0800033c <motor_status_update>:

// Updates the motor's speed, direction and PI constants from the command struct
void motor_status_update() {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i<3; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	e06f      	b.n	8000428 <motor_status_update+0xec>
		if (command.speed[i] >= 0) {
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a3c      	ldr	r2, [pc, #240]	; (800043c <motor_status_update+0x100>)
 800034c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000350:	2b00      	cmp	r3, #0
 8000352:	db23      	blt.n	800039c <motor_status_update+0x60>
			motor_status[i].direction = 1;
 8000354:	79fa      	ldrb	r2, [r7, #7]
 8000356:	493a      	ldr	r1, [pc, #232]	; (8000440 <motor_status_update+0x104>)
 8000358:	4613      	mov	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	4413      	add	r3, r2
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	440b      	add	r3, r1
 8000362:	3302      	adds	r3, #2
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == 1) {command.speed[i] = 2;} // Everybody gangsta till the input speed is 1
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	4a34      	ldr	r2, [pc, #208]	; (800043c <motor_status_update+0x100>)
 800036c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000370:	2b01      	cmp	r3, #1
 8000372:	d104      	bne.n	800037e <motor_status_update+0x42>
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a31      	ldr	r2, [pc, #196]	; (800043c <motor_status_update+0x100>)
 8000378:	2102      	movs	r1, #2
 800037a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = command.speed[i];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <motor_status_update+0x100>)
 8000382:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000386:	79fa      	ldrb	r2, [r7, #7]
 8000388:	b298      	uxth	r0, r3
 800038a:	492d      	ldr	r1, [pc, #180]	; (8000440 <motor_status_update+0x104>)
 800038c:	4613      	mov	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	00db      	lsls	r3, r3, #3
 8000394:	440b      	add	r3, r1
 8000396:	4602      	mov	r2, r0
 8000398:	801a      	strh	r2, [r3, #0]
 800039a:	e026      	b.n	80003ea <motor_status_update+0xae>
		} else {
			motor_status[i].direction = 0;
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	4928      	ldr	r1, [pc, #160]	; (8000440 <motor_status_update+0x104>)
 80003a0:	4613      	mov	r3, r2
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	440b      	add	r3, r1
 80003aa:	3302      	adds	r3, #2
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
			if (command.speed[i] == -1) {command.speed[i] = -2;} // Everybody gangsta till the input speed is -1
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	4a22      	ldr	r2, [pc, #136]	; (800043c <motor_status_update+0x100>)
 80003b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003bc:	d105      	bne.n	80003ca <motor_status_update+0x8e>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a1e      	ldr	r2, [pc, #120]	; (800043c <motor_status_update+0x100>)
 80003c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80003c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			motor_status[i].target_speed = -(command.speed[i]);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <motor_status_update+0x100>)
 80003ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	79fa      	ldrb	r2, [r7, #7]
 80003d6:	425b      	negs	r3, r3
 80003d8:	b298      	uxth	r0, r3
 80003da:	4919      	ldr	r1, [pc, #100]	; (8000440 <motor_status_update+0x104>)
 80003dc:	4613      	mov	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	4413      	add	r3, r2
 80003e2:	00db      	lsls	r3, r3, #3
 80003e4:	440b      	add	r3, r1
 80003e6:	4602      	mov	r2, r0
 80003e8:	801a      	strh	r2, [r3, #0]
		}
		motor_status[i].flat_const = command.flat_const;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <motor_status_update+0x100>)
 80003ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	ee07 3a90 	vmov	s15, r3
 80003f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003fa:	4911      	ldr	r1, [pc, #68]	; (8000440 <motor_status_update+0x104>)
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	440b      	add	r3, r1
 8000406:	330c      	adds	r3, #12
 8000408:	edc3 7a00 	vstr	s15, [r3]
		motor_status[i].int_const = command.int_const;
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <motor_status_update+0x100>)
 8000410:	68d9      	ldr	r1, [r3, #12]
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <motor_status_update+0x104>)
 8000414:	4613      	mov	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4413      	add	r3, r2
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	4403      	add	r3, r0
 800041e:	3310      	adds	r3, #16
 8000420:	6019      	str	r1, [r3, #0]
	for (uint8_t i = 0; i<3; i++) {
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	3301      	adds	r3, #1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d98c      	bls.n	8000348 <motor_status_update+0xc>
	}
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	20000000 	.word	0x20000000
 8000440:	200003c8 	.word	0x200003c8

08000444 <motor_pwm>:

// Converts internal encoder speed to a PWM value
uint16_t motor_pwm(uint8_t mot_id) {
 8000444:	b480      	push	{r7}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint16_t speed = motor_status[mot_id].target_speed;
 800044e:	79fa      	ldrb	r2, [r7, #7]
 8000450:	497a      	ldr	r1, [pc, #488]	; (800063c <motor_pwm+0x1f8>)
 8000452:	4613      	mov	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	4413      	add	r3, r2
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	440b      	add	r3, r1
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	823b      	strh	r3, [r7, #16]
	uint16_t pwm = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	82fb      	strh	r3, [r7, #22]
	uint16_t new_pos = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	82bb      	strh	r3, [r7, #20]

	// for some reason case 0 and 2 are inverted, most likely from using complementary timer channels
	switch (mot_id) {
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d00e      	beq.n	800048c <motor_pwm+0x48>
 800046e:	2b02      	cmp	r3, #2
 8000470:	dc10      	bgt.n	8000494 <motor_pwm+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d002      	beq.n	800047c <motor_pwm+0x38>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d004      	beq.n	8000484 <motor_pwm+0x40>
 800047a:	e00b      	b.n	8000494 <motor_pwm+0x50>
		case 0:
			new_pos = TIM3->CNT;
 800047c:	4b70      	ldr	r3, [pc, #448]	; (8000640 <motor_pwm+0x1fc>)
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	82bb      	strh	r3, [r7, #20]
			break;
 8000482:	e007      	b.n	8000494 <motor_pwm+0x50>
		case 1:
			new_pos = TIM1->CNT;
 8000484:	4b6f      	ldr	r3, [pc, #444]	; (8000644 <motor_pwm+0x200>)
 8000486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000488:	82bb      	strh	r3, [r7, #20]
			break;
 800048a:	e003      	b.n	8000494 <motor_pwm+0x50>
		case 2:
			new_pos = TIM4->CNT;
 800048c:	4b6e      	ldr	r3, [pc, #440]	; (8000648 <motor_pwm+0x204>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	82bb      	strh	r3, [r7, #20]
			break;
 8000492:	bf00      	nop
	}
	int16_t pos_change = abs((int16_t)new_pos - motor_status[mot_id].enc_pos);
 8000494:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000498:	4618      	mov	r0, r3
 800049a:	79fa      	ldrb	r2, [r7, #7]
 800049c:	4967      	ldr	r1, [pc, #412]	; (800063c <motor_pwm+0x1f8>)
 800049e:	4613      	mov	r3, r2
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4413      	add	r3, r2
 80004a4:	00db      	lsls	r3, r3, #3
 80004a6:	440b      	add	r3, r1
 80004a8:	3304      	adds	r3, #4
 80004aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004ae:	1ac3      	subs	r3, r0, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	81fb      	strh	r3, [r7, #14]

	motor_status[mot_id].enc_pos = new_pos;
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80004be:	495f      	ldr	r1, [pc, #380]	; (800063c <motor_pwm+0x1f8>)
 80004c0:	4613      	mov	r3, r2
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4413      	add	r3, r2
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	440b      	add	r3, r1
 80004ca:	3304      	adds	r3, #4
 80004cc:	4602      	mov	r2, r0
 80004ce:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].enc_change = pos_change;
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	495a      	ldr	r1, [pc, #360]	; (800063c <motor_pwm+0x1f8>)
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	00db      	lsls	r3, r3, #3
 80004dc:	440b      	add	r3, r1
 80004de:	3306      	adds	r3, #6
 80004e0:	89fa      	ldrh	r2, [r7, #14]
 80004e2:	801a      	strh	r2, [r3, #0]

	// Clear PI-s integral value when the bot is ordered to stop, might cause issues down the line
	if (motor_status[0].target_speed == 0 && motor_status[1].target_speed == 0 && motor_status[2].target_speed == 0) {
 80004e4:	4b55      	ldr	r3, [pc, #340]	; (800063c <motor_pwm+0x1f8>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d111      	bne.n	8000510 <motor_pwm+0xcc>
 80004ec:	4b53      	ldr	r3, [pc, #332]	; (800063c <motor_pwm+0x1f8>)
 80004ee:	8b1b      	ldrh	r3, [r3, #24]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d10d      	bne.n	8000510 <motor_pwm+0xcc>
 80004f4:	4b51      	ldr	r3, [pc, #324]	; (800063c <motor_pwm+0x1f8>)
 80004f6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d109      	bne.n	8000510 <motor_pwm+0xcc>
		motor_status[mot_id].integral = 0;
 80004fc:	79fa      	ldrb	r2, [r7, #7]
 80004fe:	494f      	ldr	r1, [pc, #316]	; (800063c <motor_pwm+0x1f8>)
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3308      	adds	r3, #8
 800050c:	2200      	movs	r2, #0
 800050e:	801a      	strh	r2, [r3, #0]
	}

	int16_t error = speed - motor_status[mot_id].enc_change;
 8000510:	79fa      	ldrb	r2, [r7, #7]
 8000512:	494a      	ldr	r1, [pc, #296]	; (800063c <motor_pwm+0x1f8>)
 8000514:	4613      	mov	r3, r2
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4413      	add	r3, r2
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	440b      	add	r3, r1
 800051e:	3306      	adds	r3, #6
 8000520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000524:	b29b      	uxth	r3, r3
 8000526:	8a3a      	ldrh	r2, [r7, #16]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	81bb      	strh	r3, [r7, #12]
	motor_status[mot_id].error = error;
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	4942      	ldr	r1, [pc, #264]	; (800063c <motor_pwm+0x1f8>)
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	440b      	add	r3, r1
 800053c:	3314      	adds	r3, #20
 800053e:	89ba      	ldrh	r2, [r7, #12]
 8000540:	801a      	strh	r2, [r3, #0]
	motor_status[mot_id].integral += error;
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	493d      	ldr	r1, [pc, #244]	; (800063c <motor_pwm+0x1f8>)
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	440b      	add	r3, r1
 8000550:	3308      	adds	r3, #8
 8000552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000556:	b29a      	uxth	r2, r3
 8000558:	89bb      	ldrh	r3, [r7, #12]
 800055a:	4413      	add	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	b218      	sxth	r0, r3
 8000562:	4936      	ldr	r1, [pc, #216]	; (800063c <motor_pwm+0x1f8>)
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	440b      	add	r3, r1
 800056e:	3308      	adds	r3, #8
 8000570:	4602      	mov	r2, r0
 8000572:	801a      	strh	r2, [r3, #0]
	int16_t pid_speed = (int16_t)(error * motor_status[mot_id].flat_const) + (int16_t)(motor_status[mot_id].integral * motor_status[mot_id].int_const);
 8000574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000578:	ee07 3a90 	vmov	s15, r3
 800057c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	492e      	ldr	r1, [pc, #184]	; (800063c <motor_pwm+0x1f8>)
 8000584:	4613      	mov	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4413      	add	r3, r2
 800058a:	00db      	lsls	r3, r3, #3
 800058c:	440b      	add	r3, r1
 800058e:	330c      	adds	r3, #12
 8000590:	edd3 7a00 	vldr	s15, [r3]
 8000594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800059c:	ee17 3a90 	vmov	r3, s15
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b299      	uxth	r1, r3
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <motor_pwm+0x1f8>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	4403      	add	r3, r0
 80005b2:	3308      	adds	r3, #8
 80005b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <motor_pwm+0x1f8>)
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4403      	add	r3, r0
 80005ce:	3310      	adds	r3, #16
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005dc:	ee17 3a90 	vmov	r3, s15
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	440b      	add	r3, r1
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	827b      	strh	r3, [r7, #18]

	if (pid_speed < 0) {pid_speed = 0;}
 80005ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	da01      	bge.n	80005f6 <motor_pwm+0x1b2>
 80005f2:	2300      	movs	r3, #0
 80005f4:	827b      	strh	r3, [r7, #18]

	if (speed > 0) {
 80005f6:	8a3b      	ldrh	r3, [r7, #16]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d010      	beq.n	800061e <motor_pwm+0x1da>
		pwm = 4500 + pid_speed * 375; // Effectively linear
 80005fc:	8a7b      	ldrh	r3, [r7, #18]
 80005fe:	461a      	mov	r2, r3
 8000600:	0092      	lsls	r2, r2, #2
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	0091      	lsls	r1, r2, #2
 8000608:	461a      	mov	r2, r3
 800060a:	460b      	mov	r3, r1
 800060c:	4413      	add	r3, r2
 800060e:	461a      	mov	r2, r3
 8000610:	0112      	lsls	r2, r2, #4
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800061a:	3314      	adds	r3, #20
 800061c:	82fb      	strh	r3, [r7, #22]
	}
	// emergency limiter, set to 75% currently (49151)
	if (pwm > 49151) {pwm = 49151;}
 800061e:	8afb      	ldrh	r3, [r7, #22]
 8000620:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000624:	d302      	bcc.n	800062c <motor_pwm+0x1e8>
 8000626:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800062a:	82fb      	strh	r3, [r7, #22]

	return pwm;
 800062c:	8afb      	ldrh	r3, [r7, #22]
}
 800062e:	4618      	mov	r0, r3
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200003c8 	.word	0x200003c8
 8000640:	40000400 	.word	0x40000400
 8000644:	40012c00 	.word	0x40012c00
 8000648:	40000800 	.word	0x40000800

0800064c <motor_direction>:

// Toggles the direction pin
void motor_direction(uint8_t mot_id) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	switch(mot_id) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b02      	cmp	r3, #2
 800065a:	d018      	beq.n	800068e <motor_direction+0x42>
 800065c:	2b02      	cmp	r3, #2
 800065e:	dc1f      	bgt.n	80006a0 <motor_direction+0x54>
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <motor_direction+0x1e>
 8000664:	2b01      	cmp	r3, #1
 8000666:	d009      	beq.n	800067c <motor_direction+0x30>
			break;
		case 2:
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
			break;
	}
}
 8000668:	e01a      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M1D_Pin, motor_status[0].direction);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <motor_direction+0x5c>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	461a      	mov	r2, r3
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 fa7f 	bl	8001b78 <HAL_GPIO_WritePin>
			break;
 800067a:	e011      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOA, M2D_Pin, motor_status[1].direction);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <motor_direction+0x5c>)
 800067e:	7e9b      	ldrb	r3, [r3, #26]
 8000680:	461a      	mov	r2, r3
 8000682:	2120      	movs	r1, #32
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f001 fa76 	bl	8001b78 <HAL_GPIO_WritePin>
			break;
 800068c:	e008      	b.n	80006a0 <motor_direction+0x54>
			HAL_GPIO_WritePin(GPIOB, M3D_Pin, motor_status[2].direction);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <motor_direction+0x5c>)
 8000690:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000694:	461a      	mov	r2, r3
 8000696:	2110      	movs	r1, #16
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <motor_direction+0x60>)
 800069a:	f001 fa6d 	bl	8001b78 <HAL_GPIO_WritePin>
			break;
 800069e:	bf00      	nop
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200003c8 	.word	0x200003c8
 80006ac:	48000400 	.word	0x48000400

080006b0 <wake_drivers_up>:

// Sends a very short ground pulse to the sleep pin of the motor controllers
void wake_drivers_up() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <wake_drivers_up+0x58>)
 80006bc:	f001 fa5c 	bl	8001b78 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006c0:	2300      	movs	r3, #0
 80006c2:	80fb      	strh	r3, [r7, #6]
 80006c4:	e003      	b.n	80006ce <wake_drivers_up+0x1e>
 80006c6:	bf00      	nop
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	3301      	adds	r3, #1
 80006cc:	80fb      	strh	r3, [r7, #6]
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006d4:	d3f7      	bcc.n	80006c6 <wake_drivers_up+0x16>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <wake_drivers_up+0x58>)
 80006dc:	f001 fa4c 	bl	8001b78 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 350; i++) __asm("nop");
 80006e0:	2300      	movs	r3, #0
 80006e2:	80bb      	strh	r3, [r7, #4]
 80006e4:	e003      	b.n	80006ee <wake_drivers_up+0x3e>
 80006e6:	bf00      	nop
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	3301      	adds	r3, #1
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	88bb      	ldrh	r3, [r7, #4]
 80006f0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80006f4:	d3f7      	bcc.n	80006e6 <wake_drivers_up+0x36>
	HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <wake_drivers_up+0x58>)
 80006fc:	f001 fa3c 	bl	8001b78 <HAL_GPIO_WritePin>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	48000400 	.word	0x48000400

0800070c <HAL_TIM_PeriodElapsedCallback>:
// Currently abandoned.

// 50 Hz callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (commandless_count >= 50) { // Helps prevent major consequences from minor fuckups
 8000714:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	2b31      	cmp	r3, #49	; 0x31
 800071c:	d912      	bls.n	8000744 <HAL_TIM_PeriodElapsedCallback+0x38>
		TIM8->CCR2 = 0;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000720:	2200      	movs	r2, #0
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000726:	2200      	movs	r2, #0
 8000728:	639a      	str	r2, [r3, #56]	; 0x38
		TIM8->CCR2 = 0;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800072c:	2200      	movs	r2, #0
 800072e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR1 = 3277;
 8000730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000734:	f640 42cd 	movw	r2, #3277	; 0xccd
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
		TIM15->CCR1 = 4875;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800073c:	f241 320b 	movw	r2, #4875	; 0x130b
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8000742:	e04c      	b.n	80007de <HAL_TIM_PeriodElapsedCallback+0xd2>
	}

	TIM8->CCR2 = motor_pwm(0); // Motor 1
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fe7d 	bl	8000444 <motor_pwm>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000750:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = motor_pwm(1); // Motor 2
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fe76 	bl	8000444 <motor_pwm>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR3 = motor_pwm(2); // Motor 3
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff fe6f 	bl	8000444 <motor_pwm>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c

	motor_direction(0); // Motor 1
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff6c 	bl	800064c <motor_direction>
	motor_direction(1); // Motor 2
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff ff69 	bl	800064c <motor_direction>
	motor_direction(2); // Motor 3
 800077a:	2002      	movs	r0, #2
 800077c:	f7ff ff66 	bl	800064c <motor_direction>

	TIM2->CCR1 = clamp(command.thrower_speed, 3277, 6554);
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000782:	88db      	ldrh	r3, [r3, #6]
 8000784:	f641 129a 	movw	r2, #6554	; 0x199a
 8000788:	f640 41cd 	movw	r1, #3277	; 0xccd
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd43 	bl	8000218 <clamp>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079a:	635a      	str	r2, [r3, #52]	; 0x34

	TIM15->CCR1 = clamp(command.servo1, 3277, 6554);
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800079e:	891b      	ldrh	r3, [r3, #8]
 80007a0:	f641 129a 	movw	r2, #6554	; 0x199a
 80007a4:	f640 41cd 	movw	r1, #3277	; 0xccd
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd35 	bl	8000218 <clamp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = clamp(command.servo2, 4700, 6150);
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80007b8:	895b      	ldrh	r3, [r3, #10]
 80007ba:	f641 0206 	movw	r2, #6150	; 0x1806
 80007be:	f241 215c 	movw	r1, #4700	; 0x125c
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd28 	bl	8000218 <clamp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38

	commandless_count++;
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007dc:	801a      	strh	r2, [r3, #0]
}
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000412 	.word	0x20000412
 80007e8:	40013400 	.word	0x40013400
 80007ec:	40014000 	.word	0x40014000
 80007f0:	20000000 	.word	0x20000000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fe80 	bl	80014fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f879 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fb99 	bl	8000f38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000806:	f000 f91d 	bl	8000a44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800080a:	f000 f975 	bl	8000af8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800080e:	f000 f8bf 	bl	8000990 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000812:	f000 f9c7 	bl	8000ba4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000816:	f000 fa51 	bl	8000cbc <MX_TIM8_Init>
  MX_TIM15_Init();
 800081a:	f000 fafb 	bl	8000e14 <MX_TIM15_Init>
  MX_TIM6_Init();
 800081e:	f000 fa17 	bl	8000c50 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000822:	f009 f993 	bl	8009b4c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = {
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	615a      	str	r2, [r3, #20]
 8000836:	831a      	strh	r2, [r3, #24]
		.change[0] = 0,
		.change[1] = 0,
		.change[2] = 0,
		.ball_detected = 0,
  };
  HAL_TIM_Base_Start_IT(&htim6);
 8000838:	482a      	ldr	r0, [pc, #168]	; (80008e4 <main+0xf0>)
 800083a:	f003 fed1 	bl	80045e0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f000 fece 	bl	80015e0 <HAL_Delay>
  enc_init();
 8000844:	f7ff fd28 	bl	8000298 <enc_init>
  pwm_init();
 8000848:	f7ff fd3c 	bl	80002c4 <pwm_init>
  wake_drivers_up();
 800084c:	f7ff ff30 	bl	80006b0 <wake_drivers_up>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (isCommandReceived) {
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <main+0xf4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0fa      	beq.n	8000850 <main+0x5c>
    	isCommandReceived = 0;
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <main+0xf4>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

    	wake_drivers_up();
 8000860:	f7ff ff26 	bl	80006b0 <wake_drivers_up>
    	motor_status_update();
 8000864:	f7ff fd6a 	bl	800033c <motor_status_update>

		feedback.speed[0] = motor_status[0].target_speed;
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <main+0xf8>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	b21b      	sxth	r3, r3
 800086e:	80bb      	strh	r3, [r7, #4]
		feedback.speed[1] = motor_status[1].target_speed;
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <main+0xf8>)
 8000872:	8b1b      	ldrh	r3, [r3, #24]
 8000874:	b21b      	sxth	r3, r3
 8000876:	80fb      	strh	r3, [r7, #6]
		feedback.speed[2] = motor_status[2].target_speed;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <main+0xf8>)
 800087a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800087c:	b21b      	sxth	r3, r3
 800087e:	813b      	strh	r3, [r7, #8]

		feedback.change[0] = motor_status[0].enc_change;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <main+0xf8>)
 8000882:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000886:	817b      	strh	r3, [r7, #10]
		feedback.change[1] = motor_status[1].enc_change;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <main+0xf8>)
 800088a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800088e:	81bb      	strh	r3, [r7, #12]
		feedback.change[2] = motor_status[2].enc_change;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <main+0xf8>)
 8000892:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000896:	81fb      	strh	r3, [r7, #14]

		feedback.error[0] = motor_status[0].error;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <main+0xf8>)
 800089a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800089e:	823b      	strh	r3, [r7, #16]
		feedback.error[1] = motor_status[1].error;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <main+0xf8>)
 80008a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80008a6:	827b      	strh	r3, [r7, #18]
		feedback.error[2] = motor_status[2].error;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <main+0xf8>)
 80008aa:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80008ae:	82bb      	strh	r3, [r7, #20]

		feedback.integral[0] = motor_status[0].integral;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <main+0xf8>)
 80008b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008b6:	82fb      	strh	r3, [r7, #22]
		feedback.integral[1] = motor_status[1].integral;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <main+0xf8>)
 80008ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80008be:	833b      	strh	r3, [r7, #24]
		feedback.integral[2] = motor_status[2].integral;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <main+0xf8>)
 80008c2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008c6:	837b      	strh	r3, [r7, #26]

		feedback.ball_detected = HAL_GPIO_ReadPin (INFR_GPIO_Port, INFR_Pin);
 80008c8:	2102      	movs	r1, #2
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <main+0xfc>)
 80008cc:	f001 f93c 	bl	8001b48 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	83bb      	strh	r3, [r7, #28]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	211a      	movs	r1, #26
 80008da:	4618      	mov	r0, r3
 80008dc:	f009 f9f8 	bl	8009cd0 <CDC_Transmit_FS>
    if (isCommandReceived) {
 80008e0:	e7b6      	b.n	8000850 <main+0x5c>
 80008e2:	bf00      	nop
 80008e4:	200002e4 	.word	0x200002e4
 80008e8:	20000410 	.word	0x20000410
 80008ec:	200003c8 	.word	0x200003c8
 80008f0:	48001400 	.word	0x48001400

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	; 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f009 fe64 	bl	800a5d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000916:	2000      	movs	r0, #0
 8000918:	f002 fe7a 	bl	8003610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800091c:	2322      	movs	r3, #34	; 0x22
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000936:	2301      	movs	r3, #1
 8000938:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800093a:	2314      	movs	r3, #20
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	4618      	mov	r0, r3
 8000950:	f002 ff02 	bl	8003758 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800095a:	f000 fb6d 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2303      	movs	r3, #3
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2104      	movs	r1, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fa06 	bl	8003d88 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000982:	f000 fb59 	bl	8001038 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2224      	movs	r2, #36	; 0x24
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f009 fe16 	bl	800a5d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <MX_TIM1_Init+0xb0>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM1_Init+0xac>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009da:	2303      	movs	r3, #3
 80009dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009e2:	2301      	movs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009f2:	2301      	movs	r3, #1
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM1_Init+0xac>)
 8000a06:	f003 ffad 	bl	8004964 <HAL_TIM_Encoder_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a10:	f000 fb12 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM1_Init+0xac>)
 8000a26:	f004 ffed 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a30:	f000 fb02 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001b4 	.word	0x200001b4
 8000a40:	40012c00 	.word	0x40012c00

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]
 8000a66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a90:	4818      	ldr	r0, [pc, #96]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000a92:	f003 fe0f 	bl	80046b4 <HAL_TIM_PWM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a9c:	f000 facc 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000ab0:	f004 ffa8 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aba:	f000 fabd 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abe:	2360      	movs	r3, #96	; 0x60
 8000ac0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000ad6:	f004 f9f9 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ae0:	f000 faaa 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM2_Init+0xb0>)
 8000ae6:	f000 fbe3 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000200 	.word	0x20000200

08000af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2224      	movs	r2, #36	; 0x24
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f009 fd62 	bl	800a5d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <MX_TIM3_Init+0xa8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b68:	f003 fefc 	bl	8004964 <HAL_TIM_Encoder_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b72:	f000 fa61 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM3_Init+0xa4>)
 8000b84:	f004 ff3e 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b8e:	f000 fa53 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000024c 	.word	0x2000024c
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2224      	movs	r2, #36	; 0x24
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f009 fd0c 	bl	800a5d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <MX_TIM4_Init+0xa8>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000be8:	2303      	movs	r3, #3
 8000bea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4619      	mov	r1, r3
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000c14:	f003 fea6 	bl	8004964 <HAL_TIM_Encoder_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c1e:	f000 fa0b 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_TIM4_Init+0xa4>)
 8000c30:	f004 fee8 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c3a:	f000 f9fd 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000298 	.word	0x20000298
 8000c4c:	40000800 	.word	0x40000800

08000c50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_TIM6_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c68:	222f      	movs	r2, #47	; 0x2f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c78:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c82:	f003 fc55 	bl	8004530 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c8c:	f000 f9d4 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_TIM6_Init+0x64>)
 8000c9e:	f004 feb1 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 f9c6 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200002e4 	.word	0x200002e4
 8000cb8:	40001000 	.word	0x40001000

08000cbc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b098      	sub	sp, #96	; 0x60
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2234      	movs	r2, #52	; 0x34
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f009 fc71 	bl	800a5d0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000cf0:	4a47      	ldr	r2, [pc, #284]	; (8000e10 <MX_TIM8_Init+0x154>)
 8000cf2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cf4:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d0e:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b3d      	ldr	r3, [pc, #244]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d1a:	483c      	ldr	r0, [pc, #240]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d1c:	f003 fcca 	bl	80046b4 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f987 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4833      	ldr	r0, [pc, #204]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d3e:	f004 fe61 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000d48:	f000 f976 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4c:	2360      	movs	r3, #96	; 0x60
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4826      	ldr	r0, [pc, #152]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d72:	f004 f8ab 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d7c:	f000 f95c 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d84:	2204      	movs	r2, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4820      	ldr	r0, [pc, #128]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000d8a:	f004 f89f 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000d94:	f000 f950 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000da2:	f004 f893 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000dac:	f000 f944 	bl	8001038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000dee:	f004 fe8b 	bl	8005b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000df8:	f000 f91e 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM8_Init+0x150>)
 8000dfe:	f000 fa57 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000e02:	bf00      	nop
 8000e04:	3760      	adds	r7, #96	; 0x60
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000330 	.word	0x20000330
 8000e10:	40013400 	.word	0x40013400

08000e14 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b098      	sub	sp, #96	; 0x60
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2234      	movs	r2, #52	; 0x34
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f009 fbc5 	bl	800a5d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e48:	4a3a      	ldr	r2, [pc, #232]	; (8000f34 <MX_TIM15_Init+0x120>)
 8000e4a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e4e:	2230      	movs	r2, #48	; 0x30
 8000e50:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e58:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e72:	482f      	ldr	r0, [pc, #188]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e74:	f003 fc1e 	bl	80046b4 <HAL_TIM_PWM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 f8db 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4827      	ldr	r0, [pc, #156]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000e92:	f004 fdb7 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000e9c:	f000 f8cc 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea0:	2360      	movs	r3, #96	; 0x60
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481a      	ldr	r0, [pc, #104]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000ec6:	f004 f801 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ed0:	f000 f8b2 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000ede:	f003 fff5 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000ee8:	f000 f8a6 	bl	8001038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000f14:	f004 fdf8 	bl	8005b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f1e:	f000 f88b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <MX_TIM15_Init+0x11c>)
 8000f24:	f000 f9c4 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 8000f28:	bf00      	nop
 8000f2a:	3760      	adds	r7, #96	; 0x60
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000037c 	.word	0x2000037c
 8000f34:	40014000 	.word	0x40014000

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a30      	ldr	r2, [pc, #192]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_GPIO_Init+0xf4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4825      	ldr	r0, [pc, #148]	; (8001030 <MX_GPIO_Init+0xf8>)
 8000f9c:	f000 fdec 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|M2D_Pin|M1D_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	21a2      	movs	r1, #162	; 0xa2
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fde6 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSLEEP_Pin|M3D_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2118      	movs	r1, #24
 8000fb0:	4820      	ldr	r0, [pc, #128]	; (8001034 <MX_GPIO_Init+0xfc>)
 8000fb2:	f000 fde1 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0xf8>)
 8000fce:	f000 fc39 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pin : INFR_Pin */
  GPIO_InitStruct.Pin = INFR_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INFR_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <MX_GPIO_Init+0xf8>)
 8000fe6:	f000 fc2d 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin M2D_Pin M1D_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|M2D_Pin|M1D_Pin;
 8000fea:	23a2      	movs	r3, #162	; 0xa2
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f000 fc1e 	bl	8001844 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSLEEP_Pin M3D_Pin */
  GPIO_InitStruct.Pin = MSLEEP_Pin|M3D_Pin;
 8001008:	2318      	movs	r3, #24
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xfc>)
 8001020:	f000 fc10 	bl	8001844 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	48001400 	.word	0x48001400
 8001034:	48000400 	.word	0x48000400

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x44>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6613      	str	r3, [r2, #96]	; 0x60
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x44>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	6593      	str	r3, [r2, #88]	; 0x58
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_TIM_Encoder_MspInit+0x138>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12a      	bne.n	8001104 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b3d      	ldr	r3, [pc, #244]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC21_Pin|ENC22_Pin;
 80010de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010f0:	2306      	movs	r3, #6
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f000 fba1 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001102:	e05b      	b.n	80011bc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a30      	ldr	r2, [pc, #192]	; (80011cc <HAL_TIM_Encoder_MspInit+0x140>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d129      	bne.n	8001162 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6593      	str	r3, [r2, #88]	; 0x58
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC31_Pin|ENC32_Pin;
 800113e:	2350      	movs	r3, #80	; 0x50
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800114e:	2302      	movs	r3, #2
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 fb72 	bl	8001844 <HAL_GPIO_Init>
}
 8001160:	e02c      	b.n	80011bc <HAL_TIM_Encoder_MspInit+0x130>
  else if(htim_encoder->Instance==TIM4)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d127      	bne.n	80011bc <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC11_Pin|ENC12_Pin;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011ac:	2302      	movs	r3, #2
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <HAL_TIM_Encoder_MspInit+0x148>)
 80011b8:	f000 fb44 	bl	8001844 <HAL_GPIO_Init>
}
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	; 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40012c00 	.word	0x40012c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40000400 	.word	0x40000400
 80011d0:	40000800 	.word	0x40000800
 80011d4:	48000400 	.word	0x48000400

080011d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d10c      	bne.n	8001204 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001202:	e022      	b.n	800124a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_TIM_PWM_MspInit+0x84>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10c      	bne.n	8001228 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 8001214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001218:	6613      	str	r3, [r2, #96]	; 0x60
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
}
 8001226:	e010      	b.n	800124a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0c      	ldr	r2, [pc, #48]	; (8001260 <HAL_TIM_PWM_MspInit+0x88>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6613      	str	r3, [r2, #96]	; 0x60
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_TIM_PWM_MspInit+0x80>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000
 800125c:	40013400 	.word	0x40013400
 8001260:	40014000 	.word	0x40014000

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <HAL_TIM_Base_MspInit+0x44>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d113      	bne.n	800129e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_TIM_Base_MspInit+0x48>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_TIM_Base_MspInit+0x48>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_Base_MspInit+0x48>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f000 faa1 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f000 fab8 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40001000 	.word	0x40001000
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d11d      	bne.n	800130e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a49      	ldr	r2, [pc, #292]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TMPWM_Pin;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TMPWM_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 fa9c 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800130c:	e071      	b.n	80013f2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM8)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <HAL_TIM_MspPostInit+0x150>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d14a      	bne.n	80013ae <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1PWM_Pin;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001358:	2304      	movs	r3, #4
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWM_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4828      	ldr	r0, [pc, #160]	; (8001404 <HAL_TIM_MspPostInit+0x154>)
 8001364:	f000 fa6e 	bl	8001844 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2PWM_Pin;
 8001368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 800137a:	2302      	movs	r3, #2
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWM_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f000 fa5c 	bl	8001844 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M3PWM_Pin;
 800138c:	2320      	movs	r3, #32
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800139c:	2303      	movs	r3, #3
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3PWM_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <HAL_TIM_MspPostInit+0x154>)
 80013a8:	f000 fa4c 	bl	8001844 <HAL_GPIO_Init>
}
 80013ac:	e021      	b.n	80013f2 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_TIM_MspPostInit+0x158>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d11c      	bne.n	80013f2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_TIM_MspPostInit+0x14c>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1PWM_Pin|S2PWM_Pin;
 80013d0:	230c      	movs	r3, #12
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80013e0:	2309      	movs	r3, #9
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f000 fa29 	bl	8001844 <HAL_GPIO_Init>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40013400 	.word	0x40013400
 8001404:	48000400 	.word	0x48000400
 8001408:	40014000 	.word	0x40014000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f8a4 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <USB_LP_IRQHandler+0x10>)
 8001466:	f000 fca6 	bl	8001db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200010bc 	.word	0x200010bc

08001474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM6_DAC_IRQHandler+0x10>)
 800147a:	f003 fba7 	bl	8004bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002e4 	.word	0x200002e4

08001488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopForever+0x2>)
 80014ae:	4685      	mov	sp, r0
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <LoopForever+0x6>)
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <LoopForever+0xa>)
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <LoopForever+0xe>)
 80014b6:	2300      	movs	r3, #0
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:
 80014ba:	58d4      	ldr	r4, [r2, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:
 80014c0:	18c4      	adds	r4, r0, r3
 80014c2:	428c      	cmp	r4, r1
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopForever+0x12>)
 80014c8:	4c0b      	ldr	r4, [pc, #44]	; (80014f8 <LoopForever+0x16>)
 80014ca:	2300      	movs	r3, #0
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:
 80014d2:	42a2      	cmp	r2, r4
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>
 80014d6:	f7ff ffd7 	bl	8001488 <SystemInit>
 80014da:	f009 f847 	bl	800a56c <__libc_init_array>
 80014de:	f7ff f989 	bl	80007f4 <main>

080014e2 <LoopForever>:
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
 80014e4:	20008000 	.word	0x20008000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000198 	.word	0x20000198
 80014f0:	0800a658 	.word	0x0800a658
 80014f4:	20000198 	.word	0x20000198
 80014f8:	200015d0 	.word	0x200015d0

080014fc <ADC1_2_IRQHandler>:
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>

080014fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f95b 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f80e 	bl	8001530 <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e001      	b.n	8001524 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001520:	f7ff fd90 	bl	8001044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001524:	79fb      	ldrb	r3, [r7, #7]

}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_InitTick+0x68>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d022      	beq.n	800158a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_InitTick+0x6c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <HAL_InitTick+0x68>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001550:	fbb1 f3f3 	udiv	r3, r1, r3
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f966 	bl	800182a <HAL_SYSTICK_Config>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10f      	bne.n	8001584 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d809      	bhi.n	800157e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156a:	2200      	movs	r2, #0
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	f04f 30ff 	mov.w	r0, #4294967295
 8001572:	f000 f932 	bl	80017da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_InitTick+0x70>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e007      	b.n	800158e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e004      	b.n	800158e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e001      	b.n	800158e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000001c 	.word	0x2000001c
 800159c:	20000014 	.word	0x20000014
 80015a0:	20000018 	.word	0x20000018

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <HAL_IncTick+0x20>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_IncTick+0x1c>)
 80015b4:	6013      	str	r3, [r2, #0]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	20000414 	.word	0x20000414
 80015c4:	2000001c 	.word	0x2000001c

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000414 	.word	0x20000414

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d004      	beq.n	8001604 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_Delay+0x40>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001604:	bf00      	nop
 8001606:	f7ff ffdf 	bl	80015c8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	429a      	cmp	r2, r3
 8001614:	d8f7      	bhi.n	8001606 <HAL_Delay+0x26>
  {
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000001c 	.word	0x2000001c

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff29 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff40 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff90 	bl	8001718 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5f 	bl	80016c4 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff33 	bl	8001688 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa4 	bl	8001780 <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001852:	e15a      	b.n	8001b0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 814c 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d005      	beq.n	8001884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001880:	2b02      	cmp	r3, #2
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d017      	beq.n	8001922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d123      	bne.n	8001976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	6939      	ldr	r1, [r7, #16]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80a6 	beq.w	8001b04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019bc:	4a5a      	ldr	r2, [pc, #360]	; (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6613      	str	r3, [r2, #96]	; 0x60
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <HAL_GPIO_Init+0x2e4>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d0:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fa:	d01f      	beq.n	8001a3c <HAL_GPIO_Init+0x1f8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_GPIO_Init+0x2ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d019      	beq.n	8001a38 <HAL_GPIO_Init+0x1f4>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_GPIO_Init+0x2f0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_GPIO_Init+0x1f0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x2f4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00d      	beq.n	8001a30 <HAL_GPIO_Init+0x1ec>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a49      	ldr	r2, [pc, #292]	; (8001b3c <HAL_GPIO_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0x1e8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <HAL_GPIO_Init+0x2fc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_GPIO_Init+0x1e4>
 8001a24:	2305      	movs	r3, #5
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a28:	2306      	movs	r3, #6
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1fa>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x2e8>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a30      	ldr	r2, [pc, #192]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a26      	ldr	r2, [pc, #152]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_GPIO_Init+0x300>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ae9d 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af06      	add	r7, sp, #24
 8001bae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0d7      	b.n	8001d6a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f008 f9c6 	bl	8009f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 f8b3 	bl	8005d4c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e04c      	b.n	8001c86 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	b298      	uxth	r0, r3
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	3336      	adds	r3, #54	; 0x36
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3303      	adds	r3, #3
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	3338      	adds	r3, #56	; 0x38
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	333c      	adds	r3, #60	; 0x3c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	3340      	adds	r3, #64	; 0x40
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	3301      	adds	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3ad      	bcc.n	8001bec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e044      	b.n	8001d20 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3b5      	bcc.n	8001c96 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	687e      	ldr	r6, [r7, #4]
 8001d32:	466d      	mov	r5, sp
 8001d34:	f106 0410 	add.w	r4, r6, #16
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	1d33      	adds	r3, r6, #4
 8001d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f004 f81c 	bl	8005d82 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d102      	bne.n	8001d68 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f001 fc29 	bl	80035ba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_PCD_Start+0x16>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e012      	b.n	8001dae <HAL_PCD_Start+0x3c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 ffc2 	bl	8005d1e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f006 f9da 	bl	8008158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f006 f9df 	bl	8008186 <USB_ReadInterrupts>
 8001dc8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fb26 	bl	8002426 <PCD_EP_ISR_Handler>

    return;
 8001dda:	e110      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d013      	beq.n	8001e0e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f008 f93f 	bl	800a082 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e04:	2100      	movs	r1, #0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8fc 	bl	8002004 <HAL_PCD_SetAddress>

    return;
 8001e0c:	e0f7      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e30:	e0e5      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00c      	beq.n	8001e56 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4e:	b292      	uxth	r2, r2
 8001e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e54:	e0d3      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d034      	beq.n	8001eca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	b292      	uxth	r2, r2
 8001e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0208 	bic.w	r2, r2, #8
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f008 fae1 	bl	800a46c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f008 f922 	bl	800a0f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ec8:	e099      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d027      	beq.n	8001f24 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	b292      	uxth	r2, r2
 8001f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0204 	orr.w	r2, r2, #4
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f008 f8cf 	bl	800a0c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f22:	e06c      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d040      	beq.n	8001fb0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	b292      	uxth	r2, r2
 8001f42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f008 fa63 	bl	800a46c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fa6:	e02a      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f008 f889 	bl	800a0c0 <HAL_PCD_SuspendCallback>
    return;
 8001fae:	e026      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00f      	beq.n	8001fda <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fcc:	b292      	uxth	r2, r2
 8001fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f008 f847 	bl	800a066 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fd8:	e011      	b.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ffc:	bf00      	nop
  }
}
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_PCD_SetAddress+0x1a>
 800201a:	2302      	movs	r3, #2
 800201c:	e013      	b.n	8002046 <HAL_PCD_SetAddress+0x42>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f006 f87a 	bl	8008130 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	4608      	mov	r0, r1
 8002058:	4611      	mov	r1, r2
 800205a:	461a      	mov	r2, r3
 800205c:	4603      	mov	r3, r0
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	460b      	mov	r3, r1
 8002062:	803b      	strh	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0e      	bge.n	8002092 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	705a      	strb	r2, [r3, #1]
 8002090:	e00e      	b.n	80020b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0207 	and.w	r2, r3, #7
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020bc:	883a      	ldrh	r2, [r7, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	78ba      	ldrb	r2, [r7, #2]
 80020c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020da:	78bb      	ldrb	r3, [r7, #2]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d102      	bne.n	80020e6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_PCD_EP_Open+0xa6>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e00e      	b.n	8002112 <HAL_PCD_EP_Open+0xc4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fe5e 	bl	8005dc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002110:	7afb      	ldrb	r3, [r7, #11]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	da0e      	bge.n	800214c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	705a      	strb	r2, [r3, #1]
 800214a:	e00e      	b.n	800216a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_EP_Close+0x6a>
 8002180:	2302      	movs	r3, #2
 8002182:	e00e      	b.n	80021a2 <HAL_PCD_EP_Close+0x88>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f9aa 	bl	80064ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	460b      	mov	r3, r1
 80021b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	7afb      	ldrb	r3, [r7, #11]
 80021bc:	f003 0207 	and.w	r2, r3, #7
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2200      	movs	r2, #0
 80021e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	4618      	mov	r0, r3
 8002208:	f004 fb5d 	bl	80068c6 <USB_EPStartXfer>
 800220c:	e005      	b.n	800221a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6979      	ldr	r1, [r7, #20]
 8002214:	4618      	mov	r0, r3
 8002216:	f004 fb56 	bl	80068c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	f003 0207 	and.w	r2, r3, #7
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	460b      	mov	r3, r1
 8002262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6979      	ldr	r1, [r7, #20]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fb02 	bl	80068c6 <USB_EPStartXfer>
 80022c2:	e005      	b.n	80022d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6979      	ldr	r1, [r7, #20]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f004 fafb 	bl	80068c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 0207 	and.w	r2, r3, #7
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e03e      	b.n	8002376 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0e      	bge.n	800231e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	705a      	strb	r2, [r3, #1]
 800231c:	e00c      	b.n	8002338 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_PCD_EP_SetStall+0x7e>
 8002354:	2302      	movs	r3, #2
 8002356:	e00e      	b.n	8002376 <HAL_PCD_EP_SetStall+0x9c>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	4618      	mov	r0, r3
 8002368:	f005 fde3 	bl	8007f32 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d901      	bls.n	800239c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e040      	b.n	800241e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0e      	bge.n	80023c2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	705a      	strb	r2, [r3, #1]
 80023c0:	e00e      	b.n	80023e0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0207 	and.w	r2, r3, #7
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_EP_ClrStall+0x82>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e00e      	b.n	800241e <HAL_PCD_EP_ClrStall+0xa0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	4618      	mov	r0, r3
 8002410:	f005 fde0 	bl	8007fd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b096      	sub	sp, #88	; 0x58
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800242e:	e39c      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800243c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800244a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 815e 	bne.w	8002710 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002454:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d150      	bne.n	8002502 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	81fb      	strh	r3, [r7, #14]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002480:	b29b      	uxth	r3, r3
 8002482:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3328      	adds	r3, #40	; 0x28
 8002488:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	441a      	add	r2, r3
 80024bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024c0:	2100      	movs	r1, #0
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f007 fdb5 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 834a 	beq.w	8002b6a <PCD_EP_ISR_Handler+0x744>
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8345 	bne.w	8002b6a <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002500:	e333      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002508:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002514:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251c:	2b00      	cmp	r3, #0
 800251e:	d032      	beq.n	8002586 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002528:	b29b      	uxth	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002558:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800255a:	b29b      	uxth	r3, r3
 800255c:	f005 fe65 	bl	800822a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800256c:	4013      	ands	r3, r2
 800256e:	823b      	strh	r3, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	8a3a      	ldrh	r2, [r7, #16]
 8002576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257a:	b292      	uxth	r2, r2
 800257c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f007 fd2a 	bl	8009fd8 <HAL_PCD_SetupStageCallback>
 8002584:	e2f1      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002586:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800258a:	2b00      	cmp	r3, #0
 800258c:	f280 82ed 	bge.w	8002b6a <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259c:	4013      	ands	r3, r2
 800259e:	83fb      	strh	r3, [r7, #30]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	8bfa      	ldrh	r2, [r7, #30]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <PCD_EP_ISR_Handler+0x1ec>
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d015      	beq.n	8002612 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ec:	6959      	ldr	r1, [r3, #20]
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f005 fe17 	bl	800822a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	441a      	add	r2, r3
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f007 fcf5 	bl	8009ffc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 82a3 	bne.w	8002b6a <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002632:	b29b      	uxth	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4413      	add	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b3e      	cmp	r3, #62	; 0x3e
 800264a:	d918      	bls.n	800267e <PCD_EP_ISR_Handler+0x258>
 800264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <PCD_EP_ISR_Handler+0x240>
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	3b01      	subs	r3, #1
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
 8002666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002668:	b29b      	uxth	r3, r3
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	b29b      	uxth	r3, r3
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29a      	uxth	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e029      	b.n	80026d2 <PCD_EP_ISR_Handler+0x2ac>
 800267e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d112      	bne.n	80026ac <PCD_EP_ISR_Handler+0x286>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002690:	b29a      	uxth	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	e012      	b.n	80026d2 <PCD_EP_ISR_Handler+0x2ac>
 80026ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	647b      	str	r3, [r7, #68]	; 0x44
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x2a0>
 80026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c2:	3301      	adds	r3, #1
 80026c4:	647b      	str	r3, [r7, #68]	; 0x44
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e2:	827b      	strh	r3, [r7, #18]
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026ea:	827b      	strh	r3, [r7, #18]
 80026ec:	8a7b      	ldrh	r3, [r7, #18]
 80026ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026f2:	827b      	strh	r3, [r7, #18]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	8a7b      	ldrh	r3, [r7, #18]
 80026fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270a:	b29b      	uxth	r3, r3
 800270c:	8013      	strh	r3, [r2, #0]
 800270e:	e22c      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002724:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002728:	2b00      	cmp	r3, #0
 800272a:	f280 80f6 	bge.w	800291a <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29a      	uxth	r2, r3
 8002740:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002744:	4013      	ands	r3, r2
 8002746:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800275c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002760:	b292      	uxth	r2, r2
 8002762:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002764:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277c:	7b1b      	ldrb	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d123      	bne.n	80027ca <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	4413      	add	r3, r2
 800279c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80027aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 808e 	beq.w	80028d0 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	6959      	ldr	r1, [r3, #20]
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027be:	88da      	ldrh	r2, [r3, #6]
 80027c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027c4:	f005 fd31 	bl	800822a <USB_ReadPMA>
 80027c8:	e082      	b.n	80028d0 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d10a      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80027d6:	461a      	mov	r2, r3
 80027d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f9d3 	bl	8002b86 <HAL_PCD_EP_DB_Receive>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80027e6:	e073      	b.n	80028d0 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	441a      	add	r2, r3
 8002814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002824:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002828:	b29b      	uxth	r3, r3
 800282a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d022      	beq.n	800288c <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284e:	b29b      	uxth	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800286e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02c      	beq.n	80028d0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	6959      	ldr	r1, [r3, #20]
 800287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002880:	891a      	ldrh	r2, [r3, #8]
 8002882:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002886:	f005 fcd0 	bl	800822a <USB_ReadPMA>
 800288a:	e021      	b.n	80028d0 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80028b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c2:	6959      	ldr	r1, [r3, #20]
 80028c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c6:	895a      	ldrh	r2, [r3, #10]
 80028c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028cc:	f005 fcad 	bl	800822a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028d8:	441a      	add	r2, r3
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028e6:	441a      	add	r2, r3
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <PCD_EP_ISR_Handler+0x4da>
 80028f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80028f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d206      	bcs.n	800290e <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f007 fb78 	bl	8009ffc <HAL_PCD_DataOutStageCallback>
 800290c:	e005      	b.n	800291a <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002914:	4618      	mov	r0, r3
 8002916:	f003 ffd6 	bl	80068c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800291a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8121 	beq.w	8002b6a <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002928:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	441a      	add	r2, r3
 8002968:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29b      	uxth	r3, r3
 8002976:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297a:	78db      	ldrb	r3, [r3, #3]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f000 80a2 	beq.w	8002ac6 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298a:	7b1b      	ldrb	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8093 	beq.w	8002ab8 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002992:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d046      	beq.n	8002a2c <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800299e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a0:	785b      	ldrb	r3, [r3, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d126      	bne.n	80029f4 <PCD_EP_ISR_Handler+0x5ce>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	4413      	add	r3, r2
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	00da      	lsls	r2, r3, #3
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e061      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x692>
 80029f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d15d      	bne.n	8002ab8 <PCD_EP_ISR_Handler+0x692>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	4413      	add	r3, r2
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	00da      	lsls	r2, r3, #3
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	801a      	strh	r2, [r3, #0]
 8002a2a:	e045      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d126      	bne.n	8002a88 <PCD_EP_ISR_Handler+0x662>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	4413      	add	r3, r2
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
 8002a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	00da      	lsls	r2, r3, #3
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	e017      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x692>
 8002a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d113      	bne.n	8002ab8 <PCD_EP_ISR_Handler+0x692>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9e:	4413      	add	r3, r2
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	00da      	lsls	r2, r3, #3
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	4413      	add	r3, r2
 8002aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f007 fab7 	bl	800a032 <HAL_PCD_DataInStageCallback>
 8002ac4:	e051      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ac6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d144      	bne.n	8002b5c <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002af6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d907      	bls.n	8002b16 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	e002      	b.n	8002b1c <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d106      	bne.n	8002b32 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f007 fa81 	bl	800a032 <HAL_PCD_DataInStageCallback>
 8002b30:	e01b      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b3a:	441a      	add	r2, r3
 8002b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b48:	441a      	add	r2, r3
 8002b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 feb6 	bl	80068c6 <USB_EPStartXfer>
 8002b5a:	e006      	b.n	8002b6a <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b60:	461a      	mov	r2, r3
 8002b62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f917 	bl	8002d98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f6ff ac5a 	blt.w	8002430 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3758      	adds	r7, #88	; 0x58
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b088      	sub	sp, #32
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	4613      	mov	r3, r2
 8002b92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d07c      	beq.n	8002c98 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	699a      	ldr	r2, [r3, #24]
 8002bc8:	8b7b      	ldrh	r3, [r7, #26]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d306      	bcc.n	8002bdc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	8b7b      	ldrh	r3, [r7, #26]
 8002bd4:	1ad2      	subs	r2, r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	619a      	str	r2, [r3, #24]
 8002bda:	e002      	b.n	8002be2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d123      	bne.n	8002c32 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c04:	833b      	strh	r3, [r7, #24]
 8002c06:	8b3b      	ldrh	r3, [r7, #24]
 8002c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c0c:	833b      	strh	r3, [r7, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	8b3b      	ldrh	r3, [r7, #24]
 8002c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01f      	beq.n	8002c7c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	82fb      	strh	r3, [r7, #22]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	8afb      	ldrh	r3, [r7, #22]
 8002c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c7c:	8b7b      	ldrh	r3, [r7, #26]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8085 	beq.w	8002d8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	6959      	ldr	r1, [r3, #20]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	891a      	ldrh	r2, [r3, #8]
 8002c90:	8b7b      	ldrh	r3, [r7, #26]
 8002c92:	f005 faca 	bl	800822a <USB_ReadPMA>
 8002c96:	e07a      	b.n	8002d8e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	8b7b      	ldrh	r3, [r7, #26]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d306      	bcc.n	8002cd6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	8b7b      	ldrh	r3, [r7, #26]
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	619a      	str	r2, [r3, #24]
 8002cd4:	e002      	b.n	8002cdc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d123      	bne.n	8002d2c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	83fb      	strh	r3, [r7, #30]
 8002d00:	8bfb      	ldrh	r3, [r7, #30]
 8002d02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d06:	83fb      	strh	r3, [r7, #30]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	8bfb      	ldrh	r3, [r7, #30]
 8002d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11f      	bne.n	8002d76 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d50:	83bb      	strh	r3, [r7, #28]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	8bbb      	ldrh	r3, [r7, #28]
 8002d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d76:	8b7b      	ldrh	r3, [r7, #26]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	6959      	ldr	r1, [r3, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	895a      	ldrh	r2, [r3, #10]
 8002d88:	8b7b      	ldrh	r3, [r7, #26]
 8002d8a:	f005 fa4e 	bl	800822a <USB_ReadPMA>
    }
  }

  return count;
 8002d8e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b0a2      	sub	sp, #136	; 0x88
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 81c5 	beq.w	800313c <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d907      	bls.n	8002df6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	619a      	str	r2, [r3, #24]
 8002df4:	e002      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 80b9 	bne.w	8002f78 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d126      	bne.n	8002e5c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	4413      	add	r3, r2
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00da      	lsls	r2, r3, #3
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	4413      	add	r3, r2
 8002e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	e01a      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d116      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	4413      	add	r3, r2
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	00da      	lsls	r2, r3, #3
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	4413      	add	r3, r2
 8002e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d126      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x156>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	00da      	lsls	r2, r3, #3
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	e017      	b.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x186>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d113      	bne.n	8002f1e <HAL_PCD_EP_DB_Transmit+0x186>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	4413      	add	r3, r2
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00da      	lsls	r2, r3, #3
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	4413      	add	r3, r2
 8002f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f007 f884 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 82d2 	beq.w	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f50:	827b      	strh	r3, [r7, #18]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	8a7b      	ldrh	r3, [r7, #18]
 8002f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8013      	strh	r3, [r2, #0]
 8002f76:	e2b0      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d021      	beq.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 8284 	bne.w	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fda:	441a      	add	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe8:	441a      	add	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d309      	bcc.n	800300e <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	1ad2      	subs	r2, r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	e015      	b.n	800303a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003016:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003024:	e009      	b.n	800303a <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d155      	bne.n	80030ee <HAL_PCD_EP_DB_Transmit+0x356>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	4413      	add	r3, r2
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	00da      	lsls	r2, r3, #3
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	4413      	add	r3, r2
 8003064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
 800306a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306c:	2b3e      	cmp	r3, #62	; 0x3e
 800306e:	d916      	bls.n	800309e <HAL_PCD_EP_DB_Transmit+0x306>
 8003070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	64bb      	str	r3, [r7, #72]	; 0x48
 8003076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003082:	3b01      	subs	r3, #1
 8003084:	64bb      	str	r3, [r7, #72]	; 0x48
 8003086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003088:	b29b      	uxth	r3, r3
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	b29b      	uxth	r3, r3
 800308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003096:	b29a      	uxth	r2, r3
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	e043      	b.n	8003126 <HAL_PCD_EP_DB_Transmit+0x38e>
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d112      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x332>
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e02d      	b.n	8003126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_PCD_EP_DB_Transmit+0x348>
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030dc:	3301      	adds	r3, #1
 80030de:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	029b      	lsls	r3, r3, #10
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	e01b      	b.n	8003126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d117      	bne.n	8003126 <HAL_PCD_EP_DB_Transmit+0x38e>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	643b      	str	r3, [r7, #64]	; 0x40
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003104:	b29b      	uxth	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800310a:	4413      	add	r3, r2
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	00da      	lsls	r2, r3, #3
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	4413      	add	r3, r2
 8003118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003120:	b29a      	uxth	r2, r3
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6959      	ldr	r1, [r3, #20]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	891a      	ldrh	r2, [r3, #8]
 8003132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	f005 f836 	bl	80081a6 <USB_WritePMA>
 800313a:	e1ce      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4413      	add	r3, r2
 8003156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003160:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800316c:	429a      	cmp	r2, r3
 800316e:	d307      	bcc.n	8003180 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003178:	1ad2      	subs	r2, r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	619a      	str	r2, [r3, #24]
 800317e:	e002      	b.n	8003186 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80c4 	bne.w	8003318 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d126      	bne.n	80031e6 <HAL_PCD_EP_DB_Transmit+0x44e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	66bb      	str	r3, [r7, #104]	; 0x68
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ac:	4413      	add	r3, r2
 80031ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00da      	lsls	r2, r3, #3
 80031b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b8:	4413      	add	r3, r2
 80031ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031be:	667b      	str	r3, [r7, #100]	; 0x64
 80031c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ce:	801a      	strh	r2, [r3, #0]
 80031d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031de:	b29a      	uxth	r2, r3
 80031e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e2:	801a      	strh	r2, [r3, #0]
 80031e4:	e01a      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x484>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d116      	bne.n	800321c <HAL_PCD_EP_DB_Transmit+0x484>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	673b      	str	r3, [r7, #112]	; 0x70
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003202:	4413      	add	r3, r2
 8003204:	673b      	str	r3, [r7, #112]	; 0x70
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	00da      	lsls	r2, r3, #3
 800320c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800320e:	4413      	add	r3, r2
 8003210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003214:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d12f      	bne.n	800328a <HAL_PCD_EP_DB_Transmit+0x4f2>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800323a:	b29b      	uxth	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003242:	4413      	add	r3, r2
 8003244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	00da      	lsls	r2, r3, #3
 800324e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003252:	4413      	add	r3, r2
 8003254:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800325c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003268:	b29a      	uxth	r2, r3
 800326a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003280:	b29a      	uxth	r2, r3
 8003282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	e017      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x522>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d113      	bne.n	80032ba <HAL_PCD_EP_DB_Transmit+0x522>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032a0:	4413      	add	r3, r2
 80032a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00da      	lsls	r2, r3, #3
 80032aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032ac:	4413      	add	r3, r2
 80032ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b6:	2200      	movs	r2, #0
 80032b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4619      	mov	r1, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f006 feb6 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 8104 	bne.w	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
 8003316:	e0e0      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d121      	bne.n	8003366 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 80b4 	bne.w	80034da <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800337a:	441a      	add	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003388:	441a      	add	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	429a      	cmp	r2, r3
 8003398:	d309      	bcc.n	80033ae <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e015      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d107      	bne.n	80033c6 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80033b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033c4:	e009      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	663b      	str	r3, [r7, #96]	; 0x60
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d155      	bne.n	8003494 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fc:	4413      	add	r3, r2
 80033fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003408:	4413      	add	r3, r2
 800340a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800340e:	657b      	str	r3, [r7, #84]	; 0x54
 8003410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003412:	2b3e      	cmp	r3, #62	; 0x3e
 8003414:	d916      	bls.n	8003444 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	677b      	str	r3, [r7, #116]	; 0x74
 800341c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_PCD_EP_DB_Transmit+0x694>
 8003426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003428:	3b01      	subs	r3, #1
 800342a:	677b      	str	r3, [r7, #116]	; 0x74
 800342c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342e:	b29b      	uxth	r3, r3
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	b29b      	uxth	r3, r3
 8003434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343c:	b29a      	uxth	r2, r3
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	e040      	b.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d112      	bne.n	8003470 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800344a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003454:	b29a      	uxth	r2, r3
 8003456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003458:	801a      	strh	r2, [r3, #0]
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003468:	b29a      	uxth	r2, r3
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	e02a      	b.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
 8003476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8003480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003482:	3301      	adds	r3, #1
 8003484:	677b      	str	r3, [r7, #116]	; 0x74
 8003486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003488:	b29b      	uxth	r3, r3
 800348a:	029b      	lsls	r3, r3, #10
 800348c:	b29a      	uxth	r2, r3
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e018      	b.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d114      	bne.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x72e>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034aa:	4413      	add	r3, r2
 80034ac:	663b      	str	r3, [r7, #96]	; 0x60
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	00da      	lsls	r2, r3, #3
 80034b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b6:	4413      	add	r3, r2
 80034b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	6959      	ldr	r1, [r3, #20]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	895a      	ldrh	r2, [r3, #10]
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f004 fe66 	bl	80081a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f4:	823b      	strh	r3, [r7, #16]
 80034f6:	8a3b      	ldrh	r3, [r7, #16]
 80034f8:	f083 0310 	eor.w	r3, r3, #16
 80034fc:	823b      	strh	r3, [r7, #16]
 80034fe:	8a3b      	ldrh	r3, [r7, #16]
 8003500:	f083 0320 	eor.w	r3, r3, #32
 8003504:	823b      	strh	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8a3b      	ldrh	r3, [r7, #16]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3788      	adds	r7, #136	; 0x88
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	4613      	mov	r3, r2
 8003544:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	e009      	b.n	800357e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800356a:	897a      	ldrh	r2, [r7, #10]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800357e:	893b      	ldrh	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	b29a      	uxth	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	80da      	strh	r2, [r3, #6]
 8003592:	e00b      	b.n	80035ac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2201      	movs	r2, #1
 8003598:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	b29a      	uxth	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035de:	b29b      	uxth	r3, r3
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d141      	bne.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800361e:	4b4b      	ldr	r3, [pc, #300]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d131      	bne.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800362c:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4a46      	ldr	r2, [pc, #280]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003644:	4a41      	ldr	r2, [pc, #260]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2232      	movs	r2, #50	; 0x32
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a3f      	ldr	r2, [pc, #252]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0c9b      	lsrs	r3, r3, #18
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003662:	e002      	b.n	800366a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3b01      	subs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800366a:	4b38      	ldr	r3, [pc, #224]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d102      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f2      	bne.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800367e:	4b33      	ldr	r3, [pc, #204]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368a:	d158      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e057      	b.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003690:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003696:	4a2d      	ldr	r2, [pc, #180]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036a0:	e04d      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a8:	d141      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d131      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2232      	movs	r2, #50	; 0x32
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9b      	lsrs	r3, r3, #18
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ee:	e002      	b.n	80036f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003702:	d102      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f2      	bne.n	80036f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d112      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e011      	b.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003722:	4a0a      	ldr	r2, [pc, #40]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800372c:	e007      	b.n	800373e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40007000 	.word	0x40007000
 8003750:	20000014 	.word	0x20000014
 8003754:	431bde83 	.word	0x431bde83

08003758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e306      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d075      	beq.n	8003862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003776:	4b97      	ldr	r3, [pc, #604]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003780:	4b94      	ldr	r3, [pc, #592]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d102      	bne.n	8003796 <HAL_RCC_OscConfig+0x3e>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d002      	beq.n	800379c <HAL_RCC_OscConfig+0x44>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d10b      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	4b8d      	ldr	r3, [pc, #564]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05b      	beq.n	8003860 <HAL_RCC_OscConfig+0x108>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d157      	bne.n	8003860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e2e1      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_OscConfig+0x74>
 80037be:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a84      	ldr	r2, [pc, #528]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x98>
 80037d6:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7e      	ldr	r2, [pc, #504]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b7c      	ldr	r3, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037f0:	4b78      	ldr	r3, [pc, #480]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a77      	ldr	r2, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b75      	ldr	r3, [pc, #468]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a74      	ldr	r2, [pc, #464]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd feda 	bl	80015c8 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fd fed6 	bl	80015c8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e2a6      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0xc0>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd fec6 	bl	80015c8 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003840:	f7fd fec2 	bl	80015c8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e292      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0xe8>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d075      	beq.n	800395a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003878:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d102      	bne.n	800388e <HAL_RCC_OscConfig+0x136>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d002      	beq.n	8003894 <HAL_RCC_OscConfig+0x13c>
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11f      	bne.n	80038d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	4b4f      	ldr	r3, [pc, #316]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_OscConfig+0x154>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e265      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b49      	ldr	r3, [pc, #292]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	4946      	ldr	r1, [pc, #280]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038c0:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_RCC_OscConfig+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fe33 	bl	8001530 <HAL_InitTick>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d043      	beq.n	8003958 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e251      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3c      	ldr	r2, [pc, #240]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fe6e 	bl	80015c8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f0:	f7fd fe6a 	bl	80015c8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e23a      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003902:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	061b      	lsls	r3, r3, #24
 800391c:	492d      	ldr	r1, [pc, #180]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
 8003922:	e01a      	b.n	800395a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800392a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fe4a 	bl	80015c8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7fd fe46 	bl	80015c8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e216      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x1e0>
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d041      	beq.n	80039ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd fe23 	bl	80015c8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003986:	f7fd fe1f 	bl	80015c8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1ef      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ef      	beq.n	8003986 <HAL_RCC_OscConfig+0x22e>
 80039a6:	e020      	b.n	80039ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80039aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fd fe06 	bl	80015c8 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039be:	e00d      	b.n	80039dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fd fe02 	bl	80015c8 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d906      	bls.n	80039dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1d2      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
 80039d2:	bf00      	nop
 80039d4:	40021000 	.word	0x40021000
 80039d8:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039dc:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1ea      	bne.n	80039c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a6 	beq.w	8003b44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f8:	2300      	movs	r3, #0
 80039fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039fc:	4b84      	ldr	r3, [pc, #528]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2b4>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4a7e      	ldr	r2, [pc, #504]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1e:	4b7c      	ldr	r3, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2e:	4b79      	ldr	r3, [pc, #484]	; (8003c14 <HAL_RCC_OscConfig+0x4bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d118      	bne.n	8003a6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x4bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x4bc>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fdbf 	bl	80015c8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fd fdbb 	bl	80015c8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e18b      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a60:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x4bc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_RCC_OscConfig+0x32e>
 8003a74:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a84:	e024      	b.n	8003ad0 <HAL_RCC_OscConfig+0x378>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d110      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x358>
 8003a8e:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	4a5e      	ldr	r2, [pc, #376]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9e:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aae:	e00f      	b.n	8003ad0 <HAL_RCC_OscConfig+0x378>
 8003ab0:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a56      	ldr	r2, [pc, #344]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d016      	beq.n	8003b06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd fd76 	bl	80015c8 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fd fd72 	bl	80015c8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e140      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af6:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ed      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x388>
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fd fd5f 	bl	80015c8 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd fd5b 	bl	80015c8 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e129      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b24:	4b3a      	ldr	r3, [pc, #232]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ed      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03c      	beq.n	8003bca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b58:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fd fd2e 	bl	80015c8 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b70:	f7fd fd2a 	bl	80015c8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0fa      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <HAL_RCC_OscConfig+0x418>
 8003b90:	e01b      	b.n	8003bca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fd11 	bl	80015c8 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003baa:	f7fd fd0d 	bl	80015c8 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e0dd      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ef      	bne.n	8003baa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d1 	beq.w	8003d76 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	f000 808b 	beq.w	8003cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d15e      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fce7 	bl	80015c8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	e00c      	b.n	8003c18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fd fce3 	bl	80015c8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d905      	bls.n	8003c18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0b3      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ec      	bne.n	8003bfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c24:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4b56      	ldr	r3, [pc, #344]	; (8003d84 <HAL_RCC_OscConfig+0x62c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6a11      	ldr	r1, [r2, #32]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c3e:	0212      	lsls	r2, r2, #8
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0552      	lsls	r2, r2, #21
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	3a01      	subs	r2, #1
 8003c56:	0652      	lsls	r2, r2, #25
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c5e:	06d2      	lsls	r2, r2, #27
 8003c60:	430a      	orrs	r2, r1
 8003c62:	4947      	ldr	r1, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b45      	ldr	r3, [pc, #276]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a44      	ldr	r2, [pc, #272]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a41      	ldr	r2, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fd fca2 	bl	80015c8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fc9e 	bl	80015c8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e06e      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x530>
 8003ca6:	e066      	b.n	8003d76 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cc6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fc7a 	bl	80015c8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd fc76 	bl	80015c8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e046      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cea:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x580>
 8003cf6:	e03e      	b.n	8003d76 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e039      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_OscConfig+0x628>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d12c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	3b01      	subs	r3, #1
 8003d24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d123      	bne.n	8003d72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d11b      	bne.n	8003d72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d113      	bne.n	8003d72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3720      	adds	r7, #32
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	019f800c 	.word	0x019f800c

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e11e      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b8e      	ldr	r3, [pc, #568]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	498c      	ldr	r1, [pc, #560]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b8a      	ldr	r3, [pc, #552]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e106      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d073      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d129      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0f4      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003df4:	f000 f966 	bl	80040c4 <RCC_GetSysClockFreqFromPLLSource>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4a7c      	ldr	r2, [pc, #496]	; (8003ff0 <HAL_RCC_ClockConfig+0x268>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d93f      	bls.n	8003e82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e02:	4b7a      	ldr	r3, [pc, #488]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d033      	beq.n	8003e82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d12f      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e22:	4b72      	ldr	r3, [pc, #456]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e2a:	4a70      	ldr	r2, [pc, #448]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e024      	b.n	8003e82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0c6      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	4b66      	ldr	r3, [pc, #408]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0be      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e60:	f000 f8ce 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003e64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4a61      	ldr	r2, [pc, #388]	; (8003ff0 <HAL_RCC_ClockConfig+0x268>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d909      	bls.n	8003e82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e76:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4957      	ldr	r1, [pc, #348]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fd fb98 	bl	80015c8 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7fd fb94 	bl	80015c8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e095      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a42      	ldr	r2, [pc, #264]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003ee2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ee6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ef4:	4b3d      	ldr	r3, [pc, #244]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003efc:	4a3b      	ldr	r2, [pc, #236]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4936      	ldr	r1, [pc, #216]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b80      	cmp	r3, #128	; 0x80
 8003f1c:	d105      	bne.n	8003f2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4a32      	ldr	r2, [pc, #200]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d21d      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f38:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 020f 	bic.w	r2, r3, #15
 8003f40:	4929      	ldr	r1, [pc, #164]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f48:	f7fd fb3e 	bl	80015c8 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd fb3a 	bl	80015c8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e03b      	b.n	8003fde <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1ed      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4917      	ldr	r1, [pc, #92]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490f      	ldr	r1, [pc, #60]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb2:	f000 f825 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <HAL_RCC_ClockConfig+0x26c>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	fa22 f303 	lsr.w	r3, r2, r3
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x270>)
 8003fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd faaa 	bl	8001530 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	04c4b400 	.word	0x04c4b400
 8003ff4:	0800a640 	.word	0x0800a640
 8003ff8:	20000014 	.word	0x20000014
 8003ffc:	20000018 	.word	0x20000018

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b04      	cmp	r3, #4
 8004010:	d102      	bne.n	8004018 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	e047      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d102      	bne.n	800402a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004024:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e03e      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d136      	bne.n	80040a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	3301      	adds	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d10c      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004054:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800405e:	68d2      	ldr	r2, [r2, #12]
 8004060:	0a12      	lsrs	r2, r2, #8
 8004062:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	617b      	str	r3, [r7, #20]
      break;
 800406c:	e00c      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004078:	68d2      	ldr	r2, [r2, #12]
 800407a:	0a12      	lsrs	r2, r2, #8
 800407c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
      break;
 8004086:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0e5b      	lsrs	r3, r3, #25
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	3301      	adds	r3, #1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e001      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040a8:	693b      	ldr	r3, [r7, #16]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ca:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d10c      	bne.n	8004102 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e8:	4a17      	ldr	r2, [pc, #92]	; (8004148 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040f2:	68d2      	ldr	r2, [r2, #12]
 80040f4:	0a12      	lsrs	r2, r2, #8
 80040f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	617b      	str	r3, [r7, #20]
    break;
 8004100:	e00c      	b.n	800411c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	0a12      	lsrs	r2, r2, #8
 8004110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]
    break;
 800411a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0e5b      	lsrs	r3, r3, #25
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004136:	687b      	ldr	r3, [r7, #4]
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40021000 	.word	0x40021000
 8004148:	007a1200 	.word	0x007a1200
 800414c:	00f42400 	.word	0x00f42400

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004158:	2300      	movs	r3, #0
 800415a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800415c:	2300      	movs	r3, #0
 800415e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8098 	beq.w	800429e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10d      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b40      	ldr	r3, [pc, #256]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004182:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6593      	str	r3, [r2, #88]	; 0x58
 800418a:	4b3d      	ldr	r3, [pc, #244]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419a:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a39      	ldr	r2, [pc, #228]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a6:	f7fd fa0f 	bl	80015c8 <HAL_GetTick>
 80041aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ac:	e009      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ae:	f7fd fa0b 	bl	80015c8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d902      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	74fb      	strb	r3, [r7, #19]
        break;
 80041c0:	e005      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ef      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d159      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01e      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d019      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041f0:	4b23      	ldr	r3, [pc, #140]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041fc:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd f9cb 	bl	80015c8 <HAL_GetTick>
 8004232:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004234:	e00b      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fd f9c7 	bl	80015c8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d902      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	74fb      	strb	r3, [r7, #19]
            break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ec      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	74bb      	strb	r3, [r7, #18]
 800427e:	e005      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428c:	7c7b      	ldrb	r3, [r7, #17]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d105      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004292:	4ba6      	ldr	r3, [pc, #664]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4aa5      	ldr	r2, [pc, #660]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042aa:	4ba0      	ldr	r3, [pc, #640]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f023 0203 	bic.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	499c      	ldr	r1, [pc, #624]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042cc:	4b97      	ldr	r3, [pc, #604]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 020c 	bic.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	4994      	ldr	r1, [pc, #592]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ee:	4b8f      	ldr	r3, [pc, #572]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	498b      	ldr	r1, [pc, #556]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004310:	4b86      	ldr	r3, [pc, #536]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	4983      	ldr	r1, [pc, #524]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004332:	4b7e      	ldr	r3, [pc, #504]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	497a      	ldr	r1, [pc, #488]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004354:	4b75      	ldr	r3, [pc, #468]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	4972      	ldr	r1, [pc, #456]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004376:	4b6d      	ldr	r3, [pc, #436]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4969      	ldr	r1, [pc, #420]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004398:	4b64      	ldr	r3, [pc, #400]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4961      	ldr	r1, [pc, #388]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	4958      	ldr	r1, [pc, #352]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	4950      	ldr	r1, [pc, #320]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b4b      	ldr	r3, [pc, #300]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a4a      	ldr	r2, [pc, #296]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4942      	ldr	r1, [pc, #264]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b3d      	ldr	r3, [pc, #244]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d015      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800444c:	4b37      	ldr	r3, [pc, #220]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4934      	ldr	r1, [pc, #208]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446a:	d105      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446c:	4b2f      	ldr	r3, [pc, #188]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004476:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	4926      	ldr	r1, [pc, #152]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a2:	d105      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a4:	4b21      	ldr	r3, [pc, #132]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044bc:	4b1b      	ldr	r3, [pc, #108]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4918      	ldr	r1, [pc, #96]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044dc:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a12      	ldr	r2, [pc, #72]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d015      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	490a      	ldr	r1, [pc, #40]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004512:	d105      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a04      	ldr	r2, [pc, #16]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004520:	7cbb      	ldrb	r3, [r7, #18]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000

08004530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e049      	b.n	80045d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fe84 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fde8 	bl	8005144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d001      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e04a      	b.n	800468e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a21      	ldr	r2, [pc, #132]	; (800469c <HAL_TIM_Base_Start_IT+0xbc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x6c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d013      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x6c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x6c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x6c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x6c>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d115      	bne.n	8004678 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004654:	4013      	ands	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d015      	beq.n	800468a <HAL_TIM_Base_Start_IT+0xaa>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d011      	beq.n	800468a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	e008      	b.n	800468a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	e000      	b.n	800468c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	00010007 	.word	0x00010007

080046b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e049      	b.n	800475a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fd7c 	bl	80011d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fd26 	bl	8005144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <HAL_TIM_PWM_Start+0x24>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e03c      	b.n	8004802 <HAL_TIM_PWM_Start+0x9e>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d109      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x3e>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b01      	cmp	r3, #1
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e02f      	b.n	8004802 <HAL_TIM_PWM_Start+0x9e>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start+0x58>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e022      	b.n	8004802 <HAL_TIM_PWM_Start+0x9e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d109      	bne.n	80047d6 <HAL_TIM_PWM_Start+0x72>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	e015      	b.n	8004802 <HAL_TIM_PWM_Start+0x9e>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x8c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e008      	b.n	8004802 <HAL_TIM_PWM_Start+0x9e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e097      	b.n	800493a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xb6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	e023      	b.n	8004862 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xc6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	e01b      	b.n	8004862 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xd6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	e013      	b.n	8004862 <HAL_TIM_PWM_Start+0xfe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b0c      	cmp	r3, #12
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xe6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004848:	e00b      	b.n	8004862 <HAL_TIM_PWM_Start+0xfe>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b10      	cmp	r3, #16
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xf6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004858:	e003      	b.n	8004862 <HAL_TIM_PWM_Start+0xfe>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fff0 	bl	8005850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a33      	ldr	r2, [pc, #204]	; (8004944 <HAL_TIM_PWM_Start+0x1e0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x13e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a32      	ldr	r2, [pc, #200]	; (8004948 <HAL_TIM_PWM_Start+0x1e4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x13e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a30      	ldr	r2, [pc, #192]	; (800494c <HAL_TIM_PWM_Start+0x1e8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x13e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <HAL_TIM_PWM_Start+0x1ec>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIM_PWM_Start+0x13e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2d      	ldr	r2, [pc, #180]	; (8004954 <HAL_TIM_PWM_Start+0x1f0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x142>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_PWM_Start+0x144>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <HAL_TIM_PWM_Start+0x1e0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d013      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x194>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_TIM_PWM_Start+0x1f4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x194>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_TIM_PWM_Start+0x1f8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x194>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_TIM_PWM_Start+0x1e4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x194>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a16      	ldr	r2, [pc, #88]	; (800494c <HAL_TIM_PWM_Start+0x1e8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d115      	bne.n	8004924 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_TIM_PWM_Start+0x1fc>)
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d015      	beq.n	8004936 <HAL_TIM_PWM_Start+0x1d2>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d011      	beq.n	8004936 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	e008      	b.n	8004936 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e000      	b.n	8004938 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40012c00 	.word	0x40012c00
 8004948:	40013400 	.word	0x40013400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e097      	b.n	8004aa8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d106      	bne.n	8004992 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7fc fb7d 	bl	800108c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fbc3 	bl	8005144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	4313      	orrs	r3, r2
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a04:	f023 030c 	bic.w	r3, r3, #12
 8004a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	4313      	orrs	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	011a      	lsls	r2, r3, #4
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	031b      	lsls	r3, r3, #12
 8004a34:	4313      	orrs	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4313      	orrs	r3, r2
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae6:	7b7b      	ldrb	r3, [r7, #13]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e069      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b00:	e031      	b.n	8004b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d110      	bne.n	8004b2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b08:	7bbb      	ldrb	r3, [r7, #14]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b0e:	7b3b      	ldrb	r3, [r7, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e055      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b28:	e01d      	b.n	8004b66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b30:	7bbb      	ldrb	r3, [r7, #14]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d105      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b36:	7b7b      	ldrb	r3, [r7, #13]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b3c:	7b3b      	ldrb	r3, [r7, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03e      	b.n	8004bc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_TIM_Encoder_Start+0xc4>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d008      	beq.n	8004b84 <HAL_TIM_Encoder_Start+0xd4>
 8004b72:	e00f      	b.n	8004b94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fe67 	bl	8005850 <TIM_CCxChannelCmd>
      break;
 8004b82:	e016      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fe5f 	bl	8005850 <TIM_CCxChannelCmd>
      break;
 8004b92:	e00e      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe57 	bl	8005850 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	2104      	movs	r1, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fe50 	bl	8005850 <TIM_CCxChannelCmd>
      break;
 8004bb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d122      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d11b      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0202 	mvn.w	r2, #2
 8004bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa7a 	bl	8005108 <HAL_TIM_IC_CaptureCallback>
 8004c14:	e005      	b.n	8004c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa6c 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa7d 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0204 	mvn.w	r2, #4
 8004c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa50 	bl	8005108 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa42 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa53 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0208 	mvn.w	r2, #8
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa26 	bl	8005108 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa18 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa29 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0210 	mvn.w	r2, #16
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9fc 	bl	8005108 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9ee 	bl	80050f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f9ff 	bl	800511c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10e      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0201 	mvn.w	r2, #1
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fb fcde 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 ff70 	bl	8005c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b80      	cmp	r3, #128	; 0x80
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 ff63 	bl	8005c70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d10e      	bne.n	8004dd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d107      	bne.n	8004dd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f9ad 	bl	8005130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d10e      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b20      	cmp	r3, #32
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f06f 0220 	mvn.w	r2, #32
 8004dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 ff23 	bl	8005c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 ff29 	bl	8005c84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e40:	d10f      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 ff1b 	bl	8005c98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e70:	d10f      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 ff0d 	bl	8005cac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 feff 	bl	8005cc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0ff      	b.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b14      	cmp	r3, #20
 8004ef6:	f200 80f0 	bhi.w	80050da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f55 	.word	0x08004f55
 8004f04:	080050db 	.word	0x080050db
 8004f08:	080050db 	.word	0x080050db
 8004f0c:	080050db 	.word	0x080050db
 8004f10:	08004f95 	.word	0x08004f95
 8004f14:	080050db 	.word	0x080050db
 8004f18:	080050db 	.word	0x080050db
 8004f1c:	080050db 	.word	0x080050db
 8004f20:	08004fd7 	.word	0x08004fd7
 8004f24:	080050db 	.word	0x080050db
 8004f28:	080050db 	.word	0x080050db
 8004f2c:	080050db 	.word	0x080050db
 8004f30:	08005017 	.word	0x08005017
 8004f34:	080050db 	.word	0x080050db
 8004f38:	080050db 	.word	0x080050db
 8004f3c:	080050db 	.word	0x080050db
 8004f40:	08005059 	.word	0x08005059
 8004f44:	080050db 	.word	0x080050db
 8004f48:	080050db 	.word	0x080050db
 8004f4c:	080050db 	.word	0x080050db
 8004f50:	08005099 	.word	0x08005099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f982 	bl	8005264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0204 	bic.w	r2, r2, #4
 8004f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	619a      	str	r2, [r3, #24]
      break;
 8004f92:	e0a5      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f9f2 	bl	8005384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	619a      	str	r2, [r3, #24]
      break;
 8004fd4:	e084      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fa5b 	bl	8005498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0208 	orr.w	r2, r2, #8
 8004ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0204 	bic.w	r2, r2, #4
 8005000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	61da      	str	r2, [r3, #28]
      break;
 8005014:	e064      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fac3 	bl	80055a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	61da      	str	r2, [r3, #28]
      break;
 8005056:	e043      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb2c 	bl	80056bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005096:	e023      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fb70 	bl	8005784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80050d8:	e002      	b.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
      break;
 80050de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3c      	ldr	r2, [pc, #240]	; (8005248 <TIM_Base_SetConfig+0x104>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_Base_SetConfig+0x38>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a39      	ldr	r2, [pc, #228]	; (800524c <TIM_Base_SetConfig+0x108>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x38>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a38      	ldr	r2, [pc, #224]	; (8005250 <TIM_Base_SetConfig+0x10c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x38>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a37      	ldr	r2, [pc, #220]	; (8005254 <TIM_Base_SetConfig+0x110>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <TIM_Base_SetConfig+0x104>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01b      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d017      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2a      	ldr	r2, [pc, #168]	; (800524c <TIM_Base_SetConfig+0x108>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a29      	ldr	r2, [pc, #164]	; (8005250 <TIM_Base_SetConfig+0x10c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00f      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_Base_SetConfig+0x110>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_Base_SetConfig+0x114>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_Base_SetConfig+0x118>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_Base_SetConfig+0x11c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d108      	bne.n	80051e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <TIM_Base_SetConfig+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0xe8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a11      	ldr	r2, [pc, #68]	; (8005254 <TIM_Base_SetConfig+0x110>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0xe8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a10      	ldr	r2, [pc, #64]	; (8005258 <TIM_Base_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0xe8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0f      	ldr	r2, [pc, #60]	; (800525c <TIM_Base_SetConfig+0x118>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0xe8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0e      	ldr	r2, [pc, #56]	; (8005260 <TIM_Base_SetConfig+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	615a      	str	r2, [r3, #20]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40013400 	.word	0x40013400
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800

08005264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 0302 	bic.w	r3, r3, #2
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2c      	ldr	r2, [pc, #176]	; (8005370 <TIM_OC1_SetConfig+0x10c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00f      	beq.n	80052e4 <TIM_OC1_SetConfig+0x80>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2b      	ldr	r2, [pc, #172]	; (8005374 <TIM_OC1_SetConfig+0x110>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_OC1_SetConfig+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <TIM_OC1_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_OC1_SetConfig+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a29      	ldr	r2, [pc, #164]	; (800537c <TIM_OC1_SetConfig+0x118>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC1_SetConfig+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a28      	ldr	r2, [pc, #160]	; (8005380 <TIM_OC1_SetConfig+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_OC1_SetConfig+0x10c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_OC1_SetConfig+0xc2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_OC1_SetConfig+0x110>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_OC1_SetConfig+0xc2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_OC1_SetConfig+0x114>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC1_SetConfig+0xc2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_OC1_SetConfig+0x118>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC1_SetConfig+0xc2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_OC1_SetConfig+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d111      	bne.n	800534a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40013400 	.word	0x40013400
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800

08005384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0210 	bic.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a28      	ldr	r2, [pc, #160]	; (8005484 <TIM_OC2_SetConfig+0x100>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC2_SetConfig+0x6c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a27      	ldr	r2, [pc, #156]	; (8005488 <TIM_OC2_SetConfig+0x104>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10d      	bne.n	800540c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <TIM_OC2_SetConfig+0x100>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_OC2_SetConfig+0xb0>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <TIM_OC2_SetConfig+0x104>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_OC2_SetConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <TIM_OC2_SetConfig+0x108>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_OC2_SetConfig+0xb0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <TIM_OC2_SetConfig+0x10c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_OC2_SetConfig+0xb0>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <TIM_OC2_SetConfig+0x110>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d113      	bne.n	800545c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800543a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800

08005498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a27      	ldr	r2, [pc, #156]	; (8005594 <TIM_OC3_SetConfig+0xfc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_OC3_SetConfig+0x6a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a26      	ldr	r2, [pc, #152]	; (8005598 <TIM_OC3_SetConfig+0x100>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10d      	bne.n	800551e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800551c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <TIM_OC3_SetConfig+0xfc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_OC3_SetConfig+0xae>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <TIM_OC3_SetConfig+0x100>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_OC3_SetConfig+0xae>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <TIM_OC3_SetConfig+0x104>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_OC3_SetConfig+0xae>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <TIM_OC3_SetConfig+0x108>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC3_SetConfig+0xae>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <TIM_OC3_SetConfig+0x10c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d113      	bne.n	800556e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a28      	ldr	r2, [pc, #160]	; (80056a8 <TIM_OC4_SetConfig+0x100>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC4_SetConfig+0x6c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a27      	ldr	r2, [pc, #156]	; (80056ac <TIM_OC4_SetConfig+0x104>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10d      	bne.n	8005630 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <TIM_OC4_SetConfig+0x100>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_OC4_SetConfig+0xb0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <TIM_OC4_SetConfig+0x104>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC4_SetConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <TIM_OC4_SetConfig+0x108>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC4_SetConfig+0xb0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <TIM_OC4_SetConfig+0x10c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC4_SetConfig+0xb0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <TIM_OC4_SetConfig+0x110>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d113      	bne.n	8005680 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800565e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005666:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	019b      	lsls	r3, r3, #6
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	019b      	lsls	r3, r3, #6
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40012c00 	.word	0x40012c00
 80056ac:	40013400 	.word	0x40013400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40014400 	.word	0x40014400
 80056b8:	40014800 	.word	0x40014800

080056bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <TIM_OC5_SetConfig+0xb4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00f      	beq.n	8005736 <TIM_OC5_SetConfig+0x7a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a16      	ldr	r2, [pc, #88]	; (8005774 <TIM_OC5_SetConfig+0xb8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00b      	beq.n	8005736 <TIM_OC5_SetConfig+0x7a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a15      	ldr	r2, [pc, #84]	; (8005778 <TIM_OC5_SetConfig+0xbc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d007      	beq.n	8005736 <TIM_OC5_SetConfig+0x7a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a14      	ldr	r2, [pc, #80]	; (800577c <TIM_OC5_SetConfig+0xc0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d003      	beq.n	8005736 <TIM_OC5_SetConfig+0x7a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <TIM_OC5_SetConfig+0xc4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d109      	bne.n	800574a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	051b      	lsls	r3, r3, #20
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a18      	ldr	r2, [pc, #96]	; (800583c <TIM_OC6_SetConfig+0xb8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_OC6_SetConfig+0x7c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <TIM_OC6_SetConfig+0xbc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d00b      	beq.n	8005800 <TIM_OC6_SetConfig+0x7c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a16      	ldr	r2, [pc, #88]	; (8005844 <TIM_OC6_SetConfig+0xc0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC6_SetConfig+0x7c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a15      	ldr	r2, [pc, #84]	; (8005848 <TIM_OC6_SetConfig+0xc4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC6_SetConfig+0x7c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a14      	ldr	r2, [pc, #80]	; (800584c <TIM_OC6_SetConfig+0xc8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d109      	bne.n	8005814 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40013400 	.word	0x40013400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800

08005850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2201      	movs	r2, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <HAL_TIMEx_PWMN_Start+0x24>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e022      	b.n	8005906 <HAL_TIMEx_PWMN_Start+0x6a>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d109      	bne.n	80058da <HAL_TIMEx_PWMN_Start+0x3e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e015      	b.n	8005906 <HAL_TIMEx_PWMN_Start+0x6a>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d109      	bne.n	80058f4 <HAL_TIMEx_PWMN_Start+0x58>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e008      	b.n	8005906 <HAL_TIMEx_PWMN_Start+0x6a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e069      	b.n	80059e2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <HAL_TIMEx_PWMN_Start+0x82>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800591c:	e013      	b.n	8005946 <HAL_TIMEx_PWMN_Start+0xaa>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d104      	bne.n	800592e <HAL_TIMEx_PWMN_Start+0x92>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800592c:	e00b      	b.n	8005946 <HAL_TIMEx_PWMN_Start+0xaa>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d104      	bne.n	800593e <HAL_TIMEx_PWMN_Start+0xa2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800593c:	e003      	b.n	8005946 <HAL_TIMEx_PWMN_Start+0xaa>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2204      	movs	r2, #4
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f9c0 	bl	8005cd4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005962:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a20      	ldr	r2, [pc, #128]	; (80059ec <HAL_TIMEx_PWMN_Start+0x150>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIMEx_PWMN_Start+0x104>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d013      	beq.n	80059a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIMEx_PWMN_Start+0x154>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIMEx_PWMN_Start+0x104>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIMEx_PWMN_Start+0x104>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIMEx_PWMN_Start+0x160>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d115      	bne.n	80059cc <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	4b16      	ldr	r3, [pc, #88]	; (8005a00 <HAL_TIMEx_PWMN_Start+0x164>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d015      	beq.n	80059de <HAL_TIMEx_PWMN_Start+0x142>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d011      	beq.n	80059de <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ca:	e008      	b.n	80059de <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e000      	b.n	80059e0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40013400 	.word	0x40013400
 80059fc:	40014000 	.word	0x40014000
 8005a00:	00010007 	.word	0x00010007

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e065      	b.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d108      	bne.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d018      	beq.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d013      	beq.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00e      	beq.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d009      	beq.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10c      	bne.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40014000 	.word	0x40014000

08005b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e087      	b.n	8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d106      	bne.n	8005bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1d      	ldr	r2, [pc, #116]	; (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d126      	bne.n	8005c22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	051b      	lsls	r3, r3, #20
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0e      	ldr	r2, [pc, #56]	; (8005c40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d106      	bne.n	8005c22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400

08005c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d2e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005d58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d82:	b084      	sub	sp, #16
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	f107 0014 	add.w	r0, r7, #20
 8005d90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	b004      	add	sp, #16
 8005dc2:	4770      	bx	lr

08005dc4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b09d      	sub	sp, #116	; 0x74
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	78db      	ldrb	r3, [r3, #3]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d81f      	bhi.n	8005e36 <USB_ActivateEndpoint+0x72>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <USB_ActivateEndpoint+0x38>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e29 	.word	0x08005e29
 8005e04:	08005e3f 	.word	0x08005e3f
 8005e08:	08005e1b 	.word	0x08005e1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e18:	e012      	b.n	8005e40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e26:	e00b      	b.n	8005e40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005e34:	e004      	b.n	8005e40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e3c:	e000      	b.n	8005e40 <USB_ActivateEndpoint+0x7c>
      break;
 8005e3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	b21b      	sxth	r3, r3
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	7b1b      	ldrb	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 8149 	bne.w	8006148 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8084 	beq.w	8005fc8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	88db      	ldrh	r3, [r3, #6]
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	827b      	strh	r3, [r7, #18]
 8005f02:	8a7b      	ldrh	r3, [r7, #18]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <USB_ActivateEndpoint+0x180>
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	823b      	strh	r3, [r7, #16]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	8a3b      	ldrh	r3, [r7, #16]
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d020      	beq.n	8005f8e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	81bb      	strh	r3, [r7, #12]
 8005f64:	89bb      	ldrh	r3, [r7, #12]
 8005f66:	f083 0320 	eor.w	r3, r3, #32
 8005f6a:	81bb      	strh	r3, [r7, #12]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	89bb      	ldrh	r3, [r7, #12]
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]
 8005f8c:	e2a6      	b.n	80064dc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	81fb      	strh	r3, [r7, #14]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
 8005fc6:	e289      	b.n	80064dc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	4413      	add	r3, r2
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	00da      	lsls	r2, r3, #3
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	88db      	ldrh	r3, [r3, #6]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	4413      	add	r3, r2
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	00da      	lsls	r2, r3, #3
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	4413      	add	r3, r2
 800601a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b3e      	cmp	r3, #62	; 0x3e
 8006026:	d918      	bls.n	800605a <USB_ActivateEndpoint+0x296>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <USB_ActivateEndpoint+0x27e>
 800603c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800603e:	3b01      	subs	r3, #1
 8006040:	66bb      	str	r3, [r7, #104]	; 0x68
 8006042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006044:	b29b      	uxth	r3, r3
 8006046:	029b      	lsls	r3, r3, #10
 8006048:	b29b      	uxth	r3, r3
 800604a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006052:	b29a      	uxth	r2, r3
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	e029      	b.n	80060ae <USB_ActivateEndpoint+0x2ea>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d112      	bne.n	8006088 <USB_ActivateEndpoint+0x2c4>
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800606c:	b29a      	uxth	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006080:	b29a      	uxth	r2, r3
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e012      	b.n	80060ae <USB_ActivateEndpoint+0x2ea>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <USB_ActivateEndpoint+0x2de>
 800609c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800609e:	3301      	adds	r3, #1
 80060a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80060bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01b      	beq.n	80060fe <USB_ActivateEndpoint+0x33a>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	843b      	strh	r3, [r7, #32]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8c3b      	ldrh	r3, [r7, #32]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	83fb      	strh	r3, [r7, #30]
 8006116:	8bfb      	ldrh	r3, [r7, #30]
 8006118:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800611c:	83fb      	strh	r3, [r7, #30]
 800611e:	8bfb      	ldrh	r3, [r7, #30]
 8006120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006124:	83fb      	strh	r3, [r7, #30]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8bfb      	ldrh	r3, [r7, #30]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	e1c9      	b.n	80064dc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11e      	bne.n	800618e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	441a      	add	r2, r3
 8006174:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006180:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006188:	b29b      	uxth	r3, r3
 800618a:	8013      	strh	r3, [r2, #0]
 800618c:	e01d      	b.n	80061ca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80061b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061da:	4413      	add	r3, r2
 80061dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	00da      	lsls	r2, r3, #3
 80061e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	891b      	ldrh	r3, [r3, #8]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	657b      	str	r3, [r7, #84]	; 0x54
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006208:	b29b      	uxth	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800620e:	4413      	add	r3, r2
 8006210:	657b      	str	r3, [r7, #84]	; 0x54
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	00da      	lsls	r2, r3, #3
 8006218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621a:	4413      	add	r3, r2
 800621c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006220:	653b      	str	r3, [r7, #80]	; 0x50
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	895b      	ldrh	r3, [r3, #10]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	b29b      	uxth	r3, r3
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8093 	bne.w	8006362 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800624c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <USB_ActivateEndpoint+0x4cc>
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800629e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <USB_ActivateEndpoint+0x51c>
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8006300:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006302:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006306:	873b      	strh	r3, [r7, #56]	; 0x38
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800634c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	b29b      	uxth	r3, r3
 800635e:	8013      	strh	r3, [r2, #0]
 8006360:	e0bc      	b.n	80064dc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01d      	beq.n	80063ba <USB_ActivateEndpoint+0x5f6>
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80063ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01d      	beq.n	8006412 <USB_ActivateEndpoint+0x64e>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	441a      	add	r2, r3
 80063fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	78db      	ldrb	r3, [r3, #3]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d024      	beq.n	8006464 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006430:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006434:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006438:	f083 0320 	eor.w	r3, r3, #32
 800643c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800644e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645e:	b29b      	uxth	r3, r3
 8006460:	8013      	strh	r3, [r2, #0]
 8006462:	e01d      	b.n	80064a0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800648c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649c:	b29b      	uxth	r3, r3
 800649e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	441a      	add	r2, r3
 80064c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3774      	adds	r7, #116	; 0x74
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b08d      	sub	sp, #52	; 0x34
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7b1b      	ldrb	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 808e 	bne.w	800661c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d044      	beq.n	8006592 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	81bb      	strh	r3, [r7, #12]
 8006516:	89bb      	ldrh	r3, [r7, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <USB_DeactivateEndpoint+0x6c>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	817b      	strh	r3, [r7, #10]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	897b      	ldrh	r3, [r7, #10]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656e:	813b      	strh	r3, [r7, #8]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	893b      	ldrh	r3, [r7, #8]
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
 8006590:	e192      	b.n	80068b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	827b      	strh	r3, [r7, #18]
 80065a0:	8a7b      	ldrh	r3, [r7, #18]
 80065a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01b      	beq.n	80065e2 <USB_DeactivateEndpoint+0xf6>
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	823b      	strh	r3, [r7, #16]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	8a3b      	ldrh	r3, [r7, #16]
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f8:	81fb      	strh	r3, [r7, #14]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	89fb      	ldrh	r3, [r7, #14]
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
 800661a:	e14d      	b.n	80068b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 80a5 	bne.w	8006770 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	843b      	strh	r3, [r7, #32]
 8006634:	8c3b      	ldrh	r3, [r7, #32]
 8006636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01b      	beq.n	8006676 <USB_DeactivateEndpoint+0x18a>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	83fb      	strh	r3, [r7, #30]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	8bfb      	ldrh	r3, [r7, #30]
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	83bb      	strh	r3, [r7, #28]
 8006684:	8bbb      	ldrh	r3, [r7, #28]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01b      	beq.n	80066c6 <USB_DeactivateEndpoint+0x1da>
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	837b      	strh	r3, [r7, #26]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	8b7b      	ldrh	r3, [r7, #26]
 80066b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066dc:	833b      	strh	r3, [r7, #24]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	441a      	add	r2, r3
 80066e8:	8b3b      	ldrh	r3, [r7, #24]
 80066ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006714:	82fb      	strh	r3, [r7, #22]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8afb      	ldrh	r3, [r7, #22]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674c:	82bb      	strh	r3, [r7, #20]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8abb      	ldrh	r3, [r7, #20]
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
 800676e:	e0a3      	b.n	80068b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800677e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <USB_DeactivateEndpoint+0x2d4>
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	441a      	add	r2, r3
 80067aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01b      	beq.n	8006810 <USB_DeactivateEndpoint+0x324>
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	881b      	ldrh	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ee:	853b      	strh	r3, [r7, #40]	; 0x28
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006808:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800680c:	b29b      	uxth	r3, r3
 800680e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	441a      	add	r2, r3
 8006832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	441a      	add	r2, r3
 800686a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	847b      	strh	r3, [r7, #34]	; 0x22
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3734      	adds	r7, #52	; 0x34
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b0c2      	sub	sp, #264	; 0x108
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d4:	6018      	str	r0, [r3, #0]
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	f040 867b 	bne.w	80075e8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	429a      	cmp	r2, r3
 800690c:	d908      	bls.n	8006920 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800690e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800691e:	e007      	b.n	8006930 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	7b1b      	ldrb	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d13a      	bne.n	80069b6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6959      	ldr	r1, [r3, #20]
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	88da      	ldrh	r2, [r3, #6]
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	b29b      	uxth	r3, r3
 800695e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006962:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006966:	6800      	ldr	r0, [r0, #0]
 8006968:	f001 fc1d 	bl	80081a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800696c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800697c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006986:	b29b      	uxth	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4413      	add	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	00da      	lsls	r2, r3, #3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	f000 bde3 	b.w	800757c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	78db      	ldrb	r3, [r3, #3]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	f040 843a 	bne.w	800723c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	f240 83b7 	bls.w	8007154 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	441a      	add	r2, r3
 8006a2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 81b3 	beq.w	8006dee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
 8006a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d16d      	bne.n	8006b80 <USB_EPStartXfer+0x2ba>
 8006aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	4413      	add	r3, r2
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00da      	lsls	r2, r3, #3
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ae6:	d91c      	bls.n	8006b22 <USB_EPStartXfer+0x25c>
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <USB_EPStartXfer+0x242>
 8006afe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b02:	3b01      	subs	r3, #1
 8006b04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	029b      	lsls	r3, r3, #10
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	801a      	strh	r2, [r3, #0]
 8006b20:	e053      	b.n	8006bca <USB_EPStartXfer+0x304>
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d112      	bne.n	8006b50 <USB_EPStartXfer+0x28a>
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	e03c      	b.n	8006bca <USB_EPStartXfer+0x304>
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <USB_EPStartXfer+0x2aa>
 8006b66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e024      	b.n	8006bca <USB_EPStartXfer+0x304>
 8006b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d11c      	bne.n	8006bca <USB_EPStartXfer+0x304>
 8006b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	4413      	add	r3, r2
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	00da      	lsls	r2, r3, #3
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	895b      	ldrh	r3, [r3, #10]
 8006bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6959      	ldr	r1, [r3, #20]
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bf8:	6800      	ldr	r0, [r0, #0]
 8006bfa:	f001 fad4 	bl	80081a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0e:	441a      	add	r2, r3
 8006c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d90f      	bls.n	8006c58 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6a1a      	ldr	r2, [r3, #32]
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	1ad2      	subs	r2, r2, r3
 8006c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	621a      	str	r2, [r3, #32]
 8006c56:	e00e      	b.n	8006c76 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2200      	movs	r2, #0
 8006c74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d16d      	bne.n	8006d62 <USB_EPStartXfer+0x49c>
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc6:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc8:	d91c      	bls.n	8006d04 <USB_EPStartXfer+0x43e>
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <USB_EPStartXfer+0x424>
 8006ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	029b      	lsls	r3, r3, #10
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e059      	b.n	8006db8 <USB_EPStartXfer+0x4f2>
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d112      	bne.n	8006d32 <USB_EPStartXfer+0x46c>
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e042      	b.n	8006db8 <USB_EPStartXfer+0x4f2>
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <USB_EPStartXfer+0x48c>
 8006d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	029b      	lsls	r3, r3, #10
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	e02a      	b.n	8006db8 <USB_EPStartXfer+0x4f2>
 8006d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d122      	bne.n	8006db8 <USB_EPStartXfer+0x4f2>
 8006d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	4413      	add	r3, r2
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	00da      	lsls	r2, r3, #3
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	4413      	add	r3, r2
 8006da8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	891b      	ldrh	r3, [r3, #8]
 8006dc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6959      	ldr	r1, [r3, #20]
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006de2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006de6:	6800      	ldr	r0, [r0, #0]
 8006de8:	f001 f9dd 	bl	80081a6 <USB_WritePMA>
 8006dec:	e3c6      	b.n	800757c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d16d      	bne.n	8006eda <USB_EPStartXfer+0x614>
 8006dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1e:	4413      	add	r3, r2
 8006e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	00da      	lsls	r2, r3, #3
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e40:	d91c      	bls.n	8006e7c <USB_EPStartXfer+0x5b6>
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <USB_EPStartXfer+0x59c>
 8006e58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	029b      	lsls	r3, r3, #10
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e78:	801a      	strh	r2, [r3, #0]
 8006e7a:	e059      	b.n	8006f30 <USB_EPStartXfer+0x66a>
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d112      	bne.n	8006eaa <USB_EPStartXfer+0x5e4>
 8006e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e92:	801a      	strh	r2, [r3, #0]
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e042      	b.n	8006f30 <USB_EPStartXfer+0x66a>
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <USB_EPStartXfer+0x604>
 8006ec0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006eca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	029b      	lsls	r3, r3, #10
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	e02a      	b.n	8006f30 <USB_EPStartXfer+0x66a>
 8006eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d122      	bne.n	8006f30 <USB_EPStartXfer+0x66a>
 8006eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0a:	4413      	add	r3, r2
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00da      	lsls	r2, r3, #3
 8006f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	891b      	ldrh	r3, [r3, #8]
 8006f3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6959      	ldr	r1, [r3, #20]
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	f001 f921 	bl	80081a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695a      	ldr	r2, [r3, #20]
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f74:	441a      	add	r2, r3
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6a1a      	ldr	r2, [r3, #32]
 8006f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d90f      	bls.n	8006fbe <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a1a      	ldr	r2, [r3, #32]
 8006faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	621a      	str	r2, [r3, #32]
 8006fbc:	e00e      	b.n	8006fdc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d16d      	bne.n	80070d4 <USB_EPStartXfer+0x80e>
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	63bb      	str	r3, [r7, #56]	; 0x38
 8007004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007012:	b29b      	uxth	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	4413      	add	r3, r2
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	00da      	lsls	r2, r3, #3
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	4413      	add	r3, r2
 800702e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	2b3e      	cmp	r3, #62	; 0x3e
 800703a:	d91c      	bls.n	8007076 <USB_EPStartXfer+0x7b0>
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <USB_EPStartXfer+0x796>
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	3b01      	subs	r3, #1
 8007058:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	b29b      	uxth	r3, r3
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	b29b      	uxth	r3, r3
 8007066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706e:	b29a      	uxth	r2, r3
 8007070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007072:	801a      	strh	r2, [r3, #0]
 8007074:	e053      	b.n	800711e <USB_EPStartXfer+0x858>
 8007076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707a:	2b00      	cmp	r3, #0
 800707c:	d112      	bne.n	80070a4 <USB_EPStartXfer+0x7de>
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007088:	b29a      	uxth	r2, r3
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	801a      	strh	r2, [r3, #0]
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709c:	b29a      	uxth	r2, r3
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e03c      	b.n	800711e <USB_EPStartXfer+0x858>
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <USB_EPStartXfer+0x7fe>
 80070ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070be:	3301      	adds	r3, #1
 80070c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	029b      	lsls	r3, r3, #10
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	e024      	b.n	800711e <USB_EPStartXfer+0x858>
 80070d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d11c      	bne.n	800711e <USB_EPStartXfer+0x858>
 80070e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f8:	4413      	add	r3, r2
 80070fa:	643b      	str	r3, [r7, #64]	; 0x40
 80070fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	00da      	lsls	r2, r3, #3
 800710a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710c:	4413      	add	r3, r2
 800710e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007118:	b29a      	uxth	r2, r3
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800711e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	895b      	ldrh	r3, [r3, #10]
 800712a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6959      	ldr	r1, [r3, #20]
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	b29b      	uxth	r3, r3
 8007140:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007144:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007148:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f001 f82a 	bl	80081a6 <USB_WritePMA>
 8007152:	e213      	b.n	800757c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800718e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	441a      	add	r2, r3
 80071a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80071ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071bc:	b29b      	uxth	r3, r3
 80071be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071da:	b29b      	uxth	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e0:	4413      	add	r3, r2
 80071e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	00da      	lsls	r2, r3, #3
 80071f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f4:	4413      	add	r3, r2
 80071f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007200:	b29a      	uxth	r2, r3
 8007202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007204:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	891b      	ldrh	r3, [r3, #8]
 8007212:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6959      	ldr	r1, [r3, #20]
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	b29b      	uxth	r3, r3
 8007228:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800722c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007230:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007234:	6800      	ldr	r0, [r0, #0]
 8007236:	f000 ffb6 	bl	80081a6 <USB_WritePMA>
 800723a:	e19f      	b.n	800757c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800723c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724c:	1ad2      	subs	r2, r2, r3
 800724e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800725a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800725e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80bc 	beq.w	80073fa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	673b      	str	r3, [r7, #112]	; 0x70
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d16d      	bne.n	800737a <USB_EPStartXfer+0xab4>
 800729e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80072aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	461a      	mov	r2, r3
 80072bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072be:	4413      	add	r3, r2
 80072c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	00da      	lsls	r2, r3, #3
 80072d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072d2:	4413      	add	r3, r2
 80072d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072d8:	667b      	str	r3, [r7, #100]	; 0x64
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	2b3e      	cmp	r3, #62	; 0x3e
 80072e0:	d91c      	bls.n	800731c <USB_EPStartXfer+0xa56>
 80072e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <USB_EPStartXfer+0xa3c>
 80072f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007302:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29b      	uxth	r3, r3
 800730c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007314:	b29a      	uxth	r2, r3
 8007316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	e053      	b.n	80073c4 <USB_EPStartXfer+0xafe>
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	2b00      	cmp	r3, #0
 8007322:	d112      	bne.n	800734a <USB_EPStartXfer+0xa84>
 8007324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800732e:	b29a      	uxth	r2, r3
 8007330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007342:	b29a      	uxth	r2, r3
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	e03c      	b.n	80073c4 <USB_EPStartXfer+0xafe>
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <USB_EPStartXfer+0xaa4>
 8007360:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007364:	3301      	adds	r3, #1
 8007366:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800736a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800736e:	b29b      	uxth	r3, r3
 8007370:	029b      	lsls	r3, r3, #10
 8007372:	b29a      	uxth	r2, r3
 8007374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e024      	b.n	80073c4 <USB_EPStartXfer+0xafe>
 800737a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d11c      	bne.n	80073c4 <USB_EPStartXfer+0xafe>
 800738a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800739e:	4413      	add	r3, r2
 80073a0:	673b      	str	r3, [r7, #112]	; 0x70
 80073a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	00da      	lsls	r2, r3, #3
 80073b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b2:	4413      	add	r3, r2
 80073b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	895b      	ldrh	r3, [r3, #10]
 80073d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6959      	ldr	r1, [r3, #20]
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80073ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	f000 fed7 	bl	80081a6 <USB_WritePMA>
 80073f8:	e0c0      	b.n	800757c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d16d      	bne.n	80074e6 <USB_EPStartXfer+0xc20>
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007424:	b29b      	uxth	r3, r3
 8007426:	461a      	mov	r2, r3
 8007428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800742a:	4413      	add	r3, r2
 800742c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800742e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	00da      	lsls	r2, r3, #3
 800743c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800743e:	4413      	add	r3, r2
 8007440:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007444:	67bb      	str	r3, [r7, #120]	; 0x78
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744a:	2b3e      	cmp	r3, #62	; 0x3e
 800744c:	d91c      	bls.n	8007488 <USB_EPStartXfer+0xbc2>
 800744e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <USB_EPStartXfer+0xba8>
 8007464:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007468:	3b01      	subs	r3, #1
 800746a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800746e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007480:	b29a      	uxth	r2, r3
 8007482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e05f      	b.n	8007548 <USB_EPStartXfer+0xc82>
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748c:	2b00      	cmp	r3, #0
 800748e:	d112      	bne.n	80074b6 <USB_EPStartXfer+0xbf0>
 8007490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800749a:	b29a      	uxth	r2, r3
 800749c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e048      	b.n	8007548 <USB_EPStartXfer+0xc82>
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <USB_EPStartXfer+0xc10>
 80074cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074d0:	3301      	adds	r3, #1
 80074d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80074da:	b29b      	uxth	r3, r3
 80074dc:	029b      	lsls	r3, r3, #10
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	801a      	strh	r2, [r3, #0]
 80074e4:	e030      	b.n	8007548 <USB_EPStartXfer+0xc82>
 80074e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d128      	bne.n	8007548 <USB_EPStartXfer+0xc82>
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007512:	b29b      	uxth	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751a:	4413      	add	r3, r2
 800751c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00da      	lsls	r2, r3, #3
 800752e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007532:	4413      	add	r3, r2
 8007534:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007546:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	891b      	ldrh	r3, [r3, #8]
 8007554:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6959      	ldr	r1, [r3, #20]
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007568:	b29b      	uxth	r3, r3
 800756a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800756e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007572:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	f000 fe15 	bl	80081a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a2:	817b      	strh	r3, [r7, #10]
 80075a4:	897b      	ldrh	r3, [r7, #10]
 80075a6:	f083 0310 	eor.w	r3, r3, #16
 80075aa:	817b      	strh	r3, [r7, #10]
 80075ac:	897b      	ldrh	r3, [r7, #10]
 80075ae:	f083 0320 	eor.w	r3, r3, #32
 80075b2:	817b      	strh	r3, [r7, #10]
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	441a      	add	r2, r3
 80075ce:	897b      	ldrh	r3, [r7, #10]
 80075d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	8013      	strh	r3, [r2, #0]
 80075e4:	f000 bc9f 	b.w	8007f26 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	7b1b      	ldrb	r3, [r3, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 80ae 	bne.w	8007756 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	429a      	cmp	r2, r3
 8007614:	d917      	bls.n	8007646 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8007616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	619a      	str	r2, [r3, #24]
 8007644:	e00e      	b.n	8007664 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8007646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007688:	4413      	add	r3, r2
 800768a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800768e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	00da      	lsls	r2, r3, #3
 800769c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ae:	2b3e      	cmp	r3, #62	; 0x3e
 80076b0:	d91d      	bls.n	80076ee <USB_EPStartXfer+0xe28>
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <USB_EPStartXfer+0xe0c>
 80076c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076cc:	3b01      	subs	r3, #1
 80076ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	029b      	lsls	r3, r3, #10
 80076da:	b29b      	uxth	r3, r3
 80076dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ea:	801a      	strh	r2, [r3, #0]
 80076ec:	e3e1      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d116      	bne.n	8007724 <USB_EPStartXfer+0xe5e>
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	e3c6      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800772e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <USB_EPStartXfer+0xe7e>
 800773a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800773e:	3301      	adds	r3, #1
 8007740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29a      	uxth	r2, r3
 800774e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007752:	801a      	strh	r2, [r3, #0]
 8007754:	e3ad      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	78db      	ldrb	r3, [r3, #3]
 8007762:	2b02      	cmp	r3, #2
 8007764:	f040 8200 	bne.w	8007b68 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 8091 	bne.w	800789c <USB_EPStartXfer+0xfd6>
 800777a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800777e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800778c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007796:	b29b      	uxth	r3, r3
 8007798:	461a      	mov	r2, r3
 800779a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800779e:	4413      	add	r3, r2
 80077a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077b6:	4413      	add	r3, r2
 80077b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b3e      	cmp	r3, #62	; 0x3e
 80077ce:	d925      	bls.n	800781c <USB_EPStartXfer+0xf56>
 80077d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USB_EPStartXfer+0xf3a>
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	b29b      	uxth	r3, r3
 8007806:	029b      	lsls	r3, r3, #10
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007812:	b29a      	uxth	r2, r3
 8007814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e074      	b.n	8007906 <USB_EPStartXfer+0x1040>
 800781c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d116      	bne.n	800785a <USB_EPStartXfer+0xf94>
 800782c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007850:	b29a      	uxth	r2, r3
 8007852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	e055      	b.n	8007906 <USB_EPStartXfer+0x1040>
 800785a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800786c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <USB_EPStartXfer+0xfc4>
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	3301      	adds	r3, #1
 8007886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800788a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e034      	b.n	8007906 <USB_EPStartXfer+0x1040>
 800789c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d12c      	bne.n	8007906 <USB_EPStartXfer+0x1040>
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078d0:	4413      	add	r3, r2
 80078d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	00da      	lsls	r2, r3, #3
 80078e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80078e8:	4413      	add	r3, r2
 80078ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	785b      	ldrb	r3, [r3, #1]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f040 8091 	bne.w	8007a48 <USB_EPStartXfer+0x1182>
 8007926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800794a:	4413      	add	r3, r2
 800794c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	00da      	lsls	r2, r3, #3
 800795e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007962:	4413      	add	r3, r2
 8007964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b3e      	cmp	r3, #62	; 0x3e
 800797a:	d925      	bls.n	80079c8 <USB_EPStartXfer+0x1102>
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	095b      	lsrs	r3, r3, #5
 800798a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800798e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 031f 	and.w	r3, r3, #31
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <USB_EPStartXfer+0x10e6>
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a6:	3b01      	subs	r3, #1
 80079a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	029b      	lsls	r3, r3, #10
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e06d      	b.n	8007aa4 <USB_EPStartXfer+0x11de>
 80079c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d116      	bne.n	8007a06 <USB_EPStartXfer+0x1140>
 80079d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ea:	801a      	strh	r2, [r3, #0]
 80079ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	e04e      	b.n	8007aa4 <USB_EPStartXfer+0x11de>
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <USB_EPStartXfer+0x1170>
 8007a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a30:	3301      	adds	r3, #1
 8007a32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	029b      	lsls	r3, r3, #10
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a44:	801a      	strh	r2, [r3, #0]
 8007a46:	e02d      	b.n	8007aa4 <USB_EPStartXfer+0x11de>
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d125      	bne.n	8007aa4 <USB_EPStartXfer+0x11de>
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a6e:	4413      	add	r3, r2
 8007a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	00da      	lsls	r2, r3, #3
 8007a82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aa2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 81fe 	beq.w	8007eb2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ad6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <USB_EPStartXfer+0x1228>
 8007ae2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007aee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f040 81db 	bne.w	8007eb2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007afc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 81d4 	bne.w	8007eb2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b30:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8007b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]
 8007b66:	e1a4      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	f040 819a 	bne.w	8007eae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d917      	bls.n	8007bc6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8007b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	619a      	str	r2, [r3, #24]
 8007bc4:	e00e      	b.n	8007be4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8007bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2200      	movs	r2, #0
 8007be2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d178      	bne.n	8007ce6 <USB_EPStartXfer+0x1420>
 8007bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c18:	4413      	add	r3, r2
 8007c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	00da      	lsls	r2, r3, #3
 8007c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c40:	d91d      	bls.n	8007c7e <USB_EPStartXfer+0x13b8>
 8007c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <USB_EPStartXfer+0x139c>
 8007c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	e064      	b.n	8007d48 <USB_EPStartXfer+0x1482>
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d116      	bne.n	8007cb4 <USB_EPStartXfer+0x13ee>
 8007c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c98:	801a      	strh	r2, [r3, #0]
 8007c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	e049      	b.n	8007d48 <USB_EPStartXfer+0x1482>
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb8:	085b      	lsrs	r3, r3, #1
 8007cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <USB_EPStartXfer+0x140e>
 8007cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cce:	3301      	adds	r3, #1
 8007cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	029b      	lsls	r3, r3, #10
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	e030      	b.n	8007d48 <USB_EPStartXfer+0x1482>
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d128      	bne.n	8007d48 <USB_EPStartXfer+0x1482>
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	00da      	lsls	r2, r3, #3
 8007d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d32:	4413      	add	r3, r2
 8007d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d178      	bne.n	8007e58 <USB_EPStartXfer+0x1592>
 8007d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	00da      	lsls	r2, r3, #3
 8007d9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db0:	2b3e      	cmp	r3, #62	; 0x3e
 8007db2:	d91d      	bls.n	8007df0 <USB_EPStartXfer+0x152a>
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc2:	f003 031f 	and.w	r3, r3, #31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <USB_EPStartXfer+0x150e>
 8007dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e060      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d116      	bne.n	8007e26 <USB_EPStartXfer+0x1560>
 8007df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e0a:	801a      	strh	r2, [r3, #0]
 8007e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e045      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <USB_EPStartXfer+0x1580>
 8007e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e40:	3301      	adds	r3, #1
 8007e42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	e02c      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
 8007e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d124      	bne.n	8007eb2 <USB_EPStartXfer+0x15ec>
 8007e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e7e:	4413      	add	r3, r2
 8007e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	00da      	lsls	r2, r3, #3
 8007e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e96:	4413      	add	r3, r2
 8007e98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	e001      	b.n	8007eb2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e03a      	b.n	8007f28 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007edc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ee4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ee8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007eec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ef0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5a:	81bb      	strh	r3, [r7, #12]
 8007f5c:	89bb      	ldrh	r3, [r7, #12]
 8007f5e:	f083 0310 	eor.w	r3, r3, #16
 8007f62:	81bb      	strh	r3, [r7, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	89bb      	ldrh	r3, [r7, #12]
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]
 8007f84:	e01f      	b.n	8007fc6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9c:	81fb      	strh	r3, [r7, #14]
 8007f9e:	89fb      	ldrh	r3, [r7, #14]
 8007fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007fa4:	81fb      	strh	r3, [r7, #14]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	441a      	add	r2, r3
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
 8007fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	7b1b      	ldrb	r3, [r3, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f040 809d 	bne.w	8008122 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d04c      	beq.n	800808a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	823b      	strh	r3, [r7, #16]
 8007ffe:	8a3b      	ldrh	r3, [r7, #16]
 8008000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01b      	beq.n	8008040 <USB_EPClearStall+0x6c>
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	81fb      	strh	r3, [r7, #14]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	441a      	add	r2, r3
 800802a:	89fb      	ldrh	r3, [r7, #14]
 800802c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800803c:	b29b      	uxth	r3, r3
 800803e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	78db      	ldrb	r3, [r3, #3]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d06c      	beq.n	8008122 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	81bb      	strh	r3, [r7, #12]
 8008060:	89bb      	ldrh	r3, [r7, #12]
 8008062:	f083 0320 	eor.w	r3, r3, #32
 8008066:	81bb      	strh	r3, [r7, #12]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	89bb      	ldrh	r3, [r7, #12]
 8008074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800807c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008084:	b29b      	uxth	r3, r3
 8008086:	8013      	strh	r3, [r2, #0]
 8008088:	e04b      	b.n	8008122 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	82fb      	strh	r3, [r7, #22]
 8008098:	8afb      	ldrh	r3, [r7, #22]
 800809a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01b      	beq.n	80080da <USB_EPClearStall+0x106>
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	82bb      	strh	r3, [r7, #20]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	441a      	add	r2, r3
 80080c4:	8abb      	ldrh	r3, [r7, #20]
 80080c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f0:	827b      	strh	r3, [r7, #18]
 80080f2:	8a7b      	ldrh	r3, [r7, #18]
 80080f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080f8:	827b      	strh	r3, [r7, #18]
 80080fa:	8a7b      	ldrh	r3, [r7, #18]
 80080fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008100:	827b      	strh	r3, [r7, #18]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	441a      	add	r2, r3
 800810c:	8a7b      	ldrh	r3, [r7, #18]
 800810e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811e:	b29b      	uxth	r3, r3
 8008120:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d103      	bne.n	800814a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2280      	movs	r2, #128	; 0x80
 8008146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008166:	b29b      	uxth	r3, r3
 8008168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008194:	b29b      	uxth	r3, r3
 8008196:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008198:	68fb      	ldr	r3, [r7, #12]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b08d      	sub	sp, #52	; 0x34
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	4611      	mov	r1, r2
 80081b2:	461a      	mov	r2, r3
 80081b4:	460b      	mov	r3, r1
 80081b6:	80fb      	strh	r3, [r7, #6]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80081bc:	88bb      	ldrh	r3, [r7, #4]
 80081be:	3301      	adds	r3, #1
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081cc:	88fa      	ldrh	r2, [r7, #6]
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081dc:	e01b      	b.n	8008216 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	3301      	adds	r3, #1
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	3302      	adds	r3, #2
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	3301      	adds	r3, #1
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	3b01      	subs	r3, #1
 8008214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e0      	bne.n	80081de <USB_WritePMA+0x38>
  }
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	3734      	adds	r7, #52	; 0x34
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800822a:	b480      	push	{r7}
 800822c:	b08b      	sub	sp, #44	; 0x2c
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	4611      	mov	r1, r2
 8008236:	461a      	mov	r2, r3
 8008238:	460b      	mov	r3, r1
 800823a:	80fb      	strh	r3, [r7, #6]
 800823c:	4613      	mov	r3, r2
 800823e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008240:	88bb      	ldrh	r3, [r7, #4]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800825a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	e018      	b.n	8008294 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	3302      	adds	r3, #2
 800826e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	3301      	adds	r3, #1
 800827c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	b2da      	uxtb	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	3301      	adds	r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	3b01      	subs	r3, #1
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e3      	bne.n	8008262 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800829a:	88bb      	ldrh	r3, [r7, #4]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	701a      	strb	r2, [r3, #0]
  }
}
 80082b6:	bf00      	nop
 80082b8:	372c      	adds	r7, #44	; 0x2c
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082d2:	f002 f901 	bl	800a4d8 <USBD_static_malloc>
 80082d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80082e6:	2302      	movs	r3, #2
 80082e8:	e066      	b.n	80083b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	7c1b      	ldrb	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d119      	bne.n	800832e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fe:	2202      	movs	r2, #2
 8008300:	2181      	movs	r1, #129	; 0x81
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 ff8d 	bl	800a222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800830e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008312:	2202      	movs	r2, #2
 8008314:	2101      	movs	r1, #1
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 ff83 	bl	800a222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2210      	movs	r2, #16
 8008328:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800832c:	e016      	b.n	800835c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800832e:	2340      	movs	r3, #64	; 0x40
 8008330:	2202      	movs	r2, #2
 8008332:	2181      	movs	r1, #129	; 0x81
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 ff74 	bl	800a222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	2202      	movs	r2, #2
 8008344:	2101      	movs	r1, #1
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 ff6b 	bl	800a222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2210      	movs	r2, #16
 8008358:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800835c:	2308      	movs	r3, #8
 800835e:	2203      	movs	r2, #3
 8008360:	2182      	movs	r1, #130	; 0x82
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 ff5d 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	7c1b      	ldrb	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d109      	bne.n	80083a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800839c:	2101      	movs	r1, #1
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f002 f82f 	bl	800a402 <USBD_LL_PrepareReceive>
 80083a4:	e007      	b.n	80083b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083ac:	2340      	movs	r3, #64	; 0x40
 80083ae:	2101      	movs	r1, #1
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f002 f826 	bl	800a402 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80083cc:	2181      	movs	r1, #129	; 0x81
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 ff4d 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80083da:	2101      	movs	r1, #1
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 ff46 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083ea:	2182      	movs	r1, #130	; 0x82
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 ff3e 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00e      	beq.n	800842a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841c:	4618      	mov	r0, r3
 800841e:	f002 f869 	bl	800a4f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008444:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008458:	2303      	movs	r3, #3
 800845a:	e0af      	b.n	80085bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008464:	2b00      	cmp	r3, #0
 8008466:	d03f      	beq.n	80084e8 <USBD_CDC_Setup+0xb4>
 8008468:	2b20      	cmp	r3, #32
 800846a:	f040 809f 	bne.w	80085ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	88db      	ldrh	r3, [r3, #6]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d02e      	beq.n	80084d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	b25b      	sxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	da16      	bge.n	80084ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800848c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	88d2      	ldrh	r2, [r2, #6]
 8008492:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	88db      	ldrh	r3, [r3, #6]
 8008498:	2b07      	cmp	r3, #7
 800849a:	bf28      	it	cs
 800849c:	2307      	movcs	r3, #7
 800849e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	89fa      	ldrh	r2, [r7, #14]
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 facf 	bl	8009a4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80084ac:	e085      	b.n	80085ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	785a      	ldrb	r2, [r3, #1]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80084c4:	6939      	ldr	r1, [r7, #16]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88db      	ldrh	r3, [r3, #6]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fae8 	bl	8009aa2 <USBD_CtlPrepareRx>
      break;
 80084d2:	e072      	b.n	80085ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	7850      	ldrb	r0, [r2, #1]
 80084e0:	2200      	movs	r2, #0
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	4798      	blx	r3
      break;
 80084e6:	e068      	b.n	80085ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b0b      	cmp	r3, #11
 80084ee:	d852      	bhi.n	8008596 <USBD_CDC_Setup+0x162>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_CDC_Setup+0xc4>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008529 	.word	0x08008529
 80084fc:	080085a5 	.word	0x080085a5
 8008500:	08008597 	.word	0x08008597
 8008504:	08008597 	.word	0x08008597
 8008508:	08008597 	.word	0x08008597
 800850c:	08008597 	.word	0x08008597
 8008510:	08008597 	.word	0x08008597
 8008514:	08008597 	.word	0x08008597
 8008518:	08008597 	.word	0x08008597
 800851c:	08008597 	.word	0x08008597
 8008520:	08008553 	.word	0x08008553
 8008524:	0800857d 	.word	0x0800857d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b03      	cmp	r3, #3
 8008532:	d107      	bne.n	8008544 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008534:	f107 030a 	add.w	r3, r7, #10
 8008538:	2202      	movs	r2, #2
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 fa84 	bl	8009a4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008542:	e032      	b.n	80085aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fa0e 	bl	8009968 <USBD_CtlError>
            ret = USBD_FAIL;
 800854c:	2303      	movs	r3, #3
 800854e:	75fb      	strb	r3, [r7, #23]
          break;
 8008550:	e02b      	b.n	80085aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b03      	cmp	r3, #3
 800855c:	d107      	bne.n	800856e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800855e:	f107 030d 	add.w	r3, r7, #13
 8008562:	2201      	movs	r2, #1
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 fa6f 	bl	8009a4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800856c:	e01d      	b.n	80085aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f9f9 	bl	8009968 <USBD_CtlError>
            ret = USBD_FAIL;
 8008576:	2303      	movs	r3, #3
 8008578:	75fb      	strb	r3, [r7, #23]
          break;
 800857a:	e016      	b.n	80085aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b03      	cmp	r3, #3
 8008586:	d00f      	beq.n	80085a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 f9ec 	bl	8009968 <USBD_CtlError>
            ret = USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008594:	e008      	b.n	80085a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f9e5 	bl	8009968 <USBD_CtlError>
          ret = USBD_FAIL;
 800859e:	2303      	movs	r3, #3
 80085a0:	75fb      	strb	r3, [r7, #23]
          break;
 80085a2:	e002      	b.n	80085aa <USBD_CDC_Setup+0x176>
          break;
 80085a4:	bf00      	nop
 80085a6:	e008      	b.n	80085ba <USBD_CDC_Setup+0x186>
          break;
 80085a8:	bf00      	nop
      }
      break;
 80085aa:	e006      	b.n	80085ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 f9da 	bl	8009968 <USBD_CtlError>
      ret = USBD_FAIL;
 80085b4:	2303      	movs	r3, #3
 80085b6:	75fb      	strb	r3, [r7, #23]
      break;
 80085b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e04f      	b.n	8008686 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	3318      	adds	r3, #24
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d029      	beq.n	8008658 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	4613      	mov	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	3318      	adds	r3, #24
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	78f9      	ldrb	r1, [r7, #3]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	460b      	mov	r3, r1
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4403      	add	r3, r0
 8008624:	3338      	adds	r3, #56	; 0x38
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	fbb2 f1f3 	udiv	r1, r2, r3
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008632:	2b00      	cmp	r3, #0
 8008634:	d110      	bne.n	8008658 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	3318      	adds	r3, #24
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800864a:	78f9      	ldrb	r1, [r7, #3]
 800864c:	2300      	movs	r3, #0
 800864e:	2200      	movs	r2, #0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 feb5 	bl	800a3c0 <USBD_LL_Transmit>
 8008656:	e015      	b.n	8008684 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e015      	b.n	80086dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fec5 	bl	800a444 <USBD_LL_GetRxDataSize>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086d6:	4611      	mov	r1, r2
 80086d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e01b      	b.n	8008736 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d015      	beq.n	8008734 <USBD_CDC_EP0_RxReady+0x50>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800870e:	2bff      	cmp	r3, #255	; 0xff
 8008710:	d010      	beq.n	8008734 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008720:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008728:	b292      	uxth	r2, r2
 800872a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	22ff      	movs	r2, #255	; 0xff
 8008730:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2243      	movs	r2, #67	; 0x43
 800874c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800874e:	4b03      	ldr	r3, [pc, #12]	; (800875c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	200000a8 	.word	0x200000a8

08008760 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2243      	movs	r2, #67	; 0x43
 800876c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800876e:	4b03      	ldr	r3, [pc, #12]	; (800877c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	20000064 	.word	0x20000064

08008780 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2243      	movs	r2, #67	; 0x43
 800878c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	200000ec 	.word	0x200000ec

080087a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	220a      	movs	r2, #10
 80087ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087ae:	4b03      	ldr	r3, [pc, #12]	; (80087bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	20000020 	.word	0x20000020

080087c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e004      	b.n	80087de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b087      	sub	sp, #28
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e008      	b.n	800881a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008836:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800883e:	2303      	movs	r3, #3
 8008840:	e004      	b.n	800884c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008866:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	e01a      	b.n	80088b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008880:	2b00      	cmp	r3, #0
 8008882:	d114      	bne.n	80088ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2201      	movs	r2, #1
 8008888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80088a2:	2181      	movs	r1, #129	; 0x81
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fd8b 	bl	800a3c0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e016      	b.n	8008904 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c1b      	ldrb	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e8:	2101      	movs	r1, #1
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 fd89 	bl	800a402 <USBD_LL_PrepareReceive>
 80088f0:	e007      	b.n	8008902 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fd80 	bl	800a402 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008920:	2303      	movs	r3, #3
 8008922:	e01f      	b.n	8008964 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f001 fbe7 	bl	800a12c <USBD_LL_Init>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008980:	2303      	movs	r3, #3
 8008982:	e016      	b.n	80089b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	f107 020e 	add.w	r2, r7, #14
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	4602      	mov	r2, r0
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fc12 	bl	800a1ec <USBD_LL_Start>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	78fa      	ldrb	r2, [r7, #3]
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	4798      	blx	r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d007      	beq.n	8008a46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
  }

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 ff46 	bl	80098f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a76:	461a      	mov	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d01a      	beq.n	8008ac2 <USBD_LL_SetupStage+0x72>
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d822      	bhi.n	8008ad6 <USBD_LL_SetupStage+0x86>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <USBD_LL_SetupStage+0x4a>
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d00a      	beq.n	8008aae <USBD_LL_SetupStage+0x5e>
 8008a98:	e01d      	b.n	8008ad6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f9ee 	bl	8008e84 <USBD_StdDevReq>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008aac:	e020      	b.n	8008af0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa52 	bl	8008f60 <USBD_StdItfReq>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac0:	e016      	b.n	8008af0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa91 	bl	8008ff2 <USBD_StdEPReq>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad4:	e00c      	b.n	8008af0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008adc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fbe1 	bl	800a2ac <USBD_LL_StallEP>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
      break;
 8008aee:	bf00      	nop
  }

  return ret;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	460b      	mov	r3, r1
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d138      	bne.n	8008b80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d14a      	bne.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d913      	bls.n	8008b54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bf28      	it	cs
 8008b46:	4613      	movcs	r3, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 ffc5 	bl	8009adc <USBD_CtlContinueRx>
 8008b52:	e030      	b.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d10b      	bne.n	8008b78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 ffc0 	bl	8009afe <USBD_CtlSendStatus>
 8008b7e:	e01a      	b.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d114      	bne.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00e      	beq.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	7afa      	ldrb	r2, [r7, #11]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	4798      	blx	r3
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	e000      	b.n	8008bb8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d16b      	bne.n	8008cac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d156      	bne.n	8008c92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d914      	bls.n	8008c1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	1ad2      	subs	r2, r2, r3
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 ff3a 	bl	8009a80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2100      	movs	r1, #0
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f001 fbf5 	bl	800a402 <USBD_LL_PrepareReceive>
 8008c18:	e03b      	b.n	8008c92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d11c      	bne.n	8008c60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d316      	bcc.n	8008c60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d20f      	bcs.n	8008c60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c40:	2200      	movs	r2, #0
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 ff1b 	bl	8009a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c52:	2300      	movs	r3, #0
 8008c54:	2200      	movs	r2, #0
 8008c56:	2100      	movs	r1, #0
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f001 fbd2 	bl	800a402 <USBD_LL_PrepareReceive>
 8008c5e:	e018      	b.n	8008c92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d10b      	bne.n	8008c84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c84:	2180      	movs	r1, #128	; 0x80
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f001 fb10 	bl	800a2ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 ff49 	bl	8009b24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d122      	bne.n	8008ce2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff fe98 	bl	80089d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008caa:	e01a      	b.n	8008ce2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d114      	bne.n	8008ce2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00e      	beq.n	8008ce2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	7afa      	ldrb	r2, [r7, #11]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	4798      	blx	r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008cde:	7dfb      	ldrb	r3, [r7, #23]
 8008ce0:	e000      	b.n	8008ce4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e02f      	b.n	8008d80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00f      	beq.n	8008d4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d009      	beq.n	8008d4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6852      	ldr	r2, [r2, #4]
 8008d42:	b2d2      	uxtb	r2, r2
 8008d44:	4611      	mov	r1, r2
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d4a:	2340      	movs	r3, #64	; 0x40
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fa66 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2240      	movs	r2, #64	; 0x40
 8008d62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2180      	movs	r1, #128	; 0x80
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fa58 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d106      	bne.n	8008df6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e012      	b.n	8008e40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d10b      	bne.n	8008e3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e66:	8a3b      	ldrh	r3, [r7, #16]
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	b21a      	sxth	r2, r3
 8008e6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	b21b      	sxth	r3, r3
 8008e74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e76:	89fb      	ldrh	r3, [r7, #14]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e9a:	2b40      	cmp	r3, #64	; 0x40
 8008e9c:	d005      	beq.n	8008eaa <USBD_StdDevReq+0x26>
 8008e9e:	2b40      	cmp	r3, #64	; 0x40
 8008ea0:	d853      	bhi.n	8008f4a <USBD_StdDevReq+0xc6>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <USBD_StdDevReq+0x3a>
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d14f      	bne.n	8008f4a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebc:	e04a      	b.n	8008f54 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	2b09      	cmp	r3, #9
 8008ec4:	d83b      	bhi.n	8008f3e <USBD_StdDevReq+0xba>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <USBD_StdDevReq+0x48>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008f35 	.word	0x08008f35
 8008ed4:	08008f3f 	.word	0x08008f3f
 8008ed8:	08008f2b 	.word	0x08008f2b
 8008edc:	08008f3f 	.word	0x08008f3f
 8008ee0:	08008eff 	.word	0x08008eff
 8008ee4:	08008ef5 	.word	0x08008ef5
 8008ee8:	08008f3f 	.word	0x08008f3f
 8008eec:	08008f17 	.word	0x08008f17
 8008ef0:	08008f09 	.word	0x08008f09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f9de 	bl	80092b8 <USBD_GetDescriptor>
          break;
 8008efc:	e024      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fb6d 	bl	80095e0 <USBD_SetAddress>
          break;
 8008f06:	e01f      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fbac 	bl	8009668 <USBD_SetConfig>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
          break;
 8008f14:	e018      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc4b 	bl	80097b4 <USBD_GetConfig>
          break;
 8008f1e:	e013      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc7c 	bl	8009820 <USBD_GetStatus>
          break;
 8008f28:	e00e      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fcab 	bl	8009888 <USBD_SetFeature>
          break;
 8008f32:	e009      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fcba 	bl	80098b0 <USBD_ClrFeature>
          break;
 8008f3c:	e004      	b.n	8008f48 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fd11 	bl	8009968 <USBD_CtlError>
          break;
 8008f46:	bf00      	nop
      }
      break;
 8008f48:	e004      	b.n	8008f54 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fd0b 	bl	8009968 <USBD_CtlError>
      break;
 8008f52:	bf00      	nop
  }

  return ret;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop

08008f60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f76:	2b40      	cmp	r3, #64	; 0x40
 8008f78:	d005      	beq.n	8008f86 <USBD_StdItfReq+0x26>
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d82f      	bhi.n	8008fde <USBD_StdItfReq+0x7e>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <USBD_StdItfReq+0x26>
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d12b      	bne.n	8008fde <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d81d      	bhi.n	8008fd0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	889b      	ldrh	r3, [r3, #4]
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d813      	bhi.n	8008fc6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	88db      	ldrh	r3, [r3, #6]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d110      	bne.n	8008fda <USBD_StdItfReq+0x7a>
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fd9d 	bl	8009afe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fc4:	e009      	b.n	8008fda <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fccd 	bl	8009968 <USBD_CtlError>
          break;
 8008fce:	e004      	b.n	8008fda <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fcc8 	bl	8009968 <USBD_CtlError>
          break;
 8008fd8:	e000      	b.n	8008fdc <USBD_StdItfReq+0x7c>
          break;
 8008fda:	bf00      	nop
      }
      break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fcc1 	bl	8009968 <USBD_CtlError>
      break;
 8008fe6:	bf00      	nop
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	889b      	ldrh	r3, [r3, #4]
 8009004:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d007      	beq.n	8009022 <USBD_StdEPReq+0x30>
 8009012:	2b40      	cmp	r3, #64	; 0x40
 8009014:	f200 8145 	bhi.w	80092a2 <USBD_StdEPReq+0x2b0>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00c      	beq.n	8009036 <USBD_StdEPReq+0x44>
 800901c:	2b20      	cmp	r3, #32
 800901e:	f040 8140 	bne.w	80092a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	6839      	ldr	r1, [r7, #0]
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
      break;
 8009034:	e13a      	b.n	80092ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	785b      	ldrb	r3, [r3, #1]
 800903a:	2b03      	cmp	r3, #3
 800903c:	d007      	beq.n	800904e <USBD_StdEPReq+0x5c>
 800903e:	2b03      	cmp	r3, #3
 8009040:	f300 8129 	bgt.w	8009296 <USBD_StdEPReq+0x2a4>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d07f      	beq.n	8009148 <USBD_StdEPReq+0x156>
 8009048:	2b01      	cmp	r3, #1
 800904a:	d03c      	beq.n	80090c6 <USBD_StdEPReq+0xd4>
 800904c:	e123      	b.n	8009296 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d002      	beq.n	8009060 <USBD_StdEPReq+0x6e>
 800905a:	2b03      	cmp	r3, #3
 800905c:	d016      	beq.n	800908c <USBD_StdEPReq+0x9a>
 800905e:	e02c      	b.n	80090ba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00d      	beq.n	8009082 <USBD_StdEPReq+0x90>
 8009066:	7bbb      	ldrb	r3, [r7, #14]
 8009068:	2b80      	cmp	r3, #128	; 0x80
 800906a:	d00a      	beq.n	8009082 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f91b 	bl	800a2ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009076:	2180      	movs	r1, #128	; 0x80
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 f917 	bl	800a2ac <USBD_LL_StallEP>
 800907e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009080:	e020      	b.n	80090c4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fc6f 	bl	8009968 <USBD_CtlError>
              break;
 800908a:	e01b      	b.n	80090c4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10e      	bne.n	80090b2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <USBD_StdEPReq+0xc0>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	d008      	beq.n	80090b2 <USBD_StdEPReq+0xc0>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	88db      	ldrh	r3, [r3, #6]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090a8:	7bbb      	ldrb	r3, [r7, #14]
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f8fd 	bl	800a2ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fd23 	bl	8009afe <USBD_CtlSendStatus>

              break;
 80090b8:	e004      	b.n	80090c4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc53 	bl	8009968 <USBD_CtlError>
              break;
 80090c2:	bf00      	nop
          }
          break;
 80090c4:	e0ec      	b.n	80092a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d002      	beq.n	80090d8 <USBD_StdEPReq+0xe6>
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d016      	beq.n	8009104 <USBD_StdEPReq+0x112>
 80090d6:	e030      	b.n	800913a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00d      	beq.n	80090fa <USBD_StdEPReq+0x108>
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	2b80      	cmp	r3, #128	; 0x80
 80090e2:	d00a      	beq.n	80090fa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 f8df 	bl	800a2ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090ee:	2180      	movs	r1, #128	; 0x80
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 f8db 	bl	800a2ac <USBD_LL_StallEP>
 80090f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090f8:	e025      	b.n	8009146 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fc33 	bl	8009968 <USBD_CtlError>
              break;
 8009102:	e020      	b.n	8009146 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	885b      	ldrh	r3, [r3, #2]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d11b      	bne.n	8009144 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 f8e5 	bl	800a2ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fcec 	bl	8009afe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009138:	e004      	b.n	8009144 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fc13 	bl	8009968 <USBD_CtlError>
              break;
 8009142:	e000      	b.n	8009146 <USBD_StdEPReq+0x154>
              break;
 8009144:	bf00      	nop
          }
          break;
 8009146:	e0ab      	b.n	80092a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d002      	beq.n	800915a <USBD_StdEPReq+0x168>
 8009154:	2b03      	cmp	r3, #3
 8009156:	d032      	beq.n	80091be <USBD_StdEPReq+0x1cc>
 8009158:	e097      	b.n	800928a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d007      	beq.n	8009170 <USBD_StdEPReq+0x17e>
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d004      	beq.n	8009170 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fbfd 	bl	8009968 <USBD_CtlError>
                break;
 800916e:	e091      	b.n	8009294 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da0b      	bge.n	8009190 <USBD_StdEPReq+0x19e>
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3310      	adds	r3, #16
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4413      	add	r3, r2
 800918c:	3304      	adds	r3, #4
 800918e:	e00b      	b.n	80091a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	3304      	adds	r3, #4
 80091a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2202      	movs	r2, #2
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fc47 	bl	8009a4a <USBD_CtlSendData>
              break;
 80091bc:	e06a      	b.n	8009294 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	da11      	bge.n	80091ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d117      	bne.n	8009210 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fbc0 	bl	8009968 <USBD_CtlError>
                  break;
 80091e8:	e054      	b.n	8009294 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	f003 020f 	and.w	r2, r3, #15
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d104      	bne.n	8009210 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fbad 	bl	8009968 <USBD_CtlError>
                  break;
 800920e:	e041      	b.n	8009294 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009214:	2b00      	cmp	r3, #0
 8009216:	da0b      	bge.n	8009230 <USBD_StdEPReq+0x23e>
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	3310      	adds	r3, #16
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4413      	add	r3, r2
 800922c:	3304      	adds	r3, #4
 800922e:	e00b      	b.n	8009248 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	4413      	add	r3, r2
 8009246:	3304      	adds	r3, #4
 8009248:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <USBD_StdEPReq+0x264>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d103      	bne.n	800925e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e00e      	b.n	800927c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 f860 	bl	800a328 <USBD_LL_IsStallEP>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2201      	movs	r2, #1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e002      	b.n	800927c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2202      	movs	r2, #2
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fbe1 	bl	8009a4a <USBD_CtlSendData>
              break;
 8009288:	e004      	b.n	8009294 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb6b 	bl	8009968 <USBD_CtlError>
              break;
 8009292:	bf00      	nop
          }
          break;
 8009294:	e004      	b.n	80092a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb65 	bl	8009968 <USBD_CtlError>
          break;
 800929e:	bf00      	nop
      }
      break;
 80092a0:	e004      	b.n	80092ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb5f 	bl	8009968 <USBD_CtlError>
      break;
 80092aa:	bf00      	nop
  }

  return ret;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	885b      	ldrh	r3, [r3, #2]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b0e      	cmp	r3, #14
 80092da:	f200 8152 	bhi.w	8009582 <USBD_GetDescriptor+0x2ca>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <USBD_GetDescriptor+0x2c>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009355 	.word	0x08009355
 80092e8:	0800936d 	.word	0x0800936d
 80092ec:	080093ad 	.word	0x080093ad
 80092f0:	08009583 	.word	0x08009583
 80092f4:	08009583 	.word	0x08009583
 80092f8:	08009523 	.word	0x08009523
 80092fc:	0800954f 	.word	0x0800954f
 8009300:	08009583 	.word	0x08009583
 8009304:	08009583 	.word	0x08009583
 8009308:	08009583 	.word	0x08009583
 800930c:	08009583 	.word	0x08009583
 8009310:	08009583 	.word	0x08009583
 8009314:	08009583 	.word	0x08009583
 8009318:	08009583 	.word	0x08009583
 800931c:	08009321 	.word	0x08009321
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	7c12      	ldrb	r2, [r2, #16]
 8009338:	f107 0108 	add.w	r1, r7, #8
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009342:	e126      	b.n	8009592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fb0e 	bl	8009968 <USBD_CtlError>
        err++;
 800934c:	7afb      	ldrb	r3, [r7, #11]
 800934e:	3301      	adds	r3, #1
 8009350:	72fb      	strb	r3, [r7, #11]
      break;
 8009352:	e11e      	b.n	8009592 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	7c12      	ldrb	r2, [r2, #16]
 8009360:	f107 0108 	add.w	r1, r7, #8
 8009364:	4610      	mov	r0, r2
 8009366:	4798      	blx	r3
 8009368:	60f8      	str	r0, [r7, #12]
      break;
 800936a:	e112      	b.n	8009592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7c1b      	ldrb	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10d      	bne.n	8009390 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	f107 0208 	add.w	r2, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	2202      	movs	r2, #2
 800938c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800938e:	e100      	b.n	8009592 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
      break;
 80093aa:	e0f2      	b.n	8009592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	f200 80ac 	bhi.w	8009510 <USBD_GetDescriptor+0x258>
 80093b8:	a201      	add	r2, pc, #4	; (adr r2, 80093c0 <USBD_GetDescriptor+0x108>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	080093d9 	.word	0x080093d9
 80093c4:	0800940d 	.word	0x0800940d
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009475 	.word	0x08009475
 80093d0:	080094a9 	.word	0x080094a9
 80093d4:	080094dd 	.word	0x080094dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	7c12      	ldrb	r2, [r2, #16]
 80093f0:	f107 0108 	add.w	r1, r7, #8
 80093f4:	4610      	mov	r0, r2
 80093f6:	4798      	blx	r3
 80093f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093fa:	e091      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fab2 	bl	8009968 <USBD_CtlError>
            err++;
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	3301      	adds	r3, #1
 8009408:	72fb      	strb	r3, [r7, #11]
          break;
 800940a:	e089      	b.n	8009520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	7c12      	ldrb	r2, [r2, #16]
 8009424:	f107 0108 	add.w	r1, r7, #8
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800942e:	e077      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa98 	bl	8009968 <USBD_CtlError>
            err++;
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	3301      	adds	r3, #1
 800943c:	72fb      	strb	r3, [r7, #11]
          break;
 800943e:	e06f      	b.n	8009520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	7c12      	ldrb	r2, [r2, #16]
 8009458:	f107 0108 	add.w	r1, r7, #8
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
 8009460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009462:	e05d      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa7e 	bl	8009968 <USBD_CtlError>
            err++;
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	3301      	adds	r3, #1
 8009470:	72fb      	strb	r3, [r7, #11]
          break;
 8009472:	e055      	b.n	8009520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009496:	e043      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa64 	bl	8009968 <USBD_CtlError>
            err++;
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	3301      	adds	r3, #1
 80094a4:	72fb      	strb	r3, [r7, #11]
          break;
 80094a6:	e03b      	b.n	8009520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 0108 	add.w	r1, r7, #8
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ca:	e029      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa4a 	bl	8009968 <USBD_CtlError>
            err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
          break;
 80094da:	e021      	b.n	8009520 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7c12      	ldrb	r2, [r2, #16]
 80094f4:	f107 0108 	add.w	r1, r7, #8
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094fe:	e00f      	b.n	8009520 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa30 	bl	8009968 <USBD_CtlError>
            err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
          break;
 800950e:	e007      	b.n	8009520 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa28 	bl	8009968 <USBD_CtlError>
          err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800951e:	bf00      	nop
      }
      break;
 8009520:	e037      	b.n	8009592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7c1b      	ldrb	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	f107 0208 	add.w	r2, r7, #8
 8009536:	4610      	mov	r0, r2
 8009538:	4798      	blx	r3
 800953a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800953c:	e029      	b.n	8009592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa11 	bl	8009968 <USBD_CtlError>
        err++;
 8009546:	7afb      	ldrb	r3, [r7, #11]
 8009548:	3301      	adds	r3, #1
 800954a:	72fb      	strb	r3, [r7, #11]
      break;
 800954c:	e021      	b.n	8009592 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	7c1b      	ldrb	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10d      	bne.n	8009572 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	f107 0208 	add.w	r2, r7, #8
 8009562:	4610      	mov	r0, r2
 8009564:	4798      	blx	r3
 8009566:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	2207      	movs	r2, #7
 800956e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009570:	e00f      	b.n	8009592 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9f7 	bl	8009968 <USBD_CtlError>
        err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	e007      	b.n	8009592 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f9ef 	bl	8009968 <USBD_CtlError>
      err++;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	3301      	adds	r3, #1
 800958e:	72fb      	strb	r3, [r7, #11]
      break;
 8009590:	bf00      	nop
  }

  if (err != 0U)
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11e      	bne.n	80095d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	88db      	ldrh	r3, [r3, #6]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d016      	beq.n	80095ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095a0:	893b      	ldrh	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00e      	beq.n	80095c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88da      	ldrh	r2, [r3, #6]
 80095aa:	893b      	ldrh	r3, [r7, #8]
 80095ac:	4293      	cmp	r3, r2
 80095ae:	bf28      	it	cs
 80095b0:	4613      	movcs	r3, r2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095b6:	893b      	ldrh	r3, [r7, #8]
 80095b8:	461a      	mov	r2, r3
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa44 	bl	8009a4a <USBD_CtlSendData>
 80095c2:	e009      	b.n	80095d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f9ce 	bl	8009968 <USBD_CtlError>
 80095cc:	e004      	b.n	80095d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa95 	bl	8009afe <USBD_CtlSendStatus>
 80095d4:	e000      	b.n	80095d8 <USBD_GetDescriptor+0x320>
    return;
 80095d6:	bf00      	nop
  }
}
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop

080095e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	889b      	ldrh	r3, [r3, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d131      	bne.n	8009656 <USBD_SetAddress+0x76>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	88db      	ldrh	r3, [r3, #6]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d12d      	bne.n	8009656 <USBD_SetAddress+0x76>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009600:	d829      	bhi.n	8009656 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	885b      	ldrh	r3, [r3, #2]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b03      	cmp	r3, #3
 8009618:	d104      	bne.n	8009624 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f9a3 	bl	8009968 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009622:	e01d      	b.n	8009660 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fea6 	bl	800a382 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fa61 	bl	8009afe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2202      	movs	r2, #2
 8009646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	e009      	b.n	8009660 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009654:	e004      	b.n	8009660 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f985 	bl	8009968 <USBD_CtlError>
  }
}
 800965e:	bf00      	nop
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	885b      	ldrh	r3, [r3, #2]
 800967a:	b2da      	uxtb	r2, r3
 800967c:	4b4c      	ldr	r3, [pc, #304]	; (80097b0 <USBD_SetConfig+0x148>)
 800967e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009680:	4b4b      	ldr	r3, [pc, #300]	; (80097b0 <USBD_SetConfig+0x148>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d905      	bls.n	8009694 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f96c 	bl	8009968 <USBD_CtlError>
    return USBD_FAIL;
 8009690:	2303      	movs	r3, #3
 8009692:	e088      	b.n	80097a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b02      	cmp	r3, #2
 800969e:	d002      	beq.n	80096a6 <USBD_SetConfig+0x3e>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d025      	beq.n	80096f0 <USBD_SetConfig+0x88>
 80096a4:	e071      	b.n	800978a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096a6:	4b42      	ldr	r3, [pc, #264]	; (80097b0 <USBD_SetConfig+0x148>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01c      	beq.n	80096e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80096ae:	4b40      	ldr	r3, [pc, #256]	; (80097b0 <USBD_SetConfig+0x148>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096b8:	4b3d      	ldr	r3, [pc, #244]	; (80097b0 <USBD_SetConfig+0x148>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff f992 	bl	80089e8 <USBD_SetClassConfig>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f949 	bl	8009968 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096d6:	e065      	b.n	80097a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fa10 	bl	8009afe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2203      	movs	r2, #3
 80096e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096e6:	e05d      	b.n	80097a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa08 	bl	8009afe <USBD_CtlSendStatus>
      break;
 80096ee:	e059      	b.n	80097a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80096f0:	4b2f      	ldr	r3, [pc, #188]	; (80097b0 <USBD_SetConfig+0x148>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d112      	bne.n	800971e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009700:	4b2b      	ldr	r3, [pc, #172]	; (80097b0 <USBD_SetConfig+0x148>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800970a:	4b29      	ldr	r3, [pc, #164]	; (80097b0 <USBD_SetConfig+0x148>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f7ff f985 	bl	8008a20 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f9f1 	bl	8009afe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800971c:	e042      	b.n	80097a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800971e:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <USBD_SetConfig+0x148>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	429a      	cmp	r2, r3
 800972a:	d02a      	beq.n	8009782 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff f973 	bl	8008a20 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800973a:	4b1d      	ldr	r3, [pc, #116]	; (80097b0 <USBD_SetConfig+0x148>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <USBD_SetConfig+0x148>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff f94c 	bl	80089e8 <USBD_SetClassConfig>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00f      	beq.n	800977a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f903 	bl	8009968 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff f958 	bl	8008a20 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009778:	e014      	b.n	80097a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f9bf 	bl	8009afe <USBD_CtlSendStatus>
      break;
 8009780:	e010      	b.n	80097a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9bb 	bl	8009afe <USBD_CtlSendStatus>
      break;
 8009788:	e00c      	b.n	80097a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f8eb 	bl	8009968 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009792:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <USBD_SetConfig+0x148>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff f941 	bl	8008a20 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800979e:	2303      	movs	r3, #3
 80097a0:	73fb      	strb	r3, [r7, #15]
      break;
 80097a2:	bf00      	nop
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000418 	.word	0x20000418

080097b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	88db      	ldrh	r3, [r3, #6]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d004      	beq.n	80097d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f8cd 	bl	8009968 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097ce:	e023      	b.n	8009818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b02      	cmp	r3, #2
 80097da:	dc02      	bgt.n	80097e2 <USBD_GetConfig+0x2e>
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dc03      	bgt.n	80097e8 <USBD_GetConfig+0x34>
 80097e0:	e015      	b.n	800980e <USBD_GetConfig+0x5a>
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d00b      	beq.n	80097fe <USBD_GetConfig+0x4a>
 80097e6:	e012      	b.n	800980e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3308      	adds	r3, #8
 80097f2:	2201      	movs	r2, #1
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f927 	bl	8009a4a <USBD_CtlSendData>
        break;
 80097fc:	e00c      	b.n	8009818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
 8009802:	2201      	movs	r2, #1
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f91f 	bl	8009a4a <USBD_CtlSendData>
        break;
 800980c:	e004      	b.n	8009818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8a9 	bl	8009968 <USBD_CtlError>
        break;
 8009816:	bf00      	nop
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009830:	b2db      	uxtb	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	2b02      	cmp	r3, #2
 8009836:	d81e      	bhi.n	8009876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	88db      	ldrh	r3, [r3, #6]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d004      	beq.n	800984a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f890 	bl	8009968 <USBD_CtlError>
        break;
 8009848:	e01a      	b.n	8009880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f043 0202 	orr.w	r2, r3, #2
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	330c      	adds	r3, #12
 800986a:	2202      	movs	r2, #2
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f8eb 	bl	8009a4a <USBD_CtlSendData>
      break;
 8009874:	e004      	b.n	8009880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f875 	bl	8009968 <USBD_CtlError>
      break;
 800987e:	bf00      	nop
  }
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d106      	bne.n	80098a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f92b 	bl	8009afe <USBD_CtlSendStatus>
  }
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d80b      	bhi.n	80098e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	885b      	ldrh	r3, [r3, #2]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d10c      	bne.n	80098ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f910 	bl	8009afe <USBD_CtlSendStatus>
      }
      break;
 80098de:	e004      	b.n	80098ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f840 	bl	8009968 <USBD_CtlError>
      break;
 80098e8:	e000      	b.n	80098ec <USBD_ClrFeature+0x3c>
      break;
 80098ea:	bf00      	nop
  }
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	781a      	ldrb	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	781a      	ldrb	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3301      	adds	r3, #1
 800991c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fa92 	bl	8008e48 <SWAPBYTE>
 8009924:	4603      	mov	r3, r0
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3301      	adds	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f7ff fa85 	bl	8008e48 <SWAPBYTE>
 800993e:	4603      	mov	r3, r0
 8009940:	461a      	mov	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f7ff fa78 	bl	8008e48 <SWAPBYTE>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	80da      	strh	r2, [r3, #6]
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009972:	2180      	movs	r1, #128	; 0x80
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fc99 	bl	800a2ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc95 	bl	800a2ac <USBD_LL_StallEP>
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b086      	sub	sp, #24
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d036      	beq.n	8009a0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099a4:	6938      	ldr	r0, [r7, #16]
 80099a6:	f000 f836 	bl	8009a16 <USBD_GetLen>
 80099aa:	4603      	mov	r3, r0
 80099ac:	3301      	adds	r3, #1
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	3301      	adds	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	4413      	add	r3, r2
 80099d0:	2203      	movs	r2, #3
 80099d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	3301      	adds	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80099da:	e013      	b.n	8009a04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	7812      	ldrb	r2, [r2, #0]
 80099e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	3301      	adds	r3, #1
 80099ec:	613b      	str	r3, [r7, #16]
    idx++;
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	3301      	adds	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	4413      	add	r3, r2
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
 8009a00:	3301      	adds	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e7      	bne.n	80099dc <USBD_GetString+0x52>
 8009a0c:	e000      	b.n	8009a10 <USBD_GetString+0x86>
    return;
 8009a0e:	bf00      	nop
  }
}
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a26:	e005      	b.n	8009a34 <USBD_GetLen+0x1e>
  {
    len++;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	3301      	adds	r3, #1
 8009a32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1f5      	bne.n	8009a28 <USBD_GetLen+0x12>
  }

  return len;
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2202      	movs	r2, #2
 8009a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	2100      	movs	r1, #0
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fca5 	bl	800a3c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	2100      	movs	r1, #0
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fc94 	bl	800a3c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	60f8      	str	r0, [r7, #12]
 8009aaa:	60b9      	str	r1, [r7, #8]
 8009aac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	2100      	movs	r1, #0
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 fc98 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	2100      	movs	r1, #0
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fc87 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2200      	movs	r2, #0
 8009b12:	2100      	movs	r1, #0
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fc53 	bl	800a3c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2205      	movs	r2, #5
 8009b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b34:	2300      	movs	r3, #0
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc61 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009b50:	2200      	movs	r2, #0
 8009b52:	4912      	ldr	r1, [pc, #72]	; (8009b9c <MX_USB_Device_Init+0x50>)
 8009b54:	4812      	ldr	r0, [pc, #72]	; (8009ba0 <MX_USB_Device_Init+0x54>)
 8009b56:	f7fe fed9 	bl	800890c <USBD_Init>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009b60:	f7f7 fa6a 	bl	8001038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009b64:	490f      	ldr	r1, [pc, #60]	; (8009ba4 <MX_USB_Device_Init+0x58>)
 8009b66:	480e      	ldr	r0, [pc, #56]	; (8009ba0 <MX_USB_Device_Init+0x54>)
 8009b68:	f7fe ff00 	bl	800896c <USBD_RegisterClass>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009b72:	f7f7 fa61 	bl	8001038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8009b76:	490c      	ldr	r1, [pc, #48]	; (8009ba8 <MX_USB_Device_Init+0x5c>)
 8009b78:	4809      	ldr	r0, [pc, #36]	; (8009ba0 <MX_USB_Device_Init+0x54>)
 8009b7a:	f7fe fe21 	bl	80087c0 <USBD_CDC_RegisterInterface>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009b84:	f7f7 fa58 	bl	8001038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009b88:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <MX_USB_Device_Init+0x54>)
 8009b8a:	f7fe ff16 	bl	80089ba <USBD_Start>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009b94:	f7f7 fa50 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009b98:	bf00      	nop
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000144 	.word	0x20000144
 8009ba0:	2000041c 	.word	0x2000041c
 8009ba4:	2000002c 	.word	0x2000002c
 8009ba8:	20000130 	.word	0x20000130

08009bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4905      	ldr	r1, [pc, #20]	; (8009bc8 <CDC_Init_FS+0x1c>)
 8009bb4:	4805      	ldr	r0, [pc, #20]	; (8009bcc <CDC_Init_FS+0x20>)
 8009bb6:	f7fe fe18 	bl	80087ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009bba:	4905      	ldr	r1, [pc, #20]	; (8009bd0 <CDC_Init_FS+0x24>)
 8009bbc:	4803      	ldr	r0, [pc, #12]	; (8009bcc <CDC_Init_FS+0x20>)
 8009bbe:	f7fe fe32 	bl	8008826 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20000ad4 	.word	0x20000ad4
 8009bcc:	2000041c 	.word	0x2000041c
 8009bd0:	200006ec 	.word	0x200006ec

08009bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	2b23      	cmp	r3, #35	; 0x23
 8009bf8:	d84a      	bhi.n	8009c90 <CDC_Control_FS+0xac>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <CDC_Control_FS+0x1c>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c91 	.word	0x08009c91
 8009c04:	08009c91 	.word	0x08009c91
 8009c08:	08009c91 	.word	0x08009c91
 8009c0c:	08009c91 	.word	0x08009c91
 8009c10:	08009c91 	.word	0x08009c91
 8009c14:	08009c91 	.word	0x08009c91
 8009c18:	08009c91 	.word	0x08009c91
 8009c1c:	08009c91 	.word	0x08009c91
 8009c20:	08009c91 	.word	0x08009c91
 8009c24:	08009c91 	.word	0x08009c91
 8009c28:	08009c91 	.word	0x08009c91
 8009c2c:	08009c91 	.word	0x08009c91
 8009c30:	08009c91 	.word	0x08009c91
 8009c34:	08009c91 	.word	0x08009c91
 8009c38:	08009c91 	.word	0x08009c91
 8009c3c:	08009c91 	.word	0x08009c91
 8009c40:	08009c91 	.word	0x08009c91
 8009c44:	08009c91 	.word	0x08009c91
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009c91 	.word	0x08009c91
 8009c54:	08009c91 	.word	0x08009c91
 8009c58:	08009c91 	.word	0x08009c91
 8009c5c:	08009c91 	.word	0x08009c91
 8009c60:	08009c91 	.word	0x08009c91
 8009c64:	08009c91 	.word	0x08009c91
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c91 	.word	0x08009c91
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009c91 	.word	0x08009c91
 8009c80:	08009c91 	.word	0x08009c91
 8009c84:	08009c91 	.word	0x08009c91
 8009c88:	08009c91 	.word	0x08009c91
 8009c8c:	08009c91 	.word	0x08009c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c90:	bf00      	nop
  }

  return (USBD_OK);
 8009c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7f6 facf 	bl	8000250 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	4805      	ldr	r0, [pc, #20]	; (8009ccc <CDC_Receive_FS+0x2c>)
 8009cb6:	f7fe fdb6 	bl	8008826 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cba:	4804      	ldr	r0, [pc, #16]	; (8009ccc <CDC_Receive_FS+0x2c>)
 8009cbc:	f7fe fdfc 	bl	80088b8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009cc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	2000041c 	.word	0x2000041c

08009cd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <CDC_Transmit_FS+0x48>)
 8009ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e00b      	b.n	8009d0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	4806      	ldr	r0, [pc, #24]	; (8009d18 <CDC_Transmit_FS+0x48>)
 8009cfe:	f7fe fd74 	bl	80087ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d02:	4805      	ldr	r0, [pc, #20]	; (8009d18 <CDC_Transmit_FS+0x48>)
 8009d04:	f7fe fda8 	bl	8008858 <USBD_CDC_TransmitPacket>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	2000041c 	.word	0x2000041c

08009d1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
	...

08009d40 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2212      	movs	r2, #18
 8009d50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	20000164 	.word	0x20000164

08009d64 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	6039      	str	r1, [r7, #0]
 8009d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2204      	movs	r2, #4
 8009d74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d76:	4b03      	ldr	r3, [pc, #12]	; (8009d84 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	20000178 	.word	0x20000178

08009d88 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6039      	str	r1, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d105      	bne.n	8009da6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	4907      	ldr	r1, [pc, #28]	; (8009dbc <USBD_CDC_ProductStrDescriptor+0x34>)
 8009d9e:	4808      	ldr	r0, [pc, #32]	; (8009dc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009da0:	f7ff fdf3 	bl	800998a <USBD_GetString>
 8009da4:	e004      	b.n	8009db0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4904      	ldr	r1, [pc, #16]	; (8009dbc <USBD_CDC_ProductStrDescriptor+0x34>)
 8009daa:	4805      	ldr	r0, [pc, #20]	; (8009dc0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009dac:	f7ff fded 	bl	800998a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000ebc 	.word	0x20000ebc
 8009dc0:	0800a5f8 	.word	0x0800a5f8

08009dc4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	4603      	mov	r3, r0
 8009dcc:	6039      	str	r1, [r7, #0]
 8009dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	4904      	ldr	r1, [pc, #16]	; (8009de4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009dd4:	4804      	ldr	r0, [pc, #16]	; (8009de8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009dd6:	f7ff fdd8 	bl	800998a <USBD_GetString>
  return USBD_StrDesc;
 8009dda:	4b02      	ldr	r3, [pc, #8]	; (8009de4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20000ebc 	.word	0x20000ebc
 8009de8:	0800a610 	.word	0x0800a610

08009dec <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	221a      	movs	r2, #26
 8009dfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dfe:	f000 f843 	bl	8009e88 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009e02:	4b02      	ldr	r3, [pc, #8]	; (8009e0c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	2000017c 	.word	0x2000017c

08009e10 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d105      	bne.n	8009e2e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4907      	ldr	r1, [pc, #28]	; (8009e44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e26:	4808      	ldr	r0, [pc, #32]	; (8009e48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e28:	f7ff fdaf 	bl	800998a <USBD_GetString>
 8009e2c:	e004      	b.n	8009e38 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4904      	ldr	r1, [pc, #16]	; (8009e44 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009e32:	4805      	ldr	r0, [pc, #20]	; (8009e48 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009e34:	f7ff fda9 	bl	800998a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e38:	4b02      	ldr	r3, [pc, #8]	; (8009e44 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20000ebc 	.word	0x20000ebc
 8009e48:	0800a624 	.word	0x0800a624

08009e4c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e62:	4808      	ldr	r0, [pc, #32]	; (8009e84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e64:	f7ff fd91 	bl	800998a <USBD_GetString>
 8009e68:	e004      	b.n	8009e74 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4904      	ldr	r1, [pc, #16]	; (8009e80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009e6e:	4805      	ldr	r0, [pc, #20]	; (8009e84 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009e70:	f7ff fd8b 	bl	800998a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e74:	4b02      	ldr	r3, [pc, #8]	; (8009e80 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000ebc 	.word	0x20000ebc
 8009e84:	0800a630 	.word	0x0800a630

08009e88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <Get_SerialNum+0x44>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e94:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <Get_SerialNum+0x48>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ed4 <Get_SerialNum+0x4c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eae:	2208      	movs	r2, #8
 8009eb0:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <Get_SerialNum+0x50>)
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f814 	bl	8009ee0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009eb8:	2204      	movs	r2, #4
 8009eba:	4908      	ldr	r1, [pc, #32]	; (8009edc <Get_SerialNum+0x54>)
 8009ebc:	68b8      	ldr	r0, [r7, #8]
 8009ebe:	f000 f80f 	bl	8009ee0 <IntToUnicode>
  }
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	1fff7590 	.word	0x1fff7590
 8009ed0:	1fff7594 	.word	0x1fff7594
 8009ed4:	1fff7598 	.word	0x1fff7598
 8009ed8:	2000017e 	.word	0x2000017e
 8009edc:	2000018e 	.word	0x2000018e

08009ee0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	4613      	mov	r3, r2
 8009eec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
 8009ef6:	e027      	b.n	8009f48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	0f1b      	lsrs	r3, r3, #28
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d80b      	bhi.n	8009f18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	0f1b      	lsrs	r3, r3, #28
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	440b      	add	r3, r1
 8009f10:	3230      	adds	r2, #48	; 0x30
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e00a      	b.n	8009f2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	0f1b      	lsrs	r3, r3, #28
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	4619      	mov	r1, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	440b      	add	r3, r1
 8009f28:	3237      	adds	r2, #55	; 0x37
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f34:	7dfb      	ldrb	r3, [r7, #23]
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	3301      	adds	r3, #1
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	3301      	adds	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
 8009f48:	7dfa      	ldrb	r2, [r7, #23]
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d3d3      	bcc.n	8009ef8 <IntToUnicode+0x18>
  }
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
	...

08009f60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b094      	sub	sp, #80	; 0x50
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f68:	f107 030c 	add.w	r3, r7, #12
 8009f6c:	2244      	movs	r2, #68	; 0x44
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fb2d 	bl	800a5d0 <memset>
  if(pcdHandle->Instance==USB)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <HAL_PCD_MspInit+0x70>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d122      	bne.n	8009fc6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009f86:	2300      	movs	r3, #0
 8009f88:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009f8a:	f107 030c 	add.w	r3, r7, #12
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fa f8de 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009f9a:	f7f7 f84d 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f9e:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <HAL_PCD_MspInit+0x74>)
 8009fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa2:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <HAL_PCD_MspInit+0x74>)
 8009fa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <HAL_PCD_MspInit+0x74>)
 8009fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	2014      	movs	r0, #20
 8009fbc:	f7f7 fc0d 	bl	80017da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009fc0:	2014      	movs	r0, #20
 8009fc2:	f7f7 fc24 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	3750      	adds	r7, #80	; 0x50
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40005c00 	.word	0x40005c00
 8009fd4:	40021000 	.word	0x40021000

08009fd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7fe fd2e 	bl	8008a50 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	440b      	add	r3, r1
 800a01c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	4619      	mov	r1, r3
 800a026:	f7fe fd68 	bl	8008afa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	440b      	add	r3, r1
 800a052:	333c      	adds	r3, #60	; 0x3c
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	78fb      	ldrb	r3, [r7, #3]
 800a058:	4619      	mov	r1, r3
 800a05a:	f7fe fdb1 	bl	8008bc0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fec5 	bl	8008e04 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a08a:	2301      	movs	r3, #1
 800a08c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d001      	beq.n	800a09a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a096:	f7f6 ffcf 	bl	8001038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fe6f 	bl	8008d88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe fe1b 	bl	8008cec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fe6a 	bl	8008da8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	4a03      	ldr	r2, [pc, #12]	; (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0e2:	f043 0306 	orr.w	r3, r3, #6
 800a0e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed00 	.word	0xe000ed00

0800a0f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_PCD_ResumeCallback+0x34>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4a07      	ldr	r2, [pc, #28]	; (800a128 <HAL_PCD_ResumeCallback+0x34>)
 800a10a:	f023 0306 	bic.w	r3, r3, #6
 800a10e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a110:	f000 f9fa 	bl	800a508 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fe5a 	bl	8008dd4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed00 	.word	0xe000ed00

0800a12c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800a134:	4a2b      	ldr	r2, [pc, #172]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a140:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800a144:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a146:	4a28      	ldr	r2, [pc, #160]	; (800a1e8 <USBD_LL_Init+0xbc>)
 800a148:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a14a:	4b26      	ldr	r3, [pc, #152]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a14c:	2208      	movs	r2, #8
 800a14e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a150:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a152:	2202      	movs	r2, #2
 800a154:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a156:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a158:	2202      	movs	r2, #2
 800a15a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800a15c:	4b21      	ldr	r3, [pc, #132]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a15e:	2200      	movs	r2, #0
 800a160:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a162:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a164:	2200      	movs	r2, #0
 800a166:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a168:	4b1e      	ldr	r3, [pc, #120]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a170:	2200      	movs	r2, #0
 800a172:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a174:	481b      	ldr	r0, [pc, #108]	; (800a1e4 <USBD_LL_Init+0xb8>)
 800a176:	f7f7 fd17 	bl	8001ba8 <HAL_PCD_Init>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800a180:	f7f6 ff5a 	bl	8001038 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a18a:	2318      	movs	r3, #24
 800a18c:	2200      	movs	r2, #0
 800a18e:	2100      	movs	r1, #0
 800a190:	f7f9 f9d0 	bl	8003534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a19a:	2358      	movs	r3, #88	; 0x58
 800a19c:	2200      	movs	r2, #0
 800a19e:	2180      	movs	r1, #128	; 0x80
 800a1a0:	f7f9 f9c8 	bl	8003534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1aa:	23c0      	movs	r3, #192	; 0xc0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2181      	movs	r1, #129	; 0x81
 800a1b0:	f7f9 f9c0 	bl	8003534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	f7f9 f9b7 	bl	8003534 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2182      	movs	r1, #130	; 0x82
 800a1d4:	f7f9 f9ae 	bl	8003534 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200010bc 	.word	0x200010bc
 800a1e8:	40005c00 	.word	0x40005c00

0800a1ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a202:	4618      	mov	r0, r3
 800a204:	f7f7 fdb5 	bl	8001d72 <HAL_PCD_Start>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f980 	bl	800a514 <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a218:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	4608      	mov	r0, r1
 800a22c:	4611      	mov	r1, r2
 800a22e:	461a      	mov	r2, r3
 800a230:	4603      	mov	r3, r0
 800a232:	70fb      	strb	r3, [r7, #3]
 800a234:	460b      	mov	r3, r1
 800a236:	70bb      	strb	r3, [r7, #2]
 800a238:	4613      	mov	r3, r2
 800a23a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a24a:	78bb      	ldrb	r3, [r7, #2]
 800a24c:	883a      	ldrh	r2, [r7, #0]
 800a24e:	78f9      	ldrb	r1, [r7, #3]
 800a250:	f7f7 fefd 	bl	800204e <HAL_PCD_EP_Open>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 f95a 	bl	800a514 <USBD_Get_USB_Status>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	460b      	mov	r3, r1
 800a278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a288:	78fa      	ldrb	r2, [r7, #3]
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7f7 ff44 	bl	800211a <HAL_PCD_EP_Close>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f93b 	bl	800a514 <USBD_Get_USB_Status>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2c6:	78fa      	ldrb	r2, [r7, #3]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f8 f805 	bl	80022da <HAL_PCD_EP_SetStall>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f91c 	bl	800a514 <USBD_Get_USB_Status>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f7f8 f838 	bl	800237e <HAL_PCD_EP_ClrStall>
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f8fd 	bl	800a514 <USBD_Get_USB_Status>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a33a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a33c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	da0c      	bge.n	800a35e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a34a:	68f9      	ldr	r1, [r7, #12]
 800a34c:	1c5a      	adds	r2, r3, #1
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	440b      	add	r3, r1
 800a358:	3302      	adds	r3, #2
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	e00b      	b.n	800a376 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a364:	68f9      	ldr	r1, [r7, #12]
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	440b      	add	r3, r1
 800a370:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a374:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a376:	4618      	mov	r0, r3
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	460b      	mov	r3, r1
 800a38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7f7 fe2f 	bl	8002004 <HAL_PCD_SetAddress>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 f8b1 	bl	800a514 <USBD_Get_USB_Status>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a3de:	7af9      	ldrb	r1, [r7, #11]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f7f7 ff36 	bl	8002254 <HAL_PCD_EP_Transmit>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f890 	bl	800a514 <USBD_Get_USB_Status>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b086      	sub	sp, #24
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	460b      	mov	r3, r1
 800a410:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a420:	7af9      	ldrb	r1, [r7, #11]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	f7f7 fec0 	bl	80021aa <HAL_PCD_EP_Receive>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f86f 	bl	800a514 <USBD_Get_USB_Status>
 800a436:	4603      	mov	r3, r0
 800a438:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a43a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7f7 fee2 	bl	8002224 <HAL_PCD_EP_GetRxCount>
 800a460:	4603      	mov	r3, r0
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <HAL_PCDEx_LPM_Callback+0x18>
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d013      	beq.n	800a4aa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a482:	e023      	b.n	800a4cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d007      	beq.n	800a49c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a48c:	f000 f83c 	bl	800a508 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	4a0f      	ldr	r2, [pc, #60]	; (800a4d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a496:	f023 0306 	bic.w	r3, r3, #6
 800a49a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe fc96 	bl	8008dd4 <USBD_LL_Resume>
    break;
 800a4a8:	e010      	b.n	800a4cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe fc79 	bl	8008da8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4be:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4a04      	ldr	r2, [pc, #16]	; (800a4d4 <HAL_PCDEx_LPM_Callback+0x68>)
 800a4c4:	f043 0306 	orr.w	r3, r3, #6
 800a4c8:	6113      	str	r3, [r2, #16]
    break;
 800a4ca:	bf00      	nop
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed00 	.word	0xe000ed00

0800a4d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4e0:	4b03      	ldr	r3, [pc, #12]	; (800a4f0 <USBD_static_malloc+0x18>)
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	200013b0 	.word	0x200013b0

0800a4f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]

}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a50c:	f7f6 f9f2 	bl	80008f4 <SystemClock_Config>
}
 800a510:	bf00      	nop
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d817      	bhi.n	800a558 <USBD_Get_USB_Status+0x44>
 800a528:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <USBD_Get_USB_Status+0x1c>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a541 	.word	0x0800a541
 800a534:	0800a547 	.word	0x0800a547
 800a538:	0800a54d 	.word	0x0800a54d
 800a53c:	0800a553 	.word	0x0800a553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
    break;
 800a544:	e00b      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a546:	2303      	movs	r3, #3
 800a548:	73fb      	strb	r3, [r7, #15]
    break;
 800a54a:	e008      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
    break;
 800a550:	e005      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a552:	2303      	movs	r3, #3
 800a554:	73fb      	strb	r3, [r7, #15]
    break;
 800a556:	e002      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a558:	2303      	movs	r3, #3
 800a55a:	73fb      	strb	r3, [r7, #15]
    break;
 800a55c:	bf00      	nop
  }
  return usb_status;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <__libc_init_array>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	4d0d      	ldr	r5, [pc, #52]	; (800a5a4 <__libc_init_array+0x38>)
 800a570:	4c0d      	ldr	r4, [pc, #52]	; (800a5a8 <__libc_init_array+0x3c>)
 800a572:	1b64      	subs	r4, r4, r5
 800a574:	10a4      	asrs	r4, r4, #2
 800a576:	2600      	movs	r6, #0
 800a578:	42a6      	cmp	r6, r4
 800a57a:	d109      	bne.n	800a590 <__libc_init_array+0x24>
 800a57c:	4d0b      	ldr	r5, [pc, #44]	; (800a5ac <__libc_init_array+0x40>)
 800a57e:	4c0c      	ldr	r4, [pc, #48]	; (800a5b0 <__libc_init_array+0x44>)
 800a580:	f000 f82e 	bl	800a5e0 <_init>
 800a584:	1b64      	subs	r4, r4, r5
 800a586:	10a4      	asrs	r4, r4, #2
 800a588:	2600      	movs	r6, #0
 800a58a:	42a6      	cmp	r6, r4
 800a58c:	d105      	bne.n	800a59a <__libc_init_array+0x2e>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	f855 3b04 	ldr.w	r3, [r5], #4
 800a594:	4798      	blx	r3
 800a596:	3601      	adds	r6, #1
 800a598:	e7ee      	b.n	800a578 <__libc_init_array+0xc>
 800a59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a59e:	4798      	blx	r3
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	e7f2      	b.n	800a58a <__libc_init_array+0x1e>
 800a5a4:	0800a650 	.word	0x0800a650
 800a5a8:	0800a650 	.word	0x0800a650
 800a5ac:	0800a650 	.word	0x0800a650
 800a5b0:	0800a654 	.word	0x0800a654

0800a5b4 <memcpy>:
 800a5b4:	440a      	add	r2, r1
 800a5b6:	4291      	cmp	r1, r2
 800a5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5bc:	d100      	bne.n	800a5c0 <memcpy+0xc>
 800a5be:	4770      	bx	lr
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ca:	4291      	cmp	r1, r2
 800a5cc:	d1f9      	bne.n	800a5c2 <memcpy+0xe>
 800a5ce:	bd10      	pop	{r4, pc}

0800a5d0 <memset>:
 800a5d0:	4402      	add	r2, r0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d100      	bne.n	800a5da <memset+0xa>
 800a5d8:	4770      	bx	lr
 800a5da:	f803 1b01 	strb.w	r1, [r3], #1
 800a5de:	e7f9      	b.n	800a5d4 <memset+0x4>

0800a5e0 <_init>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr

0800a5ec <_fini>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	bf00      	nop
 800a5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5f2:	bc08      	pop	{r3}
 800a5f4:	469e      	mov	lr, r3
 800a5f6:	4770      	bx	lr
